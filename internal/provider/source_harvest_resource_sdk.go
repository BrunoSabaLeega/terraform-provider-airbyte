// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"airbyte/internal/sdk/pkg/models/shared"
	"encoding/json"
	"time"
)

func (r *SourceHarvestResourceModel) ToCreateSDKType() *shared.SourceHarvestCreateRequest {
	accountID := r.Configuration.AccountID.ValueString()
	var credentials *shared.SourceHarvestAuthenticationMechanism
	var sourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuth *shared.SourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuth
	if r.Configuration.Credentials.SourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuth != nil {
		authType := new(shared.SourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuthAuthTypeEnum)
		if !r.Configuration.Credentials.SourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuth.AuthType.IsUnknown() && !r.Configuration.Credentials.SourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuth.AuthType.IsNull() {
			*authType = shared.SourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuthAuthTypeEnum(r.Configuration.Credentials.SourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuth.AuthType.ValueString())
		} else {
			authType = nil
		}
		clientID := r.Configuration.Credentials.SourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuth.ClientID.ValueString()
		clientSecret := r.Configuration.Credentials.SourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuth.ClientSecret.ValueString()
		refreshToken := r.Configuration.Credentials.SourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuth.RefreshToken.ValueString()
		additionalProperties := make(map[string]interface{})
		for additionalPropertiesKey, additionalPropertiesValue := range r.Configuration.Credentials.SourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuth.AdditionalProperties {
			var additionalPropertiesInst interface{}
			_ = json.Unmarshal([]byte(additionalPropertiesValue.ValueString()), &additionalPropertiesInst)
			additionalProperties[additionalPropertiesKey] = additionalPropertiesInst
		}
		sourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuth = &shared.SourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuth{
			AuthType:             authType,
			ClientID:             clientID,
			ClientSecret:         clientSecret,
			RefreshToken:         refreshToken,
			AdditionalProperties: additionalProperties,
		}
	}
	if sourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuth != nil {
		credentials = &shared.SourceHarvestAuthenticationMechanism{
			SourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuth: sourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuth,
		}
	}
	var sourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessToken *shared.SourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessToken
	if r.Configuration.Credentials.SourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessToken != nil {
		apiToken := r.Configuration.Credentials.SourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessToken.APIToken.ValueString()
		authType1 := new(shared.SourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessTokenAuthTypeEnum)
		if !r.Configuration.Credentials.SourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessToken.AuthType.IsUnknown() && !r.Configuration.Credentials.SourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessToken.AuthType.IsNull() {
			*authType1 = shared.SourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessTokenAuthTypeEnum(r.Configuration.Credentials.SourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessToken.AuthType.ValueString())
		} else {
			authType1 = nil
		}
		additionalProperties1 := make(map[string]interface{})
		for additionalPropertiesKey1, additionalPropertiesValue1 := range r.Configuration.Credentials.SourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessToken.AdditionalProperties {
			var additionalPropertiesInst1 interface{}
			_ = json.Unmarshal([]byte(additionalPropertiesValue1.ValueString()), &additionalPropertiesInst1)
			additionalProperties1[additionalPropertiesKey1] = additionalPropertiesInst1
		}
		sourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessToken = &shared.SourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessToken{
			APIToken:             apiToken,
			AuthType:             authType1,
			AdditionalProperties: additionalProperties1,
		}
	}
	if sourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessToken != nil {
		credentials = &shared.SourceHarvestAuthenticationMechanism{
			SourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessToken: sourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessToken,
		}
	}
	replicationEndDate := new(time.Time)
	if !r.Configuration.ReplicationEndDate.IsUnknown() && !r.Configuration.ReplicationEndDate.IsNull() {
		*replicationEndDate, _ = time.Parse(time.RFC3339Nano, r.Configuration.ReplicationEndDate.ValueString())
	} else {
		replicationEndDate = nil
	}
	replicationStartDate, _ := time.Parse(time.RFC3339Nano, r.Configuration.ReplicationStartDate.ValueString())
	sourceType := shared.SourceHarvestHarvestEnum(r.Configuration.SourceType.ValueString())
	configuration := shared.SourceHarvest{
		AccountID:            accountID,
		Credentials:          credentials,
		ReplicationEndDate:   replicationEndDate,
		ReplicationStartDate: replicationStartDate,
		SourceType:           sourceType,
	}
	name := r.Name.ValueString()
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceHarvestCreateRequest{
		Configuration: configuration,
		Name:          name,
		SecretID:      secretID,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceHarvestResourceModel) ToDeleteSDKType() *shared.SourceHarvestCreateRequest {
	out := r.ToCreateSDKType()
	return out
}
