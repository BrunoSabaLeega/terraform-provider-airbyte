// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"airbyte/internal/sdk/pkg/models/shared"
	"encoding/json"
	"time"
)

func (r *SourceZendeskSupportResourceModel) ToCreateSDKType() *shared.SourceZendeskSupportCreateRequest {
	var credentials *shared.SourceZendeskSupportAuthentication
	var sourceZendeskSupportAuthenticationOAuth20 *shared.SourceZendeskSupportAuthenticationOAuth20
	if r.Configuration.Credentials.SourceZendeskSupportAuthenticationOAuth20 != nil {
		accessToken := r.Configuration.Credentials.SourceZendeskSupportAuthenticationOAuth20.AccessToken.ValueString()
		credentials1 := new(shared.SourceZendeskSupportAuthenticationOAuth20CredentialsEnum)
		if !r.Configuration.Credentials.SourceZendeskSupportAuthenticationOAuth20.Credentials.IsUnknown() && !r.Configuration.Credentials.SourceZendeskSupportAuthenticationOAuth20.Credentials.IsNull() {
			*credentials1 = shared.SourceZendeskSupportAuthenticationOAuth20CredentialsEnum(r.Configuration.Credentials.SourceZendeskSupportAuthenticationOAuth20.Credentials.ValueString())
		} else {
			credentials1 = nil
		}
		additionalProperties := make(map[string]interface{})
		for additionalPropertiesKey, additionalPropertiesValue := range r.Configuration.Credentials.SourceZendeskSupportAuthenticationOAuth20.AdditionalProperties {
			var additionalPropertiesInst interface{}
			_ = json.Unmarshal([]byte(additionalPropertiesValue.ValueString()), &additionalPropertiesInst)
			additionalProperties[additionalPropertiesKey] = additionalPropertiesInst
		}
		sourceZendeskSupportAuthenticationOAuth20 = &shared.SourceZendeskSupportAuthenticationOAuth20{
			AccessToken:          accessToken,
			Credentials:          credentials1,
			AdditionalProperties: additionalProperties,
		}
	}
	if sourceZendeskSupportAuthenticationOAuth20 != nil {
		credentials = &shared.SourceZendeskSupportAuthentication{
			SourceZendeskSupportAuthenticationOAuth20: sourceZendeskSupportAuthenticationOAuth20,
		}
	}
	var sourceZendeskSupportAuthenticationAPIToken *shared.SourceZendeskSupportAuthenticationAPIToken
	if r.Configuration.Credentials.SourceZendeskSupportAuthenticationAPIToken != nil {
		apiToken := r.Configuration.Credentials.SourceZendeskSupportAuthenticationAPIToken.APIToken.ValueString()
		credentials2 := new(shared.SourceZendeskSupportAuthenticationAPITokenCredentialsEnum)
		if !r.Configuration.Credentials.SourceZendeskSupportAuthenticationAPIToken.Credentials.IsUnknown() && !r.Configuration.Credentials.SourceZendeskSupportAuthenticationAPIToken.Credentials.IsNull() {
			*credentials2 = shared.SourceZendeskSupportAuthenticationAPITokenCredentialsEnum(r.Configuration.Credentials.SourceZendeskSupportAuthenticationAPIToken.Credentials.ValueString())
		} else {
			credentials2 = nil
		}
		email := r.Configuration.Credentials.SourceZendeskSupportAuthenticationAPIToken.Email.ValueString()
		additionalProperties1 := make(map[string]interface{})
		for additionalPropertiesKey1, additionalPropertiesValue1 := range r.Configuration.Credentials.SourceZendeskSupportAuthenticationAPIToken.AdditionalProperties {
			var additionalPropertiesInst1 interface{}
			_ = json.Unmarshal([]byte(additionalPropertiesValue1.ValueString()), &additionalPropertiesInst1)
			additionalProperties1[additionalPropertiesKey1] = additionalPropertiesInst1
		}
		sourceZendeskSupportAuthenticationAPIToken = &shared.SourceZendeskSupportAuthenticationAPIToken{
			APIToken:             apiToken,
			Credentials:          credentials2,
			Email:                email,
			AdditionalProperties: additionalProperties1,
		}
	}
	if sourceZendeskSupportAuthenticationAPIToken != nil {
		credentials = &shared.SourceZendeskSupportAuthentication{
			SourceZendeskSupportAuthenticationAPIToken: sourceZendeskSupportAuthenticationAPIToken,
		}
	}
	ignorePagination := new(bool)
	if !r.Configuration.IgnorePagination.IsUnknown() && !r.Configuration.IgnorePagination.IsNull() {
		*ignorePagination = r.Configuration.IgnorePagination.ValueBool()
	} else {
		ignorePagination = nil
	}
	sourceType := shared.SourceZendeskSupportZendeskSupportEnum(r.Configuration.SourceType.ValueString())
	startDate, _ := time.Parse(time.RFC3339Nano, r.Configuration.StartDate.ValueString())
	subdomain := r.Configuration.Subdomain.ValueString()
	configuration := shared.SourceZendeskSupport{
		Credentials:      credentials,
		IgnorePagination: ignorePagination,
		SourceType:       sourceType,
		StartDate:        startDate,
		Subdomain:        subdomain,
	}
	name := r.Name.ValueString()
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceZendeskSupportCreateRequest{
		Configuration: configuration,
		Name:          name,
		SecretID:      secretID,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceZendeskSupportResourceModel) ToDeleteSDKType() *shared.SourceZendeskSupportCreateRequest {
	out := r.ToCreateSDKType()
	return out
}
