// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"airbyte/internal/sdk/pkg/models/shared"
)

func (r *SourceAmazonAdsResourceModel) ToCreateSDKType() *shared.SourceAmazonAdsCreateRequest {
	authType := new(shared.SourceAmazonAdsAuthTypeEnum)
	if !r.Configuration.AuthType.IsUnknown() && !r.Configuration.AuthType.IsNull() {
		*authType = shared.SourceAmazonAdsAuthTypeEnum(r.Configuration.AuthType.ValueString())
	} else {
		authType = nil
	}
	clientID := r.Configuration.ClientID.ValueString()
	clientSecret := r.Configuration.ClientSecret.ValueString()
	lookBackWindow := new(int64)
	if !r.Configuration.LookBackWindow.IsUnknown() && !r.Configuration.LookBackWindow.IsNull() {
		*lookBackWindow = r.Configuration.LookBackWindow.ValueInt64()
	} else {
		lookBackWindow = nil
	}
	profiles := make([]int64, 0)
	for _, profilesItem := range r.Configuration.Profiles {
		profiles = append(profiles, profilesItem.ValueInt64())
	}
	refreshToken := r.Configuration.RefreshToken.ValueString()
	region := new(shared.SourceAmazonAdsRegionEnum)
	if !r.Configuration.Region.IsUnknown() && !r.Configuration.Region.IsNull() {
		*region = shared.SourceAmazonAdsRegionEnum(r.Configuration.Region.ValueString())
	} else {
		region = nil
	}
	reportRecordTypes := make([]shared.SourceAmazonAdsReportRecordTypesEnum, 0)
	for _, reportRecordTypesItem := range r.Configuration.ReportRecordTypes {
		reportRecordTypes = append(reportRecordTypes, shared.SourceAmazonAdsReportRecordTypesEnum(reportRecordTypesItem.ValueString()))
	}
	sourceType := shared.SourceAmazonAdsAmazonAdsEnum(r.Configuration.SourceType.ValueString())
	startDate := new(string)
	if !r.Configuration.StartDate.IsUnknown() && !r.Configuration.StartDate.IsNull() {
		*startDate = r.Configuration.StartDate.ValueString()
	} else {
		startDate = nil
	}
	stateFilter := make([]shared.SourceAmazonAdsStateFilterEnum, 0)
	for _, stateFilterItem := range r.Configuration.StateFilter {
		stateFilter = append(stateFilter, shared.SourceAmazonAdsStateFilterEnum(stateFilterItem.ValueString()))
	}
	configuration := shared.SourceAmazonAds{
		AuthType:          authType,
		ClientID:          clientID,
		ClientSecret:      clientSecret,
		LookBackWindow:    lookBackWindow,
		Profiles:          profiles,
		RefreshToken:      refreshToken,
		Region:            region,
		ReportRecordTypes: reportRecordTypes,
		SourceType:        sourceType,
		StartDate:         startDate,
		StateFilter:       stateFilter,
	}
	name := r.Name.ValueString()
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceAmazonAdsCreateRequest{
		Configuration: configuration,
		Name:          name,
		SecretID:      secretID,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceAmazonAdsResourceModel) ToDeleteSDKType() *shared.SourceAmazonAdsCreateRequest {
	out := r.ToCreateSDKType()
	return out
}
