// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"airbyte/internal/sdk/pkg/models/shared"
	"time"
)

func (r *SourceHubspotResourceModel) ToCreateSDKType() *shared.SourceHubspotCreateRequest {
	var credentials shared.SourceHubspotAuthentication
	var sourceHubspotAuthenticationOAuth *shared.SourceHubspotAuthenticationOAuth
	if r.Configuration.Credentials.SourceHubspotAuthenticationOAuth != nil {
		clientID := r.Configuration.Credentials.SourceHubspotAuthenticationOAuth.ClientID.ValueString()
		clientSecret := r.Configuration.Credentials.SourceHubspotAuthenticationOAuth.ClientSecret.ValueString()
		credentialsTitle := shared.SourceHubspotAuthenticationOAuthCredentialsEnum(r.Configuration.Credentials.SourceHubspotAuthenticationOAuth.CredentialsTitle.ValueString())
		refreshToken := r.Configuration.Credentials.SourceHubspotAuthenticationOAuth.RefreshToken.ValueString()
		sourceHubspotAuthenticationOAuth = &shared.SourceHubspotAuthenticationOAuth{
			ClientID:         clientID,
			ClientSecret:     clientSecret,
			CredentialsTitle: credentialsTitle,
			RefreshToken:     refreshToken,
		}
	}
	if sourceHubspotAuthenticationOAuth != nil {
		credentials = shared.SourceHubspotAuthentication{
			SourceHubspotAuthenticationOAuth: sourceHubspotAuthenticationOAuth,
		}
	}
	var sourceHubspotAuthenticationPrivateApp *shared.SourceHubspotAuthenticationPrivateApp
	if r.Configuration.Credentials.SourceHubspotAuthenticationPrivateApp != nil {
		accessToken := r.Configuration.Credentials.SourceHubspotAuthenticationPrivateApp.AccessToken.ValueString()
		credentialsTitle1 := shared.SourceHubspotAuthenticationPrivateAppCredentialsEnum(r.Configuration.Credentials.SourceHubspotAuthenticationPrivateApp.CredentialsTitle.ValueString())
		sourceHubspotAuthenticationPrivateApp = &shared.SourceHubspotAuthenticationPrivateApp{
			AccessToken:      accessToken,
			CredentialsTitle: credentialsTitle1,
		}
	}
	if sourceHubspotAuthenticationPrivateApp != nil {
		credentials = shared.SourceHubspotAuthentication{
			SourceHubspotAuthenticationPrivateApp: sourceHubspotAuthenticationPrivateApp,
		}
	}
	sourceType := shared.SourceHubspotHubspotEnum(r.Configuration.SourceType.ValueString())
	startDate, _ := time.Parse(time.RFC3339Nano, r.Configuration.StartDate.ValueString())
	configuration := shared.SourceHubspot{
		Credentials: credentials,
		SourceType:  sourceType,
		StartDate:   startDate,
	}
	name := r.Name.ValueString()
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceHubspotCreateRequest{
		Configuration: configuration,
		Name:          name,
		SecretID:      secretID,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceHubspotResourceModel) ToDeleteSDKType() *shared.SourceHubspotCreateRequest {
	out := r.ToCreateSDKType()
	return out
}
