// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"airbyte/internal/sdk/pkg/models/shared"
)

func (r *SourceGnewsResourceModel) ToCreateSDKType() *shared.SourceGnewsCreateRequest {
	apiKey := r.Configuration.APIKey.ValueString()
	country := new(shared.SourceGnewsCountryEnum)
	if !r.Configuration.Country.IsUnknown() && !r.Configuration.Country.IsNull() {
		*country = shared.SourceGnewsCountryEnum(r.Configuration.Country.ValueString())
	} else {
		country = nil
	}
	endDate := new(string)
	if !r.Configuration.EndDate.IsUnknown() && !r.Configuration.EndDate.IsNull() {
		*endDate = r.Configuration.EndDate.ValueString()
	} else {
		endDate = nil
	}
	in := make([]shared.SourceGnewsInEnum, 0)
	for _, inItem := range r.Configuration.In {
		in = append(in, shared.SourceGnewsInEnum(inItem.ValueString()))
	}
	language := new(shared.SourceGnewsLanguageEnum)
	if !r.Configuration.Language.IsUnknown() && !r.Configuration.Language.IsNull() {
		*language = shared.SourceGnewsLanguageEnum(r.Configuration.Language.ValueString())
	} else {
		language = nil
	}
	nullable := make([]shared.SourceGnewsNullableEnum, 0)
	for _, nullableItem := range r.Configuration.Nullable {
		nullable = append(nullable, shared.SourceGnewsNullableEnum(nullableItem.ValueString()))
	}
	query := r.Configuration.Query.ValueString()
	sortby := new(shared.SourceGnewsSortByEnum)
	if !r.Configuration.Sortby.IsUnknown() && !r.Configuration.Sortby.IsNull() {
		*sortby = shared.SourceGnewsSortByEnum(r.Configuration.Sortby.ValueString())
	} else {
		sortby = nil
	}
	sourceType := shared.SourceGnewsGnewsEnum(r.Configuration.SourceType.ValueString())
	startDate := new(string)
	if !r.Configuration.StartDate.IsUnknown() && !r.Configuration.StartDate.IsNull() {
		*startDate = r.Configuration.StartDate.ValueString()
	} else {
		startDate = nil
	}
	topHeadlinesQuery := new(string)
	if !r.Configuration.TopHeadlinesQuery.IsUnknown() && !r.Configuration.TopHeadlinesQuery.IsNull() {
		*topHeadlinesQuery = r.Configuration.TopHeadlinesQuery.ValueString()
	} else {
		topHeadlinesQuery = nil
	}
	topHeadlinesTopic := new(shared.SourceGnewsTopHeadlinesTopicEnum)
	if !r.Configuration.TopHeadlinesTopic.IsUnknown() && !r.Configuration.TopHeadlinesTopic.IsNull() {
		*topHeadlinesTopic = shared.SourceGnewsTopHeadlinesTopicEnum(r.Configuration.TopHeadlinesTopic.ValueString())
	} else {
		topHeadlinesTopic = nil
	}
	configuration := shared.SourceGnews{
		APIKey:            apiKey,
		Country:           country,
		EndDate:           endDate,
		In:                in,
		Language:          language,
		Nullable:          nullable,
		Query:             query,
		Sortby:            sortby,
		SourceType:        sourceType,
		StartDate:         startDate,
		TopHeadlinesQuery: topHeadlinesQuery,
		TopHeadlinesTopic: topHeadlinesTopic,
	}
	name := r.Name.ValueString()
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceGnewsCreateRequest{
		Configuration: configuration,
		Name:          name,
		SecretID:      secretID,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceGnewsResourceModel) ToDeleteSDKType() *shared.SourceGnewsCreateRequest {
	out := r.ToCreateSDKType()
	return out
}
