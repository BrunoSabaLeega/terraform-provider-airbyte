// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"airbyte/internal/sdk/pkg/models/shared"
	"time"
)

func (r *SourceNotionResourceModel) ToCreateSDKType() *shared.SourceNotionCreateRequest {
	var credentials *shared.SourceNotionAuthenticateUsing
	var sourceNotionAuthenticateUsingOAuth20 *shared.SourceNotionAuthenticateUsingOAuth20
	if r.Configuration.Credentials.SourceNotionAuthenticateUsingOAuth20 != nil {
		accessToken := r.Configuration.Credentials.SourceNotionAuthenticateUsingOAuth20.AccessToken.ValueString()
		authType := shared.SourceNotionAuthenticateUsingOAuth20AuthTypeEnum(r.Configuration.Credentials.SourceNotionAuthenticateUsingOAuth20.AuthType.ValueString())
		clientID := r.Configuration.Credentials.SourceNotionAuthenticateUsingOAuth20.ClientID.ValueString()
		clientSecret := r.Configuration.Credentials.SourceNotionAuthenticateUsingOAuth20.ClientSecret.ValueString()
		sourceNotionAuthenticateUsingOAuth20 = &shared.SourceNotionAuthenticateUsingOAuth20{
			AccessToken:  accessToken,
			AuthType:     authType,
			ClientID:     clientID,
			ClientSecret: clientSecret,
		}
	}
	if sourceNotionAuthenticateUsingOAuth20 != nil {
		credentials = &shared.SourceNotionAuthenticateUsing{
			SourceNotionAuthenticateUsingOAuth20: sourceNotionAuthenticateUsingOAuth20,
		}
	}
	var sourceNotionAuthenticateUsingAccessToken *shared.SourceNotionAuthenticateUsingAccessToken
	if r.Configuration.Credentials.SourceNotionAuthenticateUsingAccessToken != nil {
		authType1 := shared.SourceNotionAuthenticateUsingAccessTokenAuthTypeEnum(r.Configuration.Credentials.SourceNotionAuthenticateUsingAccessToken.AuthType.ValueString())
		token := r.Configuration.Credentials.SourceNotionAuthenticateUsingAccessToken.Token.ValueString()
		sourceNotionAuthenticateUsingAccessToken = &shared.SourceNotionAuthenticateUsingAccessToken{
			AuthType: authType1,
			Token:    token,
		}
	}
	if sourceNotionAuthenticateUsingAccessToken != nil {
		credentials = &shared.SourceNotionAuthenticateUsing{
			SourceNotionAuthenticateUsingAccessToken: sourceNotionAuthenticateUsingAccessToken,
		}
	}
	sourceType := shared.SourceNotionNotionEnum(r.Configuration.SourceType.ValueString())
	startDate, _ := time.Parse(time.RFC3339Nano, r.Configuration.StartDate.ValueString())
	configuration := shared.SourceNotion{
		Credentials: credentials,
		SourceType:  sourceType,
		StartDate:   startDate,
	}
	name := r.Name.ValueString()
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceNotionCreateRequest{
		Configuration: configuration,
		Name:          name,
		SecretID:      secretID,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceNotionResourceModel) ToDeleteSDKType() *shared.SourceNotionCreateRequest {
	out := r.ToCreateSDKType()
	return out
}
