// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"airbyte/internal/sdk/pkg/models/shared"
)

func (r *DestinationMongodbResourceModel) ToCreateSDKType() *shared.DestinationMongodbCreateRequest {
	var authType shared.DestinationMongodbAuthorizationType
	var destinationMongodbAuthorizationTypeNone *shared.DestinationMongodbAuthorizationTypeNone
	if r.Configuration.AuthType.DestinationMongodbAuthorizationTypeNone != nil {
		authorization := shared.DestinationMongodbAuthorizationTypeNoneAuthorizationEnum(r.Configuration.AuthType.DestinationMongodbAuthorizationTypeNone.Authorization.ValueString())
		destinationMongodbAuthorizationTypeNone = &shared.DestinationMongodbAuthorizationTypeNone{
			Authorization: authorization,
		}
	}
	if destinationMongodbAuthorizationTypeNone != nil {
		authType = shared.DestinationMongodbAuthorizationType{
			DestinationMongodbAuthorizationTypeNone: destinationMongodbAuthorizationTypeNone,
		}
	}
	var destinationMongodbAuthorizationTypeLoginPassword *shared.DestinationMongodbAuthorizationTypeLoginPassword
	if r.Configuration.AuthType.DestinationMongodbAuthorizationTypeLoginPassword != nil {
		authorization1 := shared.DestinationMongodbAuthorizationTypeLoginPasswordAuthorizationEnum(r.Configuration.AuthType.DestinationMongodbAuthorizationTypeLoginPassword.Authorization.ValueString())
		password := r.Configuration.AuthType.DestinationMongodbAuthorizationTypeLoginPassword.Password.ValueString()
		username := r.Configuration.AuthType.DestinationMongodbAuthorizationTypeLoginPassword.Username.ValueString()
		destinationMongodbAuthorizationTypeLoginPassword = &shared.DestinationMongodbAuthorizationTypeLoginPassword{
			Authorization: authorization1,
			Password:      password,
			Username:      username,
		}
	}
	if destinationMongodbAuthorizationTypeLoginPassword != nil {
		authType = shared.DestinationMongodbAuthorizationType{
			DestinationMongodbAuthorizationTypeLoginPassword: destinationMongodbAuthorizationTypeLoginPassword,
		}
	}
	database := r.Configuration.Database.ValueString()
	destinationType := shared.DestinationMongodbMongodbEnum(r.Configuration.DestinationType.ValueString())
	var instanceType *shared.DestinationMongodbMongoDbInstanceType
	var destinationMongodbMongoDbInstanceTypeStandaloneMongoDbInstance *shared.DestinationMongodbMongoDbInstanceTypeStandaloneMongoDbInstance
	if r.Configuration.InstanceType.DestinationMongodbMongoDbInstanceTypeStandaloneMongoDbInstance != nil {
		host := r.Configuration.InstanceType.DestinationMongodbMongoDbInstanceTypeStandaloneMongoDbInstance.Host.ValueString()
		instance := shared.DestinationMongodbMongoDbInstanceTypeStandaloneMongoDbInstanceInstanceEnum(r.Configuration.InstanceType.DestinationMongodbMongoDbInstanceTypeStandaloneMongoDbInstance.Instance.ValueString())
		port := r.Configuration.InstanceType.DestinationMongodbMongoDbInstanceTypeStandaloneMongoDbInstance.Port.ValueInt64()
		destinationMongodbMongoDbInstanceTypeStandaloneMongoDbInstance = &shared.DestinationMongodbMongoDbInstanceTypeStandaloneMongoDbInstance{
			Host:     host,
			Instance: instance,
			Port:     port,
		}
	}
	if destinationMongodbMongoDbInstanceTypeStandaloneMongoDbInstance != nil {
		instanceType = &shared.DestinationMongodbMongoDbInstanceType{
			DestinationMongodbMongoDbInstanceTypeStandaloneMongoDbInstance: destinationMongodbMongoDbInstanceTypeStandaloneMongoDbInstance,
		}
	}
	var destinationMongodbMongoDbInstanceTypeReplicaSet *shared.DestinationMongodbMongoDbInstanceTypeReplicaSet
	if r.Configuration.InstanceType.DestinationMongodbMongoDbInstanceTypeReplicaSet != nil {
		instance1 := shared.DestinationMongodbMongoDbInstanceTypeReplicaSetInstanceEnum(r.Configuration.InstanceType.DestinationMongodbMongoDbInstanceTypeReplicaSet.Instance.ValueString())
		replicaSet := new(string)
		if !r.Configuration.InstanceType.DestinationMongodbMongoDbInstanceTypeReplicaSet.ReplicaSet.IsUnknown() && !r.Configuration.InstanceType.DestinationMongodbMongoDbInstanceTypeReplicaSet.ReplicaSet.IsNull() {
			*replicaSet = r.Configuration.InstanceType.DestinationMongodbMongoDbInstanceTypeReplicaSet.ReplicaSet.ValueString()
		} else {
			replicaSet = nil
		}
		serverAddresses := r.Configuration.InstanceType.DestinationMongodbMongoDbInstanceTypeReplicaSet.ServerAddresses.ValueString()
		destinationMongodbMongoDbInstanceTypeReplicaSet = &shared.DestinationMongodbMongoDbInstanceTypeReplicaSet{
			Instance:        instance1,
			ReplicaSet:      replicaSet,
			ServerAddresses: serverAddresses,
		}
	}
	if destinationMongodbMongoDbInstanceTypeReplicaSet != nil {
		instanceType = &shared.DestinationMongodbMongoDbInstanceType{
			DestinationMongodbMongoDbInstanceTypeReplicaSet: destinationMongodbMongoDbInstanceTypeReplicaSet,
		}
	}
	var destinationMongodbMongoDBInstanceTypeMongoDBAtlas *shared.DestinationMongodbMongoDBInstanceTypeMongoDBAtlas
	if r.Configuration.InstanceType.DestinationMongodbMongoDBInstanceTypeMongoDBAtlas != nil {
		clusterURL := r.Configuration.InstanceType.DestinationMongodbMongoDBInstanceTypeMongoDBAtlas.ClusterURL.ValueString()
		instance2 := shared.DestinationMongodbMongoDBInstanceTypeMongoDBAtlasInstanceEnum(r.Configuration.InstanceType.DestinationMongodbMongoDBInstanceTypeMongoDBAtlas.Instance.ValueString())
		destinationMongodbMongoDBInstanceTypeMongoDBAtlas = &shared.DestinationMongodbMongoDBInstanceTypeMongoDBAtlas{
			ClusterURL: clusterURL,
			Instance:   instance2,
		}
	}
	if destinationMongodbMongoDBInstanceTypeMongoDBAtlas != nil {
		instanceType = &shared.DestinationMongodbMongoDbInstanceType{
			DestinationMongodbMongoDBInstanceTypeMongoDBAtlas: destinationMongodbMongoDBInstanceTypeMongoDBAtlas,
		}
	}
	var tunnelMethod *shared.DestinationMongodbSSHTunnelMethod
	var destinationMongodbSSHTunnelMethodNoTunnel *shared.DestinationMongodbSSHTunnelMethodNoTunnel
	if r.Configuration.TunnelMethod.DestinationMongodbSSHTunnelMethodNoTunnel != nil {
		tunnelMethod1 := shared.DestinationMongodbSSHTunnelMethodNoTunnelTunnelMethodEnum(r.Configuration.TunnelMethod.DestinationMongodbSSHTunnelMethodNoTunnel.TunnelMethod.ValueString())
		destinationMongodbSSHTunnelMethodNoTunnel = &shared.DestinationMongodbSSHTunnelMethodNoTunnel{
			TunnelMethod: tunnelMethod1,
		}
	}
	if destinationMongodbSSHTunnelMethodNoTunnel != nil {
		tunnelMethod = &shared.DestinationMongodbSSHTunnelMethod{
			DestinationMongodbSSHTunnelMethodNoTunnel: destinationMongodbSSHTunnelMethodNoTunnel,
		}
	}
	var destinationMongodbSSHTunnelMethodSSHKeyAuthentication *shared.DestinationMongodbSSHTunnelMethodSSHKeyAuthentication
	if r.Configuration.TunnelMethod.DestinationMongodbSSHTunnelMethodSSHKeyAuthentication != nil {
		sshKey := r.Configuration.TunnelMethod.DestinationMongodbSSHTunnelMethodSSHKeyAuthentication.SSHKey.ValueString()
		tunnelHost := r.Configuration.TunnelMethod.DestinationMongodbSSHTunnelMethodSSHKeyAuthentication.TunnelHost.ValueString()
		tunnelMethod2 := shared.DestinationMongodbSSHTunnelMethodSSHKeyAuthenticationTunnelMethodEnum(r.Configuration.TunnelMethod.DestinationMongodbSSHTunnelMethodSSHKeyAuthentication.TunnelMethod.ValueString())
		tunnelPort := r.Configuration.TunnelMethod.DestinationMongodbSSHTunnelMethodSSHKeyAuthentication.TunnelPort.ValueInt64()
		tunnelUser := r.Configuration.TunnelMethod.DestinationMongodbSSHTunnelMethodSSHKeyAuthentication.TunnelUser.ValueString()
		destinationMongodbSSHTunnelMethodSSHKeyAuthentication = &shared.DestinationMongodbSSHTunnelMethodSSHKeyAuthentication{
			SSHKey:       sshKey,
			TunnelHost:   tunnelHost,
			TunnelMethod: tunnelMethod2,
			TunnelPort:   tunnelPort,
			TunnelUser:   tunnelUser,
		}
	}
	if destinationMongodbSSHTunnelMethodSSHKeyAuthentication != nil {
		tunnelMethod = &shared.DestinationMongodbSSHTunnelMethod{
			DestinationMongodbSSHTunnelMethodSSHKeyAuthentication: destinationMongodbSSHTunnelMethodSSHKeyAuthentication,
		}
	}
	var destinationMongodbSSHTunnelMethodPasswordAuthentication *shared.DestinationMongodbSSHTunnelMethodPasswordAuthentication
	if r.Configuration.TunnelMethod.DestinationMongodbSSHTunnelMethodPasswordAuthentication != nil {
		tunnelHost1 := r.Configuration.TunnelMethod.DestinationMongodbSSHTunnelMethodPasswordAuthentication.TunnelHost.ValueString()
		tunnelMethod3 := shared.DestinationMongodbSSHTunnelMethodPasswordAuthenticationTunnelMethodEnum(r.Configuration.TunnelMethod.DestinationMongodbSSHTunnelMethodPasswordAuthentication.TunnelMethod.ValueString())
		tunnelPort1 := r.Configuration.TunnelMethod.DestinationMongodbSSHTunnelMethodPasswordAuthentication.TunnelPort.ValueInt64()
		tunnelUser1 := r.Configuration.TunnelMethod.DestinationMongodbSSHTunnelMethodPasswordAuthentication.TunnelUser.ValueString()
		tunnelUserPassword := r.Configuration.TunnelMethod.DestinationMongodbSSHTunnelMethodPasswordAuthentication.TunnelUserPassword.ValueString()
		destinationMongodbSSHTunnelMethodPasswordAuthentication = &shared.DestinationMongodbSSHTunnelMethodPasswordAuthentication{
			TunnelHost:         tunnelHost1,
			TunnelMethod:       tunnelMethod3,
			TunnelPort:         tunnelPort1,
			TunnelUser:         tunnelUser1,
			TunnelUserPassword: tunnelUserPassword,
		}
	}
	if destinationMongodbSSHTunnelMethodPasswordAuthentication != nil {
		tunnelMethod = &shared.DestinationMongodbSSHTunnelMethod{
			DestinationMongodbSSHTunnelMethodPasswordAuthentication: destinationMongodbSSHTunnelMethodPasswordAuthentication,
		}
	}
	configuration := shared.DestinationMongodb{
		AuthType:        authType,
		Database:        database,
		DestinationType: destinationType,
		InstanceType:    instanceType,
		TunnelMethod:    tunnelMethod,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.DestinationMongodbCreateRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *DestinationMongodbResourceModel) ToDeleteSDKType() *shared.DestinationMongodbCreateRequest {
	out := r.ToCreateSDKType()
	return out
}
