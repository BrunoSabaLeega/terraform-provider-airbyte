// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"airbyte/internal/sdk/pkg/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *SourceOracleResourceModel) ToCreateSDKType() *shared.SourceOracleCreateRequest {
	var connectionData *shared.SourceOracleConnectBy
	var sourceOracleConnectByServiceName *shared.SourceOracleConnectByServiceName
	if r.Configuration.ConnectionData.SourceOracleUpdateConnectByServiceName != nil {
		connectionType := new(shared.SourceOracleConnectByServiceNameConnectionType)
		if !r.Configuration.ConnectionData.SourceOracleUpdateConnectByServiceName.ConnectionType.IsUnknown() && !r.Configuration.ConnectionData.SourceOracleUpdateConnectByServiceName.ConnectionType.IsNull() {
			*connectionType = shared.SourceOracleConnectByServiceNameConnectionType(r.Configuration.ConnectionData.SourceOracleUpdateConnectByServiceName.ConnectionType.ValueString())
		} else {
			connectionType = nil
		}
		serviceName := r.Configuration.ConnectionData.SourceOracleUpdateConnectByServiceName.ServiceName.ValueString()
		sourceOracleConnectByServiceName = &shared.SourceOracleConnectByServiceName{
			ConnectionType: connectionType,
			ServiceName:    serviceName,
		}
	}
	if sourceOracleConnectByServiceName != nil {
		connectionData = &shared.SourceOracleConnectBy{
			SourceOracleConnectByServiceName: sourceOracleConnectByServiceName,
		}
	}
	var sourceOracleConnectBySystemIDSID *shared.SourceOracleConnectBySystemIDSID
	if r.Configuration.ConnectionData.SourceOracleUpdateConnectBySystemIDSID != nil {
		connectionType1 := new(shared.SourceOracleConnectBySystemIDSIDConnectionType)
		if !r.Configuration.ConnectionData.SourceOracleUpdateConnectBySystemIDSID.ConnectionType.IsUnknown() && !r.Configuration.ConnectionData.SourceOracleUpdateConnectBySystemIDSID.ConnectionType.IsNull() {
			*connectionType1 = shared.SourceOracleConnectBySystemIDSIDConnectionType(r.Configuration.ConnectionData.SourceOracleUpdateConnectBySystemIDSID.ConnectionType.ValueString())
		} else {
			connectionType1 = nil
		}
		sid := r.Configuration.ConnectionData.SourceOracleUpdateConnectBySystemIDSID.Sid.ValueString()
		sourceOracleConnectBySystemIDSID = &shared.SourceOracleConnectBySystemIDSID{
			ConnectionType: connectionType1,
			Sid:            sid,
		}
	}
	if sourceOracleConnectBySystemIDSID != nil {
		connectionData = &shared.SourceOracleConnectBy{
			SourceOracleConnectBySystemIDSID: sourceOracleConnectBySystemIDSID,
		}
	}
	var encryption shared.SourceOracleEncryption
	var sourceOracleEncryptionNativeNetworkEncryptionNNE *shared.SourceOracleEncryptionNativeNetworkEncryptionNNE
	if r.Configuration.Encryption.SourceOracleUpdateEncryptionNativeNetworkEncryptionNNE != nil {
		encryptionAlgorithm := new(shared.SourceOracleEncryptionNativeNetworkEncryptionNNEEncryptionAlgorithm)
		if !r.Configuration.Encryption.SourceOracleUpdateEncryptionNativeNetworkEncryptionNNE.EncryptionAlgorithm.IsUnknown() && !r.Configuration.Encryption.SourceOracleUpdateEncryptionNativeNetworkEncryptionNNE.EncryptionAlgorithm.IsNull() {
			*encryptionAlgorithm = shared.SourceOracleEncryptionNativeNetworkEncryptionNNEEncryptionAlgorithm(r.Configuration.Encryption.SourceOracleUpdateEncryptionNativeNetworkEncryptionNNE.EncryptionAlgorithm.ValueString())
		} else {
			encryptionAlgorithm = nil
		}
		encryptionMethod := shared.SourceOracleEncryptionNativeNetworkEncryptionNNEEncryptionMethod(r.Configuration.Encryption.SourceOracleUpdateEncryptionNativeNetworkEncryptionNNE.EncryptionMethod.ValueString())
		sourceOracleEncryptionNativeNetworkEncryptionNNE = &shared.SourceOracleEncryptionNativeNetworkEncryptionNNE{
			EncryptionAlgorithm: encryptionAlgorithm,
			EncryptionMethod:    encryptionMethod,
		}
	}
	if sourceOracleEncryptionNativeNetworkEncryptionNNE != nil {
		encryption = shared.SourceOracleEncryption{
			SourceOracleEncryptionNativeNetworkEncryptionNNE: sourceOracleEncryptionNativeNetworkEncryptionNNE,
		}
	}
	var sourceOracleEncryptionTLSEncryptedVerifyCertificate *shared.SourceOracleEncryptionTLSEncryptedVerifyCertificate
	if r.Configuration.Encryption.SourceOracleUpdateEncryptionTLSEncryptedVerifyCertificate != nil {
		encryptionMethod1 := shared.SourceOracleEncryptionTLSEncryptedVerifyCertificateEncryptionMethod(r.Configuration.Encryption.SourceOracleUpdateEncryptionTLSEncryptedVerifyCertificate.EncryptionMethod.ValueString())
		sslCertificate := r.Configuration.Encryption.SourceOracleUpdateEncryptionTLSEncryptedVerifyCertificate.SslCertificate.ValueString()
		sourceOracleEncryptionTLSEncryptedVerifyCertificate = &shared.SourceOracleEncryptionTLSEncryptedVerifyCertificate{
			EncryptionMethod: encryptionMethod1,
			SslCertificate:   sslCertificate,
		}
	}
	if sourceOracleEncryptionTLSEncryptedVerifyCertificate != nil {
		encryption = shared.SourceOracleEncryption{
			SourceOracleEncryptionTLSEncryptedVerifyCertificate: sourceOracleEncryptionTLSEncryptedVerifyCertificate,
		}
	}
	host := r.Configuration.Host.ValueString()
	jdbcURLParams := new(string)
	if !r.Configuration.JdbcURLParams.IsUnknown() && !r.Configuration.JdbcURLParams.IsNull() {
		*jdbcURLParams = r.Configuration.JdbcURLParams.ValueString()
	} else {
		jdbcURLParams = nil
	}
	password := new(string)
	if !r.Configuration.Password.IsUnknown() && !r.Configuration.Password.IsNull() {
		*password = r.Configuration.Password.ValueString()
	} else {
		password = nil
	}
	port := r.Configuration.Port.ValueInt64()
	schemas := make([]string, 0)
	for _, schemasItem := range r.Configuration.Schemas {
		schemas = append(schemas, schemasItem.ValueString())
	}
	sourceType := shared.SourceOracleOracle(r.Configuration.SourceType.ValueString())
	var tunnelMethod *shared.SourceOracleSSHTunnelMethod
	var sourceOracleSSHTunnelMethodNoTunnel *shared.SourceOracleSSHTunnelMethodNoTunnel
	if r.Configuration.TunnelMethod.SourceOracleUpdateSSHTunnelMethodNoTunnel != nil {
		tunnelMethod1 := shared.SourceOracleSSHTunnelMethodNoTunnelTunnelMethod(r.Configuration.TunnelMethod.SourceOracleUpdateSSHTunnelMethodNoTunnel.TunnelMethod.ValueString())
		sourceOracleSSHTunnelMethodNoTunnel = &shared.SourceOracleSSHTunnelMethodNoTunnel{
			TunnelMethod: tunnelMethod1,
		}
	}
	if sourceOracleSSHTunnelMethodNoTunnel != nil {
		tunnelMethod = &shared.SourceOracleSSHTunnelMethod{
			SourceOracleSSHTunnelMethodNoTunnel: sourceOracleSSHTunnelMethodNoTunnel,
		}
	}
	var sourceOracleSSHTunnelMethodSSHKeyAuthentication *shared.SourceOracleSSHTunnelMethodSSHKeyAuthentication
	if r.Configuration.TunnelMethod.SourceOracleUpdateSSHTunnelMethodSSHKeyAuthentication != nil {
		sshKey := r.Configuration.TunnelMethod.SourceOracleUpdateSSHTunnelMethodSSHKeyAuthentication.SSHKey.ValueString()
		tunnelHost := r.Configuration.TunnelMethod.SourceOracleUpdateSSHTunnelMethodSSHKeyAuthentication.TunnelHost.ValueString()
		tunnelMethod2 := shared.SourceOracleSSHTunnelMethodSSHKeyAuthenticationTunnelMethod(r.Configuration.TunnelMethod.SourceOracleUpdateSSHTunnelMethodSSHKeyAuthentication.TunnelMethod.ValueString())
		tunnelPort := r.Configuration.TunnelMethod.SourceOracleUpdateSSHTunnelMethodSSHKeyAuthentication.TunnelPort.ValueInt64()
		tunnelUser := r.Configuration.TunnelMethod.SourceOracleUpdateSSHTunnelMethodSSHKeyAuthentication.TunnelUser.ValueString()
		sourceOracleSSHTunnelMethodSSHKeyAuthentication = &shared.SourceOracleSSHTunnelMethodSSHKeyAuthentication{
			SSHKey:       sshKey,
			TunnelHost:   tunnelHost,
			TunnelMethod: tunnelMethod2,
			TunnelPort:   tunnelPort,
			TunnelUser:   tunnelUser,
		}
	}
	if sourceOracleSSHTunnelMethodSSHKeyAuthentication != nil {
		tunnelMethod = &shared.SourceOracleSSHTunnelMethod{
			SourceOracleSSHTunnelMethodSSHKeyAuthentication: sourceOracleSSHTunnelMethodSSHKeyAuthentication,
		}
	}
	var sourceOracleSSHTunnelMethodPasswordAuthentication *shared.SourceOracleSSHTunnelMethodPasswordAuthentication
	if r.Configuration.TunnelMethod.SourceOracleUpdateSSHTunnelMethodPasswordAuthentication != nil {
		tunnelHost1 := r.Configuration.TunnelMethod.SourceOracleUpdateSSHTunnelMethodPasswordAuthentication.TunnelHost.ValueString()
		tunnelMethod3 := shared.SourceOracleSSHTunnelMethodPasswordAuthenticationTunnelMethod(r.Configuration.TunnelMethod.SourceOracleUpdateSSHTunnelMethodPasswordAuthentication.TunnelMethod.ValueString())
		tunnelPort1 := r.Configuration.TunnelMethod.SourceOracleUpdateSSHTunnelMethodPasswordAuthentication.TunnelPort.ValueInt64()
		tunnelUser1 := r.Configuration.TunnelMethod.SourceOracleUpdateSSHTunnelMethodPasswordAuthentication.TunnelUser.ValueString()
		tunnelUserPassword := r.Configuration.TunnelMethod.SourceOracleUpdateSSHTunnelMethodPasswordAuthentication.TunnelUserPassword.ValueString()
		sourceOracleSSHTunnelMethodPasswordAuthentication = &shared.SourceOracleSSHTunnelMethodPasswordAuthentication{
			TunnelHost:         tunnelHost1,
			TunnelMethod:       tunnelMethod3,
			TunnelPort:         tunnelPort1,
			TunnelUser:         tunnelUser1,
			TunnelUserPassword: tunnelUserPassword,
		}
	}
	if sourceOracleSSHTunnelMethodPasswordAuthentication != nil {
		tunnelMethod = &shared.SourceOracleSSHTunnelMethod{
			SourceOracleSSHTunnelMethodPasswordAuthentication: sourceOracleSSHTunnelMethodPasswordAuthentication,
		}
	}
	username := r.Configuration.Username.ValueString()
	configuration := shared.SourceOracle{
		ConnectionData: connectionData,
		Encryption:     encryption,
		Host:           host,
		JdbcURLParams:  jdbcURLParams,
		Password:       password,
		Port:           port,
		Schemas:        schemas,
		SourceType:     sourceType,
		TunnelMethod:   tunnelMethod,
		Username:       username,
	}
	name := r.Name.ValueString()
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceOracleCreateRequest{
		Configuration: configuration,
		Name:          name,
		SecretID:      secretID,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceOracleResourceModel) ToUpdateSDKType() *shared.SourceOraclePutRequest {
	var connectionData *shared.SourceOracleUpdateConnectBy
	var sourceOracleUpdateConnectByServiceName *shared.SourceOracleUpdateConnectByServiceName
	if r.Configuration.ConnectionData.SourceOracleUpdateConnectByServiceName != nil {
		connectionType := new(shared.SourceOracleUpdateConnectByServiceNameConnectionType)
		if !r.Configuration.ConnectionData.SourceOracleUpdateConnectByServiceName.ConnectionType.IsUnknown() && !r.Configuration.ConnectionData.SourceOracleUpdateConnectByServiceName.ConnectionType.IsNull() {
			*connectionType = shared.SourceOracleUpdateConnectByServiceNameConnectionType(r.Configuration.ConnectionData.SourceOracleUpdateConnectByServiceName.ConnectionType.ValueString())
		} else {
			connectionType = nil
		}
		serviceName := r.Configuration.ConnectionData.SourceOracleUpdateConnectByServiceName.ServiceName.ValueString()
		sourceOracleUpdateConnectByServiceName = &shared.SourceOracleUpdateConnectByServiceName{
			ConnectionType: connectionType,
			ServiceName:    serviceName,
		}
	}
	if sourceOracleUpdateConnectByServiceName != nil {
		connectionData = &shared.SourceOracleUpdateConnectBy{
			SourceOracleUpdateConnectByServiceName: sourceOracleUpdateConnectByServiceName,
		}
	}
	var sourceOracleUpdateConnectBySystemIDSID *shared.SourceOracleUpdateConnectBySystemIDSID
	if r.Configuration.ConnectionData.SourceOracleUpdateConnectBySystemIDSID != nil {
		connectionType1 := new(shared.SourceOracleUpdateConnectBySystemIDSIDConnectionType)
		if !r.Configuration.ConnectionData.SourceOracleUpdateConnectBySystemIDSID.ConnectionType.IsUnknown() && !r.Configuration.ConnectionData.SourceOracleUpdateConnectBySystemIDSID.ConnectionType.IsNull() {
			*connectionType1 = shared.SourceOracleUpdateConnectBySystemIDSIDConnectionType(r.Configuration.ConnectionData.SourceOracleUpdateConnectBySystemIDSID.ConnectionType.ValueString())
		} else {
			connectionType1 = nil
		}
		sid := r.Configuration.ConnectionData.SourceOracleUpdateConnectBySystemIDSID.Sid.ValueString()
		sourceOracleUpdateConnectBySystemIDSID = &shared.SourceOracleUpdateConnectBySystemIDSID{
			ConnectionType: connectionType1,
			Sid:            sid,
		}
	}
	if sourceOracleUpdateConnectBySystemIDSID != nil {
		connectionData = &shared.SourceOracleUpdateConnectBy{
			SourceOracleUpdateConnectBySystemIDSID: sourceOracleUpdateConnectBySystemIDSID,
		}
	}
	var encryption shared.SourceOracleUpdateEncryption
	var sourceOracleUpdateEncryptionNativeNetworkEncryptionNNE *shared.SourceOracleUpdateEncryptionNativeNetworkEncryptionNNE
	if r.Configuration.Encryption.SourceOracleUpdateEncryptionNativeNetworkEncryptionNNE != nil {
		encryptionAlgorithm := new(shared.SourceOracleUpdateEncryptionNativeNetworkEncryptionNNEEncryptionAlgorithm)
		if !r.Configuration.Encryption.SourceOracleUpdateEncryptionNativeNetworkEncryptionNNE.EncryptionAlgorithm.IsUnknown() && !r.Configuration.Encryption.SourceOracleUpdateEncryptionNativeNetworkEncryptionNNE.EncryptionAlgorithm.IsNull() {
			*encryptionAlgorithm = shared.SourceOracleUpdateEncryptionNativeNetworkEncryptionNNEEncryptionAlgorithm(r.Configuration.Encryption.SourceOracleUpdateEncryptionNativeNetworkEncryptionNNE.EncryptionAlgorithm.ValueString())
		} else {
			encryptionAlgorithm = nil
		}
		encryptionMethod := shared.SourceOracleUpdateEncryptionNativeNetworkEncryptionNNEEncryptionMethod(r.Configuration.Encryption.SourceOracleUpdateEncryptionNativeNetworkEncryptionNNE.EncryptionMethod.ValueString())
		sourceOracleUpdateEncryptionNativeNetworkEncryptionNNE = &shared.SourceOracleUpdateEncryptionNativeNetworkEncryptionNNE{
			EncryptionAlgorithm: encryptionAlgorithm,
			EncryptionMethod:    encryptionMethod,
		}
	}
	if sourceOracleUpdateEncryptionNativeNetworkEncryptionNNE != nil {
		encryption = shared.SourceOracleUpdateEncryption{
			SourceOracleUpdateEncryptionNativeNetworkEncryptionNNE: sourceOracleUpdateEncryptionNativeNetworkEncryptionNNE,
		}
	}
	var sourceOracleUpdateEncryptionTLSEncryptedVerifyCertificate *shared.SourceOracleUpdateEncryptionTLSEncryptedVerifyCertificate
	if r.Configuration.Encryption.SourceOracleUpdateEncryptionTLSEncryptedVerifyCertificate != nil {
		encryptionMethod1 := shared.SourceOracleUpdateEncryptionTLSEncryptedVerifyCertificateEncryptionMethod(r.Configuration.Encryption.SourceOracleUpdateEncryptionTLSEncryptedVerifyCertificate.EncryptionMethod.ValueString())
		sslCertificate := r.Configuration.Encryption.SourceOracleUpdateEncryptionTLSEncryptedVerifyCertificate.SslCertificate.ValueString()
		sourceOracleUpdateEncryptionTLSEncryptedVerifyCertificate = &shared.SourceOracleUpdateEncryptionTLSEncryptedVerifyCertificate{
			EncryptionMethod: encryptionMethod1,
			SslCertificate:   sslCertificate,
		}
	}
	if sourceOracleUpdateEncryptionTLSEncryptedVerifyCertificate != nil {
		encryption = shared.SourceOracleUpdateEncryption{
			SourceOracleUpdateEncryptionTLSEncryptedVerifyCertificate: sourceOracleUpdateEncryptionTLSEncryptedVerifyCertificate,
		}
	}
	host := r.Configuration.Host.ValueString()
	jdbcURLParams := new(string)
	if !r.Configuration.JdbcURLParams.IsUnknown() && !r.Configuration.JdbcURLParams.IsNull() {
		*jdbcURLParams = r.Configuration.JdbcURLParams.ValueString()
	} else {
		jdbcURLParams = nil
	}
	password := new(string)
	if !r.Configuration.Password.IsUnknown() && !r.Configuration.Password.IsNull() {
		*password = r.Configuration.Password.ValueString()
	} else {
		password = nil
	}
	port := r.Configuration.Port.ValueInt64()
	schemas := make([]string, 0)
	for _, schemasItem := range r.Configuration.Schemas {
		schemas = append(schemas, schemasItem.ValueString())
	}
	var tunnelMethod *shared.SourceOracleUpdateSSHTunnelMethod
	var sourceOracleUpdateSSHTunnelMethodNoTunnel *shared.SourceOracleUpdateSSHTunnelMethodNoTunnel
	if r.Configuration.TunnelMethod.SourceOracleUpdateSSHTunnelMethodNoTunnel != nil {
		tunnelMethod1 := shared.SourceOracleUpdateSSHTunnelMethodNoTunnelTunnelMethod(r.Configuration.TunnelMethod.SourceOracleUpdateSSHTunnelMethodNoTunnel.TunnelMethod.ValueString())
		sourceOracleUpdateSSHTunnelMethodNoTunnel = &shared.SourceOracleUpdateSSHTunnelMethodNoTunnel{
			TunnelMethod: tunnelMethod1,
		}
	}
	if sourceOracleUpdateSSHTunnelMethodNoTunnel != nil {
		tunnelMethod = &shared.SourceOracleUpdateSSHTunnelMethod{
			SourceOracleUpdateSSHTunnelMethodNoTunnel: sourceOracleUpdateSSHTunnelMethodNoTunnel,
		}
	}
	var sourceOracleUpdateSSHTunnelMethodSSHKeyAuthentication *shared.SourceOracleUpdateSSHTunnelMethodSSHKeyAuthentication
	if r.Configuration.TunnelMethod.SourceOracleUpdateSSHTunnelMethodSSHKeyAuthentication != nil {
		sshKey := r.Configuration.TunnelMethod.SourceOracleUpdateSSHTunnelMethodSSHKeyAuthentication.SSHKey.ValueString()
		tunnelHost := r.Configuration.TunnelMethod.SourceOracleUpdateSSHTunnelMethodSSHKeyAuthentication.TunnelHost.ValueString()
		tunnelMethod2 := shared.SourceOracleUpdateSSHTunnelMethodSSHKeyAuthenticationTunnelMethod(r.Configuration.TunnelMethod.SourceOracleUpdateSSHTunnelMethodSSHKeyAuthentication.TunnelMethod.ValueString())
		tunnelPort := r.Configuration.TunnelMethod.SourceOracleUpdateSSHTunnelMethodSSHKeyAuthentication.TunnelPort.ValueInt64()
		tunnelUser := r.Configuration.TunnelMethod.SourceOracleUpdateSSHTunnelMethodSSHKeyAuthentication.TunnelUser.ValueString()
		sourceOracleUpdateSSHTunnelMethodSSHKeyAuthentication = &shared.SourceOracleUpdateSSHTunnelMethodSSHKeyAuthentication{
			SSHKey:       sshKey,
			TunnelHost:   tunnelHost,
			TunnelMethod: tunnelMethod2,
			TunnelPort:   tunnelPort,
			TunnelUser:   tunnelUser,
		}
	}
	if sourceOracleUpdateSSHTunnelMethodSSHKeyAuthentication != nil {
		tunnelMethod = &shared.SourceOracleUpdateSSHTunnelMethod{
			SourceOracleUpdateSSHTunnelMethodSSHKeyAuthentication: sourceOracleUpdateSSHTunnelMethodSSHKeyAuthentication,
		}
	}
	var sourceOracleUpdateSSHTunnelMethodPasswordAuthentication *shared.SourceOracleUpdateSSHTunnelMethodPasswordAuthentication
	if r.Configuration.TunnelMethod.SourceOracleUpdateSSHTunnelMethodPasswordAuthentication != nil {
		tunnelHost1 := r.Configuration.TunnelMethod.SourceOracleUpdateSSHTunnelMethodPasswordAuthentication.TunnelHost.ValueString()
		tunnelMethod3 := shared.SourceOracleUpdateSSHTunnelMethodPasswordAuthenticationTunnelMethod(r.Configuration.TunnelMethod.SourceOracleUpdateSSHTunnelMethodPasswordAuthentication.TunnelMethod.ValueString())
		tunnelPort1 := r.Configuration.TunnelMethod.SourceOracleUpdateSSHTunnelMethodPasswordAuthentication.TunnelPort.ValueInt64()
		tunnelUser1 := r.Configuration.TunnelMethod.SourceOracleUpdateSSHTunnelMethodPasswordAuthentication.TunnelUser.ValueString()
		tunnelUserPassword := r.Configuration.TunnelMethod.SourceOracleUpdateSSHTunnelMethodPasswordAuthentication.TunnelUserPassword.ValueString()
		sourceOracleUpdateSSHTunnelMethodPasswordAuthentication = &shared.SourceOracleUpdateSSHTunnelMethodPasswordAuthentication{
			TunnelHost:         tunnelHost1,
			TunnelMethod:       tunnelMethod3,
			TunnelPort:         tunnelPort1,
			TunnelUser:         tunnelUser1,
			TunnelUserPassword: tunnelUserPassword,
		}
	}
	if sourceOracleUpdateSSHTunnelMethodPasswordAuthentication != nil {
		tunnelMethod = &shared.SourceOracleUpdateSSHTunnelMethod{
			SourceOracleUpdateSSHTunnelMethodPasswordAuthentication: sourceOracleUpdateSSHTunnelMethodPasswordAuthentication,
		}
	}
	username := r.Configuration.Username.ValueString()
	configuration := shared.SourceOracleUpdate{
		ConnectionData: connectionData,
		Encryption:     encryption,
		Host:           host,
		JdbcURLParams:  jdbcURLParams,
		Password:       password,
		Port:           port,
		Schemas:        schemas,
		TunnelMethod:   tunnelMethod,
		Username:       username,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceOraclePutRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceOracleResourceModel) ToDeleteSDKType() *shared.SourceOracleCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SourceOracleResourceModel) RefreshFromCreateResponse(resp *shared.SourceResponse) {
	r.Name = types.StringValue(resp.Name)
	r.SourceID = types.StringValue(resp.SourceID)
	r.SourceType = types.StringValue(resp.SourceType)
	r.WorkspaceID = types.StringValue(resp.WorkspaceID)
}
