// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"airbyte/internal/sdk/pkg/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *DestinationCassandraResourceModel) ToCreateSDKType() *shared.DestinationCassandraCreateRequest {
	address := r.Configuration.Address.ValueString()
	datacenter := new(string)
	if !r.Configuration.Datacenter.IsUnknown() && !r.Configuration.Datacenter.IsNull() {
		*datacenter = r.Configuration.Datacenter.ValueString()
	} else {
		datacenter = nil
	}
	destinationType := shared.DestinationCassandraCassandra(r.Configuration.DestinationType.ValueString())
	keyspace := r.Configuration.Keyspace.ValueString()
	password := r.Configuration.Password.ValueString()
	port := r.Configuration.Port.ValueInt64()
	replication := new(int64)
	if !r.Configuration.Replication.IsUnknown() && !r.Configuration.Replication.IsNull() {
		*replication = r.Configuration.Replication.ValueInt64()
	} else {
		replication = nil
	}
	username := r.Configuration.Username.ValueString()
	configuration := shared.DestinationCassandra{
		Address:         address,
		Datacenter:      datacenter,
		DestinationType: destinationType,
		Keyspace:        keyspace,
		Password:        password,
		Port:            port,
		Replication:     replication,
		Username:        username,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.DestinationCassandraCreateRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *DestinationCassandraResourceModel) ToUpdateSDKType() *shared.DestinationCassandraPutRequest {
	address := r.Configuration.Address.ValueString()
	datacenter := new(string)
	if !r.Configuration.Datacenter.IsUnknown() && !r.Configuration.Datacenter.IsNull() {
		*datacenter = r.Configuration.Datacenter.ValueString()
	} else {
		datacenter = nil
	}
	keyspace := r.Configuration.Keyspace.ValueString()
	password := r.Configuration.Password.ValueString()
	port := r.Configuration.Port.ValueInt64()
	replication := new(int64)
	if !r.Configuration.Replication.IsUnknown() && !r.Configuration.Replication.IsNull() {
		*replication = r.Configuration.Replication.ValueInt64()
	} else {
		replication = nil
	}
	username := r.Configuration.Username.ValueString()
	configuration := shared.DestinationCassandraUpdate{
		Address:     address,
		Datacenter:  datacenter,
		Keyspace:    keyspace,
		Password:    password,
		Port:        port,
		Replication: replication,
		Username:    username,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.DestinationCassandraPutRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *DestinationCassandraResourceModel) ToDeleteSDKType() *shared.DestinationCassandraCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *DestinationCassandraResourceModel) RefreshFromCreateResponse(resp *shared.DestinationResponse) {
	r.DestinationID = types.StringValue(resp.DestinationID)
	r.DestinationType = types.StringValue(resp.DestinationType)
	r.Name = types.StringValue(resp.Name)
	r.WorkspaceID = types.StringValue(resp.WorkspaceID)
}
