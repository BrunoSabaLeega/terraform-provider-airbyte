// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"airbyte/internal/sdk/pkg/models/shared"
	"encoding/json"
	"time"
)

func (r *SourceZendeskTalkResourceModel) ToCreateSDKType() *shared.SourceZendeskTalkCreateRequest {
	var credentials *shared.SourceZendeskTalkAuthentication
	var sourceZendeskTalkAuthenticationAPIToken *shared.SourceZendeskTalkAuthenticationAPIToken
	if r.Configuration.Credentials.SourceZendeskTalkAuthenticationAPIToken != nil {
		apiToken := r.Configuration.Credentials.SourceZendeskTalkAuthenticationAPIToken.APIToken.ValueString()
		authType := new(shared.SourceZendeskTalkAuthenticationAPITokenAuthTypeEnum)
		if !r.Configuration.Credentials.SourceZendeskTalkAuthenticationAPIToken.AuthType.IsUnknown() && !r.Configuration.Credentials.SourceZendeskTalkAuthenticationAPIToken.AuthType.IsNull() {
			*authType = shared.SourceZendeskTalkAuthenticationAPITokenAuthTypeEnum(r.Configuration.Credentials.SourceZendeskTalkAuthenticationAPIToken.AuthType.ValueString())
		} else {
			authType = nil
		}
		email := r.Configuration.Credentials.SourceZendeskTalkAuthenticationAPIToken.Email.ValueString()
		additionalProperties := make(map[string]interface{})
		for additionalPropertiesKey, additionalPropertiesValue := range r.Configuration.Credentials.SourceZendeskTalkAuthenticationAPIToken.AdditionalProperties {
			var additionalPropertiesInst interface{}
			_ = json.Unmarshal([]byte(additionalPropertiesValue.ValueString()), &additionalPropertiesInst)
			additionalProperties[additionalPropertiesKey] = additionalPropertiesInst
		}
		sourceZendeskTalkAuthenticationAPIToken = &shared.SourceZendeskTalkAuthenticationAPIToken{
			APIToken:             apiToken,
			AuthType:             authType,
			Email:                email,
			AdditionalProperties: additionalProperties,
		}
	}
	if sourceZendeskTalkAuthenticationAPIToken != nil {
		credentials = &shared.SourceZendeskTalkAuthentication{
			SourceZendeskTalkAuthenticationAPIToken: sourceZendeskTalkAuthenticationAPIToken,
		}
	}
	var sourceZendeskTalkAuthenticationOAuth20 *shared.SourceZendeskTalkAuthenticationOAuth20
	if r.Configuration.Credentials.SourceZendeskTalkAuthenticationOAuth20 != nil {
		accessToken := r.Configuration.Credentials.SourceZendeskTalkAuthenticationOAuth20.AccessToken.ValueString()
		authType1 := new(shared.SourceZendeskTalkAuthenticationOAuth20AuthTypeEnum)
		if !r.Configuration.Credentials.SourceZendeskTalkAuthenticationOAuth20.AuthType.IsUnknown() && !r.Configuration.Credentials.SourceZendeskTalkAuthenticationOAuth20.AuthType.IsNull() {
			*authType1 = shared.SourceZendeskTalkAuthenticationOAuth20AuthTypeEnum(r.Configuration.Credentials.SourceZendeskTalkAuthenticationOAuth20.AuthType.ValueString())
		} else {
			authType1 = nil
		}
		additionalProperties1 := make(map[string]interface{})
		for additionalPropertiesKey1, additionalPropertiesValue1 := range r.Configuration.Credentials.SourceZendeskTalkAuthenticationOAuth20.AdditionalProperties {
			var additionalPropertiesInst1 interface{}
			_ = json.Unmarshal([]byte(additionalPropertiesValue1.ValueString()), &additionalPropertiesInst1)
			additionalProperties1[additionalPropertiesKey1] = additionalPropertiesInst1
		}
		sourceZendeskTalkAuthenticationOAuth20 = &shared.SourceZendeskTalkAuthenticationOAuth20{
			AccessToken:          accessToken,
			AuthType:             authType1,
			AdditionalProperties: additionalProperties1,
		}
	}
	if sourceZendeskTalkAuthenticationOAuth20 != nil {
		credentials = &shared.SourceZendeskTalkAuthentication{
			SourceZendeskTalkAuthenticationOAuth20: sourceZendeskTalkAuthenticationOAuth20,
		}
	}
	sourceType := shared.SourceZendeskTalkZendeskTalkEnum(r.Configuration.SourceType.ValueString())
	startDate, _ := time.Parse(time.RFC3339Nano, r.Configuration.StartDate.ValueString())
	subdomain := r.Configuration.Subdomain.ValueString()
	configuration := shared.SourceZendeskTalk{
		Credentials: credentials,
		SourceType:  sourceType,
		StartDate:   startDate,
		Subdomain:   subdomain,
	}
	name := r.Name.ValueString()
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceZendeskTalkCreateRequest{
		Configuration: configuration,
		Name:          name,
		SecretID:      secretID,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceZendeskTalkResourceModel) ToDeleteSDKType() *shared.SourceZendeskTalkCreateRequest {
	out := r.ToCreateSDKType()
	return out
}
