// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"airbyte/internal/sdk/pkg/models/shared"
	"time"
)

func (r *SourceAirtableResourceModel) ToCreateSDKType() *shared.SourceAirtableCreateRequest {
	var credentials *shared.SourceAirtableAuthentication
	var sourceAirtableAuthenticationOAuth20 *shared.SourceAirtableAuthenticationOAuth20
	if r.Configuration.Credentials.SourceAirtableAuthenticationOAuth20 != nil {
		accessToken := new(string)
		if !r.Configuration.Credentials.SourceAirtableAuthenticationOAuth20.AccessToken.IsUnknown() && !r.Configuration.Credentials.SourceAirtableAuthenticationOAuth20.AccessToken.IsNull() {
			*accessToken = r.Configuration.Credentials.SourceAirtableAuthenticationOAuth20.AccessToken.ValueString()
		} else {
			accessToken = nil
		}
		authMethod := new(shared.SourceAirtableAuthenticationOAuth20AuthMethodEnum)
		if !r.Configuration.Credentials.SourceAirtableAuthenticationOAuth20.AuthMethod.IsUnknown() && !r.Configuration.Credentials.SourceAirtableAuthenticationOAuth20.AuthMethod.IsNull() {
			*authMethod = shared.SourceAirtableAuthenticationOAuth20AuthMethodEnum(r.Configuration.Credentials.SourceAirtableAuthenticationOAuth20.AuthMethod.ValueString())
		} else {
			authMethod = nil
		}
		clientID := r.Configuration.Credentials.SourceAirtableAuthenticationOAuth20.ClientID.ValueString()
		clientSecret := r.Configuration.Credentials.SourceAirtableAuthenticationOAuth20.ClientSecret.ValueString()
		refreshToken := r.Configuration.Credentials.SourceAirtableAuthenticationOAuth20.RefreshToken.ValueString()
		tokenExpiryDate := new(time.Time)
		if !r.Configuration.Credentials.SourceAirtableAuthenticationOAuth20.TokenExpiryDate.IsUnknown() && !r.Configuration.Credentials.SourceAirtableAuthenticationOAuth20.TokenExpiryDate.IsNull() {
			*tokenExpiryDate, _ = time.Parse(time.RFC3339Nano, r.Configuration.Credentials.SourceAirtableAuthenticationOAuth20.TokenExpiryDate.ValueString())
		} else {
			tokenExpiryDate = nil
		}
		sourceAirtableAuthenticationOAuth20 = &shared.SourceAirtableAuthenticationOAuth20{
			AccessToken:     accessToken,
			AuthMethod:      authMethod,
			ClientID:        clientID,
			ClientSecret:    clientSecret,
			RefreshToken:    refreshToken,
			TokenExpiryDate: tokenExpiryDate,
		}
	}
	if sourceAirtableAuthenticationOAuth20 != nil {
		credentials = &shared.SourceAirtableAuthentication{
			SourceAirtableAuthenticationOAuth20: sourceAirtableAuthenticationOAuth20,
		}
	}
	var sourceAirtableAuthenticationPersonalAccessToken *shared.SourceAirtableAuthenticationPersonalAccessToken
	if r.Configuration.Credentials.SourceAirtableAuthenticationPersonalAccessToken != nil {
		apiKey := r.Configuration.Credentials.SourceAirtableAuthenticationPersonalAccessToken.APIKey.ValueString()
		authMethod1 := new(shared.SourceAirtableAuthenticationPersonalAccessTokenAuthMethodEnum)
		if !r.Configuration.Credentials.SourceAirtableAuthenticationPersonalAccessToken.AuthMethod.IsUnknown() && !r.Configuration.Credentials.SourceAirtableAuthenticationPersonalAccessToken.AuthMethod.IsNull() {
			*authMethod1 = shared.SourceAirtableAuthenticationPersonalAccessTokenAuthMethodEnum(r.Configuration.Credentials.SourceAirtableAuthenticationPersonalAccessToken.AuthMethod.ValueString())
		} else {
			authMethod1 = nil
		}
		sourceAirtableAuthenticationPersonalAccessToken = &shared.SourceAirtableAuthenticationPersonalAccessToken{
			APIKey:     apiKey,
			AuthMethod: authMethod1,
		}
	}
	if sourceAirtableAuthenticationPersonalAccessToken != nil {
		credentials = &shared.SourceAirtableAuthentication{
			SourceAirtableAuthenticationPersonalAccessToken: sourceAirtableAuthenticationPersonalAccessToken,
		}
	}
	sourceType := shared.SourceAirtableAirtableEnum(r.Configuration.SourceType.ValueString())
	configuration := shared.SourceAirtable{
		Credentials: credentials,
		SourceType:  sourceType,
	}
	name := r.Name.ValueString()
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceAirtableCreateRequest{
		Configuration: configuration,
		Name:          name,
		SecretID:      secretID,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceAirtableResourceModel) ToDeleteSDKType() *shared.SourceAirtableCreateRequest {
	out := r.ToCreateSDKType()
	return out
}
