// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"airbyte/internal/sdk/pkg/models/shared"
)

func (r *SourceZendeskSunshineResourceModel) ToCreateSDKType() *shared.SourceZendeskSunshineCreateRequest {
	var credentials *shared.SourceZendeskSunshineAuthorizationMethod
	var sourceZendeskSunshineAuthorizationMethodOAuth20 *shared.SourceZendeskSunshineAuthorizationMethodOAuth20
	if r.Configuration.Credentials.SourceZendeskSunshineAuthorizationMethodOAuth20 != nil {
		accessToken := r.Configuration.Credentials.SourceZendeskSunshineAuthorizationMethodOAuth20.AccessToken.ValueString()
		authMethod := shared.SourceZendeskSunshineAuthorizationMethodOAuth20AuthMethodEnum(r.Configuration.Credentials.SourceZendeskSunshineAuthorizationMethodOAuth20.AuthMethod.ValueString())
		clientID := r.Configuration.Credentials.SourceZendeskSunshineAuthorizationMethodOAuth20.ClientID.ValueString()
		clientSecret := r.Configuration.Credentials.SourceZendeskSunshineAuthorizationMethodOAuth20.ClientSecret.ValueString()
		sourceZendeskSunshineAuthorizationMethodOAuth20 = &shared.SourceZendeskSunshineAuthorizationMethodOAuth20{
			AccessToken:  accessToken,
			AuthMethod:   authMethod,
			ClientID:     clientID,
			ClientSecret: clientSecret,
		}
	}
	if sourceZendeskSunshineAuthorizationMethodOAuth20 != nil {
		credentials = &shared.SourceZendeskSunshineAuthorizationMethod{
			SourceZendeskSunshineAuthorizationMethodOAuth20: sourceZendeskSunshineAuthorizationMethodOAuth20,
		}
	}
	var sourceZendeskSunshineAuthorizationMethodAPIToken *shared.SourceZendeskSunshineAuthorizationMethodAPIToken
	if r.Configuration.Credentials.SourceZendeskSunshineAuthorizationMethodAPIToken != nil {
		apiToken := r.Configuration.Credentials.SourceZendeskSunshineAuthorizationMethodAPIToken.APIToken.ValueString()
		authMethod1 := shared.SourceZendeskSunshineAuthorizationMethodAPITokenAuthMethodEnum(r.Configuration.Credentials.SourceZendeskSunshineAuthorizationMethodAPIToken.AuthMethod.ValueString())
		email := r.Configuration.Credentials.SourceZendeskSunshineAuthorizationMethodAPIToken.Email.ValueString()
		sourceZendeskSunshineAuthorizationMethodAPIToken = &shared.SourceZendeskSunshineAuthorizationMethodAPIToken{
			APIToken:   apiToken,
			AuthMethod: authMethod1,
			Email:      email,
		}
	}
	if sourceZendeskSunshineAuthorizationMethodAPIToken != nil {
		credentials = &shared.SourceZendeskSunshineAuthorizationMethod{
			SourceZendeskSunshineAuthorizationMethodAPIToken: sourceZendeskSunshineAuthorizationMethodAPIToken,
		}
	}
	sourceType := shared.SourceZendeskSunshineZendeskSunshineEnum(r.Configuration.SourceType.ValueString())
	startDate := r.Configuration.StartDate.ValueString()
	subdomain := r.Configuration.Subdomain.ValueString()
	configuration := shared.SourceZendeskSunshine{
		Credentials: credentials,
		SourceType:  sourceType,
		StartDate:   startDate,
		Subdomain:   subdomain,
	}
	name := r.Name.ValueString()
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceZendeskSunshineCreateRequest{
		Configuration: configuration,
		Name:          name,
		SecretID:      secretID,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceZendeskSunshineResourceModel) ToDeleteSDKType() *shared.SourceZendeskSunshineCreateRequest {
	out := r.ToCreateSDKType()
	return out
}
