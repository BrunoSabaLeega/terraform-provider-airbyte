// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"airbyte/internal/sdk/pkg/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *DestinationS3ResourceModel) ToCreateSDKType() *shared.DestinationS3CreateRequest {
	accessKeyID := new(string)
	if !r.Configuration.AccessKeyID.IsUnknown() && !r.Configuration.AccessKeyID.IsNull() {
		*accessKeyID = r.Configuration.AccessKeyID.ValueString()
	} else {
		accessKeyID = nil
	}
	destinationType := shared.DestinationS3S3(r.Configuration.DestinationType.ValueString())
	fileNamePattern := new(string)
	if !r.Configuration.FileNamePattern.IsUnknown() && !r.Configuration.FileNamePattern.IsNull() {
		*fileNamePattern = r.Configuration.FileNamePattern.ValueString()
	} else {
		fileNamePattern = nil
	}
	var format shared.DestinationS3OutputFormat
	var destinationS3OutputFormatAvroApacheAvro *shared.DestinationS3OutputFormatAvroApacheAvro
	if r.Configuration.Format.DestinationS3OutputFormatAvroApacheAvro != nil {
		var compressionCodec shared.DestinationS3OutputFormatAvroApacheAvroCompressionCodec
		var destinationS3OutputFormatAvroApacheAvroCompressionCodecNoCompression *shared.DestinationS3OutputFormatAvroApacheAvroCompressionCodecNoCompression
		if r.Configuration.Format.DestinationS3OutputFormatAvroApacheAvro.CompressionCodec.DestinationS3OutputFormatAvroApacheAvroCompressionCodecNoCompression != nil {
			codec := shared.DestinationS3OutputFormatAvroApacheAvroCompressionCodecNoCompressionCodec(r.Configuration.Format.DestinationS3OutputFormatAvroApacheAvro.CompressionCodec.DestinationS3OutputFormatAvroApacheAvroCompressionCodecNoCompression.Codec.ValueString())
			destinationS3OutputFormatAvroApacheAvroCompressionCodecNoCompression = &shared.DestinationS3OutputFormatAvroApacheAvroCompressionCodecNoCompression{
				Codec: codec,
			}
		}
		if destinationS3OutputFormatAvroApacheAvroCompressionCodecNoCompression != nil {
			compressionCodec = shared.DestinationS3OutputFormatAvroApacheAvroCompressionCodec{
				DestinationS3OutputFormatAvroApacheAvroCompressionCodecNoCompression: destinationS3OutputFormatAvroApacheAvroCompressionCodecNoCompression,
			}
		}
		var destinationS3OutputFormatAvroApacheAvroCompressionCodecDeflate *shared.DestinationS3OutputFormatAvroApacheAvroCompressionCodecDeflate
		if r.Configuration.Format.DestinationS3OutputFormatAvroApacheAvro.CompressionCodec.DestinationS3OutputFormatAvroApacheAvroCompressionCodecDeflate != nil {
			codec1 := shared.DestinationS3OutputFormatAvroApacheAvroCompressionCodecDeflateCodec(r.Configuration.Format.DestinationS3OutputFormatAvroApacheAvro.CompressionCodec.DestinationS3OutputFormatAvroApacheAvroCompressionCodecDeflate.Codec.ValueString())
			compressionLevel := r.Configuration.Format.DestinationS3OutputFormatAvroApacheAvro.CompressionCodec.DestinationS3OutputFormatAvroApacheAvroCompressionCodecDeflate.CompressionLevel.ValueInt64()
			destinationS3OutputFormatAvroApacheAvroCompressionCodecDeflate = &shared.DestinationS3OutputFormatAvroApacheAvroCompressionCodecDeflate{
				Codec:            codec1,
				CompressionLevel: compressionLevel,
			}
		}
		if destinationS3OutputFormatAvroApacheAvroCompressionCodecDeflate != nil {
			compressionCodec = shared.DestinationS3OutputFormatAvroApacheAvroCompressionCodec{
				DestinationS3OutputFormatAvroApacheAvroCompressionCodecDeflate: destinationS3OutputFormatAvroApacheAvroCompressionCodecDeflate,
			}
		}
		var destinationS3OutputFormatAvroApacheAvroCompressionCodecBzip2 *shared.DestinationS3OutputFormatAvroApacheAvroCompressionCodecBzip2
		if r.Configuration.Format.DestinationS3OutputFormatAvroApacheAvro.CompressionCodec.DestinationS3OutputFormatAvroApacheAvroCompressionCodecBzip2 != nil {
			codec2 := shared.DestinationS3OutputFormatAvroApacheAvroCompressionCodecBzip2Codec(r.Configuration.Format.DestinationS3OutputFormatAvroApacheAvro.CompressionCodec.DestinationS3OutputFormatAvroApacheAvroCompressionCodecBzip2.Codec.ValueString())
			destinationS3OutputFormatAvroApacheAvroCompressionCodecBzip2 = &shared.DestinationS3OutputFormatAvroApacheAvroCompressionCodecBzip2{
				Codec: codec2,
			}
		}
		if destinationS3OutputFormatAvroApacheAvroCompressionCodecBzip2 != nil {
			compressionCodec = shared.DestinationS3OutputFormatAvroApacheAvroCompressionCodec{
				DestinationS3OutputFormatAvroApacheAvroCompressionCodecBzip2: destinationS3OutputFormatAvroApacheAvroCompressionCodecBzip2,
			}
		}
		var destinationS3OutputFormatAvroApacheAvroCompressionCodecXz *shared.DestinationS3OutputFormatAvroApacheAvroCompressionCodecXz
		if r.Configuration.Format.DestinationS3OutputFormatAvroApacheAvro.CompressionCodec.DestinationS3OutputFormatAvroApacheAvroCompressionCodecXz != nil {
			codec3 := shared.DestinationS3OutputFormatAvroApacheAvroCompressionCodecXzCodec(r.Configuration.Format.DestinationS3OutputFormatAvroApacheAvro.CompressionCodec.DestinationS3OutputFormatAvroApacheAvroCompressionCodecXz.Codec.ValueString())
			compressionLevel1 := r.Configuration.Format.DestinationS3OutputFormatAvroApacheAvro.CompressionCodec.DestinationS3OutputFormatAvroApacheAvroCompressionCodecXz.CompressionLevel.ValueInt64()
			destinationS3OutputFormatAvroApacheAvroCompressionCodecXz = &shared.DestinationS3OutputFormatAvroApacheAvroCompressionCodecXz{
				Codec:            codec3,
				CompressionLevel: compressionLevel1,
			}
		}
		if destinationS3OutputFormatAvroApacheAvroCompressionCodecXz != nil {
			compressionCodec = shared.DestinationS3OutputFormatAvroApacheAvroCompressionCodec{
				DestinationS3OutputFormatAvroApacheAvroCompressionCodecXz: destinationS3OutputFormatAvroApacheAvroCompressionCodecXz,
			}
		}
		var destinationS3OutputFormatAvroApacheAvroCompressionCodecZstandard *shared.DestinationS3OutputFormatAvroApacheAvroCompressionCodecZstandard
		if r.Configuration.Format.DestinationS3OutputFormatAvroApacheAvro.CompressionCodec.DestinationS3OutputFormatAvroApacheAvroCompressionCodecZstandard != nil {
			codec4 := shared.DestinationS3OutputFormatAvroApacheAvroCompressionCodecZstandardCodec(r.Configuration.Format.DestinationS3OutputFormatAvroApacheAvro.CompressionCodec.DestinationS3OutputFormatAvroApacheAvroCompressionCodecZstandard.Codec.ValueString())
			compressionLevel2 := r.Configuration.Format.DestinationS3OutputFormatAvroApacheAvro.CompressionCodec.DestinationS3OutputFormatAvroApacheAvroCompressionCodecZstandard.CompressionLevel.ValueInt64()
			includeChecksum := new(bool)
			if !r.Configuration.Format.DestinationS3OutputFormatAvroApacheAvro.CompressionCodec.DestinationS3OutputFormatAvroApacheAvroCompressionCodecZstandard.IncludeChecksum.IsUnknown() && !r.Configuration.Format.DestinationS3OutputFormatAvroApacheAvro.CompressionCodec.DestinationS3OutputFormatAvroApacheAvroCompressionCodecZstandard.IncludeChecksum.IsNull() {
				*includeChecksum = r.Configuration.Format.DestinationS3OutputFormatAvroApacheAvro.CompressionCodec.DestinationS3OutputFormatAvroApacheAvroCompressionCodecZstandard.IncludeChecksum.ValueBool()
			} else {
				includeChecksum = nil
			}
			destinationS3OutputFormatAvroApacheAvroCompressionCodecZstandard = &shared.DestinationS3OutputFormatAvroApacheAvroCompressionCodecZstandard{
				Codec:            codec4,
				CompressionLevel: compressionLevel2,
				IncludeChecksum:  includeChecksum,
			}
		}
		if destinationS3OutputFormatAvroApacheAvroCompressionCodecZstandard != nil {
			compressionCodec = shared.DestinationS3OutputFormatAvroApacheAvroCompressionCodec{
				DestinationS3OutputFormatAvroApacheAvroCompressionCodecZstandard: destinationS3OutputFormatAvroApacheAvroCompressionCodecZstandard,
			}
		}
		var destinationS3OutputFormatAvroApacheAvroCompressionCodecSnappy *shared.DestinationS3OutputFormatAvroApacheAvroCompressionCodecSnappy
		if r.Configuration.Format.DestinationS3OutputFormatAvroApacheAvro.CompressionCodec.DestinationS3OutputFormatAvroApacheAvroCompressionCodecSnappy != nil {
			codec5 := shared.DestinationS3OutputFormatAvroApacheAvroCompressionCodecSnappyCodec(r.Configuration.Format.DestinationS3OutputFormatAvroApacheAvro.CompressionCodec.DestinationS3OutputFormatAvroApacheAvroCompressionCodecSnappy.Codec.ValueString())
			destinationS3OutputFormatAvroApacheAvroCompressionCodecSnappy = &shared.DestinationS3OutputFormatAvroApacheAvroCompressionCodecSnappy{
				Codec: codec5,
			}
		}
		if destinationS3OutputFormatAvroApacheAvroCompressionCodecSnappy != nil {
			compressionCodec = shared.DestinationS3OutputFormatAvroApacheAvroCompressionCodec{
				DestinationS3OutputFormatAvroApacheAvroCompressionCodecSnappy: destinationS3OutputFormatAvroApacheAvroCompressionCodecSnappy,
			}
		}
		formatType := shared.DestinationS3OutputFormatAvroApacheAvroFormatType(r.Configuration.Format.DestinationS3OutputFormatAvroApacheAvro.FormatType.ValueString())
		destinationS3OutputFormatAvroApacheAvro = &shared.DestinationS3OutputFormatAvroApacheAvro{
			CompressionCodec: compressionCodec,
			FormatType:       formatType,
		}
	}
	if destinationS3OutputFormatAvroApacheAvro != nil {
		format = shared.DestinationS3OutputFormat{
			DestinationS3OutputFormatAvroApacheAvro: destinationS3OutputFormatAvroApacheAvro,
		}
	}
	var destinationS3OutputFormatCSVCommaSeparatedValues *shared.DestinationS3OutputFormatCSVCommaSeparatedValues
	if r.Configuration.Format.DestinationS3OutputFormatCSVCommaSeparatedValues != nil {
		var compression *shared.DestinationS3OutputFormatCSVCommaSeparatedValuesCompression
		var destinationS3OutputFormatCSVCommaSeparatedValuesCompressionNoCompression *shared.DestinationS3OutputFormatCSVCommaSeparatedValuesCompressionNoCompression
		if r.Configuration.Format.DestinationS3OutputFormatCSVCommaSeparatedValues.Compression.DestinationS3OutputFormatCSVCommaSeparatedValuesCompressionNoCompression != nil {
			compressionType := new(shared.DestinationS3OutputFormatCSVCommaSeparatedValuesCompressionNoCompressionCompressionType)
			if !r.Configuration.Format.DestinationS3OutputFormatCSVCommaSeparatedValues.Compression.DestinationS3OutputFormatCSVCommaSeparatedValuesCompressionNoCompression.CompressionType.IsUnknown() && !r.Configuration.Format.DestinationS3OutputFormatCSVCommaSeparatedValues.Compression.DestinationS3OutputFormatCSVCommaSeparatedValuesCompressionNoCompression.CompressionType.IsNull() {
				*compressionType = shared.DestinationS3OutputFormatCSVCommaSeparatedValuesCompressionNoCompressionCompressionType(r.Configuration.Format.DestinationS3OutputFormatCSVCommaSeparatedValues.Compression.DestinationS3OutputFormatCSVCommaSeparatedValuesCompressionNoCompression.CompressionType.ValueString())
			} else {
				compressionType = nil
			}
			destinationS3OutputFormatCSVCommaSeparatedValuesCompressionNoCompression = &shared.DestinationS3OutputFormatCSVCommaSeparatedValuesCompressionNoCompression{
				CompressionType: compressionType,
			}
		}
		if destinationS3OutputFormatCSVCommaSeparatedValuesCompressionNoCompression != nil {
			compression = &shared.DestinationS3OutputFormatCSVCommaSeparatedValuesCompression{
				DestinationS3OutputFormatCSVCommaSeparatedValuesCompressionNoCompression: destinationS3OutputFormatCSVCommaSeparatedValuesCompressionNoCompression,
			}
		}
		var destinationS3OutputFormatCSVCommaSeparatedValuesCompressionGZIP *shared.DestinationS3OutputFormatCSVCommaSeparatedValuesCompressionGZIP
		if r.Configuration.Format.DestinationS3OutputFormatCSVCommaSeparatedValues.Compression.DestinationS3OutputFormatCSVCommaSeparatedValuesCompressionGZIP != nil {
			compressionType1 := new(shared.DestinationS3OutputFormatCSVCommaSeparatedValuesCompressionGZIPCompressionType)
			if !r.Configuration.Format.DestinationS3OutputFormatCSVCommaSeparatedValues.Compression.DestinationS3OutputFormatCSVCommaSeparatedValuesCompressionGZIP.CompressionType.IsUnknown() && !r.Configuration.Format.DestinationS3OutputFormatCSVCommaSeparatedValues.Compression.DestinationS3OutputFormatCSVCommaSeparatedValuesCompressionGZIP.CompressionType.IsNull() {
				*compressionType1 = shared.DestinationS3OutputFormatCSVCommaSeparatedValuesCompressionGZIPCompressionType(r.Configuration.Format.DestinationS3OutputFormatCSVCommaSeparatedValues.Compression.DestinationS3OutputFormatCSVCommaSeparatedValuesCompressionGZIP.CompressionType.ValueString())
			} else {
				compressionType1 = nil
			}
			destinationS3OutputFormatCSVCommaSeparatedValuesCompressionGZIP = &shared.DestinationS3OutputFormatCSVCommaSeparatedValuesCompressionGZIP{
				CompressionType: compressionType1,
			}
		}
		if destinationS3OutputFormatCSVCommaSeparatedValuesCompressionGZIP != nil {
			compression = &shared.DestinationS3OutputFormatCSVCommaSeparatedValuesCompression{
				DestinationS3OutputFormatCSVCommaSeparatedValuesCompressionGZIP: destinationS3OutputFormatCSVCommaSeparatedValuesCompressionGZIP,
			}
		}
		flattening := shared.DestinationS3OutputFormatCSVCommaSeparatedValuesFlattening(r.Configuration.Format.DestinationS3OutputFormatCSVCommaSeparatedValues.Flattening.ValueString())
		formatType1 := shared.DestinationS3OutputFormatCSVCommaSeparatedValuesFormatType(r.Configuration.Format.DestinationS3OutputFormatCSVCommaSeparatedValues.FormatType.ValueString())
		destinationS3OutputFormatCSVCommaSeparatedValues = &shared.DestinationS3OutputFormatCSVCommaSeparatedValues{
			Compression: compression,
			Flattening:  flattening,
			FormatType:  formatType1,
		}
	}
	if destinationS3OutputFormatCSVCommaSeparatedValues != nil {
		format = shared.DestinationS3OutputFormat{
			DestinationS3OutputFormatCSVCommaSeparatedValues: destinationS3OutputFormatCSVCommaSeparatedValues,
		}
	}
	var destinationS3OutputFormatJSONLinesNewlineDelimitedJSON *shared.DestinationS3OutputFormatJSONLinesNewlineDelimitedJSON
	if r.Configuration.Format.DestinationS3OutputFormatJSONLinesNewlineDelimitedJSON != nil {
		var compression1 *shared.DestinationS3OutputFormatJSONLinesNewlineDelimitedJSONCompression
		var destinationS3OutputFormatJSONLinesNewlineDelimitedJSONCompressionNoCompression *shared.DestinationS3OutputFormatJSONLinesNewlineDelimitedJSONCompressionNoCompression
		if r.Configuration.Format.DestinationS3OutputFormatJSONLinesNewlineDelimitedJSON.Compression.DestinationS3OutputFormatJSONLinesNewlineDelimitedJSONCompressionNoCompression != nil {
			compressionType2 := new(shared.DestinationS3OutputFormatJSONLinesNewlineDelimitedJSONCompressionNoCompressionCompressionType)
			if !r.Configuration.Format.DestinationS3OutputFormatJSONLinesNewlineDelimitedJSON.Compression.DestinationS3OutputFormatJSONLinesNewlineDelimitedJSONCompressionNoCompression.CompressionType.IsUnknown() && !r.Configuration.Format.DestinationS3OutputFormatJSONLinesNewlineDelimitedJSON.Compression.DestinationS3OutputFormatJSONLinesNewlineDelimitedJSONCompressionNoCompression.CompressionType.IsNull() {
				*compressionType2 = shared.DestinationS3OutputFormatJSONLinesNewlineDelimitedJSONCompressionNoCompressionCompressionType(r.Configuration.Format.DestinationS3OutputFormatJSONLinesNewlineDelimitedJSON.Compression.DestinationS3OutputFormatJSONLinesNewlineDelimitedJSONCompressionNoCompression.CompressionType.ValueString())
			} else {
				compressionType2 = nil
			}
			destinationS3OutputFormatJSONLinesNewlineDelimitedJSONCompressionNoCompression = &shared.DestinationS3OutputFormatJSONLinesNewlineDelimitedJSONCompressionNoCompression{
				CompressionType: compressionType2,
			}
		}
		if destinationS3OutputFormatJSONLinesNewlineDelimitedJSONCompressionNoCompression != nil {
			compression1 = &shared.DestinationS3OutputFormatJSONLinesNewlineDelimitedJSONCompression{
				DestinationS3OutputFormatJSONLinesNewlineDelimitedJSONCompressionNoCompression: destinationS3OutputFormatJSONLinesNewlineDelimitedJSONCompressionNoCompression,
			}
		}
		var destinationS3OutputFormatJSONLinesNewlineDelimitedJSONCompressionGZIP *shared.DestinationS3OutputFormatJSONLinesNewlineDelimitedJSONCompressionGZIP
		if r.Configuration.Format.DestinationS3OutputFormatJSONLinesNewlineDelimitedJSON.Compression.DestinationS3OutputFormatJSONLinesNewlineDelimitedJSONCompressionGZIP != nil {
			compressionType3 := new(shared.DestinationS3OutputFormatJSONLinesNewlineDelimitedJSONCompressionGZIPCompressionType)
			if !r.Configuration.Format.DestinationS3OutputFormatJSONLinesNewlineDelimitedJSON.Compression.DestinationS3OutputFormatJSONLinesNewlineDelimitedJSONCompressionGZIP.CompressionType.IsUnknown() && !r.Configuration.Format.DestinationS3OutputFormatJSONLinesNewlineDelimitedJSON.Compression.DestinationS3OutputFormatJSONLinesNewlineDelimitedJSONCompressionGZIP.CompressionType.IsNull() {
				*compressionType3 = shared.DestinationS3OutputFormatJSONLinesNewlineDelimitedJSONCompressionGZIPCompressionType(r.Configuration.Format.DestinationS3OutputFormatJSONLinesNewlineDelimitedJSON.Compression.DestinationS3OutputFormatJSONLinesNewlineDelimitedJSONCompressionGZIP.CompressionType.ValueString())
			} else {
				compressionType3 = nil
			}
			destinationS3OutputFormatJSONLinesNewlineDelimitedJSONCompressionGZIP = &shared.DestinationS3OutputFormatJSONLinesNewlineDelimitedJSONCompressionGZIP{
				CompressionType: compressionType3,
			}
		}
		if destinationS3OutputFormatJSONLinesNewlineDelimitedJSONCompressionGZIP != nil {
			compression1 = &shared.DestinationS3OutputFormatJSONLinesNewlineDelimitedJSONCompression{
				DestinationS3OutputFormatJSONLinesNewlineDelimitedJSONCompressionGZIP: destinationS3OutputFormatJSONLinesNewlineDelimitedJSONCompressionGZIP,
			}
		}
		flattening1 := new(shared.DestinationS3OutputFormatJSONLinesNewlineDelimitedJSONFlattening)
		if !r.Configuration.Format.DestinationS3OutputFormatJSONLinesNewlineDelimitedJSON.Flattening.IsUnknown() && !r.Configuration.Format.DestinationS3OutputFormatJSONLinesNewlineDelimitedJSON.Flattening.IsNull() {
			*flattening1 = shared.DestinationS3OutputFormatJSONLinesNewlineDelimitedJSONFlattening(r.Configuration.Format.DestinationS3OutputFormatJSONLinesNewlineDelimitedJSON.Flattening.ValueString())
		} else {
			flattening1 = nil
		}
		formatType2 := shared.DestinationS3OutputFormatJSONLinesNewlineDelimitedJSONFormatType(r.Configuration.Format.DestinationS3OutputFormatJSONLinesNewlineDelimitedJSON.FormatType.ValueString())
		destinationS3OutputFormatJSONLinesNewlineDelimitedJSON = &shared.DestinationS3OutputFormatJSONLinesNewlineDelimitedJSON{
			Compression: compression1,
			Flattening:  flattening1,
			FormatType:  formatType2,
		}
	}
	if destinationS3OutputFormatJSONLinesNewlineDelimitedJSON != nil {
		format = shared.DestinationS3OutputFormat{
			DestinationS3OutputFormatJSONLinesNewlineDelimitedJSON: destinationS3OutputFormatJSONLinesNewlineDelimitedJSON,
		}
	}
	var destinationS3OutputFormatParquetColumnarStorage *shared.DestinationS3OutputFormatParquetColumnarStorage
	if r.Configuration.Format.DestinationS3OutputFormatParquetColumnarStorage != nil {
		blockSizeMb := new(int64)
		if !r.Configuration.Format.DestinationS3OutputFormatParquetColumnarStorage.BlockSizeMb.IsUnknown() && !r.Configuration.Format.DestinationS3OutputFormatParquetColumnarStorage.BlockSizeMb.IsNull() {
			*blockSizeMb = r.Configuration.Format.DestinationS3OutputFormatParquetColumnarStorage.BlockSizeMb.ValueInt64()
		} else {
			blockSizeMb = nil
		}
		compressionCodec1 := new(shared.DestinationS3OutputFormatParquetColumnarStorageCompressionCodec)
		if !r.Configuration.Format.DestinationS3OutputFormatParquetColumnarStorage.CompressionCodec.IsUnknown() && !r.Configuration.Format.DestinationS3OutputFormatParquetColumnarStorage.CompressionCodec.IsNull() {
			*compressionCodec1 = shared.DestinationS3OutputFormatParquetColumnarStorageCompressionCodec(r.Configuration.Format.DestinationS3OutputFormatParquetColumnarStorage.CompressionCodec.ValueString())
		} else {
			compressionCodec1 = nil
		}
		dictionaryEncoding := new(bool)
		if !r.Configuration.Format.DestinationS3OutputFormatParquetColumnarStorage.DictionaryEncoding.IsUnknown() && !r.Configuration.Format.DestinationS3OutputFormatParquetColumnarStorage.DictionaryEncoding.IsNull() {
			*dictionaryEncoding = r.Configuration.Format.DestinationS3OutputFormatParquetColumnarStorage.DictionaryEncoding.ValueBool()
		} else {
			dictionaryEncoding = nil
		}
		dictionaryPageSizeKb := new(int64)
		if !r.Configuration.Format.DestinationS3OutputFormatParquetColumnarStorage.DictionaryPageSizeKb.IsUnknown() && !r.Configuration.Format.DestinationS3OutputFormatParquetColumnarStorage.DictionaryPageSizeKb.IsNull() {
			*dictionaryPageSizeKb = r.Configuration.Format.DestinationS3OutputFormatParquetColumnarStorage.DictionaryPageSizeKb.ValueInt64()
		} else {
			dictionaryPageSizeKb = nil
		}
		formatType3 := shared.DestinationS3OutputFormatParquetColumnarStorageFormatType(r.Configuration.Format.DestinationS3OutputFormatParquetColumnarStorage.FormatType.ValueString())
		maxPaddingSizeMb := new(int64)
		if !r.Configuration.Format.DestinationS3OutputFormatParquetColumnarStorage.MaxPaddingSizeMb.IsUnknown() && !r.Configuration.Format.DestinationS3OutputFormatParquetColumnarStorage.MaxPaddingSizeMb.IsNull() {
			*maxPaddingSizeMb = r.Configuration.Format.DestinationS3OutputFormatParquetColumnarStorage.MaxPaddingSizeMb.ValueInt64()
		} else {
			maxPaddingSizeMb = nil
		}
		pageSizeKb := new(int64)
		if !r.Configuration.Format.DestinationS3OutputFormatParquetColumnarStorage.PageSizeKb.IsUnknown() && !r.Configuration.Format.DestinationS3OutputFormatParquetColumnarStorage.PageSizeKb.IsNull() {
			*pageSizeKb = r.Configuration.Format.DestinationS3OutputFormatParquetColumnarStorage.PageSizeKb.ValueInt64()
		} else {
			pageSizeKb = nil
		}
		destinationS3OutputFormatParquetColumnarStorage = &shared.DestinationS3OutputFormatParquetColumnarStorage{
			BlockSizeMb:          blockSizeMb,
			CompressionCodec:     compressionCodec1,
			DictionaryEncoding:   dictionaryEncoding,
			DictionaryPageSizeKb: dictionaryPageSizeKb,
			FormatType:           formatType3,
			MaxPaddingSizeMb:     maxPaddingSizeMb,
			PageSizeKb:           pageSizeKb,
		}
	}
	if destinationS3OutputFormatParquetColumnarStorage != nil {
		format = shared.DestinationS3OutputFormat{
			DestinationS3OutputFormatParquetColumnarStorage: destinationS3OutputFormatParquetColumnarStorage,
		}
	}
	s3BucketName := r.Configuration.S3BucketName.ValueString()
	s3BucketPath := r.Configuration.S3BucketPath.ValueString()
	s3BucketRegion := shared.DestinationS3S3BucketRegion(r.Configuration.S3BucketRegion.ValueString())
	s3Endpoint := new(string)
	if !r.Configuration.S3Endpoint.IsUnknown() && !r.Configuration.S3Endpoint.IsNull() {
		*s3Endpoint = r.Configuration.S3Endpoint.ValueString()
	} else {
		s3Endpoint = nil
	}
	s3PathFormat := new(string)
	if !r.Configuration.S3PathFormat.IsUnknown() && !r.Configuration.S3PathFormat.IsNull() {
		*s3PathFormat = r.Configuration.S3PathFormat.ValueString()
	} else {
		s3PathFormat = nil
	}
	secretAccessKey := new(string)
	if !r.Configuration.SecretAccessKey.IsUnknown() && !r.Configuration.SecretAccessKey.IsNull() {
		*secretAccessKey = r.Configuration.SecretAccessKey.ValueString()
	} else {
		secretAccessKey = nil
	}
	configuration := shared.DestinationS3{
		AccessKeyID:     accessKeyID,
		DestinationType: destinationType,
		FileNamePattern: fileNamePattern,
		Format:          format,
		S3BucketName:    s3BucketName,
		S3BucketPath:    s3BucketPath,
		S3BucketRegion:  s3BucketRegion,
		S3Endpoint:      s3Endpoint,
		S3PathFormat:    s3PathFormat,
		SecretAccessKey: secretAccessKey,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.DestinationS3CreateRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *DestinationS3ResourceModel) ToDeleteSDKType() *shared.DestinationS3CreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *DestinationS3ResourceModel) RefreshFromCreateResponse(resp *shared.DestinationResponse) {
	r.DestinationID = types.StringValue(resp.DestinationID)
	r.DestinationType = types.StringValue(resp.DestinationType)
	r.Name = types.StringValue(resp.Name)
	r.WorkspaceID = types.StringValue(resp.WorkspaceID)
}
