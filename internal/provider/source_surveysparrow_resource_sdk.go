// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"airbyte/internal/sdk/pkg/models/shared"
	"encoding/json"
)

func (r *SourceSurveySparrowResourceModel) ToCreateSDKType() *shared.SourceSurveySparrowCreateRequest {
	accessToken := r.Configuration.AccessToken.ValueString()
	var region *shared.SourceSurveySparrowBaseURL
	var sourceSurveySparrowBaseURLEUBasedAccount *shared.SourceSurveySparrowBaseURLEUBasedAccount
	if r.Configuration.Region.SourceSurveySparrowBaseURLEUBasedAccount != nil {
		urlBase := new(shared.SourceSurveySparrowBaseURLEUBasedAccountURLBaseEnum)
		if !r.Configuration.Region.SourceSurveySparrowBaseURLEUBasedAccount.URLBase.IsUnknown() && !r.Configuration.Region.SourceSurveySparrowBaseURLEUBasedAccount.URLBase.IsNull() {
			*urlBase = shared.SourceSurveySparrowBaseURLEUBasedAccountURLBaseEnum(r.Configuration.Region.SourceSurveySparrowBaseURLEUBasedAccount.URLBase.ValueString())
		} else {
			urlBase = nil
		}
		sourceSurveySparrowBaseURLEUBasedAccount = &shared.SourceSurveySparrowBaseURLEUBasedAccount{
			URLBase: urlBase,
		}
	}
	if sourceSurveySparrowBaseURLEUBasedAccount != nil {
		region = &shared.SourceSurveySparrowBaseURL{
			SourceSurveySparrowBaseURLEUBasedAccount: sourceSurveySparrowBaseURLEUBasedAccount,
		}
	}
	var sourceSurveySparrowBaseURLGlobalAccount *shared.SourceSurveySparrowBaseURLGlobalAccount
	if r.Configuration.Region.SourceSurveySparrowBaseURLGlobalAccount != nil {
		urlBase1 := new(shared.SourceSurveySparrowBaseURLGlobalAccountURLBaseEnum)
		if !r.Configuration.Region.SourceSurveySparrowBaseURLGlobalAccount.URLBase.IsUnknown() && !r.Configuration.Region.SourceSurveySparrowBaseURLGlobalAccount.URLBase.IsNull() {
			*urlBase1 = shared.SourceSurveySparrowBaseURLGlobalAccountURLBaseEnum(r.Configuration.Region.SourceSurveySparrowBaseURLGlobalAccount.URLBase.ValueString())
		} else {
			urlBase1 = nil
		}
		sourceSurveySparrowBaseURLGlobalAccount = &shared.SourceSurveySparrowBaseURLGlobalAccount{
			URLBase: urlBase1,
		}
	}
	if sourceSurveySparrowBaseURLGlobalAccount != nil {
		region = &shared.SourceSurveySparrowBaseURL{
			SourceSurveySparrowBaseURLGlobalAccount: sourceSurveySparrowBaseURLGlobalAccount,
		}
	}
	sourceType := shared.SourceSurveySparrowSurveySparrowEnum(r.Configuration.SourceType.ValueString())
	surveyID := make([]interface{}, 0)
	for _, surveyIDItem := range r.Configuration.SurveyID {
		var surveyIDTmp interface{}
		_ = json.Unmarshal([]byte(surveyIDItem.ValueString()), &surveyIDTmp)
		surveyID = append(surveyID, surveyIDTmp)
	}
	configuration := shared.SourceSurveySparrow{
		AccessToken: accessToken,
		Region:      region,
		SourceType:  sourceType,
		SurveyID:    surveyID,
	}
	name := r.Name.ValueString()
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceSurveySparrowCreateRequest{
		Configuration: configuration,
		Name:          name,
		SecretID:      secretID,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceSurveySparrowResourceModel) ToDeleteSDKType() *shared.SourceSurveySparrowCreateRequest {
	out := r.ToCreateSDKType()
	return out
}
