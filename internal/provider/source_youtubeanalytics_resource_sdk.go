// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"airbyte/internal/sdk/pkg/models/shared"
	"encoding/json"
)

func (r *SourceYoutubeAnalyticsResourceModel) ToCreateSDKType() *shared.SourceYoutubeAnalyticsCreateRequest {
	clientID := r.Configuration.Credentials.ClientID.ValueString()
	clientSecret := r.Configuration.Credentials.ClientSecret.ValueString()
	refreshToken := r.Configuration.Credentials.RefreshToken.ValueString()
	additionalProperties := make(map[string]interface{})
	for additionalPropertiesKey, additionalPropertiesValue := range r.Configuration.Credentials.AdditionalProperties {
		var additionalPropertiesInst interface{}
		_ = json.Unmarshal([]byte(additionalPropertiesValue.ValueString()), &additionalPropertiesInst)
		additionalProperties[additionalPropertiesKey] = additionalPropertiesInst
	}
	credentials := shared.SourceYoutubeAnalyticsAuthenticateViaOAuth20{
		ClientID:             clientID,
		ClientSecret:         clientSecret,
		RefreshToken:         refreshToken,
		AdditionalProperties: additionalProperties,
	}
	sourceType := shared.SourceYoutubeAnalyticsYoutubeAnalyticsEnum(r.Configuration.SourceType.ValueString())
	configuration := shared.SourceYoutubeAnalytics{
		Credentials: credentials,
		SourceType:  sourceType,
	}
	name := r.Name.ValueString()
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceYoutubeAnalyticsCreateRequest{
		Configuration: configuration,
		Name:          name,
		SecretID:      secretID,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceYoutubeAnalyticsResourceModel) ToDeleteSDKType() *shared.SourceYoutubeAnalyticsCreateRequest {
	out := r.ToCreateSDKType()
	return out
}
