// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"airbyte/internal/sdk/pkg/models/shared"
	"encoding/json"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"math/big"
	"time"

	customTypes "airbyte/internal/sdk/pkg/types"
)

func (r *SourceResourceModel) ToSDKType() *shared.SourceCreateRequest {
	var configuration shared.SourceConfiguration
	var sourcePokeapi *shared.SourcePokeapi
	if r.Configuration.SourcePokeapi != nil {
		pokemonName := r.Configuration.SourcePokeapi.PokemonName.ValueString()
		sourceType := shared.SourcePokeapiPokeapiEnum(r.Configuration.SourcePokeapi.SourceType.ValueString())
		sourcePokeapi = &shared.SourcePokeapi{
			PokemonName: pokemonName,
			SourceType:  sourceType,
		}
	}
	if sourcePokeapi != nil {
		configuration = shared.SourceConfiguration{
			SourcePokeapi: sourcePokeapi,
		}
	}
	var sourceAirtable *shared.SourceAirtable
	if r.Configuration.SourceAirtable != nil {
		var credentials *shared.SourceAirtableAuthentication
		var sourceAirtableAuthenticationOAuth20 *shared.SourceAirtableAuthenticationOAuth20
		if r.Configuration.SourceAirtable.Credentials.SourceAirtableAuthenticationOAuth20 != nil {
			accessToken := new(string)
			if !r.Configuration.SourceAirtable.Credentials.SourceAirtableAuthenticationOAuth20.AccessToken.IsUnknown() && !r.Configuration.SourceAirtable.Credentials.SourceAirtableAuthenticationOAuth20.AccessToken.IsNull() {
				*accessToken = r.Configuration.SourceAirtable.Credentials.SourceAirtableAuthenticationOAuth20.AccessToken.ValueString()
			} else {
				accessToken = nil
			}
			authMethod := new(shared.SourceAirtableAuthenticationOAuth20AuthMethodEnum)
			if !r.Configuration.SourceAirtable.Credentials.SourceAirtableAuthenticationOAuth20.AuthMethod.IsUnknown() && !r.Configuration.SourceAirtable.Credentials.SourceAirtableAuthenticationOAuth20.AuthMethod.IsNull() {
				*authMethod = shared.SourceAirtableAuthenticationOAuth20AuthMethodEnum(r.Configuration.SourceAirtable.Credentials.SourceAirtableAuthenticationOAuth20.AuthMethod.ValueString())
			} else {
				authMethod = nil
			}
			clientID := r.Configuration.SourceAirtable.Credentials.SourceAirtableAuthenticationOAuth20.ClientID.ValueString()
			clientSecret := r.Configuration.SourceAirtable.Credentials.SourceAirtableAuthenticationOAuth20.ClientSecret.ValueString()
			refreshToken := r.Configuration.SourceAirtable.Credentials.SourceAirtableAuthenticationOAuth20.RefreshToken.ValueString()
			tokenExpiryDate := new(time.Time)
			if !r.Configuration.SourceAirtable.Credentials.SourceAirtableAuthenticationOAuth20.TokenExpiryDate.IsUnknown() && !r.Configuration.SourceAirtable.Credentials.SourceAirtableAuthenticationOAuth20.TokenExpiryDate.IsNull() {
				*tokenExpiryDate, _ = time.Parse(time.RFC3339Nano, r.Configuration.SourceAirtable.Credentials.SourceAirtableAuthenticationOAuth20.TokenExpiryDate.ValueString())
			} else {
				tokenExpiryDate = nil
			}
			sourceAirtableAuthenticationOAuth20 = &shared.SourceAirtableAuthenticationOAuth20{
				AccessToken:     accessToken,
				AuthMethod:      authMethod,
				ClientID:        clientID,
				ClientSecret:    clientSecret,
				RefreshToken:    refreshToken,
				TokenExpiryDate: tokenExpiryDate,
			}
		}
		if sourceAirtableAuthenticationOAuth20 != nil {
			credentials = &shared.SourceAirtableAuthentication{
				SourceAirtableAuthenticationOAuth20: sourceAirtableAuthenticationOAuth20,
			}
		}
		var sourceAirtableAuthenticationPersonalAccessToken *shared.SourceAirtableAuthenticationPersonalAccessToken
		if r.Configuration.SourceAirtable.Credentials.SourceAirtableAuthenticationPersonalAccessToken != nil {
			apiKey := r.Configuration.SourceAirtable.Credentials.SourceAirtableAuthenticationPersonalAccessToken.APIKey.ValueString()
			authMethod1 := new(shared.SourceAirtableAuthenticationPersonalAccessTokenAuthMethodEnum)
			if !r.Configuration.SourceAirtable.Credentials.SourceAirtableAuthenticationPersonalAccessToken.AuthMethod.IsUnknown() && !r.Configuration.SourceAirtable.Credentials.SourceAirtableAuthenticationPersonalAccessToken.AuthMethod.IsNull() {
				*authMethod1 = shared.SourceAirtableAuthenticationPersonalAccessTokenAuthMethodEnum(r.Configuration.SourceAirtable.Credentials.SourceAirtableAuthenticationPersonalAccessToken.AuthMethod.ValueString())
			} else {
				authMethod1 = nil
			}
			sourceAirtableAuthenticationPersonalAccessToken = &shared.SourceAirtableAuthenticationPersonalAccessToken{
				APIKey:     apiKey,
				AuthMethod: authMethod1,
			}
		}
		if sourceAirtableAuthenticationPersonalAccessToken != nil {
			credentials = &shared.SourceAirtableAuthentication{
				SourceAirtableAuthenticationPersonalAccessToken: sourceAirtableAuthenticationPersonalAccessToken,
			}
		}
		sourceType1 := shared.SourceAirtableAirtableEnum(r.Configuration.SourceAirtable.SourceType.ValueString())
		sourceAirtable = &shared.SourceAirtable{
			Credentials: credentials,
			SourceType:  sourceType1,
		}
	}
	if sourceAirtable != nil {
		configuration = shared.SourceConfiguration{
			SourceAirtable: sourceAirtable,
		}
	}
	var sourceAlloydb *shared.SourceAlloydb
	if r.Configuration.SourceAlloydb != nil {
		database := r.Configuration.SourceAlloydb.Database.ValueString()
		host := r.Configuration.SourceAlloydb.Host.ValueString()
		jdbcURLParams := new(string)
		if !r.Configuration.SourceAlloydb.JdbcURLParams.IsUnknown() && !r.Configuration.SourceAlloydb.JdbcURLParams.IsNull() {
			*jdbcURLParams = r.Configuration.SourceAlloydb.JdbcURLParams.ValueString()
		} else {
			jdbcURLParams = nil
		}
		password := new(string)
		if !r.Configuration.SourceAlloydb.Password.IsUnknown() && !r.Configuration.SourceAlloydb.Password.IsNull() {
			*password = r.Configuration.SourceAlloydb.Password.ValueString()
		} else {
			password = nil
		}
		port := r.Configuration.SourceAlloydb.Port.ValueInt64()
		var replicationMethod *shared.SourceAlloydbReplicationMethod
		var sourceAlloydbReplicationMethodStandard *shared.SourceAlloydbReplicationMethodStandard
		if r.Configuration.SourceAlloydb.ReplicationMethod.SourceAlloydbReplicationMethodStandard != nil {
			method := shared.SourceAlloydbReplicationMethodStandardMethodEnum(r.Configuration.SourceAlloydb.ReplicationMethod.SourceAlloydbReplicationMethodStandard.Method.ValueString())
			sourceAlloydbReplicationMethodStandard = &shared.SourceAlloydbReplicationMethodStandard{
				Method: method,
			}
		}
		if sourceAlloydbReplicationMethodStandard != nil {
			replicationMethod = &shared.SourceAlloydbReplicationMethod{
				SourceAlloydbReplicationMethodStandard: sourceAlloydbReplicationMethodStandard,
			}
		}
		var sourceAlloydbReplicationMethodLogicalReplicationCDC *shared.SourceAlloydbReplicationMethodLogicalReplicationCDC
		if r.Configuration.SourceAlloydb.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC != nil {
			initialWaitingSeconds := new(int64)
			if !r.Configuration.SourceAlloydb.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC.InitialWaitingSeconds.IsUnknown() && !r.Configuration.SourceAlloydb.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC.InitialWaitingSeconds.IsNull() {
				*initialWaitingSeconds = r.Configuration.SourceAlloydb.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC.InitialWaitingSeconds.ValueInt64()
			} else {
				initialWaitingSeconds = nil
			}
			lsnCommitBehaviour := new(shared.SourceAlloydbReplicationMethodLogicalReplicationCDCLSNCommitBehaviourEnum)
			if !r.Configuration.SourceAlloydb.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC.LsnCommitBehaviour.IsUnknown() && !r.Configuration.SourceAlloydb.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC.LsnCommitBehaviour.IsNull() {
				*lsnCommitBehaviour = shared.SourceAlloydbReplicationMethodLogicalReplicationCDCLSNCommitBehaviourEnum(r.Configuration.SourceAlloydb.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC.LsnCommitBehaviour.ValueString())
			} else {
				lsnCommitBehaviour = nil
			}
			method1 := shared.SourceAlloydbReplicationMethodLogicalReplicationCDCMethodEnum(r.Configuration.SourceAlloydb.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC.Method.ValueString())
			plugin := new(shared.SourceAlloydbReplicationMethodLogicalReplicationCDCPluginEnum)
			if !r.Configuration.SourceAlloydb.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC.Plugin.IsUnknown() && !r.Configuration.SourceAlloydb.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC.Plugin.IsNull() {
				*plugin = shared.SourceAlloydbReplicationMethodLogicalReplicationCDCPluginEnum(r.Configuration.SourceAlloydb.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC.Plugin.ValueString())
			} else {
				plugin = nil
			}
			publication := r.Configuration.SourceAlloydb.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC.Publication.ValueString()
			replicationSlot := r.Configuration.SourceAlloydb.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC.ReplicationSlot.ValueString()
			sourceAlloydbReplicationMethodLogicalReplicationCDC = &shared.SourceAlloydbReplicationMethodLogicalReplicationCDC{
				InitialWaitingSeconds: initialWaitingSeconds,
				LsnCommitBehaviour:    lsnCommitBehaviour,
				Method:                method1,
				Plugin:                plugin,
				Publication:           publication,
				ReplicationSlot:       replicationSlot,
			}
		}
		if sourceAlloydbReplicationMethodLogicalReplicationCDC != nil {
			replicationMethod = &shared.SourceAlloydbReplicationMethod{
				SourceAlloydbReplicationMethodLogicalReplicationCDC: sourceAlloydbReplicationMethodLogicalReplicationCDC,
			}
		}
		schemas := make([]string, 0)
		for _, schemasItem := range r.Configuration.SourceAlloydb.Schemas {
			schemas = append(schemas, schemasItem.ValueString())
		}
		sourceType2 := shared.SourceAlloydbAlloydbEnum(r.Configuration.SourceAlloydb.SourceType.ValueString())
		var sslMode *shared.SourceAlloydbSSLModes
		var sourceAlloydbSSLModesAllow *shared.SourceAlloydbSSLModesAllow
		if r.Configuration.SourceAlloydb.SslMode.SourceAlloydbSSLModesAllow != nil {
			mode := shared.SourceAlloydbSSLModesAllowModeEnum(r.Configuration.SourceAlloydb.SslMode.SourceAlloydbSSLModesAllow.Mode.ValueString())
			sourceAlloydbSSLModesAllow = &shared.SourceAlloydbSSLModesAllow{
				Mode: mode,
			}
		}
		if sourceAlloydbSSLModesAllow != nil {
			sslMode = &shared.SourceAlloydbSSLModes{
				SourceAlloydbSSLModesAllow: sourceAlloydbSSLModesAllow,
			}
		}
		var sourceAlloydbSSLModesPrefer *shared.SourceAlloydbSSLModesPrefer
		if r.Configuration.SourceAlloydb.SslMode.SourceAlloydbSSLModesPrefer != nil {
			mode1 := shared.SourceAlloydbSSLModesPreferModeEnum(r.Configuration.SourceAlloydb.SslMode.SourceAlloydbSSLModesPrefer.Mode.ValueString())
			sourceAlloydbSSLModesPrefer = &shared.SourceAlloydbSSLModesPrefer{
				Mode: mode1,
			}
		}
		if sourceAlloydbSSLModesPrefer != nil {
			sslMode = &shared.SourceAlloydbSSLModes{
				SourceAlloydbSSLModesPrefer: sourceAlloydbSSLModesPrefer,
			}
		}
		var sourceAlloydbSSLModesRequire *shared.SourceAlloydbSSLModesRequire
		if r.Configuration.SourceAlloydb.SslMode.SourceAlloydbSSLModesRequire != nil {
			mode2 := shared.SourceAlloydbSSLModesRequireModeEnum(r.Configuration.SourceAlloydb.SslMode.SourceAlloydbSSLModesRequire.Mode.ValueString())
			sourceAlloydbSSLModesRequire = &shared.SourceAlloydbSSLModesRequire{
				Mode: mode2,
			}
		}
		if sourceAlloydbSSLModesRequire != nil {
			sslMode = &shared.SourceAlloydbSSLModes{
				SourceAlloydbSSLModesRequire: sourceAlloydbSSLModesRequire,
			}
		}
		var sourceAlloydbSSLModesVerifyCa *shared.SourceAlloydbSSLModesVerifyCa
		if r.Configuration.SourceAlloydb.SslMode.SourceAlloydbSSLModesVerifyCa != nil {
			caCertificate := r.Configuration.SourceAlloydb.SslMode.SourceAlloydbSSLModesVerifyCa.CaCertificate.ValueString()
			clientCertificate := new(string)
			if !r.Configuration.SourceAlloydb.SslMode.SourceAlloydbSSLModesVerifyCa.ClientCertificate.IsUnknown() && !r.Configuration.SourceAlloydb.SslMode.SourceAlloydbSSLModesVerifyCa.ClientCertificate.IsNull() {
				*clientCertificate = r.Configuration.SourceAlloydb.SslMode.SourceAlloydbSSLModesVerifyCa.ClientCertificate.ValueString()
			} else {
				clientCertificate = nil
			}
			clientKey := new(string)
			if !r.Configuration.SourceAlloydb.SslMode.SourceAlloydbSSLModesVerifyCa.ClientKey.IsUnknown() && !r.Configuration.SourceAlloydb.SslMode.SourceAlloydbSSLModesVerifyCa.ClientKey.IsNull() {
				*clientKey = r.Configuration.SourceAlloydb.SslMode.SourceAlloydbSSLModesVerifyCa.ClientKey.ValueString()
			} else {
				clientKey = nil
			}
			clientKeyPassword := new(string)
			if !r.Configuration.SourceAlloydb.SslMode.SourceAlloydbSSLModesVerifyCa.ClientKeyPassword.IsUnknown() && !r.Configuration.SourceAlloydb.SslMode.SourceAlloydbSSLModesVerifyCa.ClientKeyPassword.IsNull() {
				*clientKeyPassword = r.Configuration.SourceAlloydb.SslMode.SourceAlloydbSSLModesVerifyCa.ClientKeyPassword.ValueString()
			} else {
				clientKeyPassword = nil
			}
			mode3 := shared.SourceAlloydbSSLModesVerifyCaModeEnum(r.Configuration.SourceAlloydb.SslMode.SourceAlloydbSSLModesVerifyCa.Mode.ValueString())
			sourceAlloydbSSLModesVerifyCa = &shared.SourceAlloydbSSLModesVerifyCa{
				CaCertificate:     caCertificate,
				ClientCertificate: clientCertificate,
				ClientKey:         clientKey,
				ClientKeyPassword: clientKeyPassword,
				Mode:              mode3,
			}
		}
		if sourceAlloydbSSLModesVerifyCa != nil {
			sslMode = &shared.SourceAlloydbSSLModes{
				SourceAlloydbSSLModesVerifyCa: sourceAlloydbSSLModesVerifyCa,
			}
		}
		var sourceAlloydbSSLModesVerifyFull *shared.SourceAlloydbSSLModesVerifyFull
		if r.Configuration.SourceAlloydb.SslMode.SourceAlloydbSSLModesVerifyFull != nil {
			caCertificate1 := r.Configuration.SourceAlloydb.SslMode.SourceAlloydbSSLModesVerifyFull.CaCertificate.ValueString()
			clientCertificate1 := new(string)
			if !r.Configuration.SourceAlloydb.SslMode.SourceAlloydbSSLModesVerifyFull.ClientCertificate.IsUnknown() && !r.Configuration.SourceAlloydb.SslMode.SourceAlloydbSSLModesVerifyFull.ClientCertificate.IsNull() {
				*clientCertificate1 = r.Configuration.SourceAlloydb.SslMode.SourceAlloydbSSLModesVerifyFull.ClientCertificate.ValueString()
			} else {
				clientCertificate1 = nil
			}
			clientKey1 := new(string)
			if !r.Configuration.SourceAlloydb.SslMode.SourceAlloydbSSLModesVerifyFull.ClientKey.IsUnknown() && !r.Configuration.SourceAlloydb.SslMode.SourceAlloydbSSLModesVerifyFull.ClientKey.IsNull() {
				*clientKey1 = r.Configuration.SourceAlloydb.SslMode.SourceAlloydbSSLModesVerifyFull.ClientKey.ValueString()
			} else {
				clientKey1 = nil
			}
			clientKeyPassword1 := new(string)
			if !r.Configuration.SourceAlloydb.SslMode.SourceAlloydbSSLModesVerifyFull.ClientKeyPassword.IsUnknown() && !r.Configuration.SourceAlloydb.SslMode.SourceAlloydbSSLModesVerifyFull.ClientKeyPassword.IsNull() {
				*clientKeyPassword1 = r.Configuration.SourceAlloydb.SslMode.SourceAlloydbSSLModesVerifyFull.ClientKeyPassword.ValueString()
			} else {
				clientKeyPassword1 = nil
			}
			mode4 := shared.SourceAlloydbSSLModesVerifyFullModeEnum(r.Configuration.SourceAlloydb.SslMode.SourceAlloydbSSLModesVerifyFull.Mode.ValueString())
			sourceAlloydbSSLModesVerifyFull = &shared.SourceAlloydbSSLModesVerifyFull{
				CaCertificate:     caCertificate1,
				ClientCertificate: clientCertificate1,
				ClientKey:         clientKey1,
				ClientKeyPassword: clientKeyPassword1,
				Mode:              mode4,
			}
		}
		if sourceAlloydbSSLModesVerifyFull != nil {
			sslMode = &shared.SourceAlloydbSSLModes{
				SourceAlloydbSSLModesVerifyFull: sourceAlloydbSSLModesVerifyFull,
			}
		}
		var tunnelMethod *shared.SourceAlloydbSSHTunnelMethod
		var sourceAlloydbSSHTunnelMethodNoTunnel *shared.SourceAlloydbSSHTunnelMethodNoTunnel
		if r.Configuration.SourceAlloydb.TunnelMethod.SourceAlloydbSSHTunnelMethodNoTunnel != nil {
			tunnelMethod1 := shared.SourceAlloydbSSHTunnelMethodNoTunnelTunnelMethodEnum(r.Configuration.SourceAlloydb.TunnelMethod.SourceAlloydbSSHTunnelMethodNoTunnel.TunnelMethod.ValueString())
			sourceAlloydbSSHTunnelMethodNoTunnel = &shared.SourceAlloydbSSHTunnelMethodNoTunnel{
				TunnelMethod: tunnelMethod1,
			}
		}
		if sourceAlloydbSSHTunnelMethodNoTunnel != nil {
			tunnelMethod = &shared.SourceAlloydbSSHTunnelMethod{
				SourceAlloydbSSHTunnelMethodNoTunnel: sourceAlloydbSSHTunnelMethodNoTunnel,
			}
		}
		var sourceAlloydbSSHTunnelMethodSSHKeyAuthentication *shared.SourceAlloydbSSHTunnelMethodSSHKeyAuthentication
		if r.Configuration.SourceAlloydb.TunnelMethod.SourceAlloydbSSHTunnelMethodSSHKeyAuthentication != nil {
			sshKey := r.Configuration.SourceAlloydb.TunnelMethod.SourceAlloydbSSHTunnelMethodSSHKeyAuthentication.SSHKey.ValueString()
			tunnelHost := r.Configuration.SourceAlloydb.TunnelMethod.SourceAlloydbSSHTunnelMethodSSHKeyAuthentication.TunnelHost.ValueString()
			tunnelMethod2 := shared.SourceAlloydbSSHTunnelMethodSSHKeyAuthenticationTunnelMethodEnum(r.Configuration.SourceAlloydb.TunnelMethod.SourceAlloydbSSHTunnelMethodSSHKeyAuthentication.TunnelMethod.ValueString())
			tunnelPort := r.Configuration.SourceAlloydb.TunnelMethod.SourceAlloydbSSHTunnelMethodSSHKeyAuthentication.TunnelPort.ValueInt64()
			tunnelUser := r.Configuration.SourceAlloydb.TunnelMethod.SourceAlloydbSSHTunnelMethodSSHKeyAuthentication.TunnelUser.ValueString()
			sourceAlloydbSSHTunnelMethodSSHKeyAuthentication = &shared.SourceAlloydbSSHTunnelMethodSSHKeyAuthentication{
				SSHKey:       sshKey,
				TunnelHost:   tunnelHost,
				TunnelMethod: tunnelMethod2,
				TunnelPort:   tunnelPort,
				TunnelUser:   tunnelUser,
			}
		}
		if sourceAlloydbSSHTunnelMethodSSHKeyAuthentication != nil {
			tunnelMethod = &shared.SourceAlloydbSSHTunnelMethod{
				SourceAlloydbSSHTunnelMethodSSHKeyAuthentication: sourceAlloydbSSHTunnelMethodSSHKeyAuthentication,
			}
		}
		var sourceAlloydbSSHTunnelMethodPasswordAuthentication *shared.SourceAlloydbSSHTunnelMethodPasswordAuthentication
		if r.Configuration.SourceAlloydb.TunnelMethod.SourceAlloydbSSHTunnelMethodPasswordAuthentication != nil {
			tunnelHost1 := r.Configuration.SourceAlloydb.TunnelMethod.SourceAlloydbSSHTunnelMethodPasswordAuthentication.TunnelHost.ValueString()
			tunnelMethod3 := shared.SourceAlloydbSSHTunnelMethodPasswordAuthenticationTunnelMethodEnum(r.Configuration.SourceAlloydb.TunnelMethod.SourceAlloydbSSHTunnelMethodPasswordAuthentication.TunnelMethod.ValueString())
			tunnelPort1 := r.Configuration.SourceAlloydb.TunnelMethod.SourceAlloydbSSHTunnelMethodPasswordAuthentication.TunnelPort.ValueInt64()
			tunnelUser1 := r.Configuration.SourceAlloydb.TunnelMethod.SourceAlloydbSSHTunnelMethodPasswordAuthentication.TunnelUser.ValueString()
			tunnelUserPassword := r.Configuration.SourceAlloydb.TunnelMethod.SourceAlloydbSSHTunnelMethodPasswordAuthentication.TunnelUserPassword.ValueString()
			sourceAlloydbSSHTunnelMethodPasswordAuthentication = &shared.SourceAlloydbSSHTunnelMethodPasswordAuthentication{
				TunnelHost:         tunnelHost1,
				TunnelMethod:       tunnelMethod3,
				TunnelPort:         tunnelPort1,
				TunnelUser:         tunnelUser1,
				TunnelUserPassword: tunnelUserPassword,
			}
		}
		if sourceAlloydbSSHTunnelMethodPasswordAuthentication != nil {
			tunnelMethod = &shared.SourceAlloydbSSHTunnelMethod{
				SourceAlloydbSSHTunnelMethodPasswordAuthentication: sourceAlloydbSSHTunnelMethodPasswordAuthentication,
			}
		}
		username := r.Configuration.SourceAlloydb.Username.ValueString()
		sourceAlloydb = &shared.SourceAlloydb{
			Database:          database,
			Host:              host,
			JdbcURLParams:     jdbcURLParams,
			Password:          password,
			Port:              port,
			ReplicationMethod: replicationMethod,
			Schemas:           schemas,
			SourceType:        sourceType2,
			SslMode:           sslMode,
			TunnelMethod:      tunnelMethod,
			Username:          username,
		}
	}
	if sourceAlloydb != nil {
		configuration = shared.SourceConfiguration{
			SourceAlloydb: sourceAlloydb,
		}
	}
	var sourceAmazonAds *shared.SourceAmazonAds
	if r.Configuration.SourceAmazonAds != nil {
		authType := new(shared.SourceAmazonAdsAuthTypeEnum)
		if !r.Configuration.SourceAmazonAds.AuthType.IsUnknown() && !r.Configuration.SourceAmazonAds.AuthType.IsNull() {
			*authType = shared.SourceAmazonAdsAuthTypeEnum(r.Configuration.SourceAmazonAds.AuthType.ValueString())
		} else {
			authType = nil
		}
		clientId1 := r.Configuration.SourceAmazonAds.ClientID.ValueString()
		clientSecret1 := r.Configuration.SourceAmazonAds.ClientSecret.ValueString()
		lookBackWindow := new(int64)
		if !r.Configuration.SourceAmazonAds.LookBackWindow.IsUnknown() && !r.Configuration.SourceAmazonAds.LookBackWindow.IsNull() {
			*lookBackWindow = r.Configuration.SourceAmazonAds.LookBackWindow.ValueInt64()
		} else {
			lookBackWindow = nil
		}
		profiles := make([]int64, 0)
		for _, profilesItem := range r.Configuration.SourceAmazonAds.Profiles {
			profiles = append(profiles, profilesItem.ValueInt64())
		}
		refreshToken1 := r.Configuration.SourceAmazonAds.RefreshToken.ValueString()
		region := new(shared.SourceAmazonAdsRegionEnum)
		if !r.Configuration.SourceAmazonAds.Region.IsUnknown() && !r.Configuration.SourceAmazonAds.Region.IsNull() {
			*region = shared.SourceAmazonAdsRegionEnum(r.Configuration.SourceAmazonAds.Region.ValueString())
		} else {
			region = nil
		}
		reportRecordTypes := make([]shared.SourceAmazonAdsReportRecordTypesEnum, 0)
		for _, reportRecordTypesItem := range r.Configuration.SourceAmazonAds.ReportRecordTypes {
			reportRecordTypes = append(reportRecordTypes, shared.SourceAmazonAdsReportRecordTypesEnum(reportRecordTypesItem.ValueString()))
		}
		sourceType3 := shared.SourceAmazonAdsAmazonAdsEnum(r.Configuration.SourceAmazonAds.SourceType.ValueString())
		startDate := new(string)
		if !r.Configuration.SourceAmazonAds.StartDate.IsUnknown() && !r.Configuration.SourceAmazonAds.StartDate.IsNull() {
			*startDate = r.Configuration.SourceAmazonAds.StartDate.ValueString()
		} else {
			startDate = nil
		}
		stateFilter := make([]shared.SourceAmazonAdsStateFilterEnum, 0)
		for _, stateFilterItem := range r.Configuration.SourceAmazonAds.StateFilter {
			stateFilter = append(stateFilter, shared.SourceAmazonAdsStateFilterEnum(stateFilterItem.ValueString()))
		}
		sourceAmazonAds = &shared.SourceAmazonAds{
			AuthType:          authType,
			ClientID:          clientId1,
			ClientSecret:      clientSecret1,
			LookBackWindow:    lookBackWindow,
			Profiles:          profiles,
			RefreshToken:      refreshToken1,
			Region:            region,
			ReportRecordTypes: reportRecordTypes,
			SourceType:        sourceType3,
			StartDate:         startDate,
			StateFilter:       stateFilter,
		}
	}
	if sourceAmazonAds != nil {
		configuration = shared.SourceConfiguration{
			SourceAmazonAds: sourceAmazonAds,
		}
	}
	var sourceAmazonSellerPartner *shared.SourceAmazonSellerPartner
	if r.Configuration.SourceAmazonSellerPartner != nil {
		appID := r.Configuration.SourceAmazonSellerPartner.AppID.ValueString()
		authType1 := new(shared.SourceAmazonSellerPartnerAuthTypeEnum)
		if !r.Configuration.SourceAmazonSellerPartner.AuthType.IsUnknown() && !r.Configuration.SourceAmazonSellerPartner.AuthType.IsNull() {
			*authType1 = shared.SourceAmazonSellerPartnerAuthTypeEnum(r.Configuration.SourceAmazonSellerPartner.AuthType.ValueString())
		} else {
			authType1 = nil
		}
		awsAccessKey := new(string)
		if !r.Configuration.SourceAmazonSellerPartner.AwsAccessKey.IsUnknown() && !r.Configuration.SourceAmazonSellerPartner.AwsAccessKey.IsNull() {
			*awsAccessKey = r.Configuration.SourceAmazonSellerPartner.AwsAccessKey.ValueString()
		} else {
			awsAccessKey = nil
		}
		awsEnvironment := shared.SourceAmazonSellerPartnerAWSEnvironmentEnum(r.Configuration.SourceAmazonSellerPartner.AwsEnvironment.ValueString())
		awsSecretKey := new(string)
		if !r.Configuration.SourceAmazonSellerPartner.AwsSecretKey.IsUnknown() && !r.Configuration.SourceAmazonSellerPartner.AwsSecretKey.IsNull() {
			*awsSecretKey = r.Configuration.SourceAmazonSellerPartner.AwsSecretKey.ValueString()
		} else {
			awsSecretKey = nil
		}
		lwaAppID := r.Configuration.SourceAmazonSellerPartner.LwaAppID.ValueString()
		lwaClientSecret := r.Configuration.SourceAmazonSellerPartner.LwaClientSecret.ValueString()
		maxWaitSeconds := new(int64)
		if !r.Configuration.SourceAmazonSellerPartner.MaxWaitSeconds.IsUnknown() && !r.Configuration.SourceAmazonSellerPartner.MaxWaitSeconds.IsNull() {
			*maxWaitSeconds = r.Configuration.SourceAmazonSellerPartner.MaxWaitSeconds.ValueInt64()
		} else {
			maxWaitSeconds = nil
		}
		periodInDays := new(int64)
		if !r.Configuration.SourceAmazonSellerPartner.PeriodInDays.IsUnknown() && !r.Configuration.SourceAmazonSellerPartner.PeriodInDays.IsNull() {
			*periodInDays = r.Configuration.SourceAmazonSellerPartner.PeriodInDays.ValueInt64()
		} else {
			periodInDays = nil
		}
		refreshToken2 := r.Configuration.SourceAmazonSellerPartner.RefreshToken.ValueString()
		region1 := shared.SourceAmazonSellerPartnerAWSRegionEnum(r.Configuration.SourceAmazonSellerPartner.Region.ValueString())
		replicationEndDate := new(string)
		if !r.Configuration.SourceAmazonSellerPartner.ReplicationEndDate.IsUnknown() && !r.Configuration.SourceAmazonSellerPartner.ReplicationEndDate.IsNull() {
			*replicationEndDate = r.Configuration.SourceAmazonSellerPartner.ReplicationEndDate.ValueString()
		} else {
			replicationEndDate = nil
		}
		replicationStartDate := r.Configuration.SourceAmazonSellerPartner.ReplicationStartDate.ValueString()
		reportOptions := new(string)
		if !r.Configuration.SourceAmazonSellerPartner.ReportOptions.IsUnknown() && !r.Configuration.SourceAmazonSellerPartner.ReportOptions.IsNull() {
			*reportOptions = r.Configuration.SourceAmazonSellerPartner.ReportOptions.ValueString()
		} else {
			reportOptions = nil
		}
		roleArn := new(string)
		if !r.Configuration.SourceAmazonSellerPartner.RoleArn.IsUnknown() && !r.Configuration.SourceAmazonSellerPartner.RoleArn.IsNull() {
			*roleArn = r.Configuration.SourceAmazonSellerPartner.RoleArn.ValueString()
		} else {
			roleArn = nil
		}
		sourceType4 := shared.SourceAmazonSellerPartnerAmazonSellerPartnerEnum(r.Configuration.SourceAmazonSellerPartner.SourceType.ValueString())
		sourceAmazonSellerPartner = &shared.SourceAmazonSellerPartner{
			AppID:                appID,
			AuthType:             authType1,
			AwsAccessKey:         awsAccessKey,
			AwsEnvironment:       awsEnvironment,
			AwsSecretKey:         awsSecretKey,
			LwaAppID:             lwaAppID,
			LwaClientSecret:      lwaClientSecret,
			MaxWaitSeconds:       maxWaitSeconds,
			PeriodInDays:         periodInDays,
			RefreshToken:         refreshToken2,
			Region:               region1,
			ReplicationEndDate:   replicationEndDate,
			ReplicationStartDate: replicationStartDate,
			ReportOptions:        reportOptions,
			RoleArn:              roleArn,
			SourceType:           sourceType4,
		}
	}
	if sourceAmazonSellerPartner != nil {
		configuration = shared.SourceConfiguration{
			SourceAmazonSellerPartner: sourceAmazonSellerPartner,
		}
	}
	var sourceAmazonSqs *shared.SourceAmazonSqs
	if r.Configuration.SourceAmazonSqs != nil {
		accessKey := new(string)
		if !r.Configuration.SourceAmazonSqs.AccessKey.IsUnknown() && !r.Configuration.SourceAmazonSqs.AccessKey.IsNull() {
			*accessKey = r.Configuration.SourceAmazonSqs.AccessKey.ValueString()
		} else {
			accessKey = nil
		}
		attributesToReturn := new(string)
		if !r.Configuration.SourceAmazonSqs.AttributesToReturn.IsUnknown() && !r.Configuration.SourceAmazonSqs.AttributesToReturn.IsNull() {
			*attributesToReturn = r.Configuration.SourceAmazonSqs.AttributesToReturn.ValueString()
		} else {
			attributesToReturn = nil
		}
		deleteMessages := r.Configuration.SourceAmazonSqs.DeleteMessages.ValueBool()
		maxBatchSize := new(int64)
		if !r.Configuration.SourceAmazonSqs.MaxBatchSize.IsUnknown() && !r.Configuration.SourceAmazonSqs.MaxBatchSize.IsNull() {
			*maxBatchSize = r.Configuration.SourceAmazonSqs.MaxBatchSize.ValueInt64()
		} else {
			maxBatchSize = nil
		}
		maxWaitTime := new(int64)
		if !r.Configuration.SourceAmazonSqs.MaxWaitTime.IsUnknown() && !r.Configuration.SourceAmazonSqs.MaxWaitTime.IsNull() {
			*maxWaitTime = r.Configuration.SourceAmazonSqs.MaxWaitTime.ValueInt64()
		} else {
			maxWaitTime = nil
		}
		queueURL := r.Configuration.SourceAmazonSqs.QueueURL.ValueString()
		region2 := shared.SourceAmazonSqsAWSRegionEnum(r.Configuration.SourceAmazonSqs.Region.ValueString())
		secretKey := new(string)
		if !r.Configuration.SourceAmazonSqs.SecretKey.IsUnknown() && !r.Configuration.SourceAmazonSqs.SecretKey.IsNull() {
			*secretKey = r.Configuration.SourceAmazonSqs.SecretKey.ValueString()
		} else {
			secretKey = nil
		}
		sourceType5 := shared.SourceAmazonSqsAmazonSqsEnum(r.Configuration.SourceAmazonSqs.SourceType.ValueString())
		visibilityTimeout := new(int64)
		if !r.Configuration.SourceAmazonSqs.VisibilityTimeout.IsUnknown() && !r.Configuration.SourceAmazonSqs.VisibilityTimeout.IsNull() {
			*visibilityTimeout = r.Configuration.SourceAmazonSqs.VisibilityTimeout.ValueInt64()
		} else {
			visibilityTimeout = nil
		}
		sourceAmazonSqs = &shared.SourceAmazonSqs{
			AccessKey:          accessKey,
			AttributesToReturn: attributesToReturn,
			DeleteMessages:     deleteMessages,
			MaxBatchSize:       maxBatchSize,
			MaxWaitTime:        maxWaitTime,
			QueueURL:           queueURL,
			Region:             region2,
			SecretKey:          secretKey,
			SourceType:         sourceType5,
			VisibilityTimeout:  visibilityTimeout,
		}
	}
	if sourceAmazonSqs != nil {
		configuration = shared.SourceConfiguration{
			SourceAmazonSqs: sourceAmazonSqs,
		}
	}
	var sourceAmplitude *shared.SourceAmplitude
	if r.Configuration.SourceAmplitude != nil {
		apiKey1 := r.Configuration.SourceAmplitude.APIKey.ValueString()
		dataRegion := new(shared.SourceAmplitudeDataRegionEnum)
		if !r.Configuration.SourceAmplitude.DataRegion.IsUnknown() && !r.Configuration.SourceAmplitude.DataRegion.IsNull() {
			*dataRegion = shared.SourceAmplitudeDataRegionEnum(r.Configuration.SourceAmplitude.DataRegion.ValueString())
		} else {
			dataRegion = nil
		}
		var eventTimeInterval *shared.SourceAmplitudeEventStreamTimeInterval
		if r.Configuration.SourceAmplitude.EventTimeInterval != nil {
			size := r.Configuration.SourceAmplitude.EventTimeInterval.Size.ValueInt64()
			sizeUnit := shared.SourceAmplitudeEventStreamTimeIntervalEventsTimeIntervalSizeUnitEnum(r.Configuration.SourceAmplitude.EventTimeInterval.SizeUnit.ValueString())
			eventTimeInterval = &shared.SourceAmplitudeEventStreamTimeInterval{
				Size:     size,
				SizeUnit: sizeUnit,
			}
		}
		secretKey1 := r.Configuration.SourceAmplitude.SecretKey.ValueString()
		sourceType6 := shared.SourceAmplitudeAmplitudeEnum(r.Configuration.SourceAmplitude.SourceType.ValueString())
		startDate1 := r.Configuration.SourceAmplitude.StartDate.ValueString()
		sourceAmplitude = &shared.SourceAmplitude{
			APIKey:            apiKey1,
			DataRegion:        dataRegion,
			EventTimeInterval: eventTimeInterval,
			SecretKey:         secretKey1,
			SourceType:        sourceType6,
			StartDate:         startDate1,
		}
	}
	if sourceAmplitude != nil {
		configuration = shared.SourceConfiguration{
			SourceAmplitude: sourceAmplitude,
		}
	}
	var sourceApifyDataset *shared.SourceApifyDataset
	if r.Configuration.SourceApifyDataset != nil {
		clean := new(bool)
		if !r.Configuration.SourceApifyDataset.Clean.IsUnknown() && !r.Configuration.SourceApifyDataset.Clean.IsNull() {
			*clean = r.Configuration.SourceApifyDataset.Clean.ValueBool()
		} else {
			clean = nil
		}
		datasetID := r.Configuration.SourceApifyDataset.DatasetID.ValueString()
		sourceType7 := shared.SourceApifyDatasetApifyDatasetEnum(r.Configuration.SourceApifyDataset.SourceType.ValueString())
		sourceApifyDataset = &shared.SourceApifyDataset{
			Clean:      clean,
			DatasetID:  datasetID,
			SourceType: sourceType7,
		}
	}
	if sourceApifyDataset != nil {
		configuration = shared.SourceConfiguration{
			SourceApifyDataset: sourceApifyDataset,
		}
	}
	var sourceAsana *shared.SourceAsana
	if r.Configuration.SourceAsana != nil {
		var credentials1 *shared.SourceAsanaAuthenticationMechanism
		var sourceAsanaAuthenticationMechanismAuthenticateWithPersonalAccessToken *shared.SourceAsanaAuthenticationMechanismAuthenticateWithPersonalAccessToken
		if r.Configuration.SourceAsana.Credentials.SourceAsanaAuthenticationMechanismAuthenticateWithPersonalAccessToken != nil {
			optionTitle := new(shared.SourceAsanaAuthenticationMechanismAuthenticateWithPersonalAccessTokenCredentialsTitleEnum)
			if !r.Configuration.SourceAsana.Credentials.SourceAsanaAuthenticationMechanismAuthenticateWithPersonalAccessToken.OptionTitle.IsUnknown() && !r.Configuration.SourceAsana.Credentials.SourceAsanaAuthenticationMechanismAuthenticateWithPersonalAccessToken.OptionTitle.IsNull() {
				*optionTitle = shared.SourceAsanaAuthenticationMechanismAuthenticateWithPersonalAccessTokenCredentialsTitleEnum(r.Configuration.SourceAsana.Credentials.SourceAsanaAuthenticationMechanismAuthenticateWithPersonalAccessToken.OptionTitle.ValueString())
			} else {
				optionTitle = nil
			}
			personalAccessToken := r.Configuration.SourceAsana.Credentials.SourceAsanaAuthenticationMechanismAuthenticateWithPersonalAccessToken.PersonalAccessToken.ValueString()
			sourceAsanaAuthenticationMechanismAuthenticateWithPersonalAccessToken = &shared.SourceAsanaAuthenticationMechanismAuthenticateWithPersonalAccessToken{
				OptionTitle:         optionTitle,
				PersonalAccessToken: personalAccessToken,
			}
		}
		if sourceAsanaAuthenticationMechanismAuthenticateWithPersonalAccessToken != nil {
			credentials1 = &shared.SourceAsanaAuthenticationMechanism{
				SourceAsanaAuthenticationMechanismAuthenticateWithPersonalAccessToken: sourceAsanaAuthenticationMechanismAuthenticateWithPersonalAccessToken,
			}
		}
		var sourceAsanaAuthenticationMechanismAuthenticateViaAsanaOauth *shared.SourceAsanaAuthenticationMechanismAuthenticateViaAsanaOauth
		if r.Configuration.SourceAsana.Credentials.SourceAsanaAuthenticationMechanismAuthenticateViaAsanaOauth != nil {
			clientId2 := r.Configuration.SourceAsana.Credentials.SourceAsanaAuthenticationMechanismAuthenticateViaAsanaOauth.ClientID.ValueString()
			clientSecret2 := r.Configuration.SourceAsana.Credentials.SourceAsanaAuthenticationMechanismAuthenticateViaAsanaOauth.ClientSecret.ValueString()
			optionTitle1 := new(shared.SourceAsanaAuthenticationMechanismAuthenticateViaAsanaOauthCredentialsTitleEnum)
			if !r.Configuration.SourceAsana.Credentials.SourceAsanaAuthenticationMechanismAuthenticateViaAsanaOauth.OptionTitle.IsUnknown() && !r.Configuration.SourceAsana.Credentials.SourceAsanaAuthenticationMechanismAuthenticateViaAsanaOauth.OptionTitle.IsNull() {
				*optionTitle1 = shared.SourceAsanaAuthenticationMechanismAuthenticateViaAsanaOauthCredentialsTitleEnum(r.Configuration.SourceAsana.Credentials.SourceAsanaAuthenticationMechanismAuthenticateViaAsanaOauth.OptionTitle.ValueString())
			} else {
				optionTitle1 = nil
			}
			refreshToken3 := r.Configuration.SourceAsana.Credentials.SourceAsanaAuthenticationMechanismAuthenticateViaAsanaOauth.RefreshToken.ValueString()
			sourceAsanaAuthenticationMechanismAuthenticateViaAsanaOauth = &shared.SourceAsanaAuthenticationMechanismAuthenticateViaAsanaOauth{
				ClientID:     clientId2,
				ClientSecret: clientSecret2,
				OptionTitle:  optionTitle1,
				RefreshToken: refreshToken3,
			}
		}
		if sourceAsanaAuthenticationMechanismAuthenticateViaAsanaOauth != nil {
			credentials1 = &shared.SourceAsanaAuthenticationMechanism{
				SourceAsanaAuthenticationMechanismAuthenticateViaAsanaOauth: sourceAsanaAuthenticationMechanismAuthenticateViaAsanaOauth,
			}
		}
		sourceType8 := shared.SourceAsanaAsanaEnum(r.Configuration.SourceAsana.SourceType.ValueString())
		sourceAsana = &shared.SourceAsana{
			Credentials: credentials1,
			SourceType:  sourceType8,
		}
	}
	if sourceAsana != nil {
		configuration = shared.SourceConfiguration{
			SourceAsana: sourceAsana,
		}
	}
	var sourceAuth0 *shared.SourceAuth0
	if r.Configuration.SourceAuth0 != nil {
		baseURL := r.Configuration.SourceAuth0.BaseURL.ValueString()
		var credentials2 shared.SourceAuth0AuthenticationMethod
		var sourceAuth0AuthenticationMethodOAuth2ConfidentialApplication *shared.SourceAuth0AuthenticationMethodOAuth2ConfidentialApplication
		if r.Configuration.SourceAuth0.Credentials.SourceAuth0AuthenticationMethodOAuth2ConfidentialApplication != nil {
			audience := r.Configuration.SourceAuth0.Credentials.SourceAuth0AuthenticationMethodOAuth2ConfidentialApplication.Audience.ValueString()
			authType2 := shared.SourceAuth0AuthenticationMethodOAuth2ConfidentialApplicationAuthenticationMethodEnum(r.Configuration.SourceAuth0.Credentials.SourceAuth0AuthenticationMethodOAuth2ConfidentialApplication.AuthType.ValueString())
			clientId3 := r.Configuration.SourceAuth0.Credentials.SourceAuth0AuthenticationMethodOAuth2ConfidentialApplication.ClientID.ValueString()
			clientSecret3 := r.Configuration.SourceAuth0.Credentials.SourceAuth0AuthenticationMethodOAuth2ConfidentialApplication.ClientSecret.ValueString()
			sourceAuth0AuthenticationMethodOAuth2ConfidentialApplication = &shared.SourceAuth0AuthenticationMethodOAuth2ConfidentialApplication{
				Audience:     audience,
				AuthType:     authType2,
				ClientID:     clientId3,
				ClientSecret: clientSecret3,
			}
		}
		if sourceAuth0AuthenticationMethodOAuth2ConfidentialApplication != nil {
			credentials2 = shared.SourceAuth0AuthenticationMethod{
				SourceAuth0AuthenticationMethodOAuth2ConfidentialApplication: sourceAuth0AuthenticationMethodOAuth2ConfidentialApplication,
			}
		}
		var sourceAuth0AuthenticationMethodOAuth2AccessToken *shared.SourceAuth0AuthenticationMethodOAuth2AccessToken
		if r.Configuration.SourceAuth0.Credentials.SourceAuth0AuthenticationMethodOAuth2AccessToken != nil {
			accessToken1 := r.Configuration.SourceAuth0.Credentials.SourceAuth0AuthenticationMethodOAuth2AccessToken.AccessToken.ValueString()
			authType3 := shared.SourceAuth0AuthenticationMethodOAuth2AccessTokenAuthenticationMethodEnum(r.Configuration.SourceAuth0.Credentials.SourceAuth0AuthenticationMethodOAuth2AccessToken.AuthType.ValueString())
			sourceAuth0AuthenticationMethodOAuth2AccessToken = &shared.SourceAuth0AuthenticationMethodOAuth2AccessToken{
				AccessToken: accessToken1,
				AuthType:    authType3,
			}
		}
		if sourceAuth0AuthenticationMethodOAuth2AccessToken != nil {
			credentials2 = shared.SourceAuth0AuthenticationMethod{
				SourceAuth0AuthenticationMethodOAuth2AccessToken: sourceAuth0AuthenticationMethodOAuth2AccessToken,
			}
		}
		sourceType9 := shared.SourceAuth0Auth0Enum(r.Configuration.SourceAuth0.SourceType.ValueString())
		sourceAuth0 = &shared.SourceAuth0{
			BaseURL:     baseURL,
			Credentials: credentials2,
			SourceType:  sourceType9,
		}
	}
	if sourceAuth0 != nil {
		configuration = shared.SourceConfiguration{
			SourceAuth0: sourceAuth0,
		}
	}
	var sourceAwsCloudtrail *shared.SourceAwsCloudtrail
	if r.Configuration.SourceAwsCloudtrail != nil {
		awsKeyID := r.Configuration.SourceAwsCloudtrail.AwsKeyID.ValueString()
		awsRegionName := r.Configuration.SourceAwsCloudtrail.AwsRegionName.ValueString()
		awsSecretKey1 := r.Configuration.SourceAwsCloudtrail.AwsSecretKey.ValueString()
		sourceType10 := shared.SourceAwsCloudtrailAwsCloudtrailEnum(r.Configuration.SourceAwsCloudtrail.SourceType.ValueString())
		startDate2, _ := customTypes.NewDate(r.Configuration.SourceAwsCloudtrail.StartDate.ValueString())
		sourceAwsCloudtrail = &shared.SourceAwsCloudtrail{
			AwsKeyID:      awsKeyID,
			AwsRegionName: awsRegionName,
			AwsSecretKey:  awsSecretKey1,
			SourceType:    sourceType10,
			StartDate:     startDate2,
		}
	}
	if sourceAwsCloudtrail != nil {
		configuration = shared.SourceConfiguration{
			SourceAwsCloudtrail: sourceAwsCloudtrail,
		}
	}
	var sourceAzureTable *shared.SourceAzureTable
	if r.Configuration.SourceAzureTable != nil {
		sourceType11 := shared.SourceAzureTableAzureTableEnum(r.Configuration.SourceAzureTable.SourceType.ValueString())
		storageAccessKey := r.Configuration.SourceAzureTable.StorageAccessKey.ValueString()
		storageAccountName := r.Configuration.SourceAzureTable.StorageAccountName.ValueString()
		storageEndpointSuffix := new(string)
		if !r.Configuration.SourceAzureTable.StorageEndpointSuffix.IsUnknown() && !r.Configuration.SourceAzureTable.StorageEndpointSuffix.IsNull() {
			*storageEndpointSuffix = r.Configuration.SourceAzureTable.StorageEndpointSuffix.ValueString()
		} else {
			storageEndpointSuffix = nil
		}
		sourceAzureTable = &shared.SourceAzureTable{
			SourceType:            sourceType11,
			StorageAccessKey:      storageAccessKey,
			StorageAccountName:    storageAccountName,
			StorageEndpointSuffix: storageEndpointSuffix,
		}
	}
	if sourceAzureTable != nil {
		configuration = shared.SourceConfiguration{
			SourceAzureTable: sourceAzureTable,
		}
	}
	var sourceBambooHr *shared.SourceBambooHr
	if r.Configuration.SourceBambooHr != nil {
		apiKey2 := r.Configuration.SourceBambooHr.APIKey.ValueString()
		customReportsFields := new(string)
		if !r.Configuration.SourceBambooHr.CustomReportsFields.IsUnknown() && !r.Configuration.SourceBambooHr.CustomReportsFields.IsNull() {
			*customReportsFields = r.Configuration.SourceBambooHr.CustomReportsFields.ValueString()
		} else {
			customReportsFields = nil
		}
		customReportsIncludeDefaultFields := new(bool)
		if !r.Configuration.SourceBambooHr.CustomReportsIncludeDefaultFields.IsUnknown() && !r.Configuration.SourceBambooHr.CustomReportsIncludeDefaultFields.IsNull() {
			*customReportsIncludeDefaultFields = r.Configuration.SourceBambooHr.CustomReportsIncludeDefaultFields.ValueBool()
		} else {
			customReportsIncludeDefaultFields = nil
		}
		sourceType12 := shared.SourceBambooHrBambooHrEnum(r.Configuration.SourceBambooHr.SourceType.ValueString())
		subdomain := r.Configuration.SourceBambooHr.Subdomain.ValueString()
		sourceBambooHr = &shared.SourceBambooHr{
			APIKey:                            apiKey2,
			CustomReportsFields:               customReportsFields,
			CustomReportsIncludeDefaultFields: customReportsIncludeDefaultFields,
			SourceType:                        sourceType12,
			Subdomain:                         subdomain,
		}
	}
	if sourceBambooHr != nil {
		configuration = shared.SourceConfiguration{
			SourceBambooHr: sourceBambooHr,
		}
	}
	var sourceBigcommerce *shared.SourceBigcommerce
	if r.Configuration.SourceBigcommerce != nil {
		accessToken2 := r.Configuration.SourceBigcommerce.AccessToken.ValueString()
		sourceType13 := shared.SourceBigcommerceBigcommerceEnum(r.Configuration.SourceBigcommerce.SourceType.ValueString())
		startDate3 := r.Configuration.SourceBigcommerce.StartDate.ValueString()
		storeHash := r.Configuration.SourceBigcommerce.StoreHash.ValueString()
		sourceBigcommerce = &shared.SourceBigcommerce{
			AccessToken: accessToken2,
			SourceType:  sourceType13,
			StartDate:   startDate3,
			StoreHash:   storeHash,
		}
	}
	if sourceBigcommerce != nil {
		configuration = shared.SourceConfiguration{
			SourceBigcommerce: sourceBigcommerce,
		}
	}
	var sourceBigquery *shared.SourceBigquery
	if r.Configuration.SourceBigquery != nil {
		credentialsJSON := r.Configuration.SourceBigquery.CredentialsJSON.ValueString()
		datasetId1 := new(string)
		if !r.Configuration.SourceBigquery.DatasetID.IsUnknown() && !r.Configuration.SourceBigquery.DatasetID.IsNull() {
			*datasetId1 = r.Configuration.SourceBigquery.DatasetID.ValueString()
		} else {
			datasetId1 = nil
		}
		projectID := r.Configuration.SourceBigquery.ProjectID.ValueString()
		sourceType14 := shared.SourceBigqueryBigqueryEnum(r.Configuration.SourceBigquery.SourceType.ValueString())
		sourceBigquery = &shared.SourceBigquery{
			CredentialsJSON: credentialsJSON,
			DatasetID:       datasetId1,
			ProjectID:       projectID,
			SourceType:      sourceType14,
		}
	}
	if sourceBigquery != nil {
		configuration = shared.SourceConfiguration{
			SourceBigquery: sourceBigquery,
		}
	}
	var sourceBingAds *shared.SourceBingAds
	if r.Configuration.SourceBingAds != nil {
		authMethod2 := new(shared.SourceBingAdsAuthMethodEnum)
		if !r.Configuration.SourceBingAds.AuthMethod.IsUnknown() && !r.Configuration.SourceBingAds.AuthMethod.IsNull() {
			*authMethod2 = shared.SourceBingAdsAuthMethodEnum(r.Configuration.SourceBingAds.AuthMethod.ValueString())
		} else {
			authMethod2 = nil
		}
		clientId4 := r.Configuration.SourceBingAds.ClientID.ValueString()
		clientSecret4 := new(string)
		if !r.Configuration.SourceBingAds.ClientSecret.IsUnknown() && !r.Configuration.SourceBingAds.ClientSecret.IsNull() {
			*clientSecret4 = r.Configuration.SourceBingAds.ClientSecret.ValueString()
		} else {
			clientSecret4 = nil
		}
		developerToken := r.Configuration.SourceBingAds.DeveloperToken.ValueString()
		refreshToken4 := r.Configuration.SourceBingAds.RefreshToken.ValueString()
		reportsStartDate, _ := customTypes.NewDate(r.Configuration.SourceBingAds.ReportsStartDate.ValueString())
		sourceType15 := shared.SourceBingAdsBingAdsEnum(r.Configuration.SourceBingAds.SourceType.ValueString())
		tenantID := new(string)
		if !r.Configuration.SourceBingAds.TenantID.IsUnknown() && !r.Configuration.SourceBingAds.TenantID.IsNull() {
			*tenantID = r.Configuration.SourceBingAds.TenantID.ValueString()
		} else {
			tenantID = nil
		}
		sourceBingAds = &shared.SourceBingAds{
			AuthMethod:       authMethod2,
			ClientID:         clientId4,
			ClientSecret:     clientSecret4,
			DeveloperToken:   developerToken,
			RefreshToken:     refreshToken4,
			ReportsStartDate: reportsStartDate,
			SourceType:       sourceType15,
			TenantID:         tenantID,
		}
	}
	if sourceBingAds != nil {
		configuration = shared.SourceConfiguration{
			SourceBingAds: sourceBingAds,
		}
	}
	var sourceBraintree *shared.SourceBraintree
	if r.Configuration.SourceBraintree != nil {
		environment := shared.SourceBraintreeEnvironmentEnum(r.Configuration.SourceBraintree.Environment.ValueString())
		merchantID := r.Configuration.SourceBraintree.MerchantID.ValueString()
		privateKey := r.Configuration.SourceBraintree.PrivateKey.ValueString()
		publicKey := r.Configuration.SourceBraintree.PublicKey.ValueString()
		sourceType16 := shared.SourceBraintreeBraintreeEnum(r.Configuration.SourceBraintree.SourceType.ValueString())
		startDate4 := new(time.Time)
		if !r.Configuration.SourceBraintree.StartDate.IsUnknown() && !r.Configuration.SourceBraintree.StartDate.IsNull() {
			*startDate4, _ = time.Parse(time.RFC3339Nano, r.Configuration.SourceBraintree.StartDate.ValueString())
		} else {
			startDate4 = nil
		}
		sourceBraintree = &shared.SourceBraintree{
			Environment: environment,
			MerchantID:  merchantID,
			PrivateKey:  privateKey,
			PublicKey:   publicKey,
			SourceType:  sourceType16,
			StartDate:   startDate4,
		}
	}
	if sourceBraintree != nil {
		configuration = shared.SourceConfiguration{
			SourceBraintree: sourceBraintree,
		}
	}
	var sourceBraze *shared.SourceBraze
	if r.Configuration.SourceBraze != nil {
		apiKey3 := r.Configuration.SourceBraze.APIKey.ValueString()
		sourceType17 := shared.SourceBrazeBrazeEnum(r.Configuration.SourceBraze.SourceType.ValueString())
		startDate5, _ := customTypes.NewDate(r.Configuration.SourceBraze.StartDate.ValueString())
		url := r.Configuration.SourceBraze.URL.ValueString()
		sourceBraze = &shared.SourceBraze{
			APIKey:     apiKey3,
			SourceType: sourceType17,
			StartDate:  startDate5,
			URL:        url,
		}
	}
	if sourceBraze != nil {
		configuration = shared.SourceConfiguration{
			SourceBraze: sourceBraze,
		}
	}
	var sourceChargebee *shared.SourceChargebee
	if r.Configuration.SourceChargebee != nil {
		productCatalog := shared.SourceChargebeeProductCatalogEnum(r.Configuration.SourceChargebee.ProductCatalog.ValueString())
		site := r.Configuration.SourceChargebee.Site.ValueString()
		siteAPIKey := r.Configuration.SourceChargebee.SiteAPIKey.ValueString()
		sourceType18 := shared.SourceChargebeeChargebeeEnum(r.Configuration.SourceChargebee.SourceType.ValueString())
		startDate6, _ := time.Parse(time.RFC3339Nano, r.Configuration.SourceChargebee.StartDate.ValueString())
		sourceChargebee = &shared.SourceChargebee{
			ProductCatalog: productCatalog,
			Site:           site,
			SiteAPIKey:     siteAPIKey,
			SourceType:     sourceType18,
			StartDate:      startDate6,
		}
	}
	if sourceChargebee != nil {
		configuration = shared.SourceConfiguration{
			SourceChargebee: sourceChargebee,
		}
	}
	var sourceChartmogul *shared.SourceChartmogul
	if r.Configuration.SourceChartmogul != nil {
		apiKey4 := r.Configuration.SourceChartmogul.APIKey.ValueString()
		interval := shared.SourceChartmogulIntervalEnum(r.Configuration.SourceChartmogul.Interval.ValueString())
		sourceType19 := shared.SourceChartmogulChartmogulEnum(r.Configuration.SourceChartmogul.SourceType.ValueString())
		startDate7, _ := time.Parse(time.RFC3339Nano, r.Configuration.SourceChartmogul.StartDate.ValueString())
		sourceChartmogul = &shared.SourceChartmogul{
			APIKey:     apiKey4,
			Interval:   interval,
			SourceType: sourceType19,
			StartDate:  startDate7,
		}
	}
	if sourceChartmogul != nil {
		configuration = shared.SourceConfiguration{
			SourceChartmogul: sourceChartmogul,
		}
	}
	var sourceClickhouse *shared.SourceClickhouse
	if r.Configuration.SourceClickhouse != nil {
		database1 := r.Configuration.SourceClickhouse.Database.ValueString()
		host1 := r.Configuration.SourceClickhouse.Host.ValueString()
		password1 := new(string)
		if !r.Configuration.SourceClickhouse.Password.IsUnknown() && !r.Configuration.SourceClickhouse.Password.IsNull() {
			*password1 = r.Configuration.SourceClickhouse.Password.ValueString()
		} else {
			password1 = nil
		}
		port1 := r.Configuration.SourceClickhouse.Port.ValueInt64()
		sourceType20 := shared.SourceClickhouseClickhouseEnum(r.Configuration.SourceClickhouse.SourceType.ValueString())
		var tunnelMethod4 *shared.SourceClickhouseSSHTunnelMethod
		var sourceClickhouseSSHTunnelMethodNoTunnel *shared.SourceClickhouseSSHTunnelMethodNoTunnel
		if r.Configuration.SourceClickhouse.TunnelMethod.SourceClickhouseSSHTunnelMethodNoTunnel != nil {
			tunnelMethod5 := shared.SourceClickhouseSSHTunnelMethodNoTunnelTunnelMethodEnum(r.Configuration.SourceClickhouse.TunnelMethod.SourceClickhouseSSHTunnelMethodNoTunnel.TunnelMethod.ValueString())
			sourceClickhouseSSHTunnelMethodNoTunnel = &shared.SourceClickhouseSSHTunnelMethodNoTunnel{
				TunnelMethod: tunnelMethod5,
			}
		}
		if sourceClickhouseSSHTunnelMethodNoTunnel != nil {
			tunnelMethod4 = &shared.SourceClickhouseSSHTunnelMethod{
				SourceClickhouseSSHTunnelMethodNoTunnel: sourceClickhouseSSHTunnelMethodNoTunnel,
			}
		}
		var sourceClickhouseSSHTunnelMethodSSHKeyAuthentication *shared.SourceClickhouseSSHTunnelMethodSSHKeyAuthentication
		if r.Configuration.SourceClickhouse.TunnelMethod.SourceClickhouseSSHTunnelMethodSSHKeyAuthentication != nil {
			sshKey1 := r.Configuration.SourceClickhouse.TunnelMethod.SourceClickhouseSSHTunnelMethodSSHKeyAuthentication.SSHKey.ValueString()
			tunnelHost2 := r.Configuration.SourceClickhouse.TunnelMethod.SourceClickhouseSSHTunnelMethodSSHKeyAuthentication.TunnelHost.ValueString()
			tunnelMethod6 := shared.SourceClickhouseSSHTunnelMethodSSHKeyAuthenticationTunnelMethodEnum(r.Configuration.SourceClickhouse.TunnelMethod.SourceClickhouseSSHTunnelMethodSSHKeyAuthentication.TunnelMethod.ValueString())
			tunnelPort2 := r.Configuration.SourceClickhouse.TunnelMethod.SourceClickhouseSSHTunnelMethodSSHKeyAuthentication.TunnelPort.ValueInt64()
			tunnelUser2 := r.Configuration.SourceClickhouse.TunnelMethod.SourceClickhouseSSHTunnelMethodSSHKeyAuthentication.TunnelUser.ValueString()
			sourceClickhouseSSHTunnelMethodSSHKeyAuthentication = &shared.SourceClickhouseSSHTunnelMethodSSHKeyAuthentication{
				SSHKey:       sshKey1,
				TunnelHost:   tunnelHost2,
				TunnelMethod: tunnelMethod6,
				TunnelPort:   tunnelPort2,
				TunnelUser:   tunnelUser2,
			}
		}
		if sourceClickhouseSSHTunnelMethodSSHKeyAuthentication != nil {
			tunnelMethod4 = &shared.SourceClickhouseSSHTunnelMethod{
				SourceClickhouseSSHTunnelMethodSSHKeyAuthentication: sourceClickhouseSSHTunnelMethodSSHKeyAuthentication,
			}
		}
		var sourceClickhouseSSHTunnelMethodPasswordAuthentication *shared.SourceClickhouseSSHTunnelMethodPasswordAuthentication
		if r.Configuration.SourceClickhouse.TunnelMethod.SourceClickhouseSSHTunnelMethodPasswordAuthentication != nil {
			tunnelHost3 := r.Configuration.SourceClickhouse.TunnelMethod.SourceClickhouseSSHTunnelMethodPasswordAuthentication.TunnelHost.ValueString()
			tunnelMethod7 := shared.SourceClickhouseSSHTunnelMethodPasswordAuthenticationTunnelMethodEnum(r.Configuration.SourceClickhouse.TunnelMethod.SourceClickhouseSSHTunnelMethodPasswordAuthentication.TunnelMethod.ValueString())
			tunnelPort3 := r.Configuration.SourceClickhouse.TunnelMethod.SourceClickhouseSSHTunnelMethodPasswordAuthentication.TunnelPort.ValueInt64()
			tunnelUser3 := r.Configuration.SourceClickhouse.TunnelMethod.SourceClickhouseSSHTunnelMethodPasswordAuthentication.TunnelUser.ValueString()
			tunnelUserPassword1 := r.Configuration.SourceClickhouse.TunnelMethod.SourceClickhouseSSHTunnelMethodPasswordAuthentication.TunnelUserPassword.ValueString()
			sourceClickhouseSSHTunnelMethodPasswordAuthentication = &shared.SourceClickhouseSSHTunnelMethodPasswordAuthentication{
				TunnelHost:         tunnelHost3,
				TunnelMethod:       tunnelMethod7,
				TunnelPort:         tunnelPort3,
				TunnelUser:         tunnelUser3,
				TunnelUserPassword: tunnelUserPassword1,
			}
		}
		if sourceClickhouseSSHTunnelMethodPasswordAuthentication != nil {
			tunnelMethod4 = &shared.SourceClickhouseSSHTunnelMethod{
				SourceClickhouseSSHTunnelMethodPasswordAuthentication: sourceClickhouseSSHTunnelMethodPasswordAuthentication,
			}
		}
		username1 := r.Configuration.SourceClickhouse.Username.ValueString()
		sourceClickhouse = &shared.SourceClickhouse{
			Database:     database1,
			Host:         host1,
			Password:     password1,
			Port:         port1,
			SourceType:   sourceType20,
			TunnelMethod: tunnelMethod4,
			Username:     username1,
		}
	}
	if sourceClickhouse != nil {
		configuration = shared.SourceConfiguration{
			SourceClickhouse: sourceClickhouse,
		}
	}
	var sourceClickupAPI *shared.SourceClickupAPI
	if r.Configuration.SourceClickupAPI != nil {
		apiToken := r.Configuration.SourceClickupAPI.APIToken.ValueString()
		folderID := new(string)
		if !r.Configuration.SourceClickupAPI.FolderID.IsUnknown() && !r.Configuration.SourceClickupAPI.FolderID.IsNull() {
			*folderID = r.Configuration.SourceClickupAPI.FolderID.ValueString()
		} else {
			folderID = nil
		}
		includeClosedTasks := new(bool)
		if !r.Configuration.SourceClickupAPI.IncludeClosedTasks.IsUnknown() && !r.Configuration.SourceClickupAPI.IncludeClosedTasks.IsNull() {
			*includeClosedTasks = r.Configuration.SourceClickupAPI.IncludeClosedTasks.ValueBool()
		} else {
			includeClosedTasks = nil
		}
		listID := new(string)
		if !r.Configuration.SourceClickupAPI.ListID.IsUnknown() && !r.Configuration.SourceClickupAPI.ListID.IsNull() {
			*listID = r.Configuration.SourceClickupAPI.ListID.ValueString()
		} else {
			listID = nil
		}
		sourceType21 := shared.SourceClickupAPIClickupAPIEnum(r.Configuration.SourceClickupAPI.SourceType.ValueString())
		spaceID := new(string)
		if !r.Configuration.SourceClickupAPI.SpaceID.IsUnknown() && !r.Configuration.SourceClickupAPI.SpaceID.IsNull() {
			*spaceID = r.Configuration.SourceClickupAPI.SpaceID.ValueString()
		} else {
			spaceID = nil
		}
		teamID := new(string)
		if !r.Configuration.SourceClickupAPI.TeamID.IsUnknown() && !r.Configuration.SourceClickupAPI.TeamID.IsNull() {
			*teamID = r.Configuration.SourceClickupAPI.TeamID.ValueString()
		} else {
			teamID = nil
		}
		sourceClickupAPI = &shared.SourceClickupAPI{
			APIToken:           apiToken,
			FolderID:           folderID,
			IncludeClosedTasks: includeClosedTasks,
			ListID:             listID,
			SourceType:         sourceType21,
			SpaceID:            spaceID,
			TeamID:             teamID,
		}
	}
	if sourceClickupAPI != nil {
		configuration = shared.SourceConfiguration{
			SourceClickupAPI: sourceClickupAPI,
		}
	}
	var sourceCloseCom *shared.SourceCloseCom
	if r.Configuration.SourceCloseCom != nil {
		apiKey5 := r.Configuration.SourceCloseCom.APIKey.ValueString()
		sourceType22 := shared.SourceCloseComCloseComEnum(r.Configuration.SourceCloseCom.SourceType.ValueString())
		startDate8 := new(time.Time)
		if !r.Configuration.SourceCloseCom.StartDate.IsUnknown() && !r.Configuration.SourceCloseCom.StartDate.IsNull() {
			*startDate8, _ = time.Parse(time.RFC3339Nano, r.Configuration.SourceCloseCom.StartDate.ValueString())
		} else {
			startDate8 = nil
		}
		sourceCloseCom = &shared.SourceCloseCom{
			APIKey:     apiKey5,
			SourceType: sourceType22,
			StartDate:  startDate8,
		}
	}
	if sourceCloseCom != nil {
		configuration = shared.SourceConfiguration{
			SourceCloseCom: sourceCloseCom,
		}
	}
	var sourceCoda *shared.SourceCoda
	if r.Configuration.SourceCoda != nil {
		authToken := r.Configuration.SourceCoda.AuthToken.ValueString()
		sourceType23 := shared.SourceCodaCodaEnum(r.Configuration.SourceCoda.SourceType.ValueString())
		sourceCoda = &shared.SourceCoda{
			AuthToken:  authToken,
			SourceType: sourceType23,
		}
	}
	if sourceCoda != nil {
		configuration = shared.SourceConfiguration{
			SourceCoda: sourceCoda,
		}
	}
	var sourceCoinAPI *shared.SourceCoinAPI
	if r.Configuration.SourceCoinAPI != nil {
		apiKey6 := r.Configuration.SourceCoinAPI.APIKey.ValueString()
		endDate := new(string)
		if !r.Configuration.SourceCoinAPI.EndDate.IsUnknown() && !r.Configuration.SourceCoinAPI.EndDate.IsNull() {
			*endDate = r.Configuration.SourceCoinAPI.EndDate.ValueString()
		} else {
			endDate = nil
		}
		environment1 := shared.SourceCoinAPIEnvironmentEnum(r.Configuration.SourceCoinAPI.Environment.ValueString())
		limit := new(int64)
		if !r.Configuration.SourceCoinAPI.Limit.IsUnknown() && !r.Configuration.SourceCoinAPI.Limit.IsNull() {
			*limit = r.Configuration.SourceCoinAPI.Limit.ValueInt64()
		} else {
			limit = nil
		}
		period := r.Configuration.SourceCoinAPI.Period.ValueString()
		sourceType24 := shared.SourceCoinAPICoinAPIEnum(r.Configuration.SourceCoinAPI.SourceType.ValueString())
		startDate9 := r.Configuration.SourceCoinAPI.StartDate.ValueString()
		symbolID := r.Configuration.SourceCoinAPI.SymbolID.ValueString()
		sourceCoinAPI = &shared.SourceCoinAPI{
			APIKey:      apiKey6,
			EndDate:     endDate,
			Environment: environment1,
			Limit:       limit,
			Period:      period,
			SourceType:  sourceType24,
			StartDate:   startDate9,
			SymbolID:    symbolID,
		}
	}
	if sourceCoinAPI != nil {
		configuration = shared.SourceConfiguration{
			SourceCoinAPI: sourceCoinAPI,
		}
	}
	var sourceCoinmarketcap *shared.SourceCoinmarketcap
	if r.Configuration.SourceCoinmarketcap != nil {
		apiKey7 := r.Configuration.SourceCoinmarketcap.APIKey.ValueString()
		dataType := shared.SourceCoinmarketcapDataTypeEnum(r.Configuration.SourceCoinmarketcap.DataType.ValueString())
		sourceType25 := shared.SourceCoinmarketcapCoinmarketcapEnum(r.Configuration.SourceCoinmarketcap.SourceType.ValueString())
		symbols := make([]string, 0)
		for _, symbolsItem := range r.Configuration.SourceCoinmarketcap.Symbols {
			symbols = append(symbols, symbolsItem.ValueString())
		}
		sourceCoinmarketcap = &shared.SourceCoinmarketcap{
			APIKey:     apiKey7,
			DataType:   dataType,
			SourceType: sourceType25,
			Symbols:    symbols,
		}
	}
	if sourceCoinmarketcap != nil {
		configuration = shared.SourceConfiguration{
			SourceCoinmarketcap: sourceCoinmarketcap,
		}
	}
	var sourceConfigcat *shared.SourceConfigcat
	if r.Configuration.SourceConfigcat != nil {
		password2 := r.Configuration.SourceConfigcat.Password.ValueString()
		sourceType26 := shared.SourceConfigcatConfigcatEnum(r.Configuration.SourceConfigcat.SourceType.ValueString())
		username2 := r.Configuration.SourceConfigcat.Username.ValueString()
		sourceConfigcat = &shared.SourceConfigcat{
			Password:   password2,
			SourceType: sourceType26,
			Username:   username2,
		}
	}
	if sourceConfigcat != nil {
		configuration = shared.SourceConfiguration{
			SourceConfigcat: sourceConfigcat,
		}
	}
	var sourceConfluence *shared.SourceConfluence
	if r.Configuration.SourceConfluence != nil {
		apiToken1 := r.Configuration.SourceConfluence.APIToken.ValueString()
		domainName := r.Configuration.SourceConfluence.DomainName.ValueString()
		email := r.Configuration.SourceConfluence.Email.ValueString()
		sourceType27 := shared.SourceConfluenceConfluenceEnum(r.Configuration.SourceConfluence.SourceType.ValueString())
		sourceConfluence = &shared.SourceConfluence{
			APIToken:   apiToken1,
			DomainName: domainName,
			Email:      email,
			SourceType: sourceType27,
		}
	}
	if sourceConfluence != nil {
		configuration = shared.SourceConfiguration{
			SourceConfluence: sourceConfluence,
		}
	}
	var sourceDatascope *shared.SourceDatascope
	if r.Configuration.SourceDatascope != nil {
		apiKey8 := r.Configuration.SourceDatascope.APIKey.ValueString()
		sourceType28 := shared.SourceDatascopeDatascopeEnum(r.Configuration.SourceDatascope.SourceType.ValueString())
		startDate10 := r.Configuration.SourceDatascope.StartDate.ValueString()
		sourceDatascope = &shared.SourceDatascope{
			APIKey:     apiKey8,
			SourceType: sourceType28,
			StartDate:  startDate10,
		}
	}
	if sourceDatascope != nil {
		configuration = shared.SourceConfiguration{
			SourceDatascope: sourceDatascope,
		}
	}
	var sourceDelighted *shared.SourceDelighted
	if r.Configuration.SourceDelighted != nil {
		apiKey9 := r.Configuration.SourceDelighted.APIKey.ValueString()
		since, _ := time.Parse(time.RFC3339Nano, r.Configuration.SourceDelighted.Since.ValueString())
		sourceType29 := shared.SourceDelightedDelightedEnum(r.Configuration.SourceDelighted.SourceType.ValueString())
		sourceDelighted = &shared.SourceDelighted{
			APIKey:     apiKey9,
			Since:      since,
			SourceType: sourceType29,
		}
	}
	if sourceDelighted != nil {
		configuration = shared.SourceConfiguration{
			SourceDelighted: sourceDelighted,
		}
	}
	var sourceDixa *shared.SourceDixa
	if r.Configuration.SourceDixa != nil {
		apiToken2 := r.Configuration.SourceDixa.APIToken.ValueString()
		batchSize := new(int64)
		if !r.Configuration.SourceDixa.BatchSize.IsUnknown() && !r.Configuration.SourceDixa.BatchSize.IsNull() {
			*batchSize = r.Configuration.SourceDixa.BatchSize.ValueInt64()
		} else {
			batchSize = nil
		}
		sourceType30 := shared.SourceDixaDixaEnum(r.Configuration.SourceDixa.SourceType.ValueString())
		startDate11 := r.Configuration.SourceDixa.StartDate.ValueString()
		sourceDixa = &shared.SourceDixa{
			APIToken:   apiToken2,
			BatchSize:  batchSize,
			SourceType: sourceType30,
			StartDate:  startDate11,
		}
	}
	if sourceDixa != nil {
		configuration = shared.SourceConfiguration{
			SourceDixa: sourceDixa,
		}
	}
	var sourceDockerhub *shared.SourceDockerhub
	if r.Configuration.SourceDockerhub != nil {
		dockerUsername := r.Configuration.SourceDockerhub.DockerUsername.ValueString()
		sourceType31 := shared.SourceDockerhubDockerhubEnum(r.Configuration.SourceDockerhub.SourceType.ValueString())
		sourceDockerhub = &shared.SourceDockerhub{
			DockerUsername: dockerUsername,
			SourceType:     sourceType31,
		}
	}
	if sourceDockerhub != nil {
		configuration = shared.SourceConfiguration{
			SourceDockerhub: sourceDockerhub,
		}
	}
	var sourceDremio *shared.SourceDremio
	if r.Configuration.SourceDremio != nil {
		apiKey10 := r.Configuration.SourceDremio.APIKey.ValueString()
		baseUrl1 := r.Configuration.SourceDremio.BaseURL.ValueString()
		sourceType32 := shared.SourceDremioDremioEnum(r.Configuration.SourceDremio.SourceType.ValueString())
		sourceDremio = &shared.SourceDremio{
			APIKey:     apiKey10,
			BaseURL:    baseUrl1,
			SourceType: sourceType32,
		}
	}
	if sourceDremio != nil {
		configuration = shared.SourceConfiguration{
			SourceDremio: sourceDremio,
		}
	}
	var sourceDynamodb *shared.SourceDynamodb
	if r.Configuration.SourceDynamodb != nil {
		accessKeyID := r.Configuration.SourceDynamodb.AccessKeyID.ValueString()
		endpoint := new(string)
		if !r.Configuration.SourceDynamodb.Endpoint.IsUnknown() && !r.Configuration.SourceDynamodb.Endpoint.IsNull() {
			*endpoint = r.Configuration.SourceDynamodb.Endpoint.ValueString()
		} else {
			endpoint = nil
		}
		region3 := new(shared.SourceDynamodbDynamodbRegionEnum)
		if !r.Configuration.SourceDynamodb.Region.IsUnknown() && !r.Configuration.SourceDynamodb.Region.IsNull() {
			*region3 = shared.SourceDynamodbDynamodbRegionEnum(r.Configuration.SourceDynamodb.Region.ValueString())
		} else {
			region3 = nil
		}
		reservedAttributeNames := new(string)
		if !r.Configuration.SourceDynamodb.ReservedAttributeNames.IsUnknown() && !r.Configuration.SourceDynamodb.ReservedAttributeNames.IsNull() {
			*reservedAttributeNames = r.Configuration.SourceDynamodb.ReservedAttributeNames.ValueString()
		} else {
			reservedAttributeNames = nil
		}
		secretAccessKey := r.Configuration.SourceDynamodb.SecretAccessKey.ValueString()
		sourceType33 := shared.SourceDynamodbDynamodbEnum(r.Configuration.SourceDynamodb.SourceType.ValueString())
		sourceDynamodb = &shared.SourceDynamodb{
			AccessKeyID:            accessKeyID,
			Endpoint:               endpoint,
			Region:                 region3,
			ReservedAttributeNames: reservedAttributeNames,
			SecretAccessKey:        secretAccessKey,
			SourceType:             sourceType33,
		}
	}
	if sourceDynamodb != nil {
		configuration = shared.SourceConfiguration{
			SourceDynamodb: sourceDynamodb,
		}
	}
	var sourceE2eTestCloud *shared.SourceE2eTestCloud
	if r.Configuration.SourceE2eTestCloud != nil {
		maxMessages := r.Configuration.SourceE2eTestCloud.MaxMessages.ValueInt64()
		messageIntervalMs := new(int64)
		if !r.Configuration.SourceE2eTestCloud.MessageIntervalMs.IsUnknown() && !r.Configuration.SourceE2eTestCloud.MessageIntervalMs.IsNull() {
			*messageIntervalMs = r.Configuration.SourceE2eTestCloud.MessageIntervalMs.ValueInt64()
		} else {
			messageIntervalMs = nil
		}
		var mockCatalog shared.SourceE2eTestCloudMockCatalog
		var sourceE2eTestCloudMockCatalogSingleSchema *shared.SourceE2eTestCloudMockCatalogSingleSchema
		if r.Configuration.SourceE2eTestCloud.MockCatalog.SourceE2eTestCloudMockCatalogSingleSchema != nil {
			streamDuplication := new(int64)
			if !r.Configuration.SourceE2eTestCloud.MockCatalog.SourceE2eTestCloudMockCatalogSingleSchema.StreamDuplication.IsUnknown() && !r.Configuration.SourceE2eTestCloud.MockCatalog.SourceE2eTestCloudMockCatalogSingleSchema.StreamDuplication.IsNull() {
				*streamDuplication = r.Configuration.SourceE2eTestCloud.MockCatalog.SourceE2eTestCloudMockCatalogSingleSchema.StreamDuplication.ValueInt64()
			} else {
				streamDuplication = nil
			}
			streamName := r.Configuration.SourceE2eTestCloud.MockCatalog.SourceE2eTestCloudMockCatalogSingleSchema.StreamName.ValueString()
			streamSchema := r.Configuration.SourceE2eTestCloud.MockCatalog.SourceE2eTestCloudMockCatalogSingleSchema.StreamSchema.ValueString()
			type1 := shared.SourceE2eTestCloudMockCatalogSingleSchemaTypeEnum(r.Configuration.SourceE2eTestCloud.MockCatalog.SourceE2eTestCloudMockCatalogSingleSchema.Type.ValueString())
			sourceE2eTestCloudMockCatalogSingleSchema = &shared.SourceE2eTestCloudMockCatalogSingleSchema{
				StreamDuplication: streamDuplication,
				StreamName:        streamName,
				StreamSchema:      streamSchema,
				Type:              type1,
			}
		}
		if sourceE2eTestCloudMockCatalogSingleSchema != nil {
			mockCatalog = shared.SourceE2eTestCloudMockCatalog{
				SourceE2eTestCloudMockCatalogSingleSchema: sourceE2eTestCloudMockCatalogSingleSchema,
			}
		}
		var sourceE2eTestCloudMockCatalogMultiSchema *shared.SourceE2eTestCloudMockCatalogMultiSchema
		if r.Configuration.SourceE2eTestCloud.MockCatalog.SourceE2eTestCloudMockCatalogMultiSchema != nil {
			streamSchemas := r.Configuration.SourceE2eTestCloud.MockCatalog.SourceE2eTestCloudMockCatalogMultiSchema.StreamSchemas.ValueString()
			type2 := shared.SourceE2eTestCloudMockCatalogMultiSchemaTypeEnum(r.Configuration.SourceE2eTestCloud.MockCatalog.SourceE2eTestCloudMockCatalogMultiSchema.Type.ValueString())
			sourceE2eTestCloudMockCatalogMultiSchema = &shared.SourceE2eTestCloudMockCatalogMultiSchema{
				StreamSchemas: streamSchemas,
				Type:          type2,
			}
		}
		if sourceE2eTestCloudMockCatalogMultiSchema != nil {
			mockCatalog = shared.SourceE2eTestCloudMockCatalog{
				SourceE2eTestCloudMockCatalogMultiSchema: sourceE2eTestCloudMockCatalogMultiSchema,
			}
		}
		seed := new(int64)
		if !r.Configuration.SourceE2eTestCloud.Seed.IsUnknown() && !r.Configuration.SourceE2eTestCloud.Seed.IsNull() {
			*seed = r.Configuration.SourceE2eTestCloud.Seed.ValueInt64()
		} else {
			seed = nil
		}
		sourceType34 := shared.SourceE2eTestCloudE2eTestCloudEnum(r.Configuration.SourceE2eTestCloud.SourceType.ValueString())
		type3 := new(shared.SourceE2eTestCloudTypeEnum)
		if !r.Configuration.SourceE2eTestCloud.Type.IsUnknown() && !r.Configuration.SourceE2eTestCloud.Type.IsNull() {
			*type3 = shared.SourceE2eTestCloudTypeEnum(r.Configuration.SourceE2eTestCloud.Type.ValueString())
		} else {
			type3 = nil
		}
		sourceE2eTestCloud = &shared.SourceE2eTestCloud{
			MaxMessages:       maxMessages,
			MessageIntervalMs: messageIntervalMs,
			MockCatalog:       mockCatalog,
			Seed:              seed,
			SourceType:        sourceType34,
			Type:              type3,
		}
	}
	if sourceE2eTestCloud != nil {
		configuration = shared.SourceConfiguration{
			SourceE2eTestCloud: sourceE2eTestCloud,
		}
	}
	var sourceEmailoctopus *shared.SourceEmailoctopus
	if r.Configuration.SourceEmailoctopus != nil {
		apiKey11 := r.Configuration.SourceEmailoctopus.APIKey.ValueString()
		sourceType35 := shared.SourceEmailoctopusEmailoctopusEnum(r.Configuration.SourceEmailoctopus.SourceType.ValueString())
		sourceEmailoctopus = &shared.SourceEmailoctopus{
			APIKey:     apiKey11,
			SourceType: sourceType35,
		}
	}
	if sourceEmailoctopus != nil {
		configuration = shared.SourceConfiguration{
			SourceEmailoctopus: sourceEmailoctopus,
		}
	}
	var sourceExchangeRates *shared.SourceExchangeRates
	if r.Configuration.SourceExchangeRates != nil {
		accessKey1 := r.Configuration.SourceExchangeRates.AccessKey.ValueString()
		base := new(string)
		if !r.Configuration.SourceExchangeRates.Base.IsUnknown() && !r.Configuration.SourceExchangeRates.Base.IsNull() {
			*base = r.Configuration.SourceExchangeRates.Base.ValueString()
		} else {
			base = nil
		}
		ignoreWeekends := new(bool)
		if !r.Configuration.SourceExchangeRates.IgnoreWeekends.IsUnknown() && !r.Configuration.SourceExchangeRates.IgnoreWeekends.IsNull() {
			*ignoreWeekends = r.Configuration.SourceExchangeRates.IgnoreWeekends.ValueBool()
		} else {
			ignoreWeekends = nil
		}
		sourceType36 := shared.SourceExchangeRatesExchangeRatesEnum(r.Configuration.SourceExchangeRates.SourceType.ValueString())
		startDate12, _ := customTypes.NewDate(r.Configuration.SourceExchangeRates.StartDate.ValueString())
		sourceExchangeRates = &shared.SourceExchangeRates{
			AccessKey:      accessKey1,
			Base:           base,
			IgnoreWeekends: ignoreWeekends,
			SourceType:     sourceType36,
			StartDate:      startDate12,
		}
	}
	if sourceExchangeRates != nil {
		configuration = shared.SourceConfiguration{
			SourceExchangeRates: sourceExchangeRates,
		}
	}
	var sourceFacebookMarketing *shared.SourceFacebookMarketing
	if r.Configuration.SourceFacebookMarketing != nil {
		accessToken3 := r.Configuration.SourceFacebookMarketing.AccessToken.ValueString()
		accountID := r.Configuration.SourceFacebookMarketing.AccountID.ValueString()
		actionBreakdownsAllowEmpty := new(bool)
		if !r.Configuration.SourceFacebookMarketing.ActionBreakdownsAllowEmpty.IsUnknown() && !r.Configuration.SourceFacebookMarketing.ActionBreakdownsAllowEmpty.IsNull() {
			*actionBreakdownsAllowEmpty = r.Configuration.SourceFacebookMarketing.ActionBreakdownsAllowEmpty.ValueBool()
		} else {
			actionBreakdownsAllowEmpty = nil
		}
		customInsights := make([]shared.SourceFacebookMarketingInsightConfig, 0)
		for _, customInsightsItem := range r.Configuration.SourceFacebookMarketing.CustomInsights {
			actionBreakdowns := make([]shared.SourceFacebookMarketingInsightConfigValidActionBreakdownsEnum, 0)
			for _, actionBreakdownsItem := range customInsightsItem.ActionBreakdowns {
				actionBreakdowns = append(actionBreakdowns, shared.SourceFacebookMarketingInsightConfigValidActionBreakdownsEnum(actionBreakdownsItem.ValueString()))
			}
			breakdowns := make([]shared.SourceFacebookMarketingInsightConfigValidBreakdownsEnum, 0)
			for _, breakdownsItem := range customInsightsItem.Breakdowns {
				breakdowns = append(breakdowns, shared.SourceFacebookMarketingInsightConfigValidBreakdownsEnum(breakdownsItem.ValueString()))
			}
			endDate1 := new(time.Time)
			if !customInsightsItem.EndDate.IsUnknown() && !customInsightsItem.EndDate.IsNull() {
				*endDate1, _ = time.Parse(time.RFC3339Nano, customInsightsItem.EndDate.ValueString())
			} else {
				endDate1 = nil
			}
			fields := make([]shared.SourceFacebookMarketingInsightConfigValidEnumsEnum, 0)
			for _, fieldsItem := range customInsightsItem.Fields {
				fields = append(fields, shared.SourceFacebookMarketingInsightConfigValidEnumsEnum(fieldsItem.ValueString()))
			}
			insightsLookbackWindow := new(int64)
			if !customInsightsItem.InsightsLookbackWindow.IsUnknown() && !customInsightsItem.InsightsLookbackWindow.IsNull() {
				*insightsLookbackWindow = customInsightsItem.InsightsLookbackWindow.ValueInt64()
			} else {
				insightsLookbackWindow = nil
			}
			level := new(shared.SourceFacebookMarketingInsightConfigLevelEnum)
			if !customInsightsItem.Level.IsUnknown() && !customInsightsItem.Level.IsNull() {
				*level = shared.SourceFacebookMarketingInsightConfigLevelEnum(customInsightsItem.Level.ValueString())
			} else {
				level = nil
			}
			name := customInsightsItem.Name.ValueString()
			startDate13 := new(time.Time)
			if !customInsightsItem.StartDate.IsUnknown() && !customInsightsItem.StartDate.IsNull() {
				*startDate13, _ = time.Parse(time.RFC3339Nano, customInsightsItem.StartDate.ValueString())
			} else {
				startDate13 = nil
			}
			timeIncrement := new(int64)
			if !customInsightsItem.TimeIncrement.IsUnknown() && !customInsightsItem.TimeIncrement.IsNull() {
				*timeIncrement = customInsightsItem.TimeIncrement.ValueInt64()
			} else {
				timeIncrement = nil
			}
			customInsights = append(customInsights, shared.SourceFacebookMarketingInsightConfig{
				ActionBreakdowns:       actionBreakdowns,
				Breakdowns:             breakdowns,
				EndDate:                endDate1,
				Fields:                 fields,
				InsightsLookbackWindow: insightsLookbackWindow,
				Level:                  level,
				Name:                   name,
				StartDate:              startDate13,
				TimeIncrement:          timeIncrement,
			})
		}
		endDate2 := new(string)
		if !r.Configuration.SourceFacebookMarketing.EndDate.IsUnknown() && !r.Configuration.SourceFacebookMarketing.EndDate.IsNull() {
			*endDate2 = r.Configuration.SourceFacebookMarketing.EndDate.ValueString()
		} else {
			endDate2 = nil
		}
		fetchThumbnailImages := new(bool)
		if !r.Configuration.SourceFacebookMarketing.FetchThumbnailImages.IsUnknown() && !r.Configuration.SourceFacebookMarketing.FetchThumbnailImages.IsNull() {
			*fetchThumbnailImages = r.Configuration.SourceFacebookMarketing.FetchThumbnailImages.ValueBool()
		} else {
			fetchThumbnailImages = nil
		}
		includeDeleted := new(bool)
		if !r.Configuration.SourceFacebookMarketing.IncludeDeleted.IsUnknown() && !r.Configuration.SourceFacebookMarketing.IncludeDeleted.IsNull() {
			*includeDeleted = r.Configuration.SourceFacebookMarketing.IncludeDeleted.ValueBool()
		} else {
			includeDeleted = nil
		}
		insightsLookbackWindow1 := new(int64)
		if !r.Configuration.SourceFacebookMarketing.InsightsLookbackWindow.IsUnknown() && !r.Configuration.SourceFacebookMarketing.InsightsLookbackWindow.IsNull() {
			*insightsLookbackWindow1 = r.Configuration.SourceFacebookMarketing.InsightsLookbackWindow.ValueInt64()
		} else {
			insightsLookbackWindow1 = nil
		}
		maxBatchSize1 := new(int64)
		if !r.Configuration.SourceFacebookMarketing.MaxBatchSize.IsUnknown() && !r.Configuration.SourceFacebookMarketing.MaxBatchSize.IsNull() {
			*maxBatchSize1 = r.Configuration.SourceFacebookMarketing.MaxBatchSize.ValueInt64()
		} else {
			maxBatchSize1 = nil
		}
		pageSize := new(int64)
		if !r.Configuration.SourceFacebookMarketing.PageSize.IsUnknown() && !r.Configuration.SourceFacebookMarketing.PageSize.IsNull() {
			*pageSize = r.Configuration.SourceFacebookMarketing.PageSize.ValueInt64()
		} else {
			pageSize = nil
		}
		sourceType37 := shared.SourceFacebookMarketingFacebookMarketingEnum(r.Configuration.SourceFacebookMarketing.SourceType.ValueString())
		startDate14, _ := time.Parse(time.RFC3339Nano, r.Configuration.SourceFacebookMarketing.StartDate.ValueString())
		sourceFacebookMarketing = &shared.SourceFacebookMarketing{
			AccessToken:                accessToken3,
			AccountID:                  accountID,
			ActionBreakdownsAllowEmpty: actionBreakdownsAllowEmpty,
			CustomInsights:             customInsights,
			EndDate:                    endDate2,
			FetchThumbnailImages:       fetchThumbnailImages,
			IncludeDeleted:             includeDeleted,
			InsightsLookbackWindow:     insightsLookbackWindow1,
			MaxBatchSize:               maxBatchSize1,
			PageSize:                   pageSize,
			SourceType:                 sourceType37,
			StartDate:                  startDate14,
		}
	}
	if sourceFacebookMarketing != nil {
		configuration = shared.SourceConfiguration{
			SourceFacebookMarketing: sourceFacebookMarketing,
		}
	}
	var sourceFacebookPages *shared.SourceFacebookPages
	if r.Configuration.SourceFacebookPages != nil {
		accessToken4 := r.Configuration.SourceFacebookPages.AccessToken.ValueString()
		pageID := r.Configuration.SourceFacebookPages.PageID.ValueString()
		sourceType38 := shared.SourceFacebookPagesFacebookPagesEnum(r.Configuration.SourceFacebookPages.SourceType.ValueString())
		sourceFacebookPages = &shared.SourceFacebookPages{
			AccessToken: accessToken4,
			PageID:      pageID,
			SourceType:  sourceType38,
		}
	}
	if sourceFacebookPages != nil {
		configuration = shared.SourceConfiguration{
			SourceFacebookPages: sourceFacebookPages,
		}
	}
	var sourceFaker *shared.SourceFaker
	if r.Configuration.SourceFaker != nil {
		count := r.Configuration.SourceFaker.Count.ValueInt64()
		parallelism := new(int64)
		if !r.Configuration.SourceFaker.Parallelism.IsUnknown() && !r.Configuration.SourceFaker.Parallelism.IsNull() {
			*parallelism = r.Configuration.SourceFaker.Parallelism.ValueInt64()
		} else {
			parallelism = nil
		}
		recordsPerSlice := new(int64)
		if !r.Configuration.SourceFaker.RecordsPerSlice.IsUnknown() && !r.Configuration.SourceFaker.RecordsPerSlice.IsNull() {
			*recordsPerSlice = r.Configuration.SourceFaker.RecordsPerSlice.ValueInt64()
		} else {
			recordsPerSlice = nil
		}
		recordsPerSync := new(int64)
		if !r.Configuration.SourceFaker.RecordsPerSync.IsUnknown() && !r.Configuration.SourceFaker.RecordsPerSync.IsNull() {
			*recordsPerSync = r.Configuration.SourceFaker.RecordsPerSync.ValueInt64()
		} else {
			recordsPerSync = nil
		}
		seed1 := new(int64)
		if !r.Configuration.SourceFaker.Seed.IsUnknown() && !r.Configuration.SourceFaker.Seed.IsNull() {
			*seed1 = r.Configuration.SourceFaker.Seed.ValueInt64()
		} else {
			seed1 = nil
		}
		sourceType39 := shared.SourceFakerFakerEnum(r.Configuration.SourceFaker.SourceType.ValueString())
		sourceFaker = &shared.SourceFaker{
			Count:           count,
			Parallelism:     parallelism,
			RecordsPerSlice: recordsPerSlice,
			RecordsPerSync:  recordsPerSync,
			Seed:            seed1,
			SourceType:      sourceType39,
		}
	}
	if sourceFaker != nil {
		configuration = shared.SourceConfiguration{
			SourceFaker: sourceFaker,
		}
	}
	var sourceFauna *shared.SourceFauna
	if r.Configuration.SourceFauna != nil {
		var collection *shared.SourceFaunaCollection
		if r.Configuration.SourceFauna.Collection != nil {
			var deletions shared.SourceFaunaCollectionDeletionMode
			var sourceFaunaCollectionDeletionModeDisabled *shared.SourceFaunaCollectionDeletionModeDisabled
			if r.Configuration.SourceFauna.Collection.Deletions.SourceFaunaCollectionDeletionModeDisabled != nil {
				deletionMode := shared.SourceFaunaCollectionDeletionModeDisabledDeletionModeEnum(r.Configuration.SourceFauna.Collection.Deletions.SourceFaunaCollectionDeletionModeDisabled.DeletionMode.ValueString())
				sourceFaunaCollectionDeletionModeDisabled = &shared.SourceFaunaCollectionDeletionModeDisabled{
					DeletionMode: deletionMode,
				}
			}
			if sourceFaunaCollectionDeletionModeDisabled != nil {
				deletions = shared.SourceFaunaCollectionDeletionMode{
					SourceFaunaCollectionDeletionModeDisabled: sourceFaunaCollectionDeletionModeDisabled,
				}
			}
			var sourceFaunaCollectionDeletionModeEnabled *shared.SourceFaunaCollectionDeletionModeEnabled
			if r.Configuration.SourceFauna.Collection.Deletions.SourceFaunaCollectionDeletionModeEnabled != nil {
				column := r.Configuration.SourceFauna.Collection.Deletions.SourceFaunaCollectionDeletionModeEnabled.Column.ValueString()
				deletionMode1 := shared.SourceFaunaCollectionDeletionModeEnabledDeletionModeEnum(r.Configuration.SourceFauna.Collection.Deletions.SourceFaunaCollectionDeletionModeEnabled.DeletionMode.ValueString())
				sourceFaunaCollectionDeletionModeEnabled = &shared.SourceFaunaCollectionDeletionModeEnabled{
					Column:       column,
					DeletionMode: deletionMode1,
				}
			}
			if sourceFaunaCollectionDeletionModeEnabled != nil {
				deletions = shared.SourceFaunaCollectionDeletionMode{
					SourceFaunaCollectionDeletionModeEnabled: sourceFaunaCollectionDeletionModeEnabled,
				}
			}
			pageSize1 := r.Configuration.SourceFauna.Collection.PageSize.ValueInt64()
			collection = &shared.SourceFaunaCollection{
				Deletions: deletions,
				PageSize:  pageSize1,
			}
		}
		domain := r.Configuration.SourceFauna.Domain.ValueString()
		port2 := r.Configuration.SourceFauna.Port.ValueInt64()
		scheme := r.Configuration.SourceFauna.Scheme.ValueString()
		secret := r.Configuration.SourceFauna.Secret.ValueString()
		sourceType40 := shared.SourceFaunaFaunaEnum(r.Configuration.SourceFauna.SourceType.ValueString())
		sourceFauna = &shared.SourceFauna{
			Collection: collection,
			Domain:     domain,
			Port:       port2,
			Scheme:     scheme,
			Secret:     secret,
			SourceType: sourceType40,
		}
	}
	if sourceFauna != nil {
		configuration = shared.SourceConfiguration{
			SourceFauna: sourceFauna,
		}
	}
	var sourceFileSecure *shared.SourceFileSecure
	if r.Configuration.SourceFileSecure != nil {
		datasetName := r.Configuration.SourceFileSecure.DatasetName.ValueString()
		format := shared.SourceFileSecureFileFormatEnum(r.Configuration.SourceFileSecure.Format.ValueString())
		var provider shared.SourceFileSecureStorageProvider
		var sourceFileSecureStorageProviderHTTPSPublicWeb *shared.SourceFileSecureStorageProviderHTTPSPublicWeb
		if r.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderHTTPSPublicWeb != nil {
			storage := shared.SourceFileSecureStorageProviderHTTPSPublicWebStorageEnum(r.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderHTTPSPublicWeb.Storage.ValueString())
			userAgent := new(bool)
			if !r.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderHTTPSPublicWeb.UserAgent.IsUnknown() && !r.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderHTTPSPublicWeb.UserAgent.IsNull() {
				*userAgent = r.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderHTTPSPublicWeb.UserAgent.ValueBool()
			} else {
				userAgent = nil
			}
			sourceFileSecureStorageProviderHTTPSPublicWeb = &shared.SourceFileSecureStorageProviderHTTPSPublicWeb{
				Storage:   storage,
				UserAgent: userAgent,
			}
		}
		if sourceFileSecureStorageProviderHTTPSPublicWeb != nil {
			provider = shared.SourceFileSecureStorageProvider{
				SourceFileSecureStorageProviderHTTPSPublicWeb: sourceFileSecureStorageProviderHTTPSPublicWeb,
			}
		}
		var sourceFileSecureStorageProviderGCSGoogleCloudStorage *shared.SourceFileSecureStorageProviderGCSGoogleCloudStorage
		if r.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderGCSGoogleCloudStorage != nil {
			serviceAccountJSON := new(string)
			if !r.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderGCSGoogleCloudStorage.ServiceAccountJSON.IsUnknown() && !r.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderGCSGoogleCloudStorage.ServiceAccountJSON.IsNull() {
				*serviceAccountJSON = r.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderGCSGoogleCloudStorage.ServiceAccountJSON.ValueString()
			} else {
				serviceAccountJSON = nil
			}
			storage1 := shared.SourceFileSecureStorageProviderGCSGoogleCloudStorageStorageEnum(r.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderGCSGoogleCloudStorage.Storage.ValueString())
			sourceFileSecureStorageProviderGCSGoogleCloudStorage = &shared.SourceFileSecureStorageProviderGCSGoogleCloudStorage{
				ServiceAccountJSON: serviceAccountJSON,
				Storage:            storage1,
			}
		}
		if sourceFileSecureStorageProviderGCSGoogleCloudStorage != nil {
			provider = shared.SourceFileSecureStorageProvider{
				SourceFileSecureStorageProviderGCSGoogleCloudStorage: sourceFileSecureStorageProviderGCSGoogleCloudStorage,
			}
		}
		var sourceFileSecureStorageProviderS3AmazonWebServices *shared.SourceFileSecureStorageProviderS3AmazonWebServices
		if r.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderS3AmazonWebServices != nil {
			awsAccessKeyID := new(string)
			if !r.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderS3AmazonWebServices.AwsAccessKeyID.IsUnknown() && !r.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderS3AmazonWebServices.AwsAccessKeyID.IsNull() {
				*awsAccessKeyID = r.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderS3AmazonWebServices.AwsAccessKeyID.ValueString()
			} else {
				awsAccessKeyID = nil
			}
			awsSecretAccessKey := new(string)
			if !r.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderS3AmazonWebServices.AwsSecretAccessKey.IsUnknown() && !r.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderS3AmazonWebServices.AwsSecretAccessKey.IsNull() {
				*awsSecretAccessKey = r.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderS3AmazonWebServices.AwsSecretAccessKey.ValueString()
			} else {
				awsSecretAccessKey = nil
			}
			storage2 := shared.SourceFileSecureStorageProviderS3AmazonWebServicesStorageEnum(r.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderS3AmazonWebServices.Storage.ValueString())
			sourceFileSecureStorageProviderS3AmazonWebServices = &shared.SourceFileSecureStorageProviderS3AmazonWebServices{
				AwsAccessKeyID:     awsAccessKeyID,
				AwsSecretAccessKey: awsSecretAccessKey,
				Storage:            storage2,
			}
		}
		if sourceFileSecureStorageProviderS3AmazonWebServices != nil {
			provider = shared.SourceFileSecureStorageProvider{
				SourceFileSecureStorageProviderS3AmazonWebServices: sourceFileSecureStorageProviderS3AmazonWebServices,
			}
		}
		var sourceFileSecureStorageProviderAzBlobAzureBlobStorage *shared.SourceFileSecureStorageProviderAzBlobAzureBlobStorage
		if r.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderAzBlobAzureBlobStorage != nil {
			sasToken := new(string)
			if !r.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderAzBlobAzureBlobStorage.SasToken.IsUnknown() && !r.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderAzBlobAzureBlobStorage.SasToken.IsNull() {
				*sasToken = r.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderAzBlobAzureBlobStorage.SasToken.ValueString()
			} else {
				sasToken = nil
			}
			sharedKey := new(string)
			if !r.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderAzBlobAzureBlobStorage.SharedKey.IsUnknown() && !r.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderAzBlobAzureBlobStorage.SharedKey.IsNull() {
				*sharedKey = r.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderAzBlobAzureBlobStorage.SharedKey.ValueString()
			} else {
				sharedKey = nil
			}
			storage3 := shared.SourceFileSecureStorageProviderAzBlobAzureBlobStorageStorageEnum(r.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderAzBlobAzureBlobStorage.Storage.ValueString())
			storageAccount := r.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderAzBlobAzureBlobStorage.StorageAccount.ValueString()
			sourceFileSecureStorageProviderAzBlobAzureBlobStorage = &shared.SourceFileSecureStorageProviderAzBlobAzureBlobStorage{
				SasToken:       sasToken,
				SharedKey:      sharedKey,
				Storage:        storage3,
				StorageAccount: storageAccount,
			}
		}
		if sourceFileSecureStorageProviderAzBlobAzureBlobStorage != nil {
			provider = shared.SourceFileSecureStorageProvider{
				SourceFileSecureStorageProviderAzBlobAzureBlobStorage: sourceFileSecureStorageProviderAzBlobAzureBlobStorage,
			}
		}
		var sourceFileSecureStorageProviderSSHSecureShell *shared.SourceFileSecureStorageProviderSSHSecureShell
		if r.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderSSHSecureShell != nil {
			host2 := r.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderSSHSecureShell.Host.ValueString()
			password3 := new(string)
			if !r.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderSSHSecureShell.Password.IsUnknown() && !r.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderSSHSecureShell.Password.IsNull() {
				*password3 = r.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderSSHSecureShell.Password.ValueString()
			} else {
				password3 = nil
			}
			port3 := new(string)
			if !r.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderSSHSecureShell.Port.IsUnknown() && !r.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderSSHSecureShell.Port.IsNull() {
				*port3 = r.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderSSHSecureShell.Port.ValueString()
			} else {
				port3 = nil
			}
			storage4 := shared.SourceFileSecureStorageProviderSSHSecureShellStorageEnum(r.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderSSHSecureShell.Storage.ValueString())
			user := r.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderSSHSecureShell.User.ValueString()
			sourceFileSecureStorageProviderSSHSecureShell = &shared.SourceFileSecureStorageProviderSSHSecureShell{
				Host:     host2,
				Password: password3,
				Port:     port3,
				Storage:  storage4,
				User:     user,
			}
		}
		if sourceFileSecureStorageProviderSSHSecureShell != nil {
			provider = shared.SourceFileSecureStorageProvider{
				SourceFileSecureStorageProviderSSHSecureShell: sourceFileSecureStorageProviderSSHSecureShell,
			}
		}
		var sourceFileSecureStorageProviderSCPSecureCopyProtocol *shared.SourceFileSecureStorageProviderSCPSecureCopyProtocol
		if r.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderSCPSecureCopyProtocol != nil {
			host3 := r.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderSCPSecureCopyProtocol.Host.ValueString()
			password4 := new(string)
			if !r.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderSCPSecureCopyProtocol.Password.IsUnknown() && !r.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderSCPSecureCopyProtocol.Password.IsNull() {
				*password4 = r.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderSCPSecureCopyProtocol.Password.ValueString()
			} else {
				password4 = nil
			}
			port4 := new(string)
			if !r.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderSCPSecureCopyProtocol.Port.IsUnknown() && !r.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderSCPSecureCopyProtocol.Port.IsNull() {
				*port4 = r.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderSCPSecureCopyProtocol.Port.ValueString()
			} else {
				port4 = nil
			}
			storage5 := shared.SourceFileSecureStorageProviderSCPSecureCopyProtocolStorageEnum(r.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderSCPSecureCopyProtocol.Storage.ValueString())
			user1 := r.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderSCPSecureCopyProtocol.User.ValueString()
			sourceFileSecureStorageProviderSCPSecureCopyProtocol = &shared.SourceFileSecureStorageProviderSCPSecureCopyProtocol{
				Host:     host3,
				Password: password4,
				Port:     port4,
				Storage:  storage5,
				User:     user1,
			}
		}
		if sourceFileSecureStorageProviderSCPSecureCopyProtocol != nil {
			provider = shared.SourceFileSecureStorageProvider{
				SourceFileSecureStorageProviderSCPSecureCopyProtocol: sourceFileSecureStorageProviderSCPSecureCopyProtocol,
			}
		}
		var sourceFileSecureStorageProviderSFTPSecureFileTransferProtocol *shared.SourceFileSecureStorageProviderSFTPSecureFileTransferProtocol
		if r.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderSFTPSecureFileTransferProtocol != nil {
			host4 := r.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderSFTPSecureFileTransferProtocol.Host.ValueString()
			password5 := new(string)
			if !r.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderSFTPSecureFileTransferProtocol.Password.IsUnknown() && !r.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderSFTPSecureFileTransferProtocol.Password.IsNull() {
				*password5 = r.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderSFTPSecureFileTransferProtocol.Password.ValueString()
			} else {
				password5 = nil
			}
			port5 := new(string)
			if !r.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderSFTPSecureFileTransferProtocol.Port.IsUnknown() && !r.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderSFTPSecureFileTransferProtocol.Port.IsNull() {
				*port5 = r.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderSFTPSecureFileTransferProtocol.Port.ValueString()
			} else {
				port5 = nil
			}
			storage6 := shared.SourceFileSecureStorageProviderSFTPSecureFileTransferProtocolStorageEnum(r.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderSFTPSecureFileTransferProtocol.Storage.ValueString())
			user2 := r.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderSFTPSecureFileTransferProtocol.User.ValueString()
			sourceFileSecureStorageProviderSFTPSecureFileTransferProtocol = &shared.SourceFileSecureStorageProviderSFTPSecureFileTransferProtocol{
				Host:     host4,
				Password: password5,
				Port:     port5,
				Storage:  storage6,
				User:     user2,
			}
		}
		if sourceFileSecureStorageProviderSFTPSecureFileTransferProtocol != nil {
			provider = shared.SourceFileSecureStorageProvider{
				SourceFileSecureStorageProviderSFTPSecureFileTransferProtocol: sourceFileSecureStorageProviderSFTPSecureFileTransferProtocol,
			}
		}
		readerOptions := new(string)
		if !r.Configuration.SourceFileSecure.ReaderOptions.IsUnknown() && !r.Configuration.SourceFileSecure.ReaderOptions.IsNull() {
			*readerOptions = r.Configuration.SourceFileSecure.ReaderOptions.ValueString()
		} else {
			readerOptions = nil
		}
		sourceType41 := shared.SourceFileSecureFileSecureEnum(r.Configuration.SourceFileSecure.SourceType.ValueString())
		url1 := r.Configuration.SourceFileSecure.URL.ValueString()
		sourceFileSecure = &shared.SourceFileSecure{
			DatasetName:   datasetName,
			Format:        format,
			Provider:      provider,
			ReaderOptions: readerOptions,
			SourceType:    sourceType41,
			URL:           url1,
		}
	}
	if sourceFileSecure != nil {
		configuration = shared.SourceConfiguration{
			SourceFileSecure: sourceFileSecure,
		}
	}
	var sourceFirebolt *shared.SourceFirebolt
	if r.Configuration.SourceFirebolt != nil {
		account := new(string)
		if !r.Configuration.SourceFirebolt.Account.IsUnknown() && !r.Configuration.SourceFirebolt.Account.IsNull() {
			*account = r.Configuration.SourceFirebolt.Account.ValueString()
		} else {
			account = nil
		}
		database2 := r.Configuration.SourceFirebolt.Database.ValueString()
		engine := new(string)
		if !r.Configuration.SourceFirebolt.Engine.IsUnknown() && !r.Configuration.SourceFirebolt.Engine.IsNull() {
			*engine = r.Configuration.SourceFirebolt.Engine.ValueString()
		} else {
			engine = nil
		}
		host5 := new(string)
		if !r.Configuration.SourceFirebolt.Host.IsUnknown() && !r.Configuration.SourceFirebolt.Host.IsNull() {
			*host5 = r.Configuration.SourceFirebolt.Host.ValueString()
		} else {
			host5 = nil
		}
		password6 := r.Configuration.SourceFirebolt.Password.ValueString()
		sourceType42 := shared.SourceFireboltFireboltEnum(r.Configuration.SourceFirebolt.SourceType.ValueString())
		username3 := r.Configuration.SourceFirebolt.Username.ValueString()
		sourceFirebolt = &shared.SourceFirebolt{
			Account:    account,
			Database:   database2,
			Engine:     engine,
			Host:       host5,
			Password:   password6,
			SourceType: sourceType42,
			Username:   username3,
		}
	}
	if sourceFirebolt != nil {
		configuration = shared.SourceConfiguration{
			SourceFirebolt: sourceFirebolt,
		}
	}
	var sourceFreshcaller *shared.SourceFreshcaller
	if r.Configuration.SourceFreshcaller != nil {
		apiKey12 := r.Configuration.SourceFreshcaller.APIKey.ValueString()
		domain1 := r.Configuration.SourceFreshcaller.Domain.ValueString()
		requestsPerMinute := new(int64)
		if !r.Configuration.SourceFreshcaller.RequestsPerMinute.IsUnknown() && !r.Configuration.SourceFreshcaller.RequestsPerMinute.IsNull() {
			*requestsPerMinute = r.Configuration.SourceFreshcaller.RequestsPerMinute.ValueInt64()
		} else {
			requestsPerMinute = nil
		}
		sourceType43 := shared.SourceFreshcallerFreshcallerEnum(r.Configuration.SourceFreshcaller.SourceType.ValueString())
		var startDate15 interface{}
		_ = json.Unmarshal([]byte(r.Configuration.SourceFreshcaller.StartDate.ValueString()), &startDate15)
		syncLagMinutes := new(int64)
		if !r.Configuration.SourceFreshcaller.SyncLagMinutes.IsUnknown() && !r.Configuration.SourceFreshcaller.SyncLagMinutes.IsNull() {
			*syncLagMinutes = r.Configuration.SourceFreshcaller.SyncLagMinutes.ValueInt64()
		} else {
			syncLagMinutes = nil
		}
		sourceFreshcaller = &shared.SourceFreshcaller{
			APIKey:            apiKey12,
			Domain:            domain1,
			RequestsPerMinute: requestsPerMinute,
			SourceType:        sourceType43,
			StartDate:         startDate15,
			SyncLagMinutes:    syncLagMinutes,
		}
	}
	if sourceFreshcaller != nil {
		configuration = shared.SourceConfiguration{
			SourceFreshcaller: sourceFreshcaller,
		}
	}
	var sourceFreshdesk *shared.SourceFreshdesk
	if r.Configuration.SourceFreshdesk != nil {
		apiKey13 := r.Configuration.SourceFreshdesk.APIKey.ValueString()
		domain2 := r.Configuration.SourceFreshdesk.Domain.ValueString()
		requestsPerMinute1 := new(int64)
		if !r.Configuration.SourceFreshdesk.RequestsPerMinute.IsUnknown() && !r.Configuration.SourceFreshdesk.RequestsPerMinute.IsNull() {
			*requestsPerMinute1 = r.Configuration.SourceFreshdesk.RequestsPerMinute.ValueInt64()
		} else {
			requestsPerMinute1 = nil
		}
		sourceType44 := shared.SourceFreshdeskFreshdeskEnum(r.Configuration.SourceFreshdesk.SourceType.ValueString())
		startDate16 := new(time.Time)
		if !r.Configuration.SourceFreshdesk.StartDate.IsUnknown() && !r.Configuration.SourceFreshdesk.StartDate.IsNull() {
			*startDate16, _ = time.Parse(time.RFC3339Nano, r.Configuration.SourceFreshdesk.StartDate.ValueString())
		} else {
			startDate16 = nil
		}
		sourceFreshdesk = &shared.SourceFreshdesk{
			APIKey:            apiKey13,
			Domain:            domain2,
			RequestsPerMinute: requestsPerMinute1,
			SourceType:        sourceType44,
			StartDate:         startDate16,
		}
	}
	if sourceFreshdesk != nil {
		configuration = shared.SourceConfiguration{
			SourceFreshdesk: sourceFreshdesk,
		}
	}
	var sourceFreshsales *shared.SourceFreshsales
	if r.Configuration.SourceFreshsales != nil {
		apiKey14 := r.Configuration.SourceFreshsales.APIKey.ValueString()
		domainName1 := r.Configuration.SourceFreshsales.DomainName.ValueString()
		sourceType45 := shared.SourceFreshsalesFreshsalesEnum(r.Configuration.SourceFreshsales.SourceType.ValueString())
		sourceFreshsales = &shared.SourceFreshsales{
			APIKey:     apiKey14,
			DomainName: domainName1,
			SourceType: sourceType45,
		}
	}
	if sourceFreshsales != nil {
		configuration = shared.SourceConfiguration{
			SourceFreshsales: sourceFreshsales,
		}
	}
	var sourceGcs *shared.SourceGcs
	if r.Configuration.SourceGcs != nil {
		gcsBucket := r.Configuration.SourceGcs.GcsBucket.ValueString()
		gcsPath := r.Configuration.SourceGcs.GcsPath.ValueString()
		serviceAccount := r.Configuration.SourceGcs.ServiceAccount.ValueString()
		sourceType46 := shared.SourceGcsGcsEnum(r.Configuration.SourceGcs.SourceType.ValueString())
		sourceGcs = &shared.SourceGcs{
			GcsBucket:      gcsBucket,
			GcsPath:        gcsPath,
			ServiceAccount: serviceAccount,
			SourceType:     sourceType46,
		}
	}
	if sourceGcs != nil {
		configuration = shared.SourceConfiguration{
			SourceGcs: sourceGcs,
		}
	}
	var sourceGetlago *shared.SourceGetlago
	if r.Configuration.SourceGetlago != nil {
		apiKey15 := r.Configuration.SourceGetlago.APIKey.ValueString()
		sourceType47 := shared.SourceGetlagoGetlagoEnum(r.Configuration.SourceGetlago.SourceType.ValueString())
		sourceGetlago = &shared.SourceGetlago{
			APIKey:     apiKey15,
			SourceType: sourceType47,
		}
	}
	if sourceGetlago != nil {
		configuration = shared.SourceConfiguration{
			SourceGetlago: sourceGetlago,
		}
	}
	var sourceGithub *shared.SourceGithub
	if r.Configuration.SourceGithub != nil {
		branch := new(string)
		if !r.Configuration.SourceGithub.Branch.IsUnknown() && !r.Configuration.SourceGithub.Branch.IsNull() {
			*branch = r.Configuration.SourceGithub.Branch.ValueString()
		} else {
			branch = nil
		}
		var credentials3 *shared.SourceGithubAuthentication
		var sourceGithubAuthenticationOAuth *shared.SourceGithubAuthenticationOAuth
		if r.Configuration.SourceGithub.Credentials.SourceGithubAuthenticationOAuth != nil {
			accessToken5 := r.Configuration.SourceGithub.Credentials.SourceGithubAuthenticationOAuth.AccessToken.ValueString()
			optionTitle2 := new(shared.SourceGithubAuthenticationOAuthOptionTitleEnum)
			if !r.Configuration.SourceGithub.Credentials.SourceGithubAuthenticationOAuth.OptionTitle.IsUnknown() && !r.Configuration.SourceGithub.Credentials.SourceGithubAuthenticationOAuth.OptionTitle.IsNull() {
				*optionTitle2 = shared.SourceGithubAuthenticationOAuthOptionTitleEnum(r.Configuration.SourceGithub.Credentials.SourceGithubAuthenticationOAuth.OptionTitle.ValueString())
			} else {
				optionTitle2 = nil
			}
			sourceGithubAuthenticationOAuth = &shared.SourceGithubAuthenticationOAuth{
				AccessToken: accessToken5,
				OptionTitle: optionTitle2,
			}
		}
		if sourceGithubAuthenticationOAuth != nil {
			credentials3 = &shared.SourceGithubAuthentication{
				SourceGithubAuthenticationOAuth: sourceGithubAuthenticationOAuth,
			}
		}
		var sourceGithubAuthenticationPersonalAccessToken *shared.SourceGithubAuthenticationPersonalAccessToken
		if r.Configuration.SourceGithub.Credentials.SourceGithubAuthenticationPersonalAccessToken != nil {
			optionTitle3 := new(shared.SourceGithubAuthenticationPersonalAccessTokenOptionTitleEnum)
			if !r.Configuration.SourceGithub.Credentials.SourceGithubAuthenticationPersonalAccessToken.OptionTitle.IsUnknown() && !r.Configuration.SourceGithub.Credentials.SourceGithubAuthenticationPersonalAccessToken.OptionTitle.IsNull() {
				*optionTitle3 = shared.SourceGithubAuthenticationPersonalAccessTokenOptionTitleEnum(r.Configuration.SourceGithub.Credentials.SourceGithubAuthenticationPersonalAccessToken.OptionTitle.ValueString())
			} else {
				optionTitle3 = nil
			}
			personalAccessToken1 := r.Configuration.SourceGithub.Credentials.SourceGithubAuthenticationPersonalAccessToken.PersonalAccessToken.ValueString()
			sourceGithubAuthenticationPersonalAccessToken = &shared.SourceGithubAuthenticationPersonalAccessToken{
				OptionTitle:         optionTitle3,
				PersonalAccessToken: personalAccessToken1,
			}
		}
		if sourceGithubAuthenticationPersonalAccessToken != nil {
			credentials3 = &shared.SourceGithubAuthentication{
				SourceGithubAuthenticationPersonalAccessToken: sourceGithubAuthenticationPersonalAccessToken,
			}
		}
		pageSizeForLargeStreams := new(int64)
		if !r.Configuration.SourceGithub.PageSizeForLargeStreams.IsUnknown() && !r.Configuration.SourceGithub.PageSizeForLargeStreams.IsNull() {
			*pageSizeForLargeStreams = r.Configuration.SourceGithub.PageSizeForLargeStreams.ValueInt64()
		} else {
			pageSizeForLargeStreams = nil
		}
		repository := r.Configuration.SourceGithub.Repository.ValueString()
		sourceType48 := shared.SourceGithubGithubEnum(r.Configuration.SourceGithub.SourceType.ValueString())
		startDate17, _ := time.Parse(time.RFC3339Nano, r.Configuration.SourceGithub.StartDate.ValueString())
		sourceGithub = &shared.SourceGithub{
			Branch:                  branch,
			Credentials:             credentials3,
			PageSizeForLargeStreams: pageSizeForLargeStreams,
			Repository:              repository,
			SourceType:              sourceType48,
			StartDate:               startDate17,
		}
	}
	if sourceGithub != nil {
		configuration = shared.SourceConfiguration{
			SourceGithub: sourceGithub,
		}
	}
	var sourceGitlab *shared.SourceGitlab
	if r.Configuration.SourceGitlab != nil {
		apiURL := r.Configuration.SourceGitlab.APIURL.ValueString()
		var credentials4 shared.SourceGitlabAuthorizationMethod
		var sourceGitlabAuthorizationMethodOAuth20 *shared.SourceGitlabAuthorizationMethodOAuth20
		if r.Configuration.SourceGitlab.Credentials.SourceGitlabAuthorizationMethodOAuth20 != nil {
			accessToken6 := r.Configuration.SourceGitlab.Credentials.SourceGitlabAuthorizationMethodOAuth20.AccessToken.ValueString()
			authType4 := new(shared.SourceGitlabAuthorizationMethodOAuth20AuthTypeEnum)
			if !r.Configuration.SourceGitlab.Credentials.SourceGitlabAuthorizationMethodOAuth20.AuthType.IsUnknown() && !r.Configuration.SourceGitlab.Credentials.SourceGitlabAuthorizationMethodOAuth20.AuthType.IsNull() {
				*authType4 = shared.SourceGitlabAuthorizationMethodOAuth20AuthTypeEnum(r.Configuration.SourceGitlab.Credentials.SourceGitlabAuthorizationMethodOAuth20.AuthType.ValueString())
			} else {
				authType4 = nil
			}
			clientId5 := r.Configuration.SourceGitlab.Credentials.SourceGitlabAuthorizationMethodOAuth20.ClientID.ValueString()
			clientSecret5 := r.Configuration.SourceGitlab.Credentials.SourceGitlabAuthorizationMethodOAuth20.ClientSecret.ValueString()
			refreshToken5 := r.Configuration.SourceGitlab.Credentials.SourceGitlabAuthorizationMethodOAuth20.RefreshToken.ValueString()
			tokenExpiryDate1, _ := time.Parse(time.RFC3339Nano, r.Configuration.SourceGitlab.Credentials.SourceGitlabAuthorizationMethodOAuth20.TokenExpiryDate.ValueString())
			sourceGitlabAuthorizationMethodOAuth20 = &shared.SourceGitlabAuthorizationMethodOAuth20{
				AccessToken:     accessToken6,
				AuthType:        authType4,
				ClientID:        clientId5,
				ClientSecret:    clientSecret5,
				RefreshToken:    refreshToken5,
				TokenExpiryDate: tokenExpiryDate1,
			}
		}
		if sourceGitlabAuthorizationMethodOAuth20 != nil {
			credentials4 = shared.SourceGitlabAuthorizationMethod{
				SourceGitlabAuthorizationMethodOAuth20: sourceGitlabAuthorizationMethodOAuth20,
			}
		}
		var sourceGitlabAuthorizationMethodPrivateToken *shared.SourceGitlabAuthorizationMethodPrivateToken
		if r.Configuration.SourceGitlab.Credentials.SourceGitlabAuthorizationMethodPrivateToken != nil {
			accessToken7 := r.Configuration.SourceGitlab.Credentials.SourceGitlabAuthorizationMethodPrivateToken.AccessToken.ValueString()
			authType5 := new(shared.SourceGitlabAuthorizationMethodPrivateTokenAuthTypeEnum)
			if !r.Configuration.SourceGitlab.Credentials.SourceGitlabAuthorizationMethodPrivateToken.AuthType.IsUnknown() && !r.Configuration.SourceGitlab.Credentials.SourceGitlabAuthorizationMethodPrivateToken.AuthType.IsNull() {
				*authType5 = shared.SourceGitlabAuthorizationMethodPrivateTokenAuthTypeEnum(r.Configuration.SourceGitlab.Credentials.SourceGitlabAuthorizationMethodPrivateToken.AuthType.ValueString())
			} else {
				authType5 = nil
			}
			sourceGitlabAuthorizationMethodPrivateToken = &shared.SourceGitlabAuthorizationMethodPrivateToken{
				AccessToken: accessToken7,
				AuthType:    authType5,
			}
		}
		if sourceGitlabAuthorizationMethodPrivateToken != nil {
			credentials4 = shared.SourceGitlabAuthorizationMethod{
				SourceGitlabAuthorizationMethodPrivateToken: sourceGitlabAuthorizationMethodPrivateToken,
			}
		}
		groups := new(string)
		if !r.Configuration.SourceGitlab.Groups.IsUnknown() && !r.Configuration.SourceGitlab.Groups.IsNull() {
			*groups = r.Configuration.SourceGitlab.Groups.ValueString()
		} else {
			groups = nil
		}
		projects := new(string)
		if !r.Configuration.SourceGitlab.Projects.IsUnknown() && !r.Configuration.SourceGitlab.Projects.IsNull() {
			*projects = r.Configuration.SourceGitlab.Projects.ValueString()
		} else {
			projects = nil
		}
		sourceType49 := shared.SourceGitlabGitlabEnum(r.Configuration.SourceGitlab.SourceType.ValueString())
		startDate18, _ := time.Parse(time.RFC3339Nano, r.Configuration.SourceGitlab.StartDate.ValueString())
		sourceGitlab = &shared.SourceGitlab{
			APIURL:      apiURL,
			Credentials: credentials4,
			Groups:      groups,
			Projects:    projects,
			SourceType:  sourceType49,
			StartDate:   startDate18,
		}
	}
	if sourceGitlab != nil {
		configuration = shared.SourceConfiguration{
			SourceGitlab: sourceGitlab,
		}
	}
	var sourceGlassfrog *shared.SourceGlassfrog
	if r.Configuration.SourceGlassfrog != nil {
		apiKey16 := r.Configuration.SourceGlassfrog.APIKey.ValueString()
		sourceType50 := shared.SourceGlassfrogGlassfrogEnum(r.Configuration.SourceGlassfrog.SourceType.ValueString())
		sourceGlassfrog = &shared.SourceGlassfrog{
			APIKey:     apiKey16,
			SourceType: sourceType50,
		}
	}
	if sourceGlassfrog != nil {
		configuration = shared.SourceConfiguration{
			SourceGlassfrog: sourceGlassfrog,
		}
	}
	var sourceGnews *shared.SourceGnews
	if r.Configuration.SourceGnews != nil {
		apiKey17 := r.Configuration.SourceGnews.APIKey.ValueString()
		country := new(shared.SourceGnewsCountryEnum)
		if !r.Configuration.SourceGnews.Country.IsUnknown() && !r.Configuration.SourceGnews.Country.IsNull() {
			*country = shared.SourceGnewsCountryEnum(r.Configuration.SourceGnews.Country.ValueString())
		} else {
			country = nil
		}
		endDate3 := new(string)
		if !r.Configuration.SourceGnews.EndDate.IsUnknown() && !r.Configuration.SourceGnews.EndDate.IsNull() {
			*endDate3 = r.Configuration.SourceGnews.EndDate.ValueString()
		} else {
			endDate3 = nil
		}
		in := make([]shared.SourceGnewsInEnum, 0)
		for _, inItem := range r.Configuration.SourceGnews.In {
			in = append(in, shared.SourceGnewsInEnum(inItem.ValueString()))
		}
		language := new(shared.SourceGnewsLanguageEnum)
		if !r.Configuration.SourceGnews.Language.IsUnknown() && !r.Configuration.SourceGnews.Language.IsNull() {
			*language = shared.SourceGnewsLanguageEnum(r.Configuration.SourceGnews.Language.ValueString())
		} else {
			language = nil
		}
		nullable := make([]shared.SourceGnewsNullableEnum, 0)
		for _, nullableItem := range r.Configuration.SourceGnews.Nullable {
			nullable = append(nullable, shared.SourceGnewsNullableEnum(nullableItem.ValueString()))
		}
		query := r.Configuration.SourceGnews.Query.ValueString()
		sortby := new(shared.SourceGnewsSortByEnum)
		if !r.Configuration.SourceGnews.Sortby.IsUnknown() && !r.Configuration.SourceGnews.Sortby.IsNull() {
			*sortby = shared.SourceGnewsSortByEnum(r.Configuration.SourceGnews.Sortby.ValueString())
		} else {
			sortby = nil
		}
		sourceType51 := shared.SourceGnewsGnewsEnum(r.Configuration.SourceGnews.SourceType.ValueString())
		startDate19 := new(string)
		if !r.Configuration.SourceGnews.StartDate.IsUnknown() && !r.Configuration.SourceGnews.StartDate.IsNull() {
			*startDate19 = r.Configuration.SourceGnews.StartDate.ValueString()
		} else {
			startDate19 = nil
		}
		topHeadlinesQuery := new(string)
		if !r.Configuration.SourceGnews.TopHeadlinesQuery.IsUnknown() && !r.Configuration.SourceGnews.TopHeadlinesQuery.IsNull() {
			*topHeadlinesQuery = r.Configuration.SourceGnews.TopHeadlinesQuery.ValueString()
		} else {
			topHeadlinesQuery = nil
		}
		topHeadlinesTopic := new(shared.SourceGnewsTopHeadlinesTopicEnum)
		if !r.Configuration.SourceGnews.TopHeadlinesTopic.IsUnknown() && !r.Configuration.SourceGnews.TopHeadlinesTopic.IsNull() {
			*topHeadlinesTopic = shared.SourceGnewsTopHeadlinesTopicEnum(r.Configuration.SourceGnews.TopHeadlinesTopic.ValueString())
		} else {
			topHeadlinesTopic = nil
		}
		sourceGnews = &shared.SourceGnews{
			APIKey:            apiKey17,
			Country:           country,
			EndDate:           endDate3,
			In:                in,
			Language:          language,
			Nullable:          nullable,
			Query:             query,
			Sortby:            sortby,
			SourceType:        sourceType51,
			StartDate:         startDate19,
			TopHeadlinesQuery: topHeadlinesQuery,
			TopHeadlinesTopic: topHeadlinesTopic,
		}
	}
	if sourceGnews != nil {
		configuration = shared.SourceConfiguration{
			SourceGnews: sourceGnews,
		}
	}
	var sourceGoogleAds *shared.SourceGoogleAds
	if r.Configuration.SourceGoogleAds != nil {
		conversionWindowDays := new(int64)
		if !r.Configuration.SourceGoogleAds.ConversionWindowDays.IsUnknown() && !r.Configuration.SourceGoogleAds.ConversionWindowDays.IsNull() {
			*conversionWindowDays = r.Configuration.SourceGoogleAds.ConversionWindowDays.ValueInt64()
		} else {
			conversionWindowDays = nil
		}
		accessToken8 := new(string)
		if !r.Configuration.SourceGoogleAds.Credentials.AccessToken.IsUnknown() && !r.Configuration.SourceGoogleAds.Credentials.AccessToken.IsNull() {
			*accessToken8 = r.Configuration.SourceGoogleAds.Credentials.AccessToken.ValueString()
		} else {
			accessToken8 = nil
		}
		clientId6 := r.Configuration.SourceGoogleAds.Credentials.ClientID.ValueString()
		clientSecret6 := r.Configuration.SourceGoogleAds.Credentials.ClientSecret.ValueString()
		developerToken1 := r.Configuration.SourceGoogleAds.Credentials.DeveloperToken.ValueString()
		refreshToken6 := r.Configuration.SourceGoogleAds.Credentials.RefreshToken.ValueString()
		credentials5 := shared.SourceGoogleAdsGoogleCredentials{
			AccessToken:    accessToken8,
			ClientID:       clientId6,
			ClientSecret:   clientSecret6,
			DeveloperToken: developerToken1,
			RefreshToken:   refreshToken6,
		}
		customQueries := make([]shared.SourceGoogleAdsCustomQueries, 0)
		for _, customQueriesItem := range r.Configuration.SourceGoogleAds.CustomQueries {
			query1 := customQueriesItem.Query.ValueString()
			tableName := customQueriesItem.TableName.ValueString()
			customQueries = append(customQueries, shared.SourceGoogleAdsCustomQueries{
				Query:     query1,
				TableName: tableName,
			})
		}
		customerID := r.Configuration.SourceGoogleAds.CustomerID.ValueString()
		endDate4 := new(customTypes.Date)
		if !r.Configuration.SourceGoogleAds.EndDate.IsUnknown() && !r.Configuration.SourceGoogleAds.EndDate.IsNull() {
			*endDate4, _ = customTypes.NewDate(r.Configuration.SourceGoogleAds.EndDate.ValueString())
		} else {
			endDate4 = nil
		}
		loginCustomerID := new(string)
		if !r.Configuration.SourceGoogleAds.LoginCustomerID.IsUnknown() && !r.Configuration.SourceGoogleAds.LoginCustomerID.IsNull() {
			*loginCustomerID = r.Configuration.SourceGoogleAds.LoginCustomerID.ValueString()
		} else {
			loginCustomerID = nil
		}
		sourceType52 := shared.SourceGoogleAdsGoogleAdsEnum(r.Configuration.SourceGoogleAds.SourceType.ValueString())
		startDate20, _ := customTypes.NewDate(r.Configuration.SourceGoogleAds.StartDate.ValueString())
		sourceGoogleAds = &shared.SourceGoogleAds{
			ConversionWindowDays: conversionWindowDays,
			Credentials:          credentials5,
			CustomQueries:        customQueries,
			CustomerID:           customerID,
			EndDate:              endDate4,
			LoginCustomerID:      loginCustomerID,
			SourceType:           sourceType52,
			StartDate:            startDate20,
		}
	}
	if sourceGoogleAds != nil {
		configuration = shared.SourceConfiguration{
			SourceGoogleAds: sourceGoogleAds,
		}
	}
	var sourceGoogleAnalyticsDataAPI *shared.SourceGoogleAnalyticsDataAPI
	if r.Configuration.SourceGoogleAnalyticsDataAPI != nil {
		var credentials6 *shared.SourceGoogleAnalyticsDataAPICredentials
		var sourceGoogleAnalyticsDataAPICredentialsAuthenticateViaGoogleOauth *shared.SourceGoogleAnalyticsDataAPICredentialsAuthenticateViaGoogleOauth
		if r.Configuration.SourceGoogleAnalyticsDataAPI.Credentials.SourceGoogleAnalyticsDataAPICredentialsAuthenticateViaGoogleOauth != nil {
			accessToken9 := new(string)
			if !r.Configuration.SourceGoogleAnalyticsDataAPI.Credentials.SourceGoogleAnalyticsDataAPICredentialsAuthenticateViaGoogleOauth.AccessToken.IsUnknown() && !r.Configuration.SourceGoogleAnalyticsDataAPI.Credentials.SourceGoogleAnalyticsDataAPICredentialsAuthenticateViaGoogleOauth.AccessToken.IsNull() {
				*accessToken9 = r.Configuration.SourceGoogleAnalyticsDataAPI.Credentials.SourceGoogleAnalyticsDataAPICredentialsAuthenticateViaGoogleOauth.AccessToken.ValueString()
			} else {
				accessToken9 = nil
			}
			authType6 := new(shared.SourceGoogleAnalyticsDataAPICredentialsAuthenticateViaGoogleOauthAuthTypeEnum)
			if !r.Configuration.SourceGoogleAnalyticsDataAPI.Credentials.SourceGoogleAnalyticsDataAPICredentialsAuthenticateViaGoogleOauth.AuthType.IsUnknown() && !r.Configuration.SourceGoogleAnalyticsDataAPI.Credentials.SourceGoogleAnalyticsDataAPICredentialsAuthenticateViaGoogleOauth.AuthType.IsNull() {
				*authType6 = shared.SourceGoogleAnalyticsDataAPICredentialsAuthenticateViaGoogleOauthAuthTypeEnum(r.Configuration.SourceGoogleAnalyticsDataAPI.Credentials.SourceGoogleAnalyticsDataAPICredentialsAuthenticateViaGoogleOauth.AuthType.ValueString())
			} else {
				authType6 = nil
			}
			clientId7 := r.Configuration.SourceGoogleAnalyticsDataAPI.Credentials.SourceGoogleAnalyticsDataAPICredentialsAuthenticateViaGoogleOauth.ClientID.ValueString()
			clientSecret7 := r.Configuration.SourceGoogleAnalyticsDataAPI.Credentials.SourceGoogleAnalyticsDataAPICredentialsAuthenticateViaGoogleOauth.ClientSecret.ValueString()
			refreshToken7 := r.Configuration.SourceGoogleAnalyticsDataAPI.Credentials.SourceGoogleAnalyticsDataAPICredentialsAuthenticateViaGoogleOauth.RefreshToken.ValueString()
			sourceGoogleAnalyticsDataAPICredentialsAuthenticateViaGoogleOauth = &shared.SourceGoogleAnalyticsDataAPICredentialsAuthenticateViaGoogleOauth{
				AccessToken:  accessToken9,
				AuthType:     authType6,
				ClientID:     clientId7,
				ClientSecret: clientSecret7,
				RefreshToken: refreshToken7,
			}
		}
		if sourceGoogleAnalyticsDataAPICredentialsAuthenticateViaGoogleOauth != nil {
			credentials6 = &shared.SourceGoogleAnalyticsDataAPICredentials{
				SourceGoogleAnalyticsDataAPICredentialsAuthenticateViaGoogleOauth: sourceGoogleAnalyticsDataAPICredentialsAuthenticateViaGoogleOauth,
			}
		}
		var sourceGoogleAnalyticsDataAPICredentialsServiceAccountKeyAuthentication *shared.SourceGoogleAnalyticsDataAPICredentialsServiceAccountKeyAuthentication
		if r.Configuration.SourceGoogleAnalyticsDataAPI.Credentials.SourceGoogleAnalyticsDataAPICredentialsServiceAccountKeyAuthentication != nil {
			authType7 := new(shared.SourceGoogleAnalyticsDataAPICredentialsServiceAccountKeyAuthenticationAuthTypeEnum)
			if !r.Configuration.SourceGoogleAnalyticsDataAPI.Credentials.SourceGoogleAnalyticsDataAPICredentialsServiceAccountKeyAuthentication.AuthType.IsUnknown() && !r.Configuration.SourceGoogleAnalyticsDataAPI.Credentials.SourceGoogleAnalyticsDataAPICredentialsServiceAccountKeyAuthentication.AuthType.IsNull() {
				*authType7 = shared.SourceGoogleAnalyticsDataAPICredentialsServiceAccountKeyAuthenticationAuthTypeEnum(r.Configuration.SourceGoogleAnalyticsDataAPI.Credentials.SourceGoogleAnalyticsDataAPICredentialsServiceAccountKeyAuthentication.AuthType.ValueString())
			} else {
				authType7 = nil
			}
			credentialsJson1 := r.Configuration.SourceGoogleAnalyticsDataAPI.Credentials.SourceGoogleAnalyticsDataAPICredentialsServiceAccountKeyAuthentication.CredentialsJSON.ValueString()
			sourceGoogleAnalyticsDataAPICredentialsServiceAccountKeyAuthentication = &shared.SourceGoogleAnalyticsDataAPICredentialsServiceAccountKeyAuthentication{
				AuthType:        authType7,
				CredentialsJSON: credentialsJson1,
			}
		}
		if sourceGoogleAnalyticsDataAPICredentialsServiceAccountKeyAuthentication != nil {
			credentials6 = &shared.SourceGoogleAnalyticsDataAPICredentials{
				SourceGoogleAnalyticsDataAPICredentialsServiceAccountKeyAuthentication: sourceGoogleAnalyticsDataAPICredentialsServiceAccountKeyAuthentication,
			}
		}
		customReports := new(string)
		if !r.Configuration.SourceGoogleAnalyticsDataAPI.CustomReports.IsUnknown() && !r.Configuration.SourceGoogleAnalyticsDataAPI.CustomReports.IsNull() {
			*customReports = r.Configuration.SourceGoogleAnalyticsDataAPI.CustomReports.ValueString()
		} else {
			customReports = nil
		}
		dateRangesStartDate, _ := customTypes.NewDate(r.Configuration.SourceGoogleAnalyticsDataAPI.DateRangesStartDate.ValueString())
		propertyID := r.Configuration.SourceGoogleAnalyticsDataAPI.PropertyID.ValueString()
		sourceType53 := shared.SourceGoogleAnalyticsDataAPIGoogleAnalyticsDataAPIEnum(r.Configuration.SourceGoogleAnalyticsDataAPI.SourceType.ValueString())
		windowInDays := new(int64)
		if !r.Configuration.SourceGoogleAnalyticsDataAPI.WindowInDays.IsUnknown() && !r.Configuration.SourceGoogleAnalyticsDataAPI.WindowInDays.IsNull() {
			*windowInDays = r.Configuration.SourceGoogleAnalyticsDataAPI.WindowInDays.ValueInt64()
		} else {
			windowInDays = nil
		}
		sourceGoogleAnalyticsDataAPI = &shared.SourceGoogleAnalyticsDataAPI{
			Credentials:         credentials6,
			CustomReports:       customReports,
			DateRangesStartDate: dateRangesStartDate,
			PropertyID:          propertyID,
			SourceType:          sourceType53,
			WindowInDays:        windowInDays,
		}
	}
	if sourceGoogleAnalyticsDataAPI != nil {
		configuration = shared.SourceConfiguration{
			SourceGoogleAnalyticsDataAPI: sourceGoogleAnalyticsDataAPI,
		}
	}
	var sourceGoogleAnalyticsV4 *shared.SourceGoogleAnalyticsV4
	if r.Configuration.SourceGoogleAnalyticsV4 != nil {
		var credentials7 *shared.SourceGoogleAnalyticsV4Credentials
		var sourceGoogleAnalyticsV4CredentialsAuthenticateViaGoogleOauth *shared.SourceGoogleAnalyticsV4CredentialsAuthenticateViaGoogleOauth
		if r.Configuration.SourceGoogleAnalyticsV4.Credentials.SourceGoogleAnalyticsV4CredentialsAuthenticateViaGoogleOauth != nil {
			accessToken10 := new(string)
			if !r.Configuration.SourceGoogleAnalyticsV4.Credentials.SourceGoogleAnalyticsV4CredentialsAuthenticateViaGoogleOauth.AccessToken.IsUnknown() && !r.Configuration.SourceGoogleAnalyticsV4.Credentials.SourceGoogleAnalyticsV4CredentialsAuthenticateViaGoogleOauth.AccessToken.IsNull() {
				*accessToken10 = r.Configuration.SourceGoogleAnalyticsV4.Credentials.SourceGoogleAnalyticsV4CredentialsAuthenticateViaGoogleOauth.AccessToken.ValueString()
			} else {
				accessToken10 = nil
			}
			authType8 := new(shared.SourceGoogleAnalyticsV4CredentialsAuthenticateViaGoogleOauthAuthTypeEnum)
			if !r.Configuration.SourceGoogleAnalyticsV4.Credentials.SourceGoogleAnalyticsV4CredentialsAuthenticateViaGoogleOauth.AuthType.IsUnknown() && !r.Configuration.SourceGoogleAnalyticsV4.Credentials.SourceGoogleAnalyticsV4CredentialsAuthenticateViaGoogleOauth.AuthType.IsNull() {
				*authType8 = shared.SourceGoogleAnalyticsV4CredentialsAuthenticateViaGoogleOauthAuthTypeEnum(r.Configuration.SourceGoogleAnalyticsV4.Credentials.SourceGoogleAnalyticsV4CredentialsAuthenticateViaGoogleOauth.AuthType.ValueString())
			} else {
				authType8 = nil
			}
			clientId8 := r.Configuration.SourceGoogleAnalyticsV4.Credentials.SourceGoogleAnalyticsV4CredentialsAuthenticateViaGoogleOauth.ClientID.ValueString()
			clientSecret8 := r.Configuration.SourceGoogleAnalyticsV4.Credentials.SourceGoogleAnalyticsV4CredentialsAuthenticateViaGoogleOauth.ClientSecret.ValueString()
			refreshToken8 := r.Configuration.SourceGoogleAnalyticsV4.Credentials.SourceGoogleAnalyticsV4CredentialsAuthenticateViaGoogleOauth.RefreshToken.ValueString()
			sourceGoogleAnalyticsV4CredentialsAuthenticateViaGoogleOauth = &shared.SourceGoogleAnalyticsV4CredentialsAuthenticateViaGoogleOauth{
				AccessToken:  accessToken10,
				AuthType:     authType8,
				ClientID:     clientId8,
				ClientSecret: clientSecret8,
				RefreshToken: refreshToken8,
			}
		}
		if sourceGoogleAnalyticsV4CredentialsAuthenticateViaGoogleOauth != nil {
			credentials7 = &shared.SourceGoogleAnalyticsV4Credentials{
				SourceGoogleAnalyticsV4CredentialsAuthenticateViaGoogleOauth: sourceGoogleAnalyticsV4CredentialsAuthenticateViaGoogleOauth,
			}
		}
		var sourceGoogleAnalyticsV4CredentialsServiceAccountKeyAuthentication *shared.SourceGoogleAnalyticsV4CredentialsServiceAccountKeyAuthentication
		if r.Configuration.SourceGoogleAnalyticsV4.Credentials.SourceGoogleAnalyticsV4CredentialsServiceAccountKeyAuthentication != nil {
			authType9 := new(shared.SourceGoogleAnalyticsV4CredentialsServiceAccountKeyAuthenticationAuthTypeEnum)
			if !r.Configuration.SourceGoogleAnalyticsV4.Credentials.SourceGoogleAnalyticsV4CredentialsServiceAccountKeyAuthentication.AuthType.IsUnknown() && !r.Configuration.SourceGoogleAnalyticsV4.Credentials.SourceGoogleAnalyticsV4CredentialsServiceAccountKeyAuthentication.AuthType.IsNull() {
				*authType9 = shared.SourceGoogleAnalyticsV4CredentialsServiceAccountKeyAuthenticationAuthTypeEnum(r.Configuration.SourceGoogleAnalyticsV4.Credentials.SourceGoogleAnalyticsV4CredentialsServiceAccountKeyAuthentication.AuthType.ValueString())
			} else {
				authType9 = nil
			}
			credentialsJson2 := r.Configuration.SourceGoogleAnalyticsV4.Credentials.SourceGoogleAnalyticsV4CredentialsServiceAccountKeyAuthentication.CredentialsJSON.ValueString()
			sourceGoogleAnalyticsV4CredentialsServiceAccountKeyAuthentication = &shared.SourceGoogleAnalyticsV4CredentialsServiceAccountKeyAuthentication{
				AuthType:        authType9,
				CredentialsJSON: credentialsJson2,
			}
		}
		if sourceGoogleAnalyticsV4CredentialsServiceAccountKeyAuthentication != nil {
			credentials7 = &shared.SourceGoogleAnalyticsV4Credentials{
				SourceGoogleAnalyticsV4CredentialsServiceAccountKeyAuthentication: sourceGoogleAnalyticsV4CredentialsServiceAccountKeyAuthentication,
			}
		}
		customReports1 := new(string)
		if !r.Configuration.SourceGoogleAnalyticsV4.CustomReports.IsUnknown() && !r.Configuration.SourceGoogleAnalyticsV4.CustomReports.IsNull() {
			*customReports1 = r.Configuration.SourceGoogleAnalyticsV4.CustomReports.ValueString()
		} else {
			customReports1 = nil
		}
		sourceType54 := shared.SourceGoogleAnalyticsV4GoogleAnalyticsV4Enum(r.Configuration.SourceGoogleAnalyticsV4.SourceType.ValueString())
		startDate21 := r.Configuration.SourceGoogleAnalyticsV4.StartDate.ValueString()
		viewID := r.Configuration.SourceGoogleAnalyticsV4.ViewID.ValueString()
		windowInDays1 := new(int64)
		if !r.Configuration.SourceGoogleAnalyticsV4.WindowInDays.IsUnknown() && !r.Configuration.SourceGoogleAnalyticsV4.WindowInDays.IsNull() {
			*windowInDays1 = r.Configuration.SourceGoogleAnalyticsV4.WindowInDays.ValueInt64()
		} else {
			windowInDays1 = nil
		}
		sourceGoogleAnalyticsV4 = &shared.SourceGoogleAnalyticsV4{
			Credentials:   credentials7,
			CustomReports: customReports1,
			SourceType:    sourceType54,
			StartDate:     startDate21,
			ViewID:        viewID,
			WindowInDays:  windowInDays1,
		}
	}
	if sourceGoogleAnalyticsV4 != nil {
		configuration = shared.SourceConfiguration{
			SourceGoogleAnalyticsV4: sourceGoogleAnalyticsV4,
		}
	}
	var sourceGoogleDirectory *shared.SourceGoogleDirectory
	if r.Configuration.SourceGoogleDirectory != nil {
		credentialsJson3 := r.Configuration.SourceGoogleDirectory.CredentialsJSON.ValueString()
		email1 := r.Configuration.SourceGoogleDirectory.Email.ValueString()
		sourceType55 := shared.SourceGoogleDirectoryGoogleDirectoryEnum(r.Configuration.SourceGoogleDirectory.SourceType.ValueString())
		sourceGoogleDirectory = &shared.SourceGoogleDirectory{
			CredentialsJSON: credentialsJson3,
			Email:           email1,
			SourceType:      sourceType55,
		}
	}
	if sourceGoogleDirectory != nil {
		configuration = shared.SourceConfiguration{
			SourceGoogleDirectory: sourceGoogleDirectory,
		}
	}
	var sourceGoogleSearchConsole *shared.SourceGoogleSearchConsole
	if r.Configuration.SourceGoogleSearchConsole != nil {
		var authorization shared.SourceGoogleSearchConsoleAuthenticationType
		var sourceGoogleSearchConsoleAuthenticationTypeOAuth *shared.SourceGoogleSearchConsoleAuthenticationTypeOAuth
		if r.Configuration.SourceGoogleSearchConsole.Authorization.SourceGoogleSearchConsoleAuthenticationTypeOAuth != nil {
			accessToken11 := new(string)
			if !r.Configuration.SourceGoogleSearchConsole.Authorization.SourceGoogleSearchConsoleAuthenticationTypeOAuth.AccessToken.IsUnknown() && !r.Configuration.SourceGoogleSearchConsole.Authorization.SourceGoogleSearchConsoleAuthenticationTypeOAuth.AccessToken.IsNull() {
				*accessToken11 = r.Configuration.SourceGoogleSearchConsole.Authorization.SourceGoogleSearchConsoleAuthenticationTypeOAuth.AccessToken.ValueString()
			} else {
				accessToken11 = nil
			}
			authType10 := shared.SourceGoogleSearchConsoleAuthenticationTypeOAuthAuthTypeEnum(r.Configuration.SourceGoogleSearchConsole.Authorization.SourceGoogleSearchConsoleAuthenticationTypeOAuth.AuthType.ValueString())
			clientId9 := r.Configuration.SourceGoogleSearchConsole.Authorization.SourceGoogleSearchConsoleAuthenticationTypeOAuth.ClientID.ValueString()
			clientSecret9 := r.Configuration.SourceGoogleSearchConsole.Authorization.SourceGoogleSearchConsoleAuthenticationTypeOAuth.ClientSecret.ValueString()
			refreshToken9 := r.Configuration.SourceGoogleSearchConsole.Authorization.SourceGoogleSearchConsoleAuthenticationTypeOAuth.RefreshToken.ValueString()
			sourceGoogleSearchConsoleAuthenticationTypeOAuth = &shared.SourceGoogleSearchConsoleAuthenticationTypeOAuth{
				AccessToken:  accessToken11,
				AuthType:     authType10,
				ClientID:     clientId9,
				ClientSecret: clientSecret9,
				RefreshToken: refreshToken9,
			}
		}
		if sourceGoogleSearchConsoleAuthenticationTypeOAuth != nil {
			authorization = shared.SourceGoogleSearchConsoleAuthenticationType{
				SourceGoogleSearchConsoleAuthenticationTypeOAuth: sourceGoogleSearchConsoleAuthenticationTypeOAuth,
			}
		}
		var sourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthentication *shared.SourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthentication
		if r.Configuration.SourceGoogleSearchConsole.Authorization.SourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthentication != nil {
			authType11 := shared.SourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthenticationAuthTypeEnum(r.Configuration.SourceGoogleSearchConsole.Authorization.SourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthentication.AuthType.ValueString())
			email2 := r.Configuration.SourceGoogleSearchConsole.Authorization.SourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthentication.Email.ValueString()
			serviceAccountInfo := r.Configuration.SourceGoogleSearchConsole.Authorization.SourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthentication.ServiceAccountInfo.ValueString()
			sourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthentication = &shared.SourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthentication{
				AuthType:           authType11,
				Email:              email2,
				ServiceAccountInfo: serviceAccountInfo,
			}
		}
		if sourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthentication != nil {
			authorization = shared.SourceGoogleSearchConsoleAuthenticationType{
				SourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthentication: sourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthentication,
			}
		}
		customReports2 := new(string)
		if !r.Configuration.SourceGoogleSearchConsole.CustomReports.IsUnknown() && !r.Configuration.SourceGoogleSearchConsole.CustomReports.IsNull() {
			*customReports2 = r.Configuration.SourceGoogleSearchConsole.CustomReports.ValueString()
		} else {
			customReports2 = nil
		}
		endDate5 := new(customTypes.Date)
		if !r.Configuration.SourceGoogleSearchConsole.EndDate.IsUnknown() && !r.Configuration.SourceGoogleSearchConsole.EndDate.IsNull() {
			*endDate5, _ = customTypes.NewDate(r.Configuration.SourceGoogleSearchConsole.EndDate.ValueString())
		} else {
			endDate5 = nil
		}
		siteUrls := make([]string, 0)
		for _, siteUrlsItem := range r.Configuration.SourceGoogleSearchConsole.SiteUrls {
			siteUrls = append(siteUrls, siteUrlsItem.ValueString())
		}
		sourceType56 := shared.SourceGoogleSearchConsoleGoogleSearchConsoleEnum(r.Configuration.SourceGoogleSearchConsole.SourceType.ValueString())
		startDate22, _ := customTypes.NewDate(r.Configuration.SourceGoogleSearchConsole.StartDate.ValueString())
		sourceGoogleSearchConsole = &shared.SourceGoogleSearchConsole{
			Authorization: authorization,
			CustomReports: customReports2,
			EndDate:       endDate5,
			SiteUrls:      siteUrls,
			SourceType:    sourceType56,
			StartDate:     startDate22,
		}
	}
	if sourceGoogleSearchConsole != nil {
		configuration = shared.SourceConfiguration{
			SourceGoogleSearchConsole: sourceGoogleSearchConsole,
		}
	}
	var sourceGoogleSheets *shared.SourceGoogleSheets
	if r.Configuration.SourceGoogleSheets != nil {
		var credentials8 shared.SourceGoogleSheetsAuthentication
		var sourceGoogleSheetsAuthenticationAuthenticateViaGoogleOAuth *shared.SourceGoogleSheetsAuthenticationAuthenticateViaGoogleOAuth
		if r.Configuration.SourceGoogleSheets.Credentials.SourceGoogleSheetsAuthenticationAuthenticateViaGoogleOAuth != nil {
			authType12 := shared.SourceGoogleSheetsAuthenticationAuthenticateViaGoogleOAuthAuthTypeEnum(r.Configuration.SourceGoogleSheets.Credentials.SourceGoogleSheetsAuthenticationAuthenticateViaGoogleOAuth.AuthType.ValueString())
			clientId10 := r.Configuration.SourceGoogleSheets.Credentials.SourceGoogleSheetsAuthenticationAuthenticateViaGoogleOAuth.ClientID.ValueString()
			clientSecret10 := r.Configuration.SourceGoogleSheets.Credentials.SourceGoogleSheetsAuthenticationAuthenticateViaGoogleOAuth.ClientSecret.ValueString()
			refreshToken10 := r.Configuration.SourceGoogleSheets.Credentials.SourceGoogleSheetsAuthenticationAuthenticateViaGoogleOAuth.RefreshToken.ValueString()
			sourceGoogleSheetsAuthenticationAuthenticateViaGoogleOAuth = &shared.SourceGoogleSheetsAuthenticationAuthenticateViaGoogleOAuth{
				AuthType:     authType12,
				ClientID:     clientId10,
				ClientSecret: clientSecret10,
				RefreshToken: refreshToken10,
			}
		}
		if sourceGoogleSheetsAuthenticationAuthenticateViaGoogleOAuth != nil {
			credentials8 = shared.SourceGoogleSheetsAuthentication{
				SourceGoogleSheetsAuthenticationAuthenticateViaGoogleOAuth: sourceGoogleSheetsAuthenticationAuthenticateViaGoogleOAuth,
			}
		}
		var sourceGoogleSheetsAuthenticationServiceAccountKeyAuthentication *shared.SourceGoogleSheetsAuthenticationServiceAccountKeyAuthentication
		if r.Configuration.SourceGoogleSheets.Credentials.SourceGoogleSheetsAuthenticationServiceAccountKeyAuthentication != nil {
			authType13 := shared.SourceGoogleSheetsAuthenticationServiceAccountKeyAuthenticationAuthTypeEnum(r.Configuration.SourceGoogleSheets.Credentials.SourceGoogleSheetsAuthenticationServiceAccountKeyAuthentication.AuthType.ValueString())
			serviceAccountInfo1 := r.Configuration.SourceGoogleSheets.Credentials.SourceGoogleSheetsAuthenticationServiceAccountKeyAuthentication.ServiceAccountInfo.ValueString()
			sourceGoogleSheetsAuthenticationServiceAccountKeyAuthentication = &shared.SourceGoogleSheetsAuthenticationServiceAccountKeyAuthentication{
				AuthType:           authType13,
				ServiceAccountInfo: serviceAccountInfo1,
			}
		}
		if sourceGoogleSheetsAuthenticationServiceAccountKeyAuthentication != nil {
			credentials8 = shared.SourceGoogleSheetsAuthentication{
				SourceGoogleSheetsAuthenticationServiceAccountKeyAuthentication: sourceGoogleSheetsAuthenticationServiceAccountKeyAuthentication,
			}
		}
		rowBatchSize := new(int64)
		if !r.Configuration.SourceGoogleSheets.RowBatchSize.IsUnknown() && !r.Configuration.SourceGoogleSheets.RowBatchSize.IsNull() {
			*rowBatchSize = r.Configuration.SourceGoogleSheets.RowBatchSize.ValueInt64()
		} else {
			rowBatchSize = nil
		}
		sourceType57 := shared.SourceGoogleSheetsGoogleSheetsEnum(r.Configuration.SourceGoogleSheets.SourceType.ValueString())
		spreadsheetID := r.Configuration.SourceGoogleSheets.SpreadsheetID.ValueString()
		sourceGoogleSheets = &shared.SourceGoogleSheets{
			Credentials:   credentials8,
			RowBatchSize:  rowBatchSize,
			SourceType:    sourceType57,
			SpreadsheetID: spreadsheetID,
		}
	}
	if sourceGoogleSheets != nil {
		configuration = shared.SourceConfiguration{
			SourceGoogleSheets: sourceGoogleSheets,
		}
	}
	var sourceGoogleWebfonts *shared.SourceGoogleWebfonts
	if r.Configuration.SourceGoogleWebfonts != nil {
		alt := new(string)
		if !r.Configuration.SourceGoogleWebfonts.Alt.IsUnknown() && !r.Configuration.SourceGoogleWebfonts.Alt.IsNull() {
			*alt = r.Configuration.SourceGoogleWebfonts.Alt.ValueString()
		} else {
			alt = nil
		}
		apiKey18 := r.Configuration.SourceGoogleWebfonts.APIKey.ValueString()
		prettyPrint := new(string)
		if !r.Configuration.SourceGoogleWebfonts.PrettyPrint.IsUnknown() && !r.Configuration.SourceGoogleWebfonts.PrettyPrint.IsNull() {
			*prettyPrint = r.Configuration.SourceGoogleWebfonts.PrettyPrint.ValueString()
		} else {
			prettyPrint = nil
		}
		sort := new(string)
		if !r.Configuration.SourceGoogleWebfonts.Sort.IsUnknown() && !r.Configuration.SourceGoogleWebfonts.Sort.IsNull() {
			*sort = r.Configuration.SourceGoogleWebfonts.Sort.ValueString()
		} else {
			sort = nil
		}
		sourceType58 := shared.SourceGoogleWebfontsGoogleWebfontsEnum(r.Configuration.SourceGoogleWebfonts.SourceType.ValueString())
		sourceGoogleWebfonts = &shared.SourceGoogleWebfonts{
			Alt:         alt,
			APIKey:      apiKey18,
			PrettyPrint: prettyPrint,
			Sort:        sort,
			SourceType:  sourceType58,
		}
	}
	if sourceGoogleWebfonts != nil {
		configuration = shared.SourceConfiguration{
			SourceGoogleWebfonts: sourceGoogleWebfonts,
		}
	}
	var sourceGoogleWorkspaceAdminReports *shared.SourceGoogleWorkspaceAdminReports
	if r.Configuration.SourceGoogleWorkspaceAdminReports != nil {
		credentialsJson4 := r.Configuration.SourceGoogleWorkspaceAdminReports.CredentialsJSON.ValueString()
		email3 := r.Configuration.SourceGoogleWorkspaceAdminReports.Email.ValueString()
		lookback := new(int64)
		if !r.Configuration.SourceGoogleWorkspaceAdminReports.Lookback.IsUnknown() && !r.Configuration.SourceGoogleWorkspaceAdminReports.Lookback.IsNull() {
			*lookback = r.Configuration.SourceGoogleWorkspaceAdminReports.Lookback.ValueInt64()
		} else {
			lookback = nil
		}
		sourceType59 := shared.SourceGoogleWorkspaceAdminReportsGoogleWorkspaceAdminReportsEnum(r.Configuration.SourceGoogleWorkspaceAdminReports.SourceType.ValueString())
		sourceGoogleWorkspaceAdminReports = &shared.SourceGoogleWorkspaceAdminReports{
			CredentialsJSON: credentialsJson4,
			Email:           email3,
			Lookback:        lookback,
			SourceType:      sourceType59,
		}
	}
	if sourceGoogleWorkspaceAdminReports != nil {
		configuration = shared.SourceConfiguration{
			SourceGoogleWorkspaceAdminReports: sourceGoogleWorkspaceAdminReports,
		}
	}
	var sourceGreenhouse *shared.SourceGreenhouse
	if r.Configuration.SourceGreenhouse != nil {
		apiKey19 := r.Configuration.SourceGreenhouse.APIKey.ValueString()
		sourceType60 := shared.SourceGreenhouseGreenhouseEnum(r.Configuration.SourceGreenhouse.SourceType.ValueString())
		sourceGreenhouse = &shared.SourceGreenhouse{
			APIKey:     apiKey19,
			SourceType: sourceType60,
		}
	}
	if sourceGreenhouse != nil {
		configuration = shared.SourceConfiguration{
			SourceGreenhouse: sourceGreenhouse,
		}
	}
	var sourceGridly *shared.SourceGridly
	if r.Configuration.SourceGridly != nil {
		apiKey20 := r.Configuration.SourceGridly.APIKey.ValueString()
		gridID := r.Configuration.SourceGridly.GridID.ValueString()
		sourceType61 := shared.SourceGridlyGridlyEnum(r.Configuration.SourceGridly.SourceType.ValueString())
		sourceGridly = &shared.SourceGridly{
			APIKey:     apiKey20,
			GridID:     gridID,
			SourceType: sourceType61,
		}
	}
	if sourceGridly != nil {
		configuration = shared.SourceConfiguration{
			SourceGridly: sourceGridly,
		}
	}
	var sourceHarvest *shared.SourceHarvest
	if r.Configuration.SourceHarvest != nil {
		accountId1 := r.Configuration.SourceHarvest.AccountID.ValueString()
		var credentials9 *shared.SourceHarvestAuthenticationMechanism
		var sourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuth *shared.SourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuth
		if r.Configuration.SourceHarvest.Credentials.SourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuth != nil {
			authType14 := new(shared.SourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuthAuthTypeEnum)
			if !r.Configuration.SourceHarvest.Credentials.SourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuth.AuthType.IsUnknown() && !r.Configuration.SourceHarvest.Credentials.SourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuth.AuthType.IsNull() {
				*authType14 = shared.SourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuthAuthTypeEnum(r.Configuration.SourceHarvest.Credentials.SourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuth.AuthType.ValueString())
			} else {
				authType14 = nil
			}
			clientId11 := r.Configuration.SourceHarvest.Credentials.SourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuth.ClientID.ValueString()
			clientSecret11 := r.Configuration.SourceHarvest.Credentials.SourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuth.ClientSecret.ValueString()
			refreshToken11 := r.Configuration.SourceHarvest.Credentials.SourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuth.RefreshToken.ValueString()
			sourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuth = &shared.SourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuth{
				AuthType:     authType14,
				ClientID:     clientId11,
				ClientSecret: clientSecret11,
				RefreshToken: refreshToken11,
			}
		}
		if sourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuth != nil {
			credentials9 = &shared.SourceHarvestAuthenticationMechanism{
				SourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuth: sourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuth,
			}
		}
		var sourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessToken *shared.SourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessToken
		if r.Configuration.SourceHarvest.Credentials.SourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessToken != nil {
			apiToken3 := r.Configuration.SourceHarvest.Credentials.SourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessToken.APIToken.ValueString()
			authType15 := new(shared.SourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessTokenAuthTypeEnum)
			if !r.Configuration.SourceHarvest.Credentials.SourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessToken.AuthType.IsUnknown() && !r.Configuration.SourceHarvest.Credentials.SourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessToken.AuthType.IsNull() {
				*authType15 = shared.SourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessTokenAuthTypeEnum(r.Configuration.SourceHarvest.Credentials.SourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessToken.AuthType.ValueString())
			} else {
				authType15 = nil
			}
			sourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessToken = &shared.SourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessToken{
				APIToken: apiToken3,
				AuthType: authType15,
			}
		}
		if sourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessToken != nil {
			credentials9 = &shared.SourceHarvestAuthenticationMechanism{
				SourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessToken: sourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessToken,
			}
		}
		replicationEndDate1 := new(string)
		if !r.Configuration.SourceHarvest.ReplicationEndDate.IsUnknown() && !r.Configuration.SourceHarvest.ReplicationEndDate.IsNull() {
			*replicationEndDate1 = r.Configuration.SourceHarvest.ReplicationEndDate.ValueString()
		} else {
			replicationEndDate1 = nil
		}
		replicationStartDate1 := r.Configuration.SourceHarvest.ReplicationStartDate.ValueString()
		sourceType62 := shared.SourceHarvestHarvestEnum(r.Configuration.SourceHarvest.SourceType.ValueString())
		sourceHarvest = &shared.SourceHarvest{
			AccountID:            accountId1,
			Credentials:          credentials9,
			ReplicationEndDate:   replicationEndDate1,
			ReplicationStartDate: replicationStartDate1,
			SourceType:           sourceType62,
		}
	}
	if sourceHarvest != nil {
		configuration = shared.SourceConfiguration{
			SourceHarvest: sourceHarvest,
		}
	}
	var sourceHubplanner *shared.SourceHubplanner
	if r.Configuration.SourceHubplanner != nil {
		apiKey21 := r.Configuration.SourceHubplanner.APIKey.ValueString()
		sourceType63 := shared.SourceHubplannerHubplannerEnum(r.Configuration.SourceHubplanner.SourceType.ValueString())
		sourceHubplanner = &shared.SourceHubplanner{
			APIKey:     apiKey21,
			SourceType: sourceType63,
		}
	}
	if sourceHubplanner != nil {
		configuration = shared.SourceConfiguration{
			SourceHubplanner: sourceHubplanner,
		}
	}
	var sourceHubspot *shared.SourceHubspot
	if r.Configuration.SourceHubspot != nil {
		var credentials10 shared.SourceHubspotAuthentication
		var sourceHubspotAuthenticationOAuth *shared.SourceHubspotAuthenticationOAuth
		if r.Configuration.SourceHubspot.Credentials.SourceHubspotAuthenticationOAuth != nil {
			clientId12 := r.Configuration.SourceHubspot.Credentials.SourceHubspotAuthenticationOAuth.ClientID.ValueString()
			clientSecret12 := r.Configuration.SourceHubspot.Credentials.SourceHubspotAuthenticationOAuth.ClientSecret.ValueString()
			credentialsTitle := shared.SourceHubspotAuthenticationOAuthCredentialsEnum(r.Configuration.SourceHubspot.Credentials.SourceHubspotAuthenticationOAuth.CredentialsTitle.ValueString())
			refreshToken12 := r.Configuration.SourceHubspot.Credentials.SourceHubspotAuthenticationOAuth.RefreshToken.ValueString()
			sourceHubspotAuthenticationOAuth = &shared.SourceHubspotAuthenticationOAuth{
				ClientID:         clientId12,
				ClientSecret:     clientSecret12,
				CredentialsTitle: credentialsTitle,
				RefreshToken:     refreshToken12,
			}
		}
		if sourceHubspotAuthenticationOAuth != nil {
			credentials10 = shared.SourceHubspotAuthentication{
				SourceHubspotAuthenticationOAuth: sourceHubspotAuthenticationOAuth,
			}
		}
		var sourceHubspotAuthenticationPrivateApp *shared.SourceHubspotAuthenticationPrivateApp
		if r.Configuration.SourceHubspot.Credentials.SourceHubspotAuthenticationPrivateApp != nil {
			accessToken12 := r.Configuration.SourceHubspot.Credentials.SourceHubspotAuthenticationPrivateApp.AccessToken.ValueString()
			credentialsTitle1 := shared.SourceHubspotAuthenticationPrivateAppCredentialsEnum(r.Configuration.SourceHubspot.Credentials.SourceHubspotAuthenticationPrivateApp.CredentialsTitle.ValueString())
			sourceHubspotAuthenticationPrivateApp = &shared.SourceHubspotAuthenticationPrivateApp{
				AccessToken:      accessToken12,
				CredentialsTitle: credentialsTitle1,
			}
		}
		if sourceHubspotAuthenticationPrivateApp != nil {
			credentials10 = shared.SourceHubspotAuthentication{
				SourceHubspotAuthenticationPrivateApp: sourceHubspotAuthenticationPrivateApp,
			}
		}
		sourceType64 := shared.SourceHubspotHubspotEnum(r.Configuration.SourceHubspot.SourceType.ValueString())
		startDate23 := r.Configuration.SourceHubspot.StartDate.ValueString()
		sourceHubspot = &shared.SourceHubspot{
			Credentials: credentials10,
			SourceType:  sourceType64,
			StartDate:   startDate23,
		}
	}
	if sourceHubspot != nil {
		configuration = shared.SourceConfiguration{
			SourceHubspot: sourceHubspot,
		}
	}
	var sourceInsightly *shared.SourceInsightly
	if r.Configuration.SourceInsightly != nil {
		sourceType65 := shared.SourceInsightlyInsightlyEnum(r.Configuration.SourceInsightly.SourceType.ValueString())
		startDate24 := r.Configuration.SourceInsightly.StartDate.ValueString()
		token := r.Configuration.SourceInsightly.Token.ValueString()
		sourceInsightly = &shared.SourceInsightly{
			SourceType: sourceType65,
			StartDate:  startDate24,
			Token:      token,
		}
	}
	if sourceInsightly != nil {
		configuration = shared.SourceConfiguration{
			SourceInsightly: sourceInsightly,
		}
	}
	var sourceInstagram *shared.SourceInstagram
	if r.Configuration.SourceInstagram != nil {
		accessToken13 := r.Configuration.SourceInstagram.AccessToken.ValueString()
		sourceType66 := shared.SourceInstagramInstagramEnum(r.Configuration.SourceInstagram.SourceType.ValueString())
		startDate25, _ := time.Parse(time.RFC3339Nano, r.Configuration.SourceInstagram.StartDate.ValueString())
		sourceInstagram = &shared.SourceInstagram{
			AccessToken: accessToken13,
			SourceType:  sourceType66,
			StartDate:   startDate25,
		}
	}
	if sourceInstagram != nil {
		configuration = shared.SourceConfiguration{
			SourceInstagram: sourceInstagram,
		}
	}
	var sourceInstatus *shared.SourceInstatus
	if r.Configuration.SourceInstatus != nil {
		apiKey22 := r.Configuration.SourceInstatus.APIKey.ValueString()
		sourceType67 := shared.SourceInstatusInstatusEnum(r.Configuration.SourceInstatus.SourceType.ValueString())
		sourceInstatus = &shared.SourceInstatus{
			APIKey:     apiKey22,
			SourceType: sourceType67,
		}
	}
	if sourceInstatus != nil {
		configuration = shared.SourceConfiguration{
			SourceInstatus: sourceInstatus,
		}
	}
	var sourceIntercom *shared.SourceIntercom
	if r.Configuration.SourceIntercom != nil {
		accessToken14 := r.Configuration.SourceIntercom.AccessToken.ValueString()
		sourceType68 := shared.SourceIntercomIntercomEnum(r.Configuration.SourceIntercom.SourceType.ValueString())
		startDate26, _ := time.Parse(time.RFC3339Nano, r.Configuration.SourceIntercom.StartDate.ValueString())
		sourceIntercom = &shared.SourceIntercom{
			AccessToken: accessToken14,
			SourceType:  sourceType68,
			StartDate:   startDate26,
		}
	}
	if sourceIntercom != nil {
		configuration = shared.SourceConfiguration{
			SourceIntercom: sourceIntercom,
		}
	}
	var sourceIp2whois *shared.SourceIp2whois
	if r.Configuration.SourceIp2whois != nil {
		apiKey23 := new(string)
		if !r.Configuration.SourceIp2whois.APIKey.IsUnknown() && !r.Configuration.SourceIp2whois.APIKey.IsNull() {
			*apiKey23 = r.Configuration.SourceIp2whois.APIKey.ValueString()
		} else {
			apiKey23 = nil
		}
		domain3 := new(string)
		if !r.Configuration.SourceIp2whois.Domain.IsUnknown() && !r.Configuration.SourceIp2whois.Domain.IsNull() {
			*domain3 = r.Configuration.SourceIp2whois.Domain.ValueString()
		} else {
			domain3 = nil
		}
		sourceType69 := shared.SourceIp2whoisIp2whoisEnum(r.Configuration.SourceIp2whois.SourceType.ValueString())
		sourceIp2whois = &shared.SourceIp2whois{
			APIKey:     apiKey23,
			Domain:     domain3,
			SourceType: sourceType69,
		}
	}
	if sourceIp2whois != nil {
		configuration = shared.SourceConfiguration{
			SourceIp2whois: sourceIp2whois,
		}
	}
	var sourceIterable *shared.SourceIterable
	if r.Configuration.SourceIterable != nil {
		apiKey24 := r.Configuration.SourceIterable.APIKey.ValueString()
		sourceType70 := shared.SourceIterableIterableEnum(r.Configuration.SourceIterable.SourceType.ValueString())
		startDate27, _ := time.Parse(time.RFC3339Nano, r.Configuration.SourceIterable.StartDate.ValueString())
		sourceIterable = &shared.SourceIterable{
			APIKey:     apiKey24,
			SourceType: sourceType70,
			StartDate:  startDate27,
		}
	}
	if sourceIterable != nil {
		configuration = shared.SourceConfiguration{
			SourceIterable: sourceIterable,
		}
	}
	var sourceJira *shared.SourceJira
	if r.Configuration.SourceJira != nil {
		apiToken4 := r.Configuration.SourceJira.APIToken.ValueString()
		domain4 := r.Configuration.SourceJira.Domain.ValueString()
		email4 := r.Configuration.SourceJira.Email.ValueString()
		enableExperimentalStreams := new(bool)
		if !r.Configuration.SourceJira.EnableExperimentalStreams.IsUnknown() && !r.Configuration.SourceJira.EnableExperimentalStreams.IsNull() {
			*enableExperimentalStreams = r.Configuration.SourceJira.EnableExperimentalStreams.ValueBool()
		} else {
			enableExperimentalStreams = nil
		}
		expandIssueChangelog := new(bool)
		if !r.Configuration.SourceJira.ExpandIssueChangelog.IsUnknown() && !r.Configuration.SourceJira.ExpandIssueChangelog.IsNull() {
			*expandIssueChangelog = r.Configuration.SourceJira.ExpandIssueChangelog.ValueBool()
		} else {
			expandIssueChangelog = nil
		}
		projects1 := make([]string, 0)
		for _, projectsItem := range r.Configuration.SourceJira.Projects {
			projects1 = append(projects1, projectsItem.ValueString())
		}
		renderFields := new(bool)
		if !r.Configuration.SourceJira.RenderFields.IsUnknown() && !r.Configuration.SourceJira.RenderFields.IsNull() {
			*renderFields = r.Configuration.SourceJira.RenderFields.ValueBool()
		} else {
			renderFields = nil
		}
		sourceType71 := shared.SourceJiraJiraEnum(r.Configuration.SourceJira.SourceType.ValueString())
		startDate28 := new(time.Time)
		if !r.Configuration.SourceJira.StartDate.IsUnknown() && !r.Configuration.SourceJira.StartDate.IsNull() {
			*startDate28, _ = time.Parse(time.RFC3339Nano, r.Configuration.SourceJira.StartDate.ValueString())
		} else {
			startDate28 = nil
		}
		sourceJira = &shared.SourceJira{
			APIToken:                  apiToken4,
			Domain:                    domain4,
			Email:                     email4,
			EnableExperimentalStreams: enableExperimentalStreams,
			ExpandIssueChangelog:      expandIssueChangelog,
			Projects:                  projects1,
			RenderFields:              renderFields,
			SourceType:                sourceType71,
			StartDate:                 startDate28,
		}
	}
	if sourceJira != nil {
		configuration = shared.SourceConfiguration{
			SourceJira: sourceJira,
		}
	}
	var sourceK6Cloud *shared.SourceK6Cloud
	if r.Configuration.SourceK6Cloud != nil {
		apiToken5 := r.Configuration.SourceK6Cloud.APIToken.ValueString()
		sourceType72 := shared.SourceK6CloudK6CloudEnum(r.Configuration.SourceK6Cloud.SourceType.ValueString())
		sourceK6Cloud = &shared.SourceK6Cloud{
			APIToken:   apiToken5,
			SourceType: sourceType72,
		}
	}
	if sourceK6Cloud != nil {
		configuration = shared.SourceConfiguration{
			SourceK6Cloud: sourceK6Cloud,
		}
	}
	var sourceKlarna *shared.SourceKlarna
	if r.Configuration.SourceKlarna != nil {
		password7 := r.Configuration.SourceKlarna.Password.ValueString()
		playground := r.Configuration.SourceKlarna.Playground.ValueBool()
		region4 := shared.SourceKlarnaRegionEnum(r.Configuration.SourceKlarna.Region.ValueString())
		sourceType73 := shared.SourceKlarnaKlarnaEnum(r.Configuration.SourceKlarna.SourceType.ValueString())
		username4 := r.Configuration.SourceKlarna.Username.ValueString()
		sourceKlarna = &shared.SourceKlarna{
			Password:   password7,
			Playground: playground,
			Region:     region4,
			SourceType: sourceType73,
			Username:   username4,
		}
	}
	if sourceKlarna != nil {
		configuration = shared.SourceConfiguration{
			SourceKlarna: sourceKlarna,
		}
	}
	var sourceKlaviyo *shared.SourceKlaviyo
	if r.Configuration.SourceKlaviyo != nil {
		apiKey25 := r.Configuration.SourceKlaviyo.APIKey.ValueString()
		sourceType74 := shared.SourceKlaviyoKlaviyoEnum(r.Configuration.SourceKlaviyo.SourceType.ValueString())
		startDate29, _ := time.Parse(time.RFC3339Nano, r.Configuration.SourceKlaviyo.StartDate.ValueString())
		sourceKlaviyo = &shared.SourceKlaviyo{
			APIKey:     apiKey25,
			SourceType: sourceType74,
			StartDate:  startDate29,
		}
	}
	if sourceKlaviyo != nil {
		configuration = shared.SourceConfiguration{
			SourceKlaviyo: sourceKlaviyo,
		}
	}
	var sourceKustomerSinger *shared.SourceKustomerSinger
	if r.Configuration.SourceKustomerSinger != nil {
		apiToken6 := r.Configuration.SourceKustomerSinger.APIToken.ValueString()
		sourceType75 := shared.SourceKustomerSingerKustomerSingerEnum(r.Configuration.SourceKustomerSinger.SourceType.ValueString())
		startDate30 := r.Configuration.SourceKustomerSinger.StartDate.ValueString()
		sourceKustomerSinger = &shared.SourceKustomerSinger{
			APIToken:   apiToken6,
			SourceType: sourceType75,
			StartDate:  startDate30,
		}
	}
	if sourceKustomerSinger != nil {
		configuration = shared.SourceConfiguration{
			SourceKustomerSinger: sourceKustomerSinger,
		}
	}
	var sourceLaunchdarkly *shared.SourceLaunchdarkly
	if r.Configuration.SourceLaunchdarkly != nil {
		accessToken15 := r.Configuration.SourceLaunchdarkly.AccessToken.ValueString()
		sourceType76 := shared.SourceLaunchdarklyLaunchdarklyEnum(r.Configuration.SourceLaunchdarkly.SourceType.ValueString())
		sourceLaunchdarkly = &shared.SourceLaunchdarkly{
			AccessToken: accessToken15,
			SourceType:  sourceType76,
		}
	}
	if sourceLaunchdarkly != nil {
		configuration = shared.SourceConfiguration{
			SourceLaunchdarkly: sourceLaunchdarkly,
		}
	}
	var sourceLemlist *shared.SourceLemlist
	if r.Configuration.SourceLemlist != nil {
		apiKey26 := r.Configuration.SourceLemlist.APIKey.ValueString()
		sourceType77 := shared.SourceLemlistLemlistEnum(r.Configuration.SourceLemlist.SourceType.ValueString())
		sourceLemlist = &shared.SourceLemlist{
			APIKey:     apiKey26,
			SourceType: sourceType77,
		}
	}
	if sourceLemlist != nil {
		configuration = shared.SourceConfiguration{
			SourceLemlist: sourceLemlist,
		}
	}
	var sourceLinkedinAds *shared.SourceLinkedinAds
	if r.Configuration.SourceLinkedinAds != nil {
		accountIds := make([]int64, 0)
		for _, accountIdsItem := range r.Configuration.SourceLinkedinAds.AccountIds {
			accountIds = append(accountIds, accountIdsItem.ValueInt64())
		}
		var credentials11 *shared.SourceLinkedinAdsAuthentication
		var sourceLinkedinAdsAuthenticationOAuth20 *shared.SourceLinkedinAdsAuthenticationOAuth20
		if r.Configuration.SourceLinkedinAds.Credentials.SourceLinkedinAdsAuthenticationOAuth20 != nil {
			authMethod3 := new(shared.SourceLinkedinAdsAuthenticationOAuth20AuthMethodEnum)
			if !r.Configuration.SourceLinkedinAds.Credentials.SourceLinkedinAdsAuthenticationOAuth20.AuthMethod.IsUnknown() && !r.Configuration.SourceLinkedinAds.Credentials.SourceLinkedinAdsAuthenticationOAuth20.AuthMethod.IsNull() {
				*authMethod3 = shared.SourceLinkedinAdsAuthenticationOAuth20AuthMethodEnum(r.Configuration.SourceLinkedinAds.Credentials.SourceLinkedinAdsAuthenticationOAuth20.AuthMethod.ValueString())
			} else {
				authMethod3 = nil
			}
			clientId13 := r.Configuration.SourceLinkedinAds.Credentials.SourceLinkedinAdsAuthenticationOAuth20.ClientID.ValueString()
			clientSecret13 := r.Configuration.SourceLinkedinAds.Credentials.SourceLinkedinAdsAuthenticationOAuth20.ClientSecret.ValueString()
			refreshToken13 := r.Configuration.SourceLinkedinAds.Credentials.SourceLinkedinAdsAuthenticationOAuth20.RefreshToken.ValueString()
			sourceLinkedinAdsAuthenticationOAuth20 = &shared.SourceLinkedinAdsAuthenticationOAuth20{
				AuthMethod:   authMethod3,
				ClientID:     clientId13,
				ClientSecret: clientSecret13,
				RefreshToken: refreshToken13,
			}
		}
		if sourceLinkedinAdsAuthenticationOAuth20 != nil {
			credentials11 = &shared.SourceLinkedinAdsAuthentication{
				SourceLinkedinAdsAuthenticationOAuth20: sourceLinkedinAdsAuthenticationOAuth20,
			}
		}
		var sourceLinkedinAdsAuthenticationAccessToken *shared.SourceLinkedinAdsAuthenticationAccessToken
		if r.Configuration.SourceLinkedinAds.Credentials.SourceLinkedinAdsAuthenticationAccessToken != nil {
			accessToken16 := r.Configuration.SourceLinkedinAds.Credentials.SourceLinkedinAdsAuthenticationAccessToken.AccessToken.ValueString()
			authMethod4 := new(shared.SourceLinkedinAdsAuthenticationAccessTokenAuthMethodEnum)
			if !r.Configuration.SourceLinkedinAds.Credentials.SourceLinkedinAdsAuthenticationAccessToken.AuthMethod.IsUnknown() && !r.Configuration.SourceLinkedinAds.Credentials.SourceLinkedinAdsAuthenticationAccessToken.AuthMethod.IsNull() {
				*authMethod4 = shared.SourceLinkedinAdsAuthenticationAccessTokenAuthMethodEnum(r.Configuration.SourceLinkedinAds.Credentials.SourceLinkedinAdsAuthenticationAccessToken.AuthMethod.ValueString())
			} else {
				authMethod4 = nil
			}
			sourceLinkedinAdsAuthenticationAccessToken = &shared.SourceLinkedinAdsAuthenticationAccessToken{
				AccessToken: accessToken16,
				AuthMethod:  authMethod4,
			}
		}
		if sourceLinkedinAdsAuthenticationAccessToken != nil {
			credentials11 = &shared.SourceLinkedinAdsAuthentication{
				SourceLinkedinAdsAuthenticationAccessToken: sourceLinkedinAdsAuthenticationAccessToken,
			}
		}
		sourceType78 := shared.SourceLinkedinAdsLinkedinAdsEnum(r.Configuration.SourceLinkedinAds.SourceType.ValueString())
		startDate31, _ := customTypes.NewDate(r.Configuration.SourceLinkedinAds.StartDate.ValueString())
		sourceLinkedinAds = &shared.SourceLinkedinAds{
			AccountIds:  accountIds,
			Credentials: credentials11,
			SourceType:  sourceType78,
			StartDate:   startDate31,
		}
	}
	if sourceLinkedinAds != nil {
		configuration = shared.SourceConfiguration{
			SourceLinkedinAds: sourceLinkedinAds,
		}
	}
	var sourceLinkedinPages *shared.SourceLinkedinPages
	if r.Configuration.SourceLinkedinPages != nil {
		var credentials12 *shared.SourceLinkedinPagesAuthentication
		var sourceLinkedinPagesAuthenticationOAuth20 *shared.SourceLinkedinPagesAuthenticationOAuth20
		if r.Configuration.SourceLinkedinPages.Credentials.SourceLinkedinPagesAuthenticationOAuth20 != nil {
			authMethod5 := new(shared.SourceLinkedinPagesAuthenticationOAuth20AuthMethodEnum)
			if !r.Configuration.SourceLinkedinPages.Credentials.SourceLinkedinPagesAuthenticationOAuth20.AuthMethod.IsUnknown() && !r.Configuration.SourceLinkedinPages.Credentials.SourceLinkedinPagesAuthenticationOAuth20.AuthMethod.IsNull() {
				*authMethod5 = shared.SourceLinkedinPagesAuthenticationOAuth20AuthMethodEnum(r.Configuration.SourceLinkedinPages.Credentials.SourceLinkedinPagesAuthenticationOAuth20.AuthMethod.ValueString())
			} else {
				authMethod5 = nil
			}
			clientId14 := r.Configuration.SourceLinkedinPages.Credentials.SourceLinkedinPagesAuthenticationOAuth20.ClientID.ValueString()
			clientSecret14 := r.Configuration.SourceLinkedinPages.Credentials.SourceLinkedinPagesAuthenticationOAuth20.ClientSecret.ValueString()
			refreshToken14 := r.Configuration.SourceLinkedinPages.Credentials.SourceLinkedinPagesAuthenticationOAuth20.RefreshToken.ValueString()
			sourceLinkedinPagesAuthenticationOAuth20 = &shared.SourceLinkedinPagesAuthenticationOAuth20{
				AuthMethod:   authMethod5,
				ClientID:     clientId14,
				ClientSecret: clientSecret14,
				RefreshToken: refreshToken14,
			}
		}
		if sourceLinkedinPagesAuthenticationOAuth20 != nil {
			credentials12 = &shared.SourceLinkedinPagesAuthentication{
				SourceLinkedinPagesAuthenticationOAuth20: sourceLinkedinPagesAuthenticationOAuth20,
			}
		}
		var sourceLinkedinPagesAuthenticationAccessToken *shared.SourceLinkedinPagesAuthenticationAccessToken
		if r.Configuration.SourceLinkedinPages.Credentials.SourceLinkedinPagesAuthenticationAccessToken != nil {
			accessToken17 := r.Configuration.SourceLinkedinPages.Credentials.SourceLinkedinPagesAuthenticationAccessToken.AccessToken.ValueString()
			authMethod6 := new(shared.SourceLinkedinPagesAuthenticationAccessTokenAuthMethodEnum)
			if !r.Configuration.SourceLinkedinPages.Credentials.SourceLinkedinPagesAuthenticationAccessToken.AuthMethod.IsUnknown() && !r.Configuration.SourceLinkedinPages.Credentials.SourceLinkedinPagesAuthenticationAccessToken.AuthMethod.IsNull() {
				*authMethod6 = shared.SourceLinkedinPagesAuthenticationAccessTokenAuthMethodEnum(r.Configuration.SourceLinkedinPages.Credentials.SourceLinkedinPagesAuthenticationAccessToken.AuthMethod.ValueString())
			} else {
				authMethod6 = nil
			}
			sourceLinkedinPagesAuthenticationAccessToken = &shared.SourceLinkedinPagesAuthenticationAccessToken{
				AccessToken: accessToken17,
				AuthMethod:  authMethod6,
			}
		}
		if sourceLinkedinPagesAuthenticationAccessToken != nil {
			credentials12 = &shared.SourceLinkedinPagesAuthentication{
				SourceLinkedinPagesAuthenticationAccessToken: sourceLinkedinPagesAuthenticationAccessToken,
			}
		}
		orgID := r.Configuration.SourceLinkedinPages.OrgID.ValueString()
		sourceType79 := shared.SourceLinkedinPagesLinkedinPagesEnum(r.Configuration.SourceLinkedinPages.SourceType.ValueString())
		sourceLinkedinPages = &shared.SourceLinkedinPages{
			Credentials: credentials12,
			OrgID:       orgID,
			SourceType:  sourceType79,
		}
	}
	if sourceLinkedinPages != nil {
		configuration = shared.SourceConfiguration{
			SourceLinkedinPages: sourceLinkedinPages,
		}
	}
	var sourceLinnworks *shared.SourceLinnworks
	if r.Configuration.SourceLinnworks != nil {
		applicationID := r.Configuration.SourceLinnworks.ApplicationID.ValueString()
		applicationSecret := r.Configuration.SourceLinnworks.ApplicationSecret.ValueString()
		sourceType80 := shared.SourceLinnworksLinnworksEnum(r.Configuration.SourceLinnworks.SourceType.ValueString())
		startDate32, _ := time.Parse(time.RFC3339Nano, r.Configuration.SourceLinnworks.StartDate.ValueString())
		token1 := r.Configuration.SourceLinnworks.Token.ValueString()
		sourceLinnworks = &shared.SourceLinnworks{
			ApplicationID:     applicationID,
			ApplicationSecret: applicationSecret,
			SourceType:        sourceType80,
			StartDate:         startDate32,
			Token:             token1,
		}
	}
	if sourceLinnworks != nil {
		configuration = shared.SourceConfiguration{
			SourceLinnworks: sourceLinnworks,
		}
	}
	var sourceLokalise *shared.SourceLokalise
	if r.Configuration.SourceLokalise != nil {
		apiKey27 := r.Configuration.SourceLokalise.APIKey.ValueString()
		projectId1 := r.Configuration.SourceLokalise.ProjectID.ValueString()
		sourceType81 := shared.SourceLokaliseLokaliseEnum(r.Configuration.SourceLokalise.SourceType.ValueString())
		sourceLokalise = &shared.SourceLokalise{
			APIKey:     apiKey27,
			ProjectID:  projectId1,
			SourceType: sourceType81,
		}
	}
	if sourceLokalise != nil {
		configuration = shared.SourceConfiguration{
			SourceLokalise: sourceLokalise,
		}
	}
	var sourceMailchimp *shared.SourceMailchimp
	if r.Configuration.SourceMailchimp != nil {
		campaignID := new(string)
		if !r.Configuration.SourceMailchimp.CampaignID.IsUnknown() && !r.Configuration.SourceMailchimp.CampaignID.IsNull() {
			*campaignID = r.Configuration.SourceMailchimp.CampaignID.ValueString()
		} else {
			campaignID = nil
		}
		var credentials13 *shared.SourceMailchimpAuthentication
		var sourceMailchimpAuthenticationOAuth20 *shared.SourceMailchimpAuthenticationOAuth20
		if r.Configuration.SourceMailchimp.Credentials.SourceMailchimpAuthenticationOAuth20 != nil {
			accessToken18 := r.Configuration.SourceMailchimp.Credentials.SourceMailchimpAuthenticationOAuth20.AccessToken.ValueString()
			authType16 := shared.SourceMailchimpAuthenticationOAuth20AuthTypeEnum(r.Configuration.SourceMailchimp.Credentials.SourceMailchimpAuthenticationOAuth20.AuthType.ValueString())
			clientId15 := new(string)
			if !r.Configuration.SourceMailchimp.Credentials.SourceMailchimpAuthenticationOAuth20.ClientID.IsUnknown() && !r.Configuration.SourceMailchimp.Credentials.SourceMailchimpAuthenticationOAuth20.ClientID.IsNull() {
				*clientId15 = r.Configuration.SourceMailchimp.Credentials.SourceMailchimpAuthenticationOAuth20.ClientID.ValueString()
			} else {
				clientId15 = nil
			}
			clientSecret15 := new(string)
			if !r.Configuration.SourceMailchimp.Credentials.SourceMailchimpAuthenticationOAuth20.ClientSecret.IsUnknown() && !r.Configuration.SourceMailchimp.Credentials.SourceMailchimpAuthenticationOAuth20.ClientSecret.IsNull() {
				*clientSecret15 = r.Configuration.SourceMailchimp.Credentials.SourceMailchimpAuthenticationOAuth20.ClientSecret.ValueString()
			} else {
				clientSecret15 = nil
			}
			sourceMailchimpAuthenticationOAuth20 = &shared.SourceMailchimpAuthenticationOAuth20{
				AccessToken:  accessToken18,
				AuthType:     authType16,
				ClientID:     clientId15,
				ClientSecret: clientSecret15,
			}
		}
		if sourceMailchimpAuthenticationOAuth20 != nil {
			credentials13 = &shared.SourceMailchimpAuthentication{
				SourceMailchimpAuthenticationOAuth20: sourceMailchimpAuthenticationOAuth20,
			}
		}
		var sourceMailchimpAuthenticationAPIKey *shared.SourceMailchimpAuthenticationAPIKey
		if r.Configuration.SourceMailchimp.Credentials.SourceMailchimpAuthenticationAPIKey != nil {
			apikey := r.Configuration.SourceMailchimp.Credentials.SourceMailchimpAuthenticationAPIKey.Apikey.ValueString()
			authType17 := shared.SourceMailchimpAuthenticationAPIKeyAuthTypeEnum(r.Configuration.SourceMailchimp.Credentials.SourceMailchimpAuthenticationAPIKey.AuthType.ValueString())
			sourceMailchimpAuthenticationAPIKey = &shared.SourceMailchimpAuthenticationAPIKey{
				Apikey:   apikey,
				AuthType: authType17,
			}
		}
		if sourceMailchimpAuthenticationAPIKey != nil {
			credentials13 = &shared.SourceMailchimpAuthentication{
				SourceMailchimpAuthenticationAPIKey: sourceMailchimpAuthenticationAPIKey,
			}
		}
		sourceType82 := shared.SourceMailchimpMailchimpEnum(r.Configuration.SourceMailchimp.SourceType.ValueString())
		sourceMailchimp = &shared.SourceMailchimp{
			CampaignID:  campaignID,
			Credentials: credentials13,
			SourceType:  sourceType82,
		}
	}
	if sourceMailchimp != nil {
		configuration = shared.SourceConfiguration{
			SourceMailchimp: sourceMailchimp,
		}
	}
	var sourceMailgun *shared.SourceMailgun
	if r.Configuration.SourceMailgun != nil {
		domainRegion := new(string)
		if !r.Configuration.SourceMailgun.DomainRegion.IsUnknown() && !r.Configuration.SourceMailgun.DomainRegion.IsNull() {
			*domainRegion = r.Configuration.SourceMailgun.DomainRegion.ValueString()
		} else {
			domainRegion = nil
		}
		privateKey1 := r.Configuration.SourceMailgun.PrivateKey.ValueString()
		sourceType83 := shared.SourceMailgunMailgunEnum(r.Configuration.SourceMailgun.SourceType.ValueString())
		startDate33 := new(time.Time)
		if !r.Configuration.SourceMailgun.StartDate.IsUnknown() && !r.Configuration.SourceMailgun.StartDate.IsNull() {
			*startDate33, _ = time.Parse(time.RFC3339Nano, r.Configuration.SourceMailgun.StartDate.ValueString())
		} else {
			startDate33 = nil
		}
		sourceMailgun = &shared.SourceMailgun{
			DomainRegion: domainRegion,
			PrivateKey:   privateKey1,
			SourceType:   sourceType83,
			StartDate:    startDate33,
		}
	}
	if sourceMailgun != nil {
		configuration = shared.SourceConfiguration{
			SourceMailgun: sourceMailgun,
		}
	}
	var sourceMailjetSms *shared.SourceMailjetSms
	if r.Configuration.SourceMailjetSms != nil {
		endDate6 := new(int64)
		if !r.Configuration.SourceMailjetSms.EndDate.IsUnknown() && !r.Configuration.SourceMailjetSms.EndDate.IsNull() {
			*endDate6 = r.Configuration.SourceMailjetSms.EndDate.ValueInt64()
		} else {
			endDate6 = nil
		}
		sourceType84 := shared.SourceMailjetSmsMailjetSmsEnum(r.Configuration.SourceMailjetSms.SourceType.ValueString())
		startDate34 := new(int64)
		if !r.Configuration.SourceMailjetSms.StartDate.IsUnknown() && !r.Configuration.SourceMailjetSms.StartDate.IsNull() {
			*startDate34 = r.Configuration.SourceMailjetSms.StartDate.ValueInt64()
		} else {
			startDate34 = nil
		}
		token2 := r.Configuration.SourceMailjetSms.Token.ValueString()
		sourceMailjetSms = &shared.SourceMailjetSms{
			EndDate:    endDate6,
			SourceType: sourceType84,
			StartDate:  startDate34,
			Token:      token2,
		}
	}
	if sourceMailjetSms != nil {
		configuration = shared.SourceConfiguration{
			SourceMailjetSms: sourceMailjetSms,
		}
	}
	var sourceMarketo *shared.SourceMarketo
	if r.Configuration.SourceMarketo != nil {
		clientId16 := r.Configuration.SourceMarketo.ClientID.ValueString()
		clientSecret16 := r.Configuration.SourceMarketo.ClientSecret.ValueString()
		domainURL := r.Configuration.SourceMarketo.DomainURL.ValueString()
		sourceType85 := shared.SourceMarketoMarketoEnum(r.Configuration.SourceMarketo.SourceType.ValueString())
		startDate35 := r.Configuration.SourceMarketo.StartDate.ValueString()
		sourceMarketo = &shared.SourceMarketo{
			ClientID:     clientId16,
			ClientSecret: clientSecret16,
			DomainURL:    domainURL,
			SourceType:   sourceType85,
			StartDate:    startDate35,
		}
	}
	if sourceMarketo != nil {
		configuration = shared.SourceConfiguration{
			SourceMarketo: sourceMarketo,
		}
	}
	var sourceMetabase *shared.SourceMetabase
	if r.Configuration.SourceMetabase != nil {
		instanceAPIURL := r.Configuration.SourceMetabase.InstanceAPIURL.ValueString()
		password8 := new(string)
		if !r.Configuration.SourceMetabase.Password.IsUnknown() && !r.Configuration.SourceMetabase.Password.IsNull() {
			*password8 = r.Configuration.SourceMetabase.Password.ValueString()
		} else {
			password8 = nil
		}
		sessionToken := new(string)
		if !r.Configuration.SourceMetabase.SessionToken.IsUnknown() && !r.Configuration.SourceMetabase.SessionToken.IsNull() {
			*sessionToken = r.Configuration.SourceMetabase.SessionToken.ValueString()
		} else {
			sessionToken = nil
		}
		sourceType86 := shared.SourceMetabaseMetabaseEnum(r.Configuration.SourceMetabase.SourceType.ValueString())
		username5 := new(string)
		if !r.Configuration.SourceMetabase.Username.IsUnknown() && !r.Configuration.SourceMetabase.Username.IsNull() {
			*username5 = r.Configuration.SourceMetabase.Username.ValueString()
		} else {
			username5 = nil
		}
		sourceMetabase = &shared.SourceMetabase{
			InstanceAPIURL: instanceAPIURL,
			Password:       password8,
			SessionToken:   sessionToken,
			SourceType:     sourceType86,
			Username:       username5,
		}
	}
	if sourceMetabase != nil {
		configuration = shared.SourceConfiguration{
			SourceMetabase: sourceMetabase,
		}
	}
	var sourceMicrosoftTeams *shared.SourceMicrosoftTeams
	if r.Configuration.SourceMicrosoftTeams != nil {
		var credentials14 *shared.SourceMicrosoftTeamsAuthenticationMechanism
		var sourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoftOAuth20 *shared.SourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoftOAuth20
		if r.Configuration.SourceMicrosoftTeams.Credentials.SourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoftOAuth20 != nil {
			authType18 := new(shared.SourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoftOAuth20AuthTypeEnum)
			if !r.Configuration.SourceMicrosoftTeams.Credentials.SourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoftOAuth20.AuthType.IsUnknown() && !r.Configuration.SourceMicrosoftTeams.Credentials.SourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoftOAuth20.AuthType.IsNull() {
				*authType18 = shared.SourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoftOAuth20AuthTypeEnum(r.Configuration.SourceMicrosoftTeams.Credentials.SourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoftOAuth20.AuthType.ValueString())
			} else {
				authType18 = nil
			}
			clientId17 := r.Configuration.SourceMicrosoftTeams.Credentials.SourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoftOAuth20.ClientID.ValueString()
			clientSecret17 := r.Configuration.SourceMicrosoftTeams.Credentials.SourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoftOAuth20.ClientSecret.ValueString()
			refreshToken15 := r.Configuration.SourceMicrosoftTeams.Credentials.SourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoftOAuth20.RefreshToken.ValueString()
			tenantId1 := r.Configuration.SourceMicrosoftTeams.Credentials.SourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoftOAuth20.TenantID.ValueString()
			sourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoftOAuth20 = &shared.SourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoftOAuth20{
				AuthType:     authType18,
				ClientID:     clientId17,
				ClientSecret: clientSecret17,
				RefreshToken: refreshToken15,
				TenantID:     tenantId1,
			}
		}
		if sourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoftOAuth20 != nil {
			credentials14 = &shared.SourceMicrosoftTeamsAuthenticationMechanism{
				SourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoftOAuth20: sourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoftOAuth20,
			}
		}
		var sourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoft *shared.SourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoft
		if r.Configuration.SourceMicrosoftTeams.Credentials.SourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoft != nil {
			authType19 := new(shared.SourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoftAuthTypeEnum)
			if !r.Configuration.SourceMicrosoftTeams.Credentials.SourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoft.AuthType.IsUnknown() && !r.Configuration.SourceMicrosoftTeams.Credentials.SourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoft.AuthType.IsNull() {
				*authType19 = shared.SourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoftAuthTypeEnum(r.Configuration.SourceMicrosoftTeams.Credentials.SourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoft.AuthType.ValueString())
			} else {
				authType19 = nil
			}
			clientId18 := r.Configuration.SourceMicrosoftTeams.Credentials.SourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoft.ClientID.ValueString()
			clientSecret18 := r.Configuration.SourceMicrosoftTeams.Credentials.SourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoft.ClientSecret.ValueString()
			tenantId2 := r.Configuration.SourceMicrosoftTeams.Credentials.SourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoft.TenantID.ValueString()
			sourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoft = &shared.SourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoft{
				AuthType:     authType19,
				ClientID:     clientId18,
				ClientSecret: clientSecret18,
				TenantID:     tenantId2,
			}
		}
		if sourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoft != nil {
			credentials14 = &shared.SourceMicrosoftTeamsAuthenticationMechanism{
				SourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoft: sourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoft,
			}
		}
		period1 := r.Configuration.SourceMicrosoftTeams.Period.ValueString()
		sourceType87 := shared.SourceMicrosoftTeamsMicrosoftTeamsEnum(r.Configuration.SourceMicrosoftTeams.SourceType.ValueString())
		sourceMicrosoftTeams = &shared.SourceMicrosoftTeams{
			Credentials: credentials14,
			Period:      period1,
			SourceType:  sourceType87,
		}
	}
	if sourceMicrosoftTeams != nil {
		configuration = shared.SourceConfiguration{
			SourceMicrosoftTeams: sourceMicrosoftTeams,
		}
	}
	var sourceMixpanel *shared.SourceMixpanel
	if r.Configuration.SourceMixpanel != nil {
		attributionWindow := new(int64)
		if !r.Configuration.SourceMixpanel.AttributionWindow.IsUnknown() && !r.Configuration.SourceMixpanel.AttributionWindow.IsNull() {
			*attributionWindow = r.Configuration.SourceMixpanel.AttributionWindow.ValueInt64()
		} else {
			attributionWindow = nil
		}
		var credentials15 *shared.SourceMixpanelAuthenticationWildcard
		var sourceMixpanelAuthenticationWildcardServiceAccount *shared.SourceMixpanelAuthenticationWildcardServiceAccount
		if r.Configuration.SourceMixpanel.Credentials.SourceMixpanelAuthenticationWildcardServiceAccount != nil {
			optionTitle4 := new(shared.SourceMixpanelAuthenticationWildcardServiceAccountOptionTitleEnum)
			if !r.Configuration.SourceMixpanel.Credentials.SourceMixpanelAuthenticationWildcardServiceAccount.OptionTitle.IsUnknown() && !r.Configuration.SourceMixpanel.Credentials.SourceMixpanelAuthenticationWildcardServiceAccount.OptionTitle.IsNull() {
				*optionTitle4 = shared.SourceMixpanelAuthenticationWildcardServiceAccountOptionTitleEnum(r.Configuration.SourceMixpanel.Credentials.SourceMixpanelAuthenticationWildcardServiceAccount.OptionTitle.ValueString())
			} else {
				optionTitle4 = nil
			}
			secret1 := r.Configuration.SourceMixpanel.Credentials.SourceMixpanelAuthenticationWildcardServiceAccount.Secret.ValueString()
			username6 := r.Configuration.SourceMixpanel.Credentials.SourceMixpanelAuthenticationWildcardServiceAccount.Username.ValueString()
			sourceMixpanelAuthenticationWildcardServiceAccount = &shared.SourceMixpanelAuthenticationWildcardServiceAccount{
				OptionTitle: optionTitle4,
				Secret:      secret1,
				Username:    username6,
			}
		}
		if sourceMixpanelAuthenticationWildcardServiceAccount != nil {
			credentials15 = &shared.SourceMixpanelAuthenticationWildcard{
				SourceMixpanelAuthenticationWildcardServiceAccount: sourceMixpanelAuthenticationWildcardServiceAccount,
			}
		}
		var sourceMixpanelAuthenticationWildcardProjectSecret *shared.SourceMixpanelAuthenticationWildcardProjectSecret
		if r.Configuration.SourceMixpanel.Credentials.SourceMixpanelAuthenticationWildcardProjectSecret != nil {
			apiSecret := r.Configuration.SourceMixpanel.Credentials.SourceMixpanelAuthenticationWildcardProjectSecret.APISecret.ValueString()
			optionTitle5 := new(shared.SourceMixpanelAuthenticationWildcardProjectSecretOptionTitleEnum)
			if !r.Configuration.SourceMixpanel.Credentials.SourceMixpanelAuthenticationWildcardProjectSecret.OptionTitle.IsUnknown() && !r.Configuration.SourceMixpanel.Credentials.SourceMixpanelAuthenticationWildcardProjectSecret.OptionTitle.IsNull() {
				*optionTitle5 = shared.SourceMixpanelAuthenticationWildcardProjectSecretOptionTitleEnum(r.Configuration.SourceMixpanel.Credentials.SourceMixpanelAuthenticationWildcardProjectSecret.OptionTitle.ValueString())
			} else {
				optionTitle5 = nil
			}
			sourceMixpanelAuthenticationWildcardProjectSecret = &shared.SourceMixpanelAuthenticationWildcardProjectSecret{
				APISecret:   apiSecret,
				OptionTitle: optionTitle5,
			}
		}
		if sourceMixpanelAuthenticationWildcardProjectSecret != nil {
			credentials15 = &shared.SourceMixpanelAuthenticationWildcard{
				SourceMixpanelAuthenticationWildcardProjectSecret: sourceMixpanelAuthenticationWildcardProjectSecret,
			}
		}
		dateWindowSize := new(int64)
		if !r.Configuration.SourceMixpanel.DateWindowSize.IsUnknown() && !r.Configuration.SourceMixpanel.DateWindowSize.IsNull() {
			*dateWindowSize = r.Configuration.SourceMixpanel.DateWindowSize.ValueInt64()
		} else {
			dateWindowSize = nil
		}
		endDate7 := new(string)
		if !r.Configuration.SourceMixpanel.EndDate.IsUnknown() && !r.Configuration.SourceMixpanel.EndDate.IsNull() {
			*endDate7 = r.Configuration.SourceMixpanel.EndDate.ValueString()
		} else {
			endDate7 = nil
		}
		projectId2 := new(int64)
		if !r.Configuration.SourceMixpanel.ProjectID.IsUnknown() && !r.Configuration.SourceMixpanel.ProjectID.IsNull() {
			*projectId2 = r.Configuration.SourceMixpanel.ProjectID.ValueInt64()
		} else {
			projectId2 = nil
		}
		projectTimezone := new(string)
		if !r.Configuration.SourceMixpanel.ProjectTimezone.IsUnknown() && !r.Configuration.SourceMixpanel.ProjectTimezone.IsNull() {
			*projectTimezone = r.Configuration.SourceMixpanel.ProjectTimezone.ValueString()
		} else {
			projectTimezone = nil
		}
		region5 := new(shared.SourceMixpanelRegionEnum)
		if !r.Configuration.SourceMixpanel.Region.IsUnknown() && !r.Configuration.SourceMixpanel.Region.IsNull() {
			*region5 = shared.SourceMixpanelRegionEnum(r.Configuration.SourceMixpanel.Region.ValueString())
		} else {
			region5 = nil
		}
		selectPropertiesByDefault := new(bool)
		if !r.Configuration.SourceMixpanel.SelectPropertiesByDefault.IsUnknown() && !r.Configuration.SourceMixpanel.SelectPropertiesByDefault.IsNull() {
			*selectPropertiesByDefault = r.Configuration.SourceMixpanel.SelectPropertiesByDefault.ValueBool()
		} else {
			selectPropertiesByDefault = nil
		}
		sourceType88 := shared.SourceMixpanelMixpanelEnum(r.Configuration.SourceMixpanel.SourceType.ValueString())
		startDate36 := new(string)
		if !r.Configuration.SourceMixpanel.StartDate.IsUnknown() && !r.Configuration.SourceMixpanel.StartDate.IsNull() {
			*startDate36 = r.Configuration.SourceMixpanel.StartDate.ValueString()
		} else {
			startDate36 = nil
		}
		sourceMixpanel = &shared.SourceMixpanel{
			AttributionWindow:         attributionWindow,
			Credentials:               credentials15,
			DateWindowSize:            dateWindowSize,
			EndDate:                   endDate7,
			ProjectID:                 projectId2,
			ProjectTimezone:           projectTimezone,
			Region:                    region5,
			SelectPropertiesByDefault: selectPropertiesByDefault,
			SourceType:                sourceType88,
			StartDate:                 startDate36,
		}
	}
	if sourceMixpanel != nil {
		configuration = shared.SourceConfiguration{
			SourceMixpanel: sourceMixpanel,
		}
	}
	var sourceMonday *shared.SourceMonday
	if r.Configuration.SourceMonday != nil {
		var credentials16 *shared.SourceMondayAuthorizationMethod
		var sourceMondayAuthorizationMethodOAuth20 *shared.SourceMondayAuthorizationMethodOAuth20
		if r.Configuration.SourceMonday.Credentials.SourceMondayAuthorizationMethodOAuth20 != nil {
			accessToken19 := r.Configuration.SourceMonday.Credentials.SourceMondayAuthorizationMethodOAuth20.AccessToken.ValueString()
			authType20 := shared.SourceMondayAuthorizationMethodOAuth20AuthTypeEnum(r.Configuration.SourceMonday.Credentials.SourceMondayAuthorizationMethodOAuth20.AuthType.ValueString())
			clientId19 := r.Configuration.SourceMonday.Credentials.SourceMondayAuthorizationMethodOAuth20.ClientID.ValueString()
			clientSecret19 := r.Configuration.SourceMonday.Credentials.SourceMondayAuthorizationMethodOAuth20.ClientSecret.ValueString()
			subdomain1 := new(string)
			if !r.Configuration.SourceMonday.Credentials.SourceMondayAuthorizationMethodOAuth20.Subdomain.IsUnknown() && !r.Configuration.SourceMonday.Credentials.SourceMondayAuthorizationMethodOAuth20.Subdomain.IsNull() {
				*subdomain1 = r.Configuration.SourceMonday.Credentials.SourceMondayAuthorizationMethodOAuth20.Subdomain.ValueString()
			} else {
				subdomain1 = nil
			}
			sourceMondayAuthorizationMethodOAuth20 = &shared.SourceMondayAuthorizationMethodOAuth20{
				AccessToken:  accessToken19,
				AuthType:     authType20,
				ClientID:     clientId19,
				ClientSecret: clientSecret19,
				Subdomain:    subdomain1,
			}
		}
		if sourceMondayAuthorizationMethodOAuth20 != nil {
			credentials16 = &shared.SourceMondayAuthorizationMethod{
				SourceMondayAuthorizationMethodOAuth20: sourceMondayAuthorizationMethodOAuth20,
			}
		}
		var sourceMondayAuthorizationMethodAPIToken *shared.SourceMondayAuthorizationMethodAPIToken
		if r.Configuration.SourceMonday.Credentials.SourceMondayAuthorizationMethodAPIToken != nil {
			apiToken7 := r.Configuration.SourceMonday.Credentials.SourceMondayAuthorizationMethodAPIToken.APIToken.ValueString()
			authType21 := shared.SourceMondayAuthorizationMethodAPITokenAuthTypeEnum(r.Configuration.SourceMonday.Credentials.SourceMondayAuthorizationMethodAPIToken.AuthType.ValueString())
			sourceMondayAuthorizationMethodAPIToken = &shared.SourceMondayAuthorizationMethodAPIToken{
				APIToken: apiToken7,
				AuthType: authType21,
			}
		}
		if sourceMondayAuthorizationMethodAPIToken != nil {
			credentials16 = &shared.SourceMondayAuthorizationMethod{
				SourceMondayAuthorizationMethodAPIToken: sourceMondayAuthorizationMethodAPIToken,
			}
		}
		sourceType89 := shared.SourceMondayMondayEnum(r.Configuration.SourceMonday.SourceType.ValueString())
		sourceMonday = &shared.SourceMonday{
			Credentials: credentials16,
			SourceType:  sourceType89,
		}
	}
	if sourceMonday != nil {
		configuration = shared.SourceConfiguration{
			SourceMonday: sourceMonday,
		}
	}
	var sourceMongodb *shared.SourceMongodb
	if r.Configuration.SourceMongodb != nil {
		authSource := new(string)
		if !r.Configuration.SourceMongodb.AuthSource.IsUnknown() && !r.Configuration.SourceMongodb.AuthSource.IsNull() {
			*authSource = r.Configuration.SourceMongodb.AuthSource.ValueString()
		} else {
			authSource = nil
		}
		database3 := r.Configuration.SourceMongodb.Database.ValueString()
		var instanceType *shared.SourceMongodbMongoDbInstanceType
		var sourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstance *shared.SourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstance
		if r.Configuration.SourceMongodb.InstanceType.SourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstance != nil {
			host6 := r.Configuration.SourceMongodb.InstanceType.SourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstance.Host.ValueString()
			instance := shared.SourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstanceInstanceEnum(r.Configuration.SourceMongodb.InstanceType.SourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstance.Instance.ValueString())
			port6 := r.Configuration.SourceMongodb.InstanceType.SourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstance.Port.ValueInt64()
			sourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstance = &shared.SourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstance{
				Host:     host6,
				Instance: instance,
				Port:     port6,
			}
		}
		if sourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstance != nil {
			instanceType = &shared.SourceMongodbMongoDbInstanceType{
				SourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstance: sourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstance,
			}
		}
		var sourceMongodbMongoDbInstanceTypeReplicaSet *shared.SourceMongodbMongoDbInstanceTypeReplicaSet
		if r.Configuration.SourceMongodb.InstanceType.SourceMongodbMongoDbInstanceTypeReplicaSet != nil {
			instance1 := shared.SourceMongodbMongoDbInstanceTypeReplicaSetInstanceEnum(r.Configuration.SourceMongodb.InstanceType.SourceMongodbMongoDbInstanceTypeReplicaSet.Instance.ValueString())
			replicaSet := new(string)
			if !r.Configuration.SourceMongodb.InstanceType.SourceMongodbMongoDbInstanceTypeReplicaSet.ReplicaSet.IsUnknown() && !r.Configuration.SourceMongodb.InstanceType.SourceMongodbMongoDbInstanceTypeReplicaSet.ReplicaSet.IsNull() {
				*replicaSet = r.Configuration.SourceMongodb.InstanceType.SourceMongodbMongoDbInstanceTypeReplicaSet.ReplicaSet.ValueString()
			} else {
				replicaSet = nil
			}
			serverAddresses := r.Configuration.SourceMongodb.InstanceType.SourceMongodbMongoDbInstanceTypeReplicaSet.ServerAddresses.ValueString()
			sourceMongodbMongoDbInstanceTypeReplicaSet = &shared.SourceMongodbMongoDbInstanceTypeReplicaSet{
				Instance:        instance1,
				ReplicaSet:      replicaSet,
				ServerAddresses: serverAddresses,
			}
		}
		if sourceMongodbMongoDbInstanceTypeReplicaSet != nil {
			instanceType = &shared.SourceMongodbMongoDbInstanceType{
				SourceMongodbMongoDbInstanceTypeReplicaSet: sourceMongodbMongoDbInstanceTypeReplicaSet,
			}
		}
		var sourceMongodbMongoDBInstanceTypeMongoDBAtlas *shared.SourceMongodbMongoDBInstanceTypeMongoDBAtlas
		if r.Configuration.SourceMongodb.InstanceType.SourceMongodbMongoDBInstanceTypeMongoDBAtlas != nil {
			clusterURL := r.Configuration.SourceMongodb.InstanceType.SourceMongodbMongoDBInstanceTypeMongoDBAtlas.ClusterURL.ValueString()
			instance2 := shared.SourceMongodbMongoDBInstanceTypeMongoDBAtlasInstanceEnum(r.Configuration.SourceMongodb.InstanceType.SourceMongodbMongoDBInstanceTypeMongoDBAtlas.Instance.ValueString())
			sourceMongodbMongoDBInstanceTypeMongoDBAtlas = &shared.SourceMongodbMongoDBInstanceTypeMongoDBAtlas{
				ClusterURL: clusterURL,
				Instance:   instance2,
			}
		}
		if sourceMongodbMongoDBInstanceTypeMongoDBAtlas != nil {
			instanceType = &shared.SourceMongodbMongoDbInstanceType{
				SourceMongodbMongoDBInstanceTypeMongoDBAtlas: sourceMongodbMongoDBInstanceTypeMongoDBAtlas,
			}
		}
		password9 := new(string)
		if !r.Configuration.SourceMongodb.Password.IsUnknown() && !r.Configuration.SourceMongodb.Password.IsNull() {
			*password9 = r.Configuration.SourceMongodb.Password.ValueString()
		} else {
			password9 = nil
		}
		sourceType90 := shared.SourceMongodbMongodbEnum(r.Configuration.SourceMongodb.SourceType.ValueString())
		user3 := new(string)
		if !r.Configuration.SourceMongodb.User.IsUnknown() && !r.Configuration.SourceMongodb.User.IsNull() {
			*user3 = r.Configuration.SourceMongodb.User.ValueString()
		} else {
			user3 = nil
		}
		sourceMongodb = &shared.SourceMongodb{
			AuthSource:   authSource,
			Database:     database3,
			InstanceType: instanceType,
			Password:     password9,
			SourceType:   sourceType90,
			User:         user3,
		}
	}
	if sourceMongodb != nil {
		configuration = shared.SourceConfiguration{
			SourceMongodb: sourceMongodb,
		}
	}
	var sourceMssql *shared.SourceMssql
	if r.Configuration.SourceMssql != nil {
		database4 := r.Configuration.SourceMssql.Database.ValueString()
		host7 := r.Configuration.SourceMssql.Host.ValueString()
		jdbcURLParams1 := new(string)
		if !r.Configuration.SourceMssql.JdbcURLParams.IsUnknown() && !r.Configuration.SourceMssql.JdbcURLParams.IsNull() {
			*jdbcURLParams1 = r.Configuration.SourceMssql.JdbcURLParams.ValueString()
		} else {
			jdbcURLParams1 = nil
		}
		password10 := new(string)
		if !r.Configuration.SourceMssql.Password.IsUnknown() && !r.Configuration.SourceMssql.Password.IsNull() {
			*password10 = r.Configuration.SourceMssql.Password.ValueString()
		} else {
			password10 = nil
		}
		port7 := r.Configuration.SourceMssql.Port.ValueInt64()
		var replicationMethod1 *shared.SourceMssqlReplicationMethod
		var sourceMssqlReplicationMethodStandard *shared.SourceMssqlReplicationMethodStandard
		if r.Configuration.SourceMssql.ReplicationMethod.SourceMssqlReplicationMethodStandard != nil {
			method2 := shared.SourceMssqlReplicationMethodStandardMethodEnum(r.Configuration.SourceMssql.ReplicationMethod.SourceMssqlReplicationMethodStandard.Method.ValueString())
			sourceMssqlReplicationMethodStandard = &shared.SourceMssqlReplicationMethodStandard{
				Method: method2,
			}
		}
		if sourceMssqlReplicationMethodStandard != nil {
			replicationMethod1 = &shared.SourceMssqlReplicationMethod{
				SourceMssqlReplicationMethodStandard: sourceMssqlReplicationMethodStandard,
			}
		}
		var sourceMssqlReplicationMethodLogicalReplicationCDC *shared.SourceMssqlReplicationMethodLogicalReplicationCDC
		if r.Configuration.SourceMssql.ReplicationMethod.SourceMssqlReplicationMethodLogicalReplicationCDC != nil {
			dataToSync := new(shared.SourceMssqlReplicationMethodLogicalReplicationCDCDataToSyncEnum)
			if !r.Configuration.SourceMssql.ReplicationMethod.SourceMssqlReplicationMethodLogicalReplicationCDC.DataToSync.IsUnknown() && !r.Configuration.SourceMssql.ReplicationMethod.SourceMssqlReplicationMethodLogicalReplicationCDC.DataToSync.IsNull() {
				*dataToSync = shared.SourceMssqlReplicationMethodLogicalReplicationCDCDataToSyncEnum(r.Configuration.SourceMssql.ReplicationMethod.SourceMssqlReplicationMethodLogicalReplicationCDC.DataToSync.ValueString())
			} else {
				dataToSync = nil
			}
			initialWaitingSeconds1 := new(int64)
			if !r.Configuration.SourceMssql.ReplicationMethod.SourceMssqlReplicationMethodLogicalReplicationCDC.InitialWaitingSeconds.IsUnknown() && !r.Configuration.SourceMssql.ReplicationMethod.SourceMssqlReplicationMethodLogicalReplicationCDC.InitialWaitingSeconds.IsNull() {
				*initialWaitingSeconds1 = r.Configuration.SourceMssql.ReplicationMethod.SourceMssqlReplicationMethodLogicalReplicationCDC.InitialWaitingSeconds.ValueInt64()
			} else {
				initialWaitingSeconds1 = nil
			}
			method3 := shared.SourceMssqlReplicationMethodLogicalReplicationCDCMethodEnum(r.Configuration.SourceMssql.ReplicationMethod.SourceMssqlReplicationMethodLogicalReplicationCDC.Method.ValueString())
			snapshotIsolation := new(shared.SourceMssqlReplicationMethodLogicalReplicationCDCInitialSnapshotIsolationLevelEnum)
			if !r.Configuration.SourceMssql.ReplicationMethod.SourceMssqlReplicationMethodLogicalReplicationCDC.SnapshotIsolation.IsUnknown() && !r.Configuration.SourceMssql.ReplicationMethod.SourceMssqlReplicationMethodLogicalReplicationCDC.SnapshotIsolation.IsNull() {
				*snapshotIsolation = shared.SourceMssqlReplicationMethodLogicalReplicationCDCInitialSnapshotIsolationLevelEnum(r.Configuration.SourceMssql.ReplicationMethod.SourceMssqlReplicationMethodLogicalReplicationCDC.SnapshotIsolation.ValueString())
			} else {
				snapshotIsolation = nil
			}
			sourceMssqlReplicationMethodLogicalReplicationCDC = &shared.SourceMssqlReplicationMethodLogicalReplicationCDC{
				DataToSync:            dataToSync,
				InitialWaitingSeconds: initialWaitingSeconds1,
				Method:                method3,
				SnapshotIsolation:     snapshotIsolation,
			}
		}
		if sourceMssqlReplicationMethodLogicalReplicationCDC != nil {
			replicationMethod1 = &shared.SourceMssqlReplicationMethod{
				SourceMssqlReplicationMethodLogicalReplicationCDC: sourceMssqlReplicationMethodLogicalReplicationCDC,
			}
		}
		schemas1 := make([]string, 0)
		for _, schemasItem1 := range r.Configuration.SourceMssql.Schemas {
			schemas1 = append(schemas1, schemasItem1.ValueString())
		}
		sourceType91 := shared.SourceMssqlMssqlEnum(r.Configuration.SourceMssql.SourceType.ValueString())
		var sslMethod *shared.SourceMssqlSSLMethod
		var sourceMssqlSSLMethodEncryptedTrustServerCertificate *shared.SourceMssqlSSLMethodEncryptedTrustServerCertificate
		if r.Configuration.SourceMssql.SslMethod.SourceMssqlSSLMethodEncryptedTrustServerCertificate != nil {
			sslMethod1 := shared.SourceMssqlSSLMethodEncryptedTrustServerCertificateSSLMethodEnum(r.Configuration.SourceMssql.SslMethod.SourceMssqlSSLMethodEncryptedTrustServerCertificate.SslMethod.ValueString())
			sourceMssqlSSLMethodEncryptedTrustServerCertificate = &shared.SourceMssqlSSLMethodEncryptedTrustServerCertificate{
				SslMethod: sslMethod1,
			}
		}
		if sourceMssqlSSLMethodEncryptedTrustServerCertificate != nil {
			sslMethod = &shared.SourceMssqlSSLMethod{
				SourceMssqlSSLMethodEncryptedTrustServerCertificate: sourceMssqlSSLMethodEncryptedTrustServerCertificate,
			}
		}
		var sourceMssqlSSLMethodEncryptedVerifyCertificate *shared.SourceMssqlSSLMethodEncryptedVerifyCertificate
		if r.Configuration.SourceMssql.SslMethod.SourceMssqlSSLMethodEncryptedVerifyCertificate != nil {
			hostNameInCertificate := new(string)
			if !r.Configuration.SourceMssql.SslMethod.SourceMssqlSSLMethodEncryptedVerifyCertificate.HostNameInCertificate.IsUnknown() && !r.Configuration.SourceMssql.SslMethod.SourceMssqlSSLMethodEncryptedVerifyCertificate.HostNameInCertificate.IsNull() {
				*hostNameInCertificate = r.Configuration.SourceMssql.SslMethod.SourceMssqlSSLMethodEncryptedVerifyCertificate.HostNameInCertificate.ValueString()
			} else {
				hostNameInCertificate = nil
			}
			sslMethod2 := shared.SourceMssqlSSLMethodEncryptedVerifyCertificateSSLMethodEnum(r.Configuration.SourceMssql.SslMethod.SourceMssqlSSLMethodEncryptedVerifyCertificate.SslMethod.ValueString())
			sourceMssqlSSLMethodEncryptedVerifyCertificate = &shared.SourceMssqlSSLMethodEncryptedVerifyCertificate{
				HostNameInCertificate: hostNameInCertificate,
				SslMethod:             sslMethod2,
			}
		}
		if sourceMssqlSSLMethodEncryptedVerifyCertificate != nil {
			sslMethod = &shared.SourceMssqlSSLMethod{
				SourceMssqlSSLMethodEncryptedVerifyCertificate: sourceMssqlSSLMethodEncryptedVerifyCertificate,
			}
		}
		var tunnelMethod8 *shared.SourceMssqlSSHTunnelMethod
		var sourceMssqlSSHTunnelMethodNoTunnel *shared.SourceMssqlSSHTunnelMethodNoTunnel
		if r.Configuration.SourceMssql.TunnelMethod.SourceMssqlSSHTunnelMethodNoTunnel != nil {
			tunnelMethod9 := shared.SourceMssqlSSHTunnelMethodNoTunnelTunnelMethodEnum(r.Configuration.SourceMssql.TunnelMethod.SourceMssqlSSHTunnelMethodNoTunnel.TunnelMethod.ValueString())
			sourceMssqlSSHTunnelMethodNoTunnel = &shared.SourceMssqlSSHTunnelMethodNoTunnel{
				TunnelMethod: tunnelMethod9,
			}
		}
		if sourceMssqlSSHTunnelMethodNoTunnel != nil {
			tunnelMethod8 = &shared.SourceMssqlSSHTunnelMethod{
				SourceMssqlSSHTunnelMethodNoTunnel: sourceMssqlSSHTunnelMethodNoTunnel,
			}
		}
		var sourceMssqlSSHTunnelMethodSSHKeyAuthentication *shared.SourceMssqlSSHTunnelMethodSSHKeyAuthentication
		if r.Configuration.SourceMssql.TunnelMethod.SourceMssqlSSHTunnelMethodSSHKeyAuthentication != nil {
			sshKey2 := r.Configuration.SourceMssql.TunnelMethod.SourceMssqlSSHTunnelMethodSSHKeyAuthentication.SSHKey.ValueString()
			tunnelHost4 := r.Configuration.SourceMssql.TunnelMethod.SourceMssqlSSHTunnelMethodSSHKeyAuthentication.TunnelHost.ValueString()
			tunnelMethod10 := shared.SourceMssqlSSHTunnelMethodSSHKeyAuthenticationTunnelMethodEnum(r.Configuration.SourceMssql.TunnelMethod.SourceMssqlSSHTunnelMethodSSHKeyAuthentication.TunnelMethod.ValueString())
			tunnelPort4 := r.Configuration.SourceMssql.TunnelMethod.SourceMssqlSSHTunnelMethodSSHKeyAuthentication.TunnelPort.ValueInt64()
			tunnelUser4 := r.Configuration.SourceMssql.TunnelMethod.SourceMssqlSSHTunnelMethodSSHKeyAuthentication.TunnelUser.ValueString()
			sourceMssqlSSHTunnelMethodSSHKeyAuthentication = &shared.SourceMssqlSSHTunnelMethodSSHKeyAuthentication{
				SSHKey:       sshKey2,
				TunnelHost:   tunnelHost4,
				TunnelMethod: tunnelMethod10,
				TunnelPort:   tunnelPort4,
				TunnelUser:   tunnelUser4,
			}
		}
		if sourceMssqlSSHTunnelMethodSSHKeyAuthentication != nil {
			tunnelMethod8 = &shared.SourceMssqlSSHTunnelMethod{
				SourceMssqlSSHTunnelMethodSSHKeyAuthentication: sourceMssqlSSHTunnelMethodSSHKeyAuthentication,
			}
		}
		var sourceMssqlSSHTunnelMethodPasswordAuthentication *shared.SourceMssqlSSHTunnelMethodPasswordAuthentication
		if r.Configuration.SourceMssql.TunnelMethod.SourceMssqlSSHTunnelMethodPasswordAuthentication != nil {
			tunnelHost5 := r.Configuration.SourceMssql.TunnelMethod.SourceMssqlSSHTunnelMethodPasswordAuthentication.TunnelHost.ValueString()
			tunnelMethod11 := shared.SourceMssqlSSHTunnelMethodPasswordAuthenticationTunnelMethodEnum(r.Configuration.SourceMssql.TunnelMethod.SourceMssqlSSHTunnelMethodPasswordAuthentication.TunnelMethod.ValueString())
			tunnelPort5 := r.Configuration.SourceMssql.TunnelMethod.SourceMssqlSSHTunnelMethodPasswordAuthentication.TunnelPort.ValueInt64()
			tunnelUser5 := r.Configuration.SourceMssql.TunnelMethod.SourceMssqlSSHTunnelMethodPasswordAuthentication.TunnelUser.ValueString()
			tunnelUserPassword2 := r.Configuration.SourceMssql.TunnelMethod.SourceMssqlSSHTunnelMethodPasswordAuthentication.TunnelUserPassword.ValueString()
			sourceMssqlSSHTunnelMethodPasswordAuthentication = &shared.SourceMssqlSSHTunnelMethodPasswordAuthentication{
				TunnelHost:         tunnelHost5,
				TunnelMethod:       tunnelMethod11,
				TunnelPort:         tunnelPort5,
				TunnelUser:         tunnelUser5,
				TunnelUserPassword: tunnelUserPassword2,
			}
		}
		if sourceMssqlSSHTunnelMethodPasswordAuthentication != nil {
			tunnelMethod8 = &shared.SourceMssqlSSHTunnelMethod{
				SourceMssqlSSHTunnelMethodPasswordAuthentication: sourceMssqlSSHTunnelMethodPasswordAuthentication,
			}
		}
		username7 := r.Configuration.SourceMssql.Username.ValueString()
		sourceMssql = &shared.SourceMssql{
			Database:          database4,
			Host:              host7,
			JdbcURLParams:     jdbcURLParams1,
			Password:          password10,
			Port:              port7,
			ReplicationMethod: replicationMethod1,
			Schemas:           schemas1,
			SourceType:        sourceType91,
			SslMethod:         sslMethod,
			TunnelMethod:      tunnelMethod8,
			Username:          username7,
		}
	}
	if sourceMssql != nil {
		configuration = shared.SourceConfiguration{
			SourceMssql: sourceMssql,
		}
	}
	var sourceMyHours *shared.SourceMyHours
	if r.Configuration.SourceMyHours != nil {
		email5 := r.Configuration.SourceMyHours.Email.ValueString()
		logsBatchSize := new(int64)
		if !r.Configuration.SourceMyHours.LogsBatchSize.IsUnknown() && !r.Configuration.SourceMyHours.LogsBatchSize.IsNull() {
			*logsBatchSize = r.Configuration.SourceMyHours.LogsBatchSize.ValueInt64()
		} else {
			logsBatchSize = nil
		}
		password11 := r.Configuration.SourceMyHours.Password.ValueString()
		sourceType92 := shared.SourceMyHoursMyHoursEnum(r.Configuration.SourceMyHours.SourceType.ValueString())
		startDate37 := r.Configuration.SourceMyHours.StartDate.ValueString()
		sourceMyHours = &shared.SourceMyHours{
			Email:         email5,
			LogsBatchSize: logsBatchSize,
			Password:      password11,
			SourceType:    sourceType92,
			StartDate:     startDate37,
		}
	}
	if sourceMyHours != nil {
		configuration = shared.SourceConfiguration{
			SourceMyHours: sourceMyHours,
		}
	}
	var sourceMysql *shared.SourceMysql
	if r.Configuration.SourceMysql != nil {
		database5 := r.Configuration.SourceMysql.Database.ValueString()
		host8 := r.Configuration.SourceMysql.Host.ValueString()
		jdbcURLParams2 := new(string)
		if !r.Configuration.SourceMysql.JdbcURLParams.IsUnknown() && !r.Configuration.SourceMysql.JdbcURLParams.IsNull() {
			*jdbcURLParams2 = r.Configuration.SourceMysql.JdbcURLParams.ValueString()
		} else {
			jdbcURLParams2 = nil
		}
		password12 := new(string)
		if !r.Configuration.SourceMysql.Password.IsUnknown() && !r.Configuration.SourceMysql.Password.IsNull() {
			*password12 = r.Configuration.SourceMysql.Password.ValueString()
		} else {
			password12 = nil
		}
		port8 := r.Configuration.SourceMysql.Port.ValueInt64()
		var replicationMethod2 shared.SourceMysqlReplicationMethod
		var sourceMysqlReplicationMethodStandard *shared.SourceMysqlReplicationMethodStandard
		if r.Configuration.SourceMysql.ReplicationMethod.SourceMysqlReplicationMethodStandard != nil {
			method4 := shared.SourceMysqlReplicationMethodStandardMethodEnum(r.Configuration.SourceMysql.ReplicationMethod.SourceMysqlReplicationMethodStandard.Method.ValueString())
			sourceMysqlReplicationMethodStandard = &shared.SourceMysqlReplicationMethodStandard{
				Method: method4,
			}
		}
		if sourceMysqlReplicationMethodStandard != nil {
			replicationMethod2 = shared.SourceMysqlReplicationMethod{
				SourceMysqlReplicationMethodStandard: sourceMysqlReplicationMethodStandard,
			}
		}
		var sourceMysqlReplicationMethodLogicalReplicationCDC *shared.SourceMysqlReplicationMethodLogicalReplicationCDC
		if r.Configuration.SourceMysql.ReplicationMethod.SourceMysqlReplicationMethodLogicalReplicationCDC != nil {
			initialWaitingSeconds2 := new(int64)
			if !r.Configuration.SourceMysql.ReplicationMethod.SourceMysqlReplicationMethodLogicalReplicationCDC.InitialWaitingSeconds.IsUnknown() && !r.Configuration.SourceMysql.ReplicationMethod.SourceMysqlReplicationMethodLogicalReplicationCDC.InitialWaitingSeconds.IsNull() {
				*initialWaitingSeconds2 = r.Configuration.SourceMysql.ReplicationMethod.SourceMysqlReplicationMethodLogicalReplicationCDC.InitialWaitingSeconds.ValueInt64()
			} else {
				initialWaitingSeconds2 = nil
			}
			method5 := shared.SourceMysqlReplicationMethodLogicalReplicationCDCMethodEnum(r.Configuration.SourceMysql.ReplicationMethod.SourceMysqlReplicationMethodLogicalReplicationCDC.Method.ValueString())
			serverTimeZone := new(string)
			if !r.Configuration.SourceMysql.ReplicationMethod.SourceMysqlReplicationMethodLogicalReplicationCDC.ServerTimeZone.IsUnknown() && !r.Configuration.SourceMysql.ReplicationMethod.SourceMysqlReplicationMethodLogicalReplicationCDC.ServerTimeZone.IsNull() {
				*serverTimeZone = r.Configuration.SourceMysql.ReplicationMethod.SourceMysqlReplicationMethodLogicalReplicationCDC.ServerTimeZone.ValueString()
			} else {
				serverTimeZone = nil
			}
			sourceMysqlReplicationMethodLogicalReplicationCDC = &shared.SourceMysqlReplicationMethodLogicalReplicationCDC{
				InitialWaitingSeconds: initialWaitingSeconds2,
				Method:                method5,
				ServerTimeZone:        serverTimeZone,
			}
		}
		if sourceMysqlReplicationMethodLogicalReplicationCDC != nil {
			replicationMethod2 = shared.SourceMysqlReplicationMethod{
				SourceMysqlReplicationMethodLogicalReplicationCDC: sourceMysqlReplicationMethodLogicalReplicationCDC,
			}
		}
		sourceType93 := shared.SourceMysqlMysqlEnum(r.Configuration.SourceMysql.SourceType.ValueString())
		var sslMode1 *shared.SourceMysqlSSLModes
		var sourceMysqlSSLModesPreferred *shared.SourceMysqlSSLModesPreferred
		if r.Configuration.SourceMysql.SslMode.SourceMysqlSSLModesPreferred != nil {
			mode5 := shared.SourceMysqlSSLModesPreferredModeEnum(r.Configuration.SourceMysql.SslMode.SourceMysqlSSLModesPreferred.Mode.ValueString())
			sourceMysqlSSLModesPreferred = &shared.SourceMysqlSSLModesPreferred{
				Mode: mode5,
			}
		}
		if sourceMysqlSSLModesPreferred != nil {
			sslMode1 = &shared.SourceMysqlSSLModes{
				SourceMysqlSSLModesPreferred: sourceMysqlSSLModesPreferred,
			}
		}
		var sourceMysqlSSLModesRequired *shared.SourceMysqlSSLModesRequired
		if r.Configuration.SourceMysql.SslMode.SourceMysqlSSLModesRequired != nil {
			mode6 := shared.SourceMysqlSSLModesRequiredModeEnum(r.Configuration.SourceMysql.SslMode.SourceMysqlSSLModesRequired.Mode.ValueString())
			sourceMysqlSSLModesRequired = &shared.SourceMysqlSSLModesRequired{
				Mode: mode6,
			}
		}
		if sourceMysqlSSLModesRequired != nil {
			sslMode1 = &shared.SourceMysqlSSLModes{
				SourceMysqlSSLModesRequired: sourceMysqlSSLModesRequired,
			}
		}
		var sourceMysqlSSLModesVerifyCA *shared.SourceMysqlSSLModesVerifyCA
		if r.Configuration.SourceMysql.SslMode.SourceMysqlSSLModesVerifyCA != nil {
			caCertificate2 := r.Configuration.SourceMysql.SslMode.SourceMysqlSSLModesVerifyCA.CaCertificate.ValueString()
			clientCertificate2 := new(string)
			if !r.Configuration.SourceMysql.SslMode.SourceMysqlSSLModesVerifyCA.ClientCertificate.IsUnknown() && !r.Configuration.SourceMysql.SslMode.SourceMysqlSSLModesVerifyCA.ClientCertificate.IsNull() {
				*clientCertificate2 = r.Configuration.SourceMysql.SslMode.SourceMysqlSSLModesVerifyCA.ClientCertificate.ValueString()
			} else {
				clientCertificate2 = nil
			}
			clientKey2 := new(string)
			if !r.Configuration.SourceMysql.SslMode.SourceMysqlSSLModesVerifyCA.ClientKey.IsUnknown() && !r.Configuration.SourceMysql.SslMode.SourceMysqlSSLModesVerifyCA.ClientKey.IsNull() {
				*clientKey2 = r.Configuration.SourceMysql.SslMode.SourceMysqlSSLModesVerifyCA.ClientKey.ValueString()
			} else {
				clientKey2 = nil
			}
			clientKeyPassword2 := new(string)
			if !r.Configuration.SourceMysql.SslMode.SourceMysqlSSLModesVerifyCA.ClientKeyPassword.IsUnknown() && !r.Configuration.SourceMysql.SslMode.SourceMysqlSSLModesVerifyCA.ClientKeyPassword.IsNull() {
				*clientKeyPassword2 = r.Configuration.SourceMysql.SslMode.SourceMysqlSSLModesVerifyCA.ClientKeyPassword.ValueString()
			} else {
				clientKeyPassword2 = nil
			}
			mode7 := shared.SourceMysqlSSLModesVerifyCAModeEnum(r.Configuration.SourceMysql.SslMode.SourceMysqlSSLModesVerifyCA.Mode.ValueString())
			sourceMysqlSSLModesVerifyCA = &shared.SourceMysqlSSLModesVerifyCA{
				CaCertificate:     caCertificate2,
				ClientCertificate: clientCertificate2,
				ClientKey:         clientKey2,
				ClientKeyPassword: clientKeyPassword2,
				Mode:              mode7,
			}
		}
		if sourceMysqlSSLModesVerifyCA != nil {
			sslMode1 = &shared.SourceMysqlSSLModes{
				SourceMysqlSSLModesVerifyCA: sourceMysqlSSLModesVerifyCA,
			}
		}
		var sourceMysqlSSLModesVerifyIdentity *shared.SourceMysqlSSLModesVerifyIdentity
		if r.Configuration.SourceMysql.SslMode.SourceMysqlSSLModesVerifyIdentity != nil {
			caCertificate3 := r.Configuration.SourceMysql.SslMode.SourceMysqlSSLModesVerifyIdentity.CaCertificate.ValueString()
			clientCertificate3 := new(string)
			if !r.Configuration.SourceMysql.SslMode.SourceMysqlSSLModesVerifyIdentity.ClientCertificate.IsUnknown() && !r.Configuration.SourceMysql.SslMode.SourceMysqlSSLModesVerifyIdentity.ClientCertificate.IsNull() {
				*clientCertificate3 = r.Configuration.SourceMysql.SslMode.SourceMysqlSSLModesVerifyIdentity.ClientCertificate.ValueString()
			} else {
				clientCertificate3 = nil
			}
			clientKey3 := new(string)
			if !r.Configuration.SourceMysql.SslMode.SourceMysqlSSLModesVerifyIdentity.ClientKey.IsUnknown() && !r.Configuration.SourceMysql.SslMode.SourceMysqlSSLModesVerifyIdentity.ClientKey.IsNull() {
				*clientKey3 = r.Configuration.SourceMysql.SslMode.SourceMysqlSSLModesVerifyIdentity.ClientKey.ValueString()
			} else {
				clientKey3 = nil
			}
			clientKeyPassword3 := new(string)
			if !r.Configuration.SourceMysql.SslMode.SourceMysqlSSLModesVerifyIdentity.ClientKeyPassword.IsUnknown() && !r.Configuration.SourceMysql.SslMode.SourceMysqlSSLModesVerifyIdentity.ClientKeyPassword.IsNull() {
				*clientKeyPassword3 = r.Configuration.SourceMysql.SslMode.SourceMysqlSSLModesVerifyIdentity.ClientKeyPassword.ValueString()
			} else {
				clientKeyPassword3 = nil
			}
			mode8 := shared.SourceMysqlSSLModesVerifyIdentityModeEnum(r.Configuration.SourceMysql.SslMode.SourceMysqlSSLModesVerifyIdentity.Mode.ValueString())
			sourceMysqlSSLModesVerifyIdentity = &shared.SourceMysqlSSLModesVerifyIdentity{
				CaCertificate:     caCertificate3,
				ClientCertificate: clientCertificate3,
				ClientKey:         clientKey3,
				ClientKeyPassword: clientKeyPassword3,
				Mode:              mode8,
			}
		}
		if sourceMysqlSSLModesVerifyIdentity != nil {
			sslMode1 = &shared.SourceMysqlSSLModes{
				SourceMysqlSSLModesVerifyIdentity: sourceMysqlSSLModesVerifyIdentity,
			}
		}
		var tunnelMethod12 *shared.SourceMysqlSSHTunnelMethod
		var sourceMysqlSSHTunnelMethodNoTunnel *shared.SourceMysqlSSHTunnelMethodNoTunnel
		if r.Configuration.SourceMysql.TunnelMethod.SourceMysqlSSHTunnelMethodNoTunnel != nil {
			tunnelMethod13 := shared.SourceMysqlSSHTunnelMethodNoTunnelTunnelMethodEnum(r.Configuration.SourceMysql.TunnelMethod.SourceMysqlSSHTunnelMethodNoTunnel.TunnelMethod.ValueString())
			sourceMysqlSSHTunnelMethodNoTunnel = &shared.SourceMysqlSSHTunnelMethodNoTunnel{
				TunnelMethod: tunnelMethod13,
			}
		}
		if sourceMysqlSSHTunnelMethodNoTunnel != nil {
			tunnelMethod12 = &shared.SourceMysqlSSHTunnelMethod{
				SourceMysqlSSHTunnelMethodNoTunnel: sourceMysqlSSHTunnelMethodNoTunnel,
			}
		}
		var sourceMysqlSSHTunnelMethodSSHKeyAuthentication *shared.SourceMysqlSSHTunnelMethodSSHKeyAuthentication
		if r.Configuration.SourceMysql.TunnelMethod.SourceMysqlSSHTunnelMethodSSHKeyAuthentication != nil {
			sshKey3 := r.Configuration.SourceMysql.TunnelMethod.SourceMysqlSSHTunnelMethodSSHKeyAuthentication.SSHKey.ValueString()
			tunnelHost6 := r.Configuration.SourceMysql.TunnelMethod.SourceMysqlSSHTunnelMethodSSHKeyAuthentication.TunnelHost.ValueString()
			tunnelMethod14 := shared.SourceMysqlSSHTunnelMethodSSHKeyAuthenticationTunnelMethodEnum(r.Configuration.SourceMysql.TunnelMethod.SourceMysqlSSHTunnelMethodSSHKeyAuthentication.TunnelMethod.ValueString())
			tunnelPort6 := r.Configuration.SourceMysql.TunnelMethod.SourceMysqlSSHTunnelMethodSSHKeyAuthentication.TunnelPort.ValueInt64()
			tunnelUser6 := r.Configuration.SourceMysql.TunnelMethod.SourceMysqlSSHTunnelMethodSSHKeyAuthentication.TunnelUser.ValueString()
			sourceMysqlSSHTunnelMethodSSHKeyAuthentication = &shared.SourceMysqlSSHTunnelMethodSSHKeyAuthentication{
				SSHKey:       sshKey3,
				TunnelHost:   tunnelHost6,
				TunnelMethod: tunnelMethod14,
				TunnelPort:   tunnelPort6,
				TunnelUser:   tunnelUser6,
			}
		}
		if sourceMysqlSSHTunnelMethodSSHKeyAuthentication != nil {
			tunnelMethod12 = &shared.SourceMysqlSSHTunnelMethod{
				SourceMysqlSSHTunnelMethodSSHKeyAuthentication: sourceMysqlSSHTunnelMethodSSHKeyAuthentication,
			}
		}
		var sourceMysqlSSHTunnelMethodPasswordAuthentication *shared.SourceMysqlSSHTunnelMethodPasswordAuthentication
		if r.Configuration.SourceMysql.TunnelMethod.SourceMysqlSSHTunnelMethodPasswordAuthentication != nil {
			tunnelHost7 := r.Configuration.SourceMysql.TunnelMethod.SourceMysqlSSHTunnelMethodPasswordAuthentication.TunnelHost.ValueString()
			tunnelMethod15 := shared.SourceMysqlSSHTunnelMethodPasswordAuthenticationTunnelMethodEnum(r.Configuration.SourceMysql.TunnelMethod.SourceMysqlSSHTunnelMethodPasswordAuthentication.TunnelMethod.ValueString())
			tunnelPort7 := r.Configuration.SourceMysql.TunnelMethod.SourceMysqlSSHTunnelMethodPasswordAuthentication.TunnelPort.ValueInt64()
			tunnelUser7 := r.Configuration.SourceMysql.TunnelMethod.SourceMysqlSSHTunnelMethodPasswordAuthentication.TunnelUser.ValueString()
			tunnelUserPassword3 := r.Configuration.SourceMysql.TunnelMethod.SourceMysqlSSHTunnelMethodPasswordAuthentication.TunnelUserPassword.ValueString()
			sourceMysqlSSHTunnelMethodPasswordAuthentication = &shared.SourceMysqlSSHTunnelMethodPasswordAuthentication{
				TunnelHost:         tunnelHost7,
				TunnelMethod:       tunnelMethod15,
				TunnelPort:         tunnelPort7,
				TunnelUser:         tunnelUser7,
				TunnelUserPassword: tunnelUserPassword3,
			}
		}
		if sourceMysqlSSHTunnelMethodPasswordAuthentication != nil {
			tunnelMethod12 = &shared.SourceMysqlSSHTunnelMethod{
				SourceMysqlSSHTunnelMethodPasswordAuthentication: sourceMysqlSSHTunnelMethodPasswordAuthentication,
			}
		}
		username8 := r.Configuration.SourceMysql.Username.ValueString()
		sourceMysql = &shared.SourceMysql{
			Database:          database5,
			Host:              host8,
			JdbcURLParams:     jdbcURLParams2,
			Password:          password12,
			Port:              port8,
			ReplicationMethod: replicationMethod2,
			SourceType:        sourceType93,
			SslMode:           sslMode1,
			TunnelMethod:      tunnelMethod12,
			Username:          username8,
		}
	}
	if sourceMysql != nil {
		configuration = shared.SourceConfiguration{
			SourceMysql: sourceMysql,
		}
	}
	var sourceNetsuite *shared.SourceNetsuite
	if r.Configuration.SourceNetsuite != nil {
		consumerKey := r.Configuration.SourceNetsuite.ConsumerKey.ValueString()
		consumerSecret := r.Configuration.SourceNetsuite.ConsumerSecret.ValueString()
		objectTypes := make([]string, 0)
		for _, objectTypesItem := range r.Configuration.SourceNetsuite.ObjectTypes {
			objectTypes = append(objectTypes, objectTypesItem.ValueString())
		}
		realm := r.Configuration.SourceNetsuite.Realm.ValueString()
		sourceType94 := shared.SourceNetsuiteNetsuiteEnum(r.Configuration.SourceNetsuite.SourceType.ValueString())
		startDatetime := r.Configuration.SourceNetsuite.StartDatetime.ValueString()
		tokenKey := r.Configuration.SourceNetsuite.TokenKey.ValueString()
		tokenSecret := r.Configuration.SourceNetsuite.TokenSecret.ValueString()
		windowInDays2 := new(int64)
		if !r.Configuration.SourceNetsuite.WindowInDays.IsUnknown() && !r.Configuration.SourceNetsuite.WindowInDays.IsNull() {
			*windowInDays2 = r.Configuration.SourceNetsuite.WindowInDays.ValueInt64()
		} else {
			windowInDays2 = nil
		}
		sourceNetsuite = &shared.SourceNetsuite{
			ConsumerKey:    consumerKey,
			ConsumerSecret: consumerSecret,
			ObjectTypes:    objectTypes,
			Realm:          realm,
			SourceType:     sourceType94,
			StartDatetime:  startDatetime,
			TokenKey:       tokenKey,
			TokenSecret:    tokenSecret,
			WindowInDays:   windowInDays2,
		}
	}
	if sourceNetsuite != nil {
		configuration = shared.SourceConfiguration{
			SourceNetsuite: sourceNetsuite,
		}
	}
	var sourceNotion *shared.SourceNotion
	if r.Configuration.SourceNotion != nil {
		var credentials17 *shared.SourceNotionAuthenticateUsing
		var sourceNotionAuthenticateUsingOAuth20 *shared.SourceNotionAuthenticateUsingOAuth20
		if r.Configuration.SourceNotion.Credentials.SourceNotionAuthenticateUsingOAuth20 != nil {
			accessToken20 := r.Configuration.SourceNotion.Credentials.SourceNotionAuthenticateUsingOAuth20.AccessToken.ValueString()
			authType22 := shared.SourceNotionAuthenticateUsingOAuth20AuthTypeEnum(r.Configuration.SourceNotion.Credentials.SourceNotionAuthenticateUsingOAuth20.AuthType.ValueString())
			clientId20 := r.Configuration.SourceNotion.Credentials.SourceNotionAuthenticateUsingOAuth20.ClientID.ValueString()
			clientSecret20 := r.Configuration.SourceNotion.Credentials.SourceNotionAuthenticateUsingOAuth20.ClientSecret.ValueString()
			sourceNotionAuthenticateUsingOAuth20 = &shared.SourceNotionAuthenticateUsingOAuth20{
				AccessToken:  accessToken20,
				AuthType:     authType22,
				ClientID:     clientId20,
				ClientSecret: clientSecret20,
			}
		}
		if sourceNotionAuthenticateUsingOAuth20 != nil {
			credentials17 = &shared.SourceNotionAuthenticateUsing{
				SourceNotionAuthenticateUsingOAuth20: sourceNotionAuthenticateUsingOAuth20,
			}
		}
		var sourceNotionAuthenticateUsingAccessToken *shared.SourceNotionAuthenticateUsingAccessToken
		if r.Configuration.SourceNotion.Credentials.SourceNotionAuthenticateUsingAccessToken != nil {
			authType23 := shared.SourceNotionAuthenticateUsingAccessTokenAuthTypeEnum(r.Configuration.SourceNotion.Credentials.SourceNotionAuthenticateUsingAccessToken.AuthType.ValueString())
			token3 := r.Configuration.SourceNotion.Credentials.SourceNotionAuthenticateUsingAccessToken.Token.ValueString()
			sourceNotionAuthenticateUsingAccessToken = &shared.SourceNotionAuthenticateUsingAccessToken{
				AuthType: authType23,
				Token:    token3,
			}
		}
		if sourceNotionAuthenticateUsingAccessToken != nil {
			credentials17 = &shared.SourceNotionAuthenticateUsing{
				SourceNotionAuthenticateUsingAccessToken: sourceNotionAuthenticateUsingAccessToken,
			}
		}
		sourceType95 := shared.SourceNotionNotionEnum(r.Configuration.SourceNotion.SourceType.ValueString())
		startDate38, _ := time.Parse(time.RFC3339Nano, r.Configuration.SourceNotion.StartDate.ValueString())
		sourceNotion = &shared.SourceNotion{
			Credentials: credentials17,
			SourceType:  sourceType95,
			StartDate:   startDate38,
		}
	}
	if sourceNotion != nil {
		configuration = shared.SourceConfiguration{
			SourceNotion: sourceNotion,
		}
	}
	var sourceNytimes *shared.SourceNytimes
	if r.Configuration.SourceNytimes != nil {
		apiKey28 := r.Configuration.SourceNytimes.APIKey.ValueString()
		endDate8 := new(customTypes.Date)
		if !r.Configuration.SourceNytimes.EndDate.IsUnknown() && !r.Configuration.SourceNytimes.EndDate.IsNull() {
			*endDate8, _ = customTypes.NewDate(r.Configuration.SourceNytimes.EndDate.ValueString())
		} else {
			endDate8 = nil
		}
		period2 := shared.SourceNytimesPeriodUsedForMostPopularStreamsEnum(r.Configuration.SourceNytimes.Period.ValueString())
		shareType := new(shared.SourceNytimesShareTypeUsedForMostPopularSharedStreamEnum)
		if !r.Configuration.SourceNytimes.ShareType.IsUnknown() && !r.Configuration.SourceNytimes.ShareType.IsNull() {
			*shareType = shared.SourceNytimesShareTypeUsedForMostPopularSharedStreamEnum(r.Configuration.SourceNytimes.ShareType.ValueString())
		} else {
			shareType = nil
		}
		sourceType96 := shared.SourceNytimesNytimesEnum(r.Configuration.SourceNytimes.SourceType.ValueString())
		startDate39, _ := customTypes.NewDate(r.Configuration.SourceNytimes.StartDate.ValueString())
		sourceNytimes = &shared.SourceNytimes{
			APIKey:     apiKey28,
			EndDate:    endDate8,
			Period:     period2,
			ShareType:  shareType,
			SourceType: sourceType96,
			StartDate:  startDate39,
		}
	}
	if sourceNytimes != nil {
		configuration = shared.SourceConfiguration{
			SourceNytimes: sourceNytimes,
		}
	}
	var sourceOkta *shared.SourceOkta
	if r.Configuration.SourceOkta != nil {
		var credentials18 *shared.SourceOktaAuthorizationMethod
		var sourceOktaAuthorizationMethodOAuth20 *shared.SourceOktaAuthorizationMethodOAuth20
		if r.Configuration.SourceOkta.Credentials.SourceOktaAuthorizationMethodOAuth20 != nil {
			authType24 := shared.SourceOktaAuthorizationMethodOAuth20AuthTypeEnum(r.Configuration.SourceOkta.Credentials.SourceOktaAuthorizationMethodOAuth20.AuthType.ValueString())
			clientId21 := r.Configuration.SourceOkta.Credentials.SourceOktaAuthorizationMethodOAuth20.ClientID.ValueString()
			clientSecret21 := r.Configuration.SourceOkta.Credentials.SourceOktaAuthorizationMethodOAuth20.ClientSecret.ValueString()
			refreshToken16 := r.Configuration.SourceOkta.Credentials.SourceOktaAuthorizationMethodOAuth20.RefreshToken.ValueString()
			sourceOktaAuthorizationMethodOAuth20 = &shared.SourceOktaAuthorizationMethodOAuth20{
				AuthType:     authType24,
				ClientID:     clientId21,
				ClientSecret: clientSecret21,
				RefreshToken: refreshToken16,
			}
		}
		if sourceOktaAuthorizationMethodOAuth20 != nil {
			credentials18 = &shared.SourceOktaAuthorizationMethod{
				SourceOktaAuthorizationMethodOAuth20: sourceOktaAuthorizationMethodOAuth20,
			}
		}
		var sourceOktaAuthorizationMethodAPIToken *shared.SourceOktaAuthorizationMethodAPIToken
		if r.Configuration.SourceOkta.Credentials.SourceOktaAuthorizationMethodAPIToken != nil {
			apiToken8 := r.Configuration.SourceOkta.Credentials.SourceOktaAuthorizationMethodAPIToken.APIToken.ValueString()
			authType25 := shared.SourceOktaAuthorizationMethodAPITokenAuthTypeEnum(r.Configuration.SourceOkta.Credentials.SourceOktaAuthorizationMethodAPIToken.AuthType.ValueString())
			sourceOktaAuthorizationMethodAPIToken = &shared.SourceOktaAuthorizationMethodAPIToken{
				APIToken: apiToken8,
				AuthType: authType25,
			}
		}
		if sourceOktaAuthorizationMethodAPIToken != nil {
			credentials18 = &shared.SourceOktaAuthorizationMethod{
				SourceOktaAuthorizationMethodAPIToken: sourceOktaAuthorizationMethodAPIToken,
			}
		}
		domain5 := new(string)
		if !r.Configuration.SourceOkta.Domain.IsUnknown() && !r.Configuration.SourceOkta.Domain.IsNull() {
			*domain5 = r.Configuration.SourceOkta.Domain.ValueString()
		} else {
			domain5 = nil
		}
		sourceType97 := shared.SourceOktaOktaEnum(r.Configuration.SourceOkta.SourceType.ValueString())
		startDate40 := new(string)
		if !r.Configuration.SourceOkta.StartDate.IsUnknown() && !r.Configuration.SourceOkta.StartDate.IsNull() {
			*startDate40 = r.Configuration.SourceOkta.StartDate.ValueString()
		} else {
			startDate40 = nil
		}
		sourceOkta = &shared.SourceOkta{
			Credentials: credentials18,
			Domain:      domain5,
			SourceType:  sourceType97,
			StartDate:   startDate40,
		}
	}
	if sourceOkta != nil {
		configuration = shared.SourceConfiguration{
			SourceOkta: sourceOkta,
		}
	}
	var sourceOmnisend *shared.SourceOmnisend
	if r.Configuration.SourceOmnisend != nil {
		apiKey29 := r.Configuration.SourceOmnisend.APIKey.ValueString()
		sourceType98 := shared.SourceOmnisendOmnisendEnum(r.Configuration.SourceOmnisend.SourceType.ValueString())
		sourceOmnisend = &shared.SourceOmnisend{
			APIKey:     apiKey29,
			SourceType: sourceType98,
		}
	}
	if sourceOmnisend != nil {
		configuration = shared.SourceConfiguration{
			SourceOmnisend: sourceOmnisend,
		}
	}
	var sourceOnesignal *shared.SourceOnesignal
	if r.Configuration.SourceOnesignal != nil {
		applications := make([]shared.SourceOnesignalApplications, 0)
		for _, applicationsItem := range r.Configuration.SourceOnesignal.Applications {
			appAPIKey := applicationsItem.AppAPIKey.ValueString()
			appId1 := applicationsItem.AppID.ValueString()
			appName := new(string)
			if !applicationsItem.AppName.IsUnknown() && !applicationsItem.AppName.IsNull() {
				*appName = applicationsItem.AppName.ValueString()
			} else {
				appName = nil
			}
			applications = append(applications, shared.SourceOnesignalApplications{
				AppAPIKey: appAPIKey,
				AppID:     appId1,
				AppName:   appName,
			})
		}
		outcomeNames := r.Configuration.SourceOnesignal.OutcomeNames.ValueString()
		sourceType99 := shared.SourceOnesignalOnesignalEnum(r.Configuration.SourceOnesignal.SourceType.ValueString())
		startDate41, _ := time.Parse(time.RFC3339Nano, r.Configuration.SourceOnesignal.StartDate.ValueString())
		userAuthKey := r.Configuration.SourceOnesignal.UserAuthKey.ValueString()
		sourceOnesignal = &shared.SourceOnesignal{
			Applications: applications,
			OutcomeNames: outcomeNames,
			SourceType:   sourceType99,
			StartDate:    startDate41,
			UserAuthKey:  userAuthKey,
		}
	}
	if sourceOnesignal != nil {
		configuration = shared.SourceConfiguration{
			SourceOnesignal: sourceOnesignal,
		}
	}
	var sourceOpenweather *shared.SourceOpenweather
	if r.Configuration.SourceOpenweather != nil {
		appid := r.Configuration.SourceOpenweather.Appid.ValueString()
		lang := new(shared.SourceOpenweatherLanguageEnum)
		if !r.Configuration.SourceOpenweather.Lang.IsUnknown() && !r.Configuration.SourceOpenweather.Lang.IsNull() {
			*lang = shared.SourceOpenweatherLanguageEnum(r.Configuration.SourceOpenweather.Lang.ValueString())
		} else {
			lang = nil
		}
		lat := r.Configuration.SourceOpenweather.Lat.ValueString()
		lon := r.Configuration.SourceOpenweather.Lon.ValueString()
		sourceType100 := shared.SourceOpenweatherOpenweatherEnum(r.Configuration.SourceOpenweather.SourceType.ValueString())
		units := new(shared.SourceOpenweatherUnitsEnum)
		if !r.Configuration.SourceOpenweather.Units.IsUnknown() && !r.Configuration.SourceOpenweather.Units.IsNull() {
			*units = shared.SourceOpenweatherUnitsEnum(r.Configuration.SourceOpenweather.Units.ValueString())
		} else {
			units = nil
		}
		sourceOpenweather = &shared.SourceOpenweather{
			Appid:      appid,
			Lang:       lang,
			Lat:        lat,
			Lon:        lon,
			SourceType: sourceType100,
			Units:      units,
		}
	}
	if sourceOpenweather != nil {
		configuration = shared.SourceConfiguration{
			SourceOpenweather: sourceOpenweather,
		}
	}
	var sourceOracle *shared.SourceOracle
	if r.Configuration.SourceOracle != nil {
		var connectionData *shared.SourceOracleConnectBy
		var sourceOracleConnectByServiceName *shared.SourceOracleConnectByServiceName
		if r.Configuration.SourceOracle.ConnectionData.SourceOracleConnectByServiceName != nil {
			connectionType := new(shared.SourceOracleConnectByServiceNameConnectionTypeEnum)
			if !r.Configuration.SourceOracle.ConnectionData.SourceOracleConnectByServiceName.ConnectionType.IsUnknown() && !r.Configuration.SourceOracle.ConnectionData.SourceOracleConnectByServiceName.ConnectionType.IsNull() {
				*connectionType = shared.SourceOracleConnectByServiceNameConnectionTypeEnum(r.Configuration.SourceOracle.ConnectionData.SourceOracleConnectByServiceName.ConnectionType.ValueString())
			} else {
				connectionType = nil
			}
			serviceName := r.Configuration.SourceOracle.ConnectionData.SourceOracleConnectByServiceName.ServiceName.ValueString()
			sourceOracleConnectByServiceName = &shared.SourceOracleConnectByServiceName{
				ConnectionType: connectionType,
				ServiceName:    serviceName,
			}
		}
		if sourceOracleConnectByServiceName != nil {
			connectionData = &shared.SourceOracleConnectBy{
				SourceOracleConnectByServiceName: sourceOracleConnectByServiceName,
			}
		}
		var sourceOracleConnectBySystemIDSID *shared.SourceOracleConnectBySystemIDSID
		if r.Configuration.SourceOracle.ConnectionData.SourceOracleConnectBySystemIDSID != nil {
			connectionType1 := new(shared.SourceOracleConnectBySystemIDSIDConnectionTypeEnum)
			if !r.Configuration.SourceOracle.ConnectionData.SourceOracleConnectBySystemIDSID.ConnectionType.IsUnknown() && !r.Configuration.SourceOracle.ConnectionData.SourceOracleConnectBySystemIDSID.ConnectionType.IsNull() {
				*connectionType1 = shared.SourceOracleConnectBySystemIDSIDConnectionTypeEnum(r.Configuration.SourceOracle.ConnectionData.SourceOracleConnectBySystemIDSID.ConnectionType.ValueString())
			} else {
				connectionType1 = nil
			}
			sid := r.Configuration.SourceOracle.ConnectionData.SourceOracleConnectBySystemIDSID.Sid.ValueString()
			sourceOracleConnectBySystemIDSID = &shared.SourceOracleConnectBySystemIDSID{
				ConnectionType: connectionType1,
				Sid:            sid,
			}
		}
		if sourceOracleConnectBySystemIDSID != nil {
			connectionData = &shared.SourceOracleConnectBy{
				SourceOracleConnectBySystemIDSID: sourceOracleConnectBySystemIDSID,
			}
		}
		var encryption shared.SourceOracleEncryption
		var sourceOracleEncryptionNativeNetworkEncryptionNNE *shared.SourceOracleEncryptionNativeNetworkEncryptionNNE
		if r.Configuration.SourceOracle.Encryption.SourceOracleEncryptionNativeNetworkEncryptionNNE != nil {
			encryptionAlgorithm := new(shared.SourceOracleEncryptionNativeNetworkEncryptionNNEEncryptionAlgorithmEnum)
			if !r.Configuration.SourceOracle.Encryption.SourceOracleEncryptionNativeNetworkEncryptionNNE.EncryptionAlgorithm.IsUnknown() && !r.Configuration.SourceOracle.Encryption.SourceOracleEncryptionNativeNetworkEncryptionNNE.EncryptionAlgorithm.IsNull() {
				*encryptionAlgorithm = shared.SourceOracleEncryptionNativeNetworkEncryptionNNEEncryptionAlgorithmEnum(r.Configuration.SourceOracle.Encryption.SourceOracleEncryptionNativeNetworkEncryptionNNE.EncryptionAlgorithm.ValueString())
			} else {
				encryptionAlgorithm = nil
			}
			encryptionMethod := shared.SourceOracleEncryptionNativeNetworkEncryptionNNEEncryptionMethodEnum(r.Configuration.SourceOracle.Encryption.SourceOracleEncryptionNativeNetworkEncryptionNNE.EncryptionMethod.ValueString())
			sourceOracleEncryptionNativeNetworkEncryptionNNE = &shared.SourceOracleEncryptionNativeNetworkEncryptionNNE{
				EncryptionAlgorithm: encryptionAlgorithm,
				EncryptionMethod:    encryptionMethod,
			}
		}
		if sourceOracleEncryptionNativeNetworkEncryptionNNE != nil {
			encryption = shared.SourceOracleEncryption{
				SourceOracleEncryptionNativeNetworkEncryptionNNE: sourceOracleEncryptionNativeNetworkEncryptionNNE,
			}
		}
		var sourceOracleEncryptionTLSEncryptedVerifyCertificate *shared.SourceOracleEncryptionTLSEncryptedVerifyCertificate
		if r.Configuration.SourceOracle.Encryption.SourceOracleEncryptionTLSEncryptedVerifyCertificate != nil {
			encryptionMethod1 := shared.SourceOracleEncryptionTLSEncryptedVerifyCertificateEncryptionMethodEnum(r.Configuration.SourceOracle.Encryption.SourceOracleEncryptionTLSEncryptedVerifyCertificate.EncryptionMethod.ValueString())
			sslCertificate := r.Configuration.SourceOracle.Encryption.SourceOracleEncryptionTLSEncryptedVerifyCertificate.SslCertificate.ValueString()
			sourceOracleEncryptionTLSEncryptedVerifyCertificate = &shared.SourceOracleEncryptionTLSEncryptedVerifyCertificate{
				EncryptionMethod: encryptionMethod1,
				SslCertificate:   sslCertificate,
			}
		}
		if sourceOracleEncryptionTLSEncryptedVerifyCertificate != nil {
			encryption = shared.SourceOracleEncryption{
				SourceOracleEncryptionTLSEncryptedVerifyCertificate: sourceOracleEncryptionTLSEncryptedVerifyCertificate,
			}
		}
		host9 := r.Configuration.SourceOracle.Host.ValueString()
		jdbcURLParams3 := new(string)
		if !r.Configuration.SourceOracle.JdbcURLParams.IsUnknown() && !r.Configuration.SourceOracle.JdbcURLParams.IsNull() {
			*jdbcURLParams3 = r.Configuration.SourceOracle.JdbcURLParams.ValueString()
		} else {
			jdbcURLParams3 = nil
		}
		password13 := new(string)
		if !r.Configuration.SourceOracle.Password.IsUnknown() && !r.Configuration.SourceOracle.Password.IsNull() {
			*password13 = r.Configuration.SourceOracle.Password.ValueString()
		} else {
			password13 = nil
		}
		port9 := r.Configuration.SourceOracle.Port.ValueInt64()
		schemas2 := make([]string, 0)
		for _, schemasItem2 := range r.Configuration.SourceOracle.Schemas {
			schemas2 = append(schemas2, schemasItem2.ValueString())
		}
		sourceType101 := shared.SourceOracleOracleEnum(r.Configuration.SourceOracle.SourceType.ValueString())
		var tunnelMethod16 *shared.SourceOracleSSHTunnelMethod
		var sourceOracleSSHTunnelMethodNoTunnel *shared.SourceOracleSSHTunnelMethodNoTunnel
		if r.Configuration.SourceOracle.TunnelMethod.SourceOracleSSHTunnelMethodNoTunnel != nil {
			tunnelMethod17 := shared.SourceOracleSSHTunnelMethodNoTunnelTunnelMethodEnum(r.Configuration.SourceOracle.TunnelMethod.SourceOracleSSHTunnelMethodNoTunnel.TunnelMethod.ValueString())
			sourceOracleSSHTunnelMethodNoTunnel = &shared.SourceOracleSSHTunnelMethodNoTunnel{
				TunnelMethod: tunnelMethod17,
			}
		}
		if sourceOracleSSHTunnelMethodNoTunnel != nil {
			tunnelMethod16 = &shared.SourceOracleSSHTunnelMethod{
				SourceOracleSSHTunnelMethodNoTunnel: sourceOracleSSHTunnelMethodNoTunnel,
			}
		}
		var sourceOracleSSHTunnelMethodSSHKeyAuthentication *shared.SourceOracleSSHTunnelMethodSSHKeyAuthentication
		if r.Configuration.SourceOracle.TunnelMethod.SourceOracleSSHTunnelMethodSSHKeyAuthentication != nil {
			sshKey4 := r.Configuration.SourceOracle.TunnelMethod.SourceOracleSSHTunnelMethodSSHKeyAuthentication.SSHKey.ValueString()
			tunnelHost8 := r.Configuration.SourceOracle.TunnelMethod.SourceOracleSSHTunnelMethodSSHKeyAuthentication.TunnelHost.ValueString()
			tunnelMethod18 := shared.SourceOracleSSHTunnelMethodSSHKeyAuthenticationTunnelMethodEnum(r.Configuration.SourceOracle.TunnelMethod.SourceOracleSSHTunnelMethodSSHKeyAuthentication.TunnelMethod.ValueString())
			tunnelPort8 := r.Configuration.SourceOracle.TunnelMethod.SourceOracleSSHTunnelMethodSSHKeyAuthentication.TunnelPort.ValueInt64()
			tunnelUser8 := r.Configuration.SourceOracle.TunnelMethod.SourceOracleSSHTunnelMethodSSHKeyAuthentication.TunnelUser.ValueString()
			sourceOracleSSHTunnelMethodSSHKeyAuthentication = &shared.SourceOracleSSHTunnelMethodSSHKeyAuthentication{
				SSHKey:       sshKey4,
				TunnelHost:   tunnelHost8,
				TunnelMethod: tunnelMethod18,
				TunnelPort:   tunnelPort8,
				TunnelUser:   tunnelUser8,
			}
		}
		if sourceOracleSSHTunnelMethodSSHKeyAuthentication != nil {
			tunnelMethod16 = &shared.SourceOracleSSHTunnelMethod{
				SourceOracleSSHTunnelMethodSSHKeyAuthentication: sourceOracleSSHTunnelMethodSSHKeyAuthentication,
			}
		}
		var sourceOracleSSHTunnelMethodPasswordAuthentication *shared.SourceOracleSSHTunnelMethodPasswordAuthentication
		if r.Configuration.SourceOracle.TunnelMethod.SourceOracleSSHTunnelMethodPasswordAuthentication != nil {
			tunnelHost9 := r.Configuration.SourceOracle.TunnelMethod.SourceOracleSSHTunnelMethodPasswordAuthentication.TunnelHost.ValueString()
			tunnelMethod19 := shared.SourceOracleSSHTunnelMethodPasswordAuthenticationTunnelMethodEnum(r.Configuration.SourceOracle.TunnelMethod.SourceOracleSSHTunnelMethodPasswordAuthentication.TunnelMethod.ValueString())
			tunnelPort9 := r.Configuration.SourceOracle.TunnelMethod.SourceOracleSSHTunnelMethodPasswordAuthentication.TunnelPort.ValueInt64()
			tunnelUser9 := r.Configuration.SourceOracle.TunnelMethod.SourceOracleSSHTunnelMethodPasswordAuthentication.TunnelUser.ValueString()
			tunnelUserPassword4 := r.Configuration.SourceOracle.TunnelMethod.SourceOracleSSHTunnelMethodPasswordAuthentication.TunnelUserPassword.ValueString()
			sourceOracleSSHTunnelMethodPasswordAuthentication = &shared.SourceOracleSSHTunnelMethodPasswordAuthentication{
				TunnelHost:         tunnelHost9,
				TunnelMethod:       tunnelMethod19,
				TunnelPort:         tunnelPort9,
				TunnelUser:         tunnelUser9,
				TunnelUserPassword: tunnelUserPassword4,
			}
		}
		if sourceOracleSSHTunnelMethodPasswordAuthentication != nil {
			tunnelMethod16 = &shared.SourceOracleSSHTunnelMethod{
				SourceOracleSSHTunnelMethodPasswordAuthentication: sourceOracleSSHTunnelMethodPasswordAuthentication,
			}
		}
		username9 := r.Configuration.SourceOracle.Username.ValueString()
		sourceOracle = &shared.SourceOracle{
			ConnectionData: connectionData,
			Encryption:     encryption,
			Host:           host9,
			JdbcURLParams:  jdbcURLParams3,
			Password:       password13,
			Port:           port9,
			Schemas:        schemas2,
			SourceType:     sourceType101,
			TunnelMethod:   tunnelMethod16,
			Username:       username9,
		}
	}
	if sourceOracle != nil {
		configuration = shared.SourceConfiguration{
			SourceOracle: sourceOracle,
		}
	}
	var sourceOrb *shared.SourceOrb
	if r.Configuration.SourceOrb != nil {
		apiKey30 := r.Configuration.SourceOrb.APIKey.ValueString()
		lookbackWindowDays := new(int64)
		if !r.Configuration.SourceOrb.LookbackWindowDays.IsUnknown() && !r.Configuration.SourceOrb.LookbackWindowDays.IsNull() {
			*lookbackWindowDays = r.Configuration.SourceOrb.LookbackWindowDays.ValueInt64()
		} else {
			lookbackWindowDays = nil
		}
		numericEventPropertiesKeys := make([]string, 0)
		for _, numericEventPropertiesKeysItem := range r.Configuration.SourceOrb.NumericEventPropertiesKeys {
			numericEventPropertiesKeys = append(numericEventPropertiesKeys, numericEventPropertiesKeysItem.ValueString())
		}
		planID := new(string)
		if !r.Configuration.SourceOrb.PlanID.IsUnknown() && !r.Configuration.SourceOrb.PlanID.IsNull() {
			*planID = r.Configuration.SourceOrb.PlanID.ValueString()
		} else {
			planID = nil
		}
		sourceType102 := shared.SourceOrbOrbEnum(r.Configuration.SourceOrb.SourceType.ValueString())
		startDate42 := r.Configuration.SourceOrb.StartDate.ValueString()
		stringEventPropertiesKeys := make([]string, 0)
		for _, stringEventPropertiesKeysItem := range r.Configuration.SourceOrb.StringEventPropertiesKeys {
			stringEventPropertiesKeys = append(stringEventPropertiesKeys, stringEventPropertiesKeysItem.ValueString())
		}
		subscriptionUsageGroupingKey := new(string)
		if !r.Configuration.SourceOrb.SubscriptionUsageGroupingKey.IsUnknown() && !r.Configuration.SourceOrb.SubscriptionUsageGroupingKey.IsNull() {
			*subscriptionUsageGroupingKey = r.Configuration.SourceOrb.SubscriptionUsageGroupingKey.ValueString()
		} else {
			subscriptionUsageGroupingKey = nil
		}
		sourceOrb = &shared.SourceOrb{
			APIKey:                       apiKey30,
			LookbackWindowDays:           lookbackWindowDays,
			NumericEventPropertiesKeys:   numericEventPropertiesKeys,
			PlanID:                       planID,
			SourceType:                   sourceType102,
			StartDate:                    startDate42,
			StringEventPropertiesKeys:    stringEventPropertiesKeys,
			SubscriptionUsageGroupingKey: subscriptionUsageGroupingKey,
		}
	}
	if sourceOrb != nil {
		configuration = shared.SourceConfiguration{
			SourceOrb: sourceOrb,
		}
	}
	var sourceOrbit *shared.SourceOrbit
	if r.Configuration.SourceOrbit != nil {
		apiToken9 := r.Configuration.SourceOrbit.APIToken.ValueString()
		sourceType103 := shared.SourceOrbitOrbitEnum(r.Configuration.SourceOrbit.SourceType.ValueString())
		startDate43 := new(string)
		if !r.Configuration.SourceOrbit.StartDate.IsUnknown() && !r.Configuration.SourceOrbit.StartDate.IsNull() {
			*startDate43 = r.Configuration.SourceOrbit.StartDate.ValueString()
		} else {
			startDate43 = nil
		}
		workspace := r.Configuration.SourceOrbit.Workspace.ValueString()
		sourceOrbit = &shared.SourceOrbit{
			APIToken:   apiToken9,
			SourceType: sourceType103,
			StartDate:  startDate43,
			Workspace:  workspace,
		}
	}
	if sourceOrbit != nil {
		configuration = shared.SourceConfiguration{
			SourceOrbit: sourceOrbit,
		}
	}
	var sourceOutreach *shared.SourceOutreach
	if r.Configuration.SourceOutreach != nil {
		clientId22 := r.Configuration.SourceOutreach.ClientID.ValueString()
		clientSecret22 := r.Configuration.SourceOutreach.ClientSecret.ValueString()
		redirectURI := r.Configuration.SourceOutreach.RedirectURI.ValueString()
		refreshToken17 := r.Configuration.SourceOutreach.RefreshToken.ValueString()
		sourceType104 := shared.SourceOutreachOutreachEnum(r.Configuration.SourceOutreach.SourceType.ValueString())
		startDate44 := r.Configuration.SourceOutreach.StartDate.ValueString()
		sourceOutreach = &shared.SourceOutreach{
			ClientID:     clientId22,
			ClientSecret: clientSecret22,
			RedirectURI:  redirectURI,
			RefreshToken: refreshToken17,
			SourceType:   sourceType104,
			StartDate:    startDate44,
		}
	}
	if sourceOutreach != nil {
		configuration = shared.SourceConfiguration{
			SourceOutreach: sourceOutreach,
		}
	}
	var sourcePaypalTransaction *shared.SourcePaypalTransaction
	if r.Configuration.SourcePaypalTransaction != nil {
		clientId23 := new(string)
		if !r.Configuration.SourcePaypalTransaction.ClientID.IsUnknown() && !r.Configuration.SourcePaypalTransaction.ClientID.IsNull() {
			*clientId23 = r.Configuration.SourcePaypalTransaction.ClientID.ValueString()
		} else {
			clientId23 = nil
		}
		clientSecret23 := new(string)
		if !r.Configuration.SourcePaypalTransaction.ClientSecret.IsUnknown() && !r.Configuration.SourcePaypalTransaction.ClientSecret.IsNull() {
			*clientSecret23 = r.Configuration.SourcePaypalTransaction.ClientSecret.ValueString()
		} else {
			clientSecret23 = nil
		}
		isSandbox := r.Configuration.SourcePaypalTransaction.IsSandbox.ValueBool()
		refreshToken18 := new(string)
		if !r.Configuration.SourcePaypalTransaction.RefreshToken.IsUnknown() && !r.Configuration.SourcePaypalTransaction.RefreshToken.IsNull() {
			*refreshToken18 = r.Configuration.SourcePaypalTransaction.RefreshToken.ValueString()
		} else {
			refreshToken18 = nil
		}
		sourceType105 := shared.SourcePaypalTransactionPaypalTransactionEnum(r.Configuration.SourcePaypalTransaction.SourceType.ValueString())
		startDate45 := r.Configuration.SourcePaypalTransaction.StartDate.ValueString()
		sourcePaypalTransaction = &shared.SourcePaypalTransaction{
			ClientID:     clientId23,
			ClientSecret: clientSecret23,
			IsSandbox:    isSandbox,
			RefreshToken: refreshToken18,
			SourceType:   sourceType105,
			StartDate:    startDate45,
		}
	}
	if sourcePaypalTransaction != nil {
		configuration = shared.SourceConfiguration{
			SourcePaypalTransaction: sourcePaypalTransaction,
		}
	}
	var sourcePaystack *shared.SourcePaystack
	if r.Configuration.SourcePaystack != nil {
		lookbackWindowDays1 := new(int64)
		if !r.Configuration.SourcePaystack.LookbackWindowDays.IsUnknown() && !r.Configuration.SourcePaystack.LookbackWindowDays.IsNull() {
			*lookbackWindowDays1 = r.Configuration.SourcePaystack.LookbackWindowDays.ValueInt64()
		} else {
			lookbackWindowDays1 = nil
		}
		secretKey2 := r.Configuration.SourcePaystack.SecretKey.ValueString()
		sourceType106 := shared.SourcePaystackPaystackEnum(r.Configuration.SourcePaystack.SourceType.ValueString())
		startDate46, _ := time.Parse(time.RFC3339Nano, r.Configuration.SourcePaystack.StartDate.ValueString())
		sourcePaystack = &shared.SourcePaystack{
			LookbackWindowDays: lookbackWindowDays1,
			SecretKey:          secretKey2,
			SourceType:         sourceType106,
			StartDate:          startDate46,
		}
	}
	if sourcePaystack != nil {
		configuration = shared.SourceConfiguration{
			SourcePaystack: sourcePaystack,
		}
	}
	var sourcePendo *shared.SourcePendo
	if r.Configuration.SourcePendo != nil {
		apiKey31 := r.Configuration.SourcePendo.APIKey.ValueString()
		sourceType107 := shared.SourcePendoPendoEnum(r.Configuration.SourcePendo.SourceType.ValueString())
		sourcePendo = &shared.SourcePendo{
			APIKey:     apiKey31,
			SourceType: sourceType107,
		}
	}
	if sourcePendo != nil {
		configuration = shared.SourceConfiguration{
			SourcePendo: sourcePendo,
		}
	}
	var sourcePersistiq *shared.SourcePersistiq
	if r.Configuration.SourcePersistiq != nil {
		apiKey32 := r.Configuration.SourcePersistiq.APIKey.ValueString()
		sourceType108 := shared.SourcePersistiqPersistiqEnum(r.Configuration.SourcePersistiq.SourceType.ValueString())
		sourcePersistiq = &shared.SourcePersistiq{
			APIKey:     apiKey32,
			SourceType: sourceType108,
		}
	}
	if sourcePersistiq != nil {
		configuration = shared.SourceConfiguration{
			SourcePersistiq: sourcePersistiq,
		}
	}
	var sourcePexelsAPI *shared.SourcePexelsAPI
	if r.Configuration.SourcePexelsAPI != nil {
		apiKey33 := r.Configuration.SourcePexelsAPI.APIKey.ValueString()
		color := new(string)
		if !r.Configuration.SourcePexelsAPI.Color.IsUnknown() && !r.Configuration.SourcePexelsAPI.Color.IsNull() {
			*color = r.Configuration.SourcePexelsAPI.Color.ValueString()
		} else {
			color = nil
		}
		locale := new(string)
		if !r.Configuration.SourcePexelsAPI.Locale.IsUnknown() && !r.Configuration.SourcePexelsAPI.Locale.IsNull() {
			*locale = r.Configuration.SourcePexelsAPI.Locale.ValueString()
		} else {
			locale = nil
		}
		orientation := new(string)
		if !r.Configuration.SourcePexelsAPI.Orientation.IsUnknown() && !r.Configuration.SourcePexelsAPI.Orientation.IsNull() {
			*orientation = r.Configuration.SourcePexelsAPI.Orientation.ValueString()
		} else {
			orientation = nil
		}
		query2 := r.Configuration.SourcePexelsAPI.Query.ValueString()
		size1 := new(string)
		if !r.Configuration.SourcePexelsAPI.Size.IsUnknown() && !r.Configuration.SourcePexelsAPI.Size.IsNull() {
			*size1 = r.Configuration.SourcePexelsAPI.Size.ValueString()
		} else {
			size1 = nil
		}
		sourceType109 := shared.SourcePexelsAPIPexelsAPIEnum(r.Configuration.SourcePexelsAPI.SourceType.ValueString())
		sourcePexelsAPI = &shared.SourcePexelsAPI{
			APIKey:      apiKey33,
			Color:       color,
			Locale:      locale,
			Orientation: orientation,
			Query:       query2,
			Size:        size1,
			SourceType:  sourceType109,
		}
	}
	if sourcePexelsAPI != nil {
		configuration = shared.SourceConfiguration{
			SourcePexelsAPI: sourcePexelsAPI,
		}
	}
	var sourcePinterest *shared.SourcePinterest
	if r.Configuration.SourcePinterest != nil {
		var credentials19 *shared.SourcePinterestAuthorizationMethod
		var sourcePinterestAuthorizationMethodOAuth20 *shared.SourcePinterestAuthorizationMethodOAuth20
		if r.Configuration.SourcePinterest.Credentials.SourcePinterestAuthorizationMethodOAuth20 != nil {
			authMethod7 := shared.SourcePinterestAuthorizationMethodOAuth20AuthMethodEnum(r.Configuration.SourcePinterest.Credentials.SourcePinterestAuthorizationMethodOAuth20.AuthMethod.ValueString())
			clientId24 := new(string)
			if !r.Configuration.SourcePinterest.Credentials.SourcePinterestAuthorizationMethodOAuth20.ClientID.IsUnknown() && !r.Configuration.SourcePinterest.Credentials.SourcePinterestAuthorizationMethodOAuth20.ClientID.IsNull() {
				*clientId24 = r.Configuration.SourcePinterest.Credentials.SourcePinterestAuthorizationMethodOAuth20.ClientID.ValueString()
			} else {
				clientId24 = nil
			}
			clientSecret24 := new(string)
			if !r.Configuration.SourcePinterest.Credentials.SourcePinterestAuthorizationMethodOAuth20.ClientSecret.IsUnknown() && !r.Configuration.SourcePinterest.Credentials.SourcePinterestAuthorizationMethodOAuth20.ClientSecret.IsNull() {
				*clientSecret24 = r.Configuration.SourcePinterest.Credentials.SourcePinterestAuthorizationMethodOAuth20.ClientSecret.ValueString()
			} else {
				clientSecret24 = nil
			}
			refreshToken19 := r.Configuration.SourcePinterest.Credentials.SourcePinterestAuthorizationMethodOAuth20.RefreshToken.ValueString()
			sourcePinterestAuthorizationMethodOAuth20 = &shared.SourcePinterestAuthorizationMethodOAuth20{
				AuthMethod:   authMethod7,
				ClientID:     clientId24,
				ClientSecret: clientSecret24,
				RefreshToken: refreshToken19,
			}
		}
		if sourcePinterestAuthorizationMethodOAuth20 != nil {
			credentials19 = &shared.SourcePinterestAuthorizationMethod{
				SourcePinterestAuthorizationMethodOAuth20: sourcePinterestAuthorizationMethodOAuth20,
			}
		}
		var sourcePinterestAuthorizationMethodAccessToken *shared.SourcePinterestAuthorizationMethodAccessToken
		if r.Configuration.SourcePinterest.Credentials.SourcePinterestAuthorizationMethodAccessToken != nil {
			accessToken21 := r.Configuration.SourcePinterest.Credentials.SourcePinterestAuthorizationMethodAccessToken.AccessToken.ValueString()
			authMethod8 := shared.SourcePinterestAuthorizationMethodAccessTokenAuthMethodEnum(r.Configuration.SourcePinterest.Credentials.SourcePinterestAuthorizationMethodAccessToken.AuthMethod.ValueString())
			sourcePinterestAuthorizationMethodAccessToken = &shared.SourcePinterestAuthorizationMethodAccessToken{
				AccessToken: accessToken21,
				AuthMethod:  authMethod8,
			}
		}
		if sourcePinterestAuthorizationMethodAccessToken != nil {
			credentials19 = &shared.SourcePinterestAuthorizationMethod{
				SourcePinterestAuthorizationMethodAccessToken: sourcePinterestAuthorizationMethodAccessToken,
			}
		}
		sourceType110 := shared.SourcePinterestPinterestEnum(r.Configuration.SourcePinterest.SourceType.ValueString())
		startDate47 := r.Configuration.SourcePinterest.StartDate.ValueString()
		status := make([]shared.SourcePinterestStatusEnum, 0)
		for _, statusItem := range r.Configuration.SourcePinterest.Status {
			status = append(status, shared.SourcePinterestStatusEnum(statusItem.ValueString()))
		}
		sourcePinterest = &shared.SourcePinterest{
			Credentials: credentials19,
			SourceType:  sourceType110,
			StartDate:   startDate47,
			Status:      status,
		}
	}
	if sourcePinterest != nil {
		configuration = shared.SourceConfiguration{
			SourcePinterest: sourcePinterest,
		}
	}
	var sourcePipedrive *shared.SourcePipedrive
	if r.Configuration.SourcePipedrive != nil {
		var authorization1 *shared.SourcePipedriveAPIKeyAuthentication
		if r.Configuration.SourcePipedrive.Authorization != nil {
			apiToken10 := r.Configuration.SourcePipedrive.Authorization.APIToken.ValueString()
			authType26 := shared.SourcePipedriveAPIKeyAuthenticationAuthTypeEnum(r.Configuration.SourcePipedrive.Authorization.AuthType.ValueString())
			authorization1 = &shared.SourcePipedriveAPIKeyAuthentication{
				APIToken: apiToken10,
				AuthType: authType26,
			}
		}
		replicationStartDate2, _ := time.Parse(time.RFC3339Nano, r.Configuration.SourcePipedrive.ReplicationStartDate.ValueString())
		sourceType111 := shared.SourcePipedrivePipedriveEnum(r.Configuration.SourcePipedrive.SourceType.ValueString())
		sourcePipedrive = &shared.SourcePipedrive{
			Authorization:        authorization1,
			ReplicationStartDate: replicationStartDate2,
			SourceType:           sourceType111,
		}
	}
	if sourcePipedrive != nil {
		configuration = shared.SourceConfiguration{
			SourcePipedrive: sourcePipedrive,
		}
	}
	var sourcePocket *shared.SourcePocket
	if r.Configuration.SourcePocket != nil {
		accessToken22 := r.Configuration.SourcePocket.AccessToken.ValueString()
		consumerKey1 := r.Configuration.SourcePocket.ConsumerKey.ValueString()
		contentType := new(shared.SourcePocketContentTypeEnum)
		if !r.Configuration.SourcePocket.ContentType.IsUnknown() && !r.Configuration.SourcePocket.ContentType.IsNull() {
			*contentType = shared.SourcePocketContentTypeEnum(r.Configuration.SourcePocket.ContentType.ValueString())
		} else {
			contentType = nil
		}
		detailType := new(shared.SourcePocketDetailTypeEnum)
		if !r.Configuration.SourcePocket.DetailType.IsUnknown() && !r.Configuration.SourcePocket.DetailType.IsNull() {
			*detailType = shared.SourcePocketDetailTypeEnum(r.Configuration.SourcePocket.DetailType.ValueString())
		} else {
			detailType = nil
		}
		domain6 := new(string)
		if !r.Configuration.SourcePocket.Domain.IsUnknown() && !r.Configuration.SourcePocket.Domain.IsNull() {
			*domain6 = r.Configuration.SourcePocket.Domain.ValueString()
		} else {
			domain6 = nil
		}
		favorite := new(bool)
		if !r.Configuration.SourcePocket.Favorite.IsUnknown() && !r.Configuration.SourcePocket.Favorite.IsNull() {
			*favorite = r.Configuration.SourcePocket.Favorite.ValueBool()
		} else {
			favorite = nil
		}
		search := new(string)
		if !r.Configuration.SourcePocket.Search.IsUnknown() && !r.Configuration.SourcePocket.Search.IsNull() {
			*search = r.Configuration.SourcePocket.Search.ValueString()
		} else {
			search = nil
		}
		since1 := new(string)
		if !r.Configuration.SourcePocket.Since.IsUnknown() && !r.Configuration.SourcePocket.Since.IsNull() {
			*since1 = r.Configuration.SourcePocket.Since.ValueString()
		} else {
			since1 = nil
		}
		sort1 := new(shared.SourcePocketSortByEnum)
		if !r.Configuration.SourcePocket.Sort.IsUnknown() && !r.Configuration.SourcePocket.Sort.IsNull() {
			*sort1 = shared.SourcePocketSortByEnum(r.Configuration.SourcePocket.Sort.ValueString())
		} else {
			sort1 = nil
		}
		sourceType112 := shared.SourcePocketPocketEnum(r.Configuration.SourcePocket.SourceType.ValueString())
		state := new(shared.SourcePocketStateEnum)
		if !r.Configuration.SourcePocket.State.IsUnknown() && !r.Configuration.SourcePocket.State.IsNull() {
			*state = shared.SourcePocketStateEnum(r.Configuration.SourcePocket.State.ValueString())
		} else {
			state = nil
		}
		tag := new(string)
		if !r.Configuration.SourcePocket.Tag.IsUnknown() && !r.Configuration.SourcePocket.Tag.IsNull() {
			*tag = r.Configuration.SourcePocket.Tag.ValueString()
		} else {
			tag = nil
		}
		sourcePocket = &shared.SourcePocket{
			AccessToken: accessToken22,
			ConsumerKey: consumerKey1,
			ContentType: contentType,
			DetailType:  detailType,
			Domain:      domain6,
			Favorite:    favorite,
			Search:      search,
			Since:       since1,
			Sort:        sort1,
			SourceType:  sourceType112,
			State:       state,
			Tag:         tag,
		}
	}
	if sourcePocket != nil {
		configuration = shared.SourceConfiguration{
			SourcePocket: sourcePocket,
		}
	}
	var sourcePolygonStockAPI *shared.SourcePolygonStockAPI
	if r.Configuration.SourcePolygonStockAPI != nil {
		adjusted := new(string)
		if !r.Configuration.SourcePolygonStockAPI.Adjusted.IsUnknown() && !r.Configuration.SourcePolygonStockAPI.Adjusted.IsNull() {
			*adjusted = r.Configuration.SourcePolygonStockAPI.Adjusted.ValueString()
		} else {
			adjusted = nil
		}
		apiKey34 := r.Configuration.SourcePolygonStockAPI.APIKey.ValueString()
		endDate9, _ := customTypes.NewDate(r.Configuration.SourcePolygonStockAPI.EndDate.ValueString())
		limit1 := new(int64)
		if !r.Configuration.SourcePolygonStockAPI.Limit.IsUnknown() && !r.Configuration.SourcePolygonStockAPI.Limit.IsNull() {
			*limit1 = r.Configuration.SourcePolygonStockAPI.Limit.ValueInt64()
		} else {
			limit1 = nil
		}
		multiplier := r.Configuration.SourcePolygonStockAPI.Multiplier.ValueInt64()
		sort2 := new(string)
		if !r.Configuration.SourcePolygonStockAPI.Sort.IsUnknown() && !r.Configuration.SourcePolygonStockAPI.Sort.IsNull() {
			*sort2 = r.Configuration.SourcePolygonStockAPI.Sort.ValueString()
		} else {
			sort2 = nil
		}
		sourceType113 := shared.SourcePolygonStockAPIPolygonStockAPIEnum(r.Configuration.SourcePolygonStockAPI.SourceType.ValueString())
		startDate48, _ := customTypes.NewDate(r.Configuration.SourcePolygonStockAPI.StartDate.ValueString())
		stocksTicker := r.Configuration.SourcePolygonStockAPI.StocksTicker.ValueString()
		timespan := r.Configuration.SourcePolygonStockAPI.Timespan.ValueString()
		sourcePolygonStockAPI = &shared.SourcePolygonStockAPI{
			Adjusted:     adjusted,
			APIKey:       apiKey34,
			EndDate:      endDate9,
			Limit:        limit1,
			Multiplier:   multiplier,
			Sort:         sort2,
			SourceType:   sourceType113,
			StartDate:    startDate48,
			StocksTicker: stocksTicker,
			Timespan:     timespan,
		}
	}
	if sourcePolygonStockAPI != nil {
		configuration = shared.SourceConfiguration{
			SourcePolygonStockAPI: sourcePolygonStockAPI,
		}
	}
	var sourcePostgres *shared.SourcePostgres
	if r.Configuration.SourcePostgres != nil {
		database6 := r.Configuration.SourcePostgres.Database.ValueString()
		host10 := r.Configuration.SourcePostgres.Host.ValueString()
		jdbcURLParams4 := new(string)
		if !r.Configuration.SourcePostgres.JdbcURLParams.IsUnknown() && !r.Configuration.SourcePostgres.JdbcURLParams.IsNull() {
			*jdbcURLParams4 = r.Configuration.SourcePostgres.JdbcURLParams.ValueString()
		} else {
			jdbcURLParams4 = nil
		}
		password14 := new(string)
		if !r.Configuration.SourcePostgres.Password.IsUnknown() && !r.Configuration.SourcePostgres.Password.IsNull() {
			*password14 = r.Configuration.SourcePostgres.Password.ValueString()
		} else {
			password14 = nil
		}
		port10 := r.Configuration.SourcePostgres.Port.ValueInt64()
		var replicationMethod3 *shared.SourcePostgresReplicationMethod
		var sourcePostgresReplicationMethodStandard *shared.SourcePostgresReplicationMethodStandard
		if r.Configuration.SourcePostgres.ReplicationMethod.SourcePostgresReplicationMethodStandard != nil {
			method6 := shared.SourcePostgresReplicationMethodStandardMethodEnum(r.Configuration.SourcePostgres.ReplicationMethod.SourcePostgresReplicationMethodStandard.Method.ValueString())
			sourcePostgresReplicationMethodStandard = &shared.SourcePostgresReplicationMethodStandard{
				Method: method6,
			}
		}
		if sourcePostgresReplicationMethodStandard != nil {
			replicationMethod3 = &shared.SourcePostgresReplicationMethod{
				SourcePostgresReplicationMethodStandard: sourcePostgresReplicationMethodStandard,
			}
		}
		var sourcePostgresReplicationMethodLogicalReplicationCDC *shared.SourcePostgresReplicationMethodLogicalReplicationCDC
		if r.Configuration.SourcePostgres.ReplicationMethod.SourcePostgresReplicationMethodLogicalReplicationCDC != nil {
			initialWaitingSeconds3 := new(int64)
			if !r.Configuration.SourcePostgres.ReplicationMethod.SourcePostgresReplicationMethodLogicalReplicationCDC.InitialWaitingSeconds.IsUnknown() && !r.Configuration.SourcePostgres.ReplicationMethod.SourcePostgresReplicationMethodLogicalReplicationCDC.InitialWaitingSeconds.IsNull() {
				*initialWaitingSeconds3 = r.Configuration.SourcePostgres.ReplicationMethod.SourcePostgresReplicationMethodLogicalReplicationCDC.InitialWaitingSeconds.ValueInt64()
			} else {
				initialWaitingSeconds3 = nil
			}
			lsnCommitBehaviour1 := new(shared.SourcePostgresReplicationMethodLogicalReplicationCDCLSNCommitBehaviourEnum)
			if !r.Configuration.SourcePostgres.ReplicationMethod.SourcePostgresReplicationMethodLogicalReplicationCDC.LsnCommitBehaviour.IsUnknown() && !r.Configuration.SourcePostgres.ReplicationMethod.SourcePostgresReplicationMethodLogicalReplicationCDC.LsnCommitBehaviour.IsNull() {
				*lsnCommitBehaviour1 = shared.SourcePostgresReplicationMethodLogicalReplicationCDCLSNCommitBehaviourEnum(r.Configuration.SourcePostgres.ReplicationMethod.SourcePostgresReplicationMethodLogicalReplicationCDC.LsnCommitBehaviour.ValueString())
			} else {
				lsnCommitBehaviour1 = nil
			}
			method7 := shared.SourcePostgresReplicationMethodLogicalReplicationCDCMethodEnum(r.Configuration.SourcePostgres.ReplicationMethod.SourcePostgresReplicationMethodLogicalReplicationCDC.Method.ValueString())
			plugin1 := new(shared.SourcePostgresReplicationMethodLogicalReplicationCDCPluginEnum)
			if !r.Configuration.SourcePostgres.ReplicationMethod.SourcePostgresReplicationMethodLogicalReplicationCDC.Plugin.IsUnknown() && !r.Configuration.SourcePostgres.ReplicationMethod.SourcePostgresReplicationMethodLogicalReplicationCDC.Plugin.IsNull() {
				*plugin1 = shared.SourcePostgresReplicationMethodLogicalReplicationCDCPluginEnum(r.Configuration.SourcePostgres.ReplicationMethod.SourcePostgresReplicationMethodLogicalReplicationCDC.Plugin.ValueString())
			} else {
				plugin1 = nil
			}
			publication1 := r.Configuration.SourcePostgres.ReplicationMethod.SourcePostgresReplicationMethodLogicalReplicationCDC.Publication.ValueString()
			replicationSlot1 := r.Configuration.SourcePostgres.ReplicationMethod.SourcePostgresReplicationMethodLogicalReplicationCDC.ReplicationSlot.ValueString()
			sourcePostgresReplicationMethodLogicalReplicationCDC = &shared.SourcePostgresReplicationMethodLogicalReplicationCDC{
				InitialWaitingSeconds: initialWaitingSeconds3,
				LsnCommitBehaviour:    lsnCommitBehaviour1,
				Method:                method7,
				Plugin:                plugin1,
				Publication:           publication1,
				ReplicationSlot:       replicationSlot1,
			}
		}
		if sourcePostgresReplicationMethodLogicalReplicationCDC != nil {
			replicationMethod3 = &shared.SourcePostgresReplicationMethod{
				SourcePostgresReplicationMethodLogicalReplicationCDC: sourcePostgresReplicationMethodLogicalReplicationCDC,
			}
		}
		schemas3 := make([]string, 0)
		for _, schemasItem3 := range r.Configuration.SourcePostgres.Schemas {
			schemas3 = append(schemas3, schemasItem3.ValueString())
		}
		sourceType114 := shared.SourcePostgresPostgresEnum(r.Configuration.SourcePostgres.SourceType.ValueString())
		var sslMode2 *shared.SourcePostgresSSLModes
		var sourcePostgresSSLModesDisable *shared.SourcePostgresSSLModesDisable
		if r.Configuration.SourcePostgres.SslMode.SourcePostgresSSLModesDisable != nil {
			mode9 := shared.SourcePostgresSSLModesDisableModeEnum(r.Configuration.SourcePostgres.SslMode.SourcePostgresSSLModesDisable.Mode.ValueString())
			sourcePostgresSSLModesDisable = &shared.SourcePostgresSSLModesDisable{
				Mode: mode9,
			}
		}
		if sourcePostgresSSLModesDisable != nil {
			sslMode2 = &shared.SourcePostgresSSLModes{
				SourcePostgresSSLModesDisable: sourcePostgresSSLModesDisable,
			}
		}
		var sourcePostgresSSLModesAllow *shared.SourcePostgresSSLModesAllow
		if r.Configuration.SourcePostgres.SslMode.SourcePostgresSSLModesAllow != nil {
			mode10 := shared.SourcePostgresSSLModesAllowModeEnum(r.Configuration.SourcePostgres.SslMode.SourcePostgresSSLModesAllow.Mode.ValueString())
			sourcePostgresSSLModesAllow = &shared.SourcePostgresSSLModesAllow{
				Mode: mode10,
			}
		}
		if sourcePostgresSSLModesAllow != nil {
			sslMode2 = &shared.SourcePostgresSSLModes{
				SourcePostgresSSLModesAllow: sourcePostgresSSLModesAllow,
			}
		}
		var sourcePostgresSSLModesPrefer *shared.SourcePostgresSSLModesPrefer
		if r.Configuration.SourcePostgres.SslMode.SourcePostgresSSLModesPrefer != nil {
			mode11 := shared.SourcePostgresSSLModesPreferModeEnum(r.Configuration.SourcePostgres.SslMode.SourcePostgresSSLModesPrefer.Mode.ValueString())
			sourcePostgresSSLModesPrefer = &shared.SourcePostgresSSLModesPrefer{
				Mode: mode11,
			}
		}
		if sourcePostgresSSLModesPrefer != nil {
			sslMode2 = &shared.SourcePostgresSSLModes{
				SourcePostgresSSLModesPrefer: sourcePostgresSSLModesPrefer,
			}
		}
		var sourcePostgresSSLModesRequire *shared.SourcePostgresSSLModesRequire
		if r.Configuration.SourcePostgres.SslMode.SourcePostgresSSLModesRequire != nil {
			mode12 := shared.SourcePostgresSSLModesRequireModeEnum(r.Configuration.SourcePostgres.SslMode.SourcePostgresSSLModesRequire.Mode.ValueString())
			sourcePostgresSSLModesRequire = &shared.SourcePostgresSSLModesRequire{
				Mode: mode12,
			}
		}
		if sourcePostgresSSLModesRequire != nil {
			sslMode2 = &shared.SourcePostgresSSLModes{
				SourcePostgresSSLModesRequire: sourcePostgresSSLModesRequire,
			}
		}
		var sourcePostgresSSLModesVerifyCa *shared.SourcePostgresSSLModesVerifyCa
		if r.Configuration.SourcePostgres.SslMode.SourcePostgresSSLModesVerifyCa != nil {
			caCertificate4 := r.Configuration.SourcePostgres.SslMode.SourcePostgresSSLModesVerifyCa.CaCertificate.ValueString()
			clientCertificate4 := new(string)
			if !r.Configuration.SourcePostgres.SslMode.SourcePostgresSSLModesVerifyCa.ClientCertificate.IsUnknown() && !r.Configuration.SourcePostgres.SslMode.SourcePostgresSSLModesVerifyCa.ClientCertificate.IsNull() {
				*clientCertificate4 = r.Configuration.SourcePostgres.SslMode.SourcePostgresSSLModesVerifyCa.ClientCertificate.ValueString()
			} else {
				clientCertificate4 = nil
			}
			clientKey4 := new(string)
			if !r.Configuration.SourcePostgres.SslMode.SourcePostgresSSLModesVerifyCa.ClientKey.IsUnknown() && !r.Configuration.SourcePostgres.SslMode.SourcePostgresSSLModesVerifyCa.ClientKey.IsNull() {
				*clientKey4 = r.Configuration.SourcePostgres.SslMode.SourcePostgresSSLModesVerifyCa.ClientKey.ValueString()
			} else {
				clientKey4 = nil
			}
			clientKeyPassword4 := new(string)
			if !r.Configuration.SourcePostgres.SslMode.SourcePostgresSSLModesVerifyCa.ClientKeyPassword.IsUnknown() && !r.Configuration.SourcePostgres.SslMode.SourcePostgresSSLModesVerifyCa.ClientKeyPassword.IsNull() {
				*clientKeyPassword4 = r.Configuration.SourcePostgres.SslMode.SourcePostgresSSLModesVerifyCa.ClientKeyPassword.ValueString()
			} else {
				clientKeyPassword4 = nil
			}
			mode13 := shared.SourcePostgresSSLModesVerifyCaModeEnum(r.Configuration.SourcePostgres.SslMode.SourcePostgresSSLModesVerifyCa.Mode.ValueString())
			sourcePostgresSSLModesVerifyCa = &shared.SourcePostgresSSLModesVerifyCa{
				CaCertificate:     caCertificate4,
				ClientCertificate: clientCertificate4,
				ClientKey:         clientKey4,
				ClientKeyPassword: clientKeyPassword4,
				Mode:              mode13,
			}
		}
		if sourcePostgresSSLModesVerifyCa != nil {
			sslMode2 = &shared.SourcePostgresSSLModes{
				SourcePostgresSSLModesVerifyCa: sourcePostgresSSLModesVerifyCa,
			}
		}
		var sourcePostgresSSLModesVerifyFull *shared.SourcePostgresSSLModesVerifyFull
		if r.Configuration.SourcePostgres.SslMode.SourcePostgresSSLModesVerifyFull != nil {
			caCertificate5 := r.Configuration.SourcePostgres.SslMode.SourcePostgresSSLModesVerifyFull.CaCertificate.ValueString()
			clientCertificate5 := new(string)
			if !r.Configuration.SourcePostgres.SslMode.SourcePostgresSSLModesVerifyFull.ClientCertificate.IsUnknown() && !r.Configuration.SourcePostgres.SslMode.SourcePostgresSSLModesVerifyFull.ClientCertificate.IsNull() {
				*clientCertificate5 = r.Configuration.SourcePostgres.SslMode.SourcePostgresSSLModesVerifyFull.ClientCertificate.ValueString()
			} else {
				clientCertificate5 = nil
			}
			clientKey5 := new(string)
			if !r.Configuration.SourcePostgres.SslMode.SourcePostgresSSLModesVerifyFull.ClientKey.IsUnknown() && !r.Configuration.SourcePostgres.SslMode.SourcePostgresSSLModesVerifyFull.ClientKey.IsNull() {
				*clientKey5 = r.Configuration.SourcePostgres.SslMode.SourcePostgresSSLModesVerifyFull.ClientKey.ValueString()
			} else {
				clientKey5 = nil
			}
			clientKeyPassword5 := new(string)
			if !r.Configuration.SourcePostgres.SslMode.SourcePostgresSSLModesVerifyFull.ClientKeyPassword.IsUnknown() && !r.Configuration.SourcePostgres.SslMode.SourcePostgresSSLModesVerifyFull.ClientKeyPassword.IsNull() {
				*clientKeyPassword5 = r.Configuration.SourcePostgres.SslMode.SourcePostgresSSLModesVerifyFull.ClientKeyPassword.ValueString()
			} else {
				clientKeyPassword5 = nil
			}
			mode14 := shared.SourcePostgresSSLModesVerifyFullModeEnum(r.Configuration.SourcePostgres.SslMode.SourcePostgresSSLModesVerifyFull.Mode.ValueString())
			sourcePostgresSSLModesVerifyFull = &shared.SourcePostgresSSLModesVerifyFull{
				CaCertificate:     caCertificate5,
				ClientCertificate: clientCertificate5,
				ClientKey:         clientKey5,
				ClientKeyPassword: clientKeyPassword5,
				Mode:              mode14,
			}
		}
		if sourcePostgresSSLModesVerifyFull != nil {
			sslMode2 = &shared.SourcePostgresSSLModes{
				SourcePostgresSSLModesVerifyFull: sourcePostgresSSLModesVerifyFull,
			}
		}
		var tunnelMethod20 *shared.SourcePostgresSSHTunnelMethod
		var sourcePostgresSSHTunnelMethodNoTunnel *shared.SourcePostgresSSHTunnelMethodNoTunnel
		if r.Configuration.SourcePostgres.TunnelMethod.SourcePostgresSSHTunnelMethodNoTunnel != nil {
			tunnelMethod21 := shared.SourcePostgresSSHTunnelMethodNoTunnelTunnelMethodEnum(r.Configuration.SourcePostgres.TunnelMethod.SourcePostgresSSHTunnelMethodNoTunnel.TunnelMethod.ValueString())
			sourcePostgresSSHTunnelMethodNoTunnel = &shared.SourcePostgresSSHTunnelMethodNoTunnel{
				TunnelMethod: tunnelMethod21,
			}
		}
		if sourcePostgresSSHTunnelMethodNoTunnel != nil {
			tunnelMethod20 = &shared.SourcePostgresSSHTunnelMethod{
				SourcePostgresSSHTunnelMethodNoTunnel: sourcePostgresSSHTunnelMethodNoTunnel,
			}
		}
		var sourcePostgresSSHTunnelMethodSSHKeyAuthentication *shared.SourcePostgresSSHTunnelMethodSSHKeyAuthentication
		if r.Configuration.SourcePostgres.TunnelMethod.SourcePostgresSSHTunnelMethodSSHKeyAuthentication != nil {
			sshKey5 := r.Configuration.SourcePostgres.TunnelMethod.SourcePostgresSSHTunnelMethodSSHKeyAuthentication.SSHKey.ValueString()
			tunnelHost10 := r.Configuration.SourcePostgres.TunnelMethod.SourcePostgresSSHTunnelMethodSSHKeyAuthentication.TunnelHost.ValueString()
			tunnelMethod22 := shared.SourcePostgresSSHTunnelMethodSSHKeyAuthenticationTunnelMethodEnum(r.Configuration.SourcePostgres.TunnelMethod.SourcePostgresSSHTunnelMethodSSHKeyAuthentication.TunnelMethod.ValueString())
			tunnelPort10 := r.Configuration.SourcePostgres.TunnelMethod.SourcePostgresSSHTunnelMethodSSHKeyAuthentication.TunnelPort.ValueInt64()
			tunnelUser10 := r.Configuration.SourcePostgres.TunnelMethod.SourcePostgresSSHTunnelMethodSSHKeyAuthentication.TunnelUser.ValueString()
			sourcePostgresSSHTunnelMethodSSHKeyAuthentication = &shared.SourcePostgresSSHTunnelMethodSSHKeyAuthentication{
				SSHKey:       sshKey5,
				TunnelHost:   tunnelHost10,
				TunnelMethod: tunnelMethod22,
				TunnelPort:   tunnelPort10,
				TunnelUser:   tunnelUser10,
			}
		}
		if sourcePostgresSSHTunnelMethodSSHKeyAuthentication != nil {
			tunnelMethod20 = &shared.SourcePostgresSSHTunnelMethod{
				SourcePostgresSSHTunnelMethodSSHKeyAuthentication: sourcePostgresSSHTunnelMethodSSHKeyAuthentication,
			}
		}
		var sourcePostgresSSHTunnelMethodPasswordAuthentication *shared.SourcePostgresSSHTunnelMethodPasswordAuthentication
		if r.Configuration.SourcePostgres.TunnelMethod.SourcePostgresSSHTunnelMethodPasswordAuthentication != nil {
			tunnelHost11 := r.Configuration.SourcePostgres.TunnelMethod.SourcePostgresSSHTunnelMethodPasswordAuthentication.TunnelHost.ValueString()
			tunnelMethod23 := shared.SourcePostgresSSHTunnelMethodPasswordAuthenticationTunnelMethodEnum(r.Configuration.SourcePostgres.TunnelMethod.SourcePostgresSSHTunnelMethodPasswordAuthentication.TunnelMethod.ValueString())
			tunnelPort11 := r.Configuration.SourcePostgres.TunnelMethod.SourcePostgresSSHTunnelMethodPasswordAuthentication.TunnelPort.ValueInt64()
			tunnelUser11 := r.Configuration.SourcePostgres.TunnelMethod.SourcePostgresSSHTunnelMethodPasswordAuthentication.TunnelUser.ValueString()
			tunnelUserPassword5 := r.Configuration.SourcePostgres.TunnelMethod.SourcePostgresSSHTunnelMethodPasswordAuthentication.TunnelUserPassword.ValueString()
			sourcePostgresSSHTunnelMethodPasswordAuthentication = &shared.SourcePostgresSSHTunnelMethodPasswordAuthentication{
				TunnelHost:         tunnelHost11,
				TunnelMethod:       tunnelMethod23,
				TunnelPort:         tunnelPort11,
				TunnelUser:         tunnelUser11,
				TunnelUserPassword: tunnelUserPassword5,
			}
		}
		if sourcePostgresSSHTunnelMethodPasswordAuthentication != nil {
			tunnelMethod20 = &shared.SourcePostgresSSHTunnelMethod{
				SourcePostgresSSHTunnelMethodPasswordAuthentication: sourcePostgresSSHTunnelMethodPasswordAuthentication,
			}
		}
		username10 := r.Configuration.SourcePostgres.Username.ValueString()
		sourcePostgres = &shared.SourcePostgres{
			Database:          database6,
			Host:              host10,
			JdbcURLParams:     jdbcURLParams4,
			Password:          password14,
			Port:              port10,
			ReplicationMethod: replicationMethod3,
			Schemas:           schemas3,
			SourceType:        sourceType114,
			SslMode:           sslMode2,
			TunnelMethod:      tunnelMethod20,
			Username:          username10,
		}
	}
	if sourcePostgres != nil {
		configuration = shared.SourceConfiguration{
			SourcePostgres: sourcePostgres,
		}
	}
	var sourcePosthog *shared.SourcePosthog
	if r.Configuration.SourcePosthog != nil {
		apiKey35 := r.Configuration.SourcePosthog.APIKey.ValueString()
		baseUrl2 := new(string)
		if !r.Configuration.SourcePosthog.BaseURL.IsUnknown() && !r.Configuration.SourcePosthog.BaseURL.IsNull() {
			*baseUrl2 = r.Configuration.SourcePosthog.BaseURL.ValueString()
		} else {
			baseUrl2 = nil
		}
		sourceType115 := shared.SourcePosthogPosthogEnum(r.Configuration.SourcePosthog.SourceType.ValueString())
		startDate49, _ := time.Parse(time.RFC3339Nano, r.Configuration.SourcePosthog.StartDate.ValueString())
		sourcePosthog = &shared.SourcePosthog{
			APIKey:     apiKey35,
			BaseURL:    baseUrl2,
			SourceType: sourceType115,
			StartDate:  startDate49,
		}
	}
	if sourcePosthog != nil {
		configuration = shared.SourceConfiguration{
			SourcePosthog: sourcePosthog,
		}
	}
	var sourcePostmarkapp *shared.SourcePostmarkapp
	if r.Configuration.SourcePostmarkapp != nil {
		xPostmarkAccountToken := r.Configuration.SourcePostmarkapp.XPostmarkAccountToken.ValueString()
		xPostmarkServerToken := r.Configuration.SourcePostmarkapp.XPostmarkServerToken.ValueString()
		sourceType116 := shared.SourcePostmarkappPostmarkappEnum(r.Configuration.SourcePostmarkapp.SourceType.ValueString())
		sourcePostmarkapp = &shared.SourcePostmarkapp{
			XPostmarkAccountToken: xPostmarkAccountToken,
			XPostmarkServerToken:  xPostmarkServerToken,
			SourceType:            sourceType116,
		}
	}
	if sourcePostmarkapp != nil {
		configuration = shared.SourceConfiguration{
			SourcePostmarkapp: sourcePostmarkapp,
		}
	}
	var sourcePrestashop *shared.SourcePrestashop
	if r.Configuration.SourcePrestashop != nil {
		accessKey2 := r.Configuration.SourcePrestashop.AccessKey.ValueString()
		sourceType117 := shared.SourcePrestashopPrestashopEnum(r.Configuration.SourcePrestashop.SourceType.ValueString())
		startDate50, _ := customTypes.NewDate(r.Configuration.SourcePrestashop.StartDate.ValueString())
		url2 := r.Configuration.SourcePrestashop.URL.ValueString()
		sourcePrestashop = &shared.SourcePrestashop{
			AccessKey:  accessKey2,
			SourceType: sourceType117,
			StartDate:  startDate50,
			URL:        url2,
		}
	}
	if sourcePrestashop != nil {
		configuration = shared.SourceConfiguration{
			SourcePrestashop: sourcePrestashop,
		}
	}
	var sourcePublicApis *shared.SourcePublicApis
	if r.Configuration.SourcePublicApis != nil {
		sourceType118 := shared.SourcePublicApisPublicApisEnum(r.Configuration.SourcePublicApis.SourceType.ValueString())
		sourcePublicApis = &shared.SourcePublicApis{
			SourceType: sourceType118,
		}
	}
	if sourcePublicApis != nil {
		configuration = shared.SourceConfiguration{
			SourcePublicApis: sourcePublicApis,
		}
	}
	var sourcePunkAPI *shared.SourcePunkAPI
	if r.Configuration.SourcePunkAPI != nil {
		brewedAfter := r.Configuration.SourcePunkAPI.BrewedAfter.ValueString()
		brewedBefore := r.Configuration.SourcePunkAPI.BrewedBefore.ValueString()
		id := new(string)
		if !r.Configuration.SourcePunkAPI.ID.IsUnknown() && !r.Configuration.SourcePunkAPI.ID.IsNull() {
			*id = r.Configuration.SourcePunkAPI.ID.ValueString()
		} else {
			id = nil
		}
		sourceType119 := shared.SourcePunkAPIPunkAPIEnum(r.Configuration.SourcePunkAPI.SourceType.ValueString())
		sourcePunkAPI = &shared.SourcePunkAPI{
			BrewedAfter:  brewedAfter,
			BrewedBefore: brewedBefore,
			ID:           id,
			SourceType:   sourceType119,
		}
	}
	if sourcePunkAPI != nil {
		configuration = shared.SourceConfiguration{
			SourcePunkAPI: sourcePunkAPI,
		}
	}
	var sourcePypi *shared.SourcePypi
	if r.Configuration.SourcePypi != nil {
		projectName := r.Configuration.SourcePypi.ProjectName.ValueString()
		sourceType120 := shared.SourcePypiPypiEnum(r.Configuration.SourcePypi.SourceType.ValueString())
		version := new(string)
		if !r.Configuration.SourcePypi.Version.IsUnknown() && !r.Configuration.SourcePypi.Version.IsNull() {
			*version = r.Configuration.SourcePypi.Version.ValueString()
		} else {
			version = nil
		}
		sourcePypi = &shared.SourcePypi{
			ProjectName: projectName,
			SourceType:  sourceType120,
			Version:     version,
		}
	}
	if sourcePypi != nil {
		configuration = shared.SourceConfiguration{
			SourcePypi: sourcePypi,
		}
	}
	var sourceQualaroo *shared.SourceQualaroo
	if r.Configuration.SourceQualaroo != nil {
		key := r.Configuration.SourceQualaroo.Key.ValueString()
		sourceType121 := shared.SourceQualarooQualarooEnum(r.Configuration.SourceQualaroo.SourceType.ValueString())
		startDate51 := r.Configuration.SourceQualaroo.StartDate.ValueString()
		surveyIds := make([]string, 0)
		for _, surveyIdsItem := range r.Configuration.SourceQualaroo.SurveyIds {
			surveyIds = append(surveyIds, surveyIdsItem.ValueString())
		}
		token4 := r.Configuration.SourceQualaroo.Token.ValueString()
		sourceQualaroo = &shared.SourceQualaroo{
			Key:        key,
			SourceType: sourceType121,
			StartDate:  startDate51,
			SurveyIds:  surveyIds,
			Token:      token4,
		}
	}
	if sourceQualaroo != nil {
		configuration = shared.SourceConfiguration{
			SourceQualaroo: sourceQualaroo,
		}
	}
	var sourceRailz *shared.SourceRailz
	if r.Configuration.SourceRailz != nil {
		clientId25 := r.Configuration.SourceRailz.ClientID.ValueString()
		secretKey3 := r.Configuration.SourceRailz.SecretKey.ValueString()
		sourceType122 := shared.SourceRailzRailzEnum(r.Configuration.SourceRailz.SourceType.ValueString())
		startDate52 := r.Configuration.SourceRailz.StartDate.ValueString()
		sourceRailz = &shared.SourceRailz{
			ClientID:   clientId25,
			SecretKey:  secretKey3,
			SourceType: sourceType122,
			StartDate:  startDate52,
		}
	}
	if sourceRailz != nil {
		configuration = shared.SourceConfiguration{
			SourceRailz: sourceRailz,
		}
	}
	var sourceRecharge *shared.SourceRecharge
	if r.Configuration.SourceRecharge != nil {
		accessToken23 := r.Configuration.SourceRecharge.AccessToken.ValueString()
		sourceType123 := shared.SourceRechargeRechargeEnum(r.Configuration.SourceRecharge.SourceType.ValueString())
		startDate53, _ := time.Parse(time.RFC3339Nano, r.Configuration.SourceRecharge.StartDate.ValueString())
		sourceRecharge = &shared.SourceRecharge{
			AccessToken: accessToken23,
			SourceType:  sourceType123,
			StartDate:   startDate53,
		}
	}
	if sourceRecharge != nil {
		configuration = shared.SourceConfiguration{
			SourceRecharge: sourceRecharge,
		}
	}
	var sourceRecreation *shared.SourceRecreation
	if r.Configuration.SourceRecreation != nil {
		apikey1 := r.Configuration.SourceRecreation.Apikey.ValueString()
		queryCampsites := new(string)
		if !r.Configuration.SourceRecreation.QueryCampsites.IsUnknown() && !r.Configuration.SourceRecreation.QueryCampsites.IsNull() {
			*queryCampsites = r.Configuration.SourceRecreation.QueryCampsites.ValueString()
		} else {
			queryCampsites = nil
		}
		sourceType124 := shared.SourceRecreationRecreationEnum(r.Configuration.SourceRecreation.SourceType.ValueString())
		sourceRecreation = &shared.SourceRecreation{
			Apikey:         apikey1,
			QueryCampsites: queryCampsites,
			SourceType:     sourceType124,
		}
	}
	if sourceRecreation != nil {
		configuration = shared.SourceConfiguration{
			SourceRecreation: sourceRecreation,
		}
	}
	var sourceRecruitee *shared.SourceRecruitee
	if r.Configuration.SourceRecruitee != nil {
		apiKey36 := r.Configuration.SourceRecruitee.APIKey.ValueString()
		companyID := r.Configuration.SourceRecruitee.CompanyID.ValueInt64()
		sourceType125 := shared.SourceRecruiteeRecruiteeEnum(r.Configuration.SourceRecruitee.SourceType.ValueString())
		sourceRecruitee = &shared.SourceRecruitee{
			APIKey:     apiKey36,
			CompanyID:  companyID,
			SourceType: sourceType125,
		}
	}
	if sourceRecruitee != nil {
		configuration = shared.SourceConfiguration{
			SourceRecruitee: sourceRecruitee,
		}
	}
	var sourceRecurly *shared.SourceRecurly
	if r.Configuration.SourceRecurly != nil {
		apiKey37 := r.Configuration.SourceRecurly.APIKey.ValueString()
		beginTime := new(string)
		if !r.Configuration.SourceRecurly.BeginTime.IsUnknown() && !r.Configuration.SourceRecurly.BeginTime.IsNull() {
			*beginTime = r.Configuration.SourceRecurly.BeginTime.ValueString()
		} else {
			beginTime = nil
		}
		endTime := new(string)
		if !r.Configuration.SourceRecurly.EndTime.IsUnknown() && !r.Configuration.SourceRecurly.EndTime.IsNull() {
			*endTime = r.Configuration.SourceRecurly.EndTime.ValueString()
		} else {
			endTime = nil
		}
		sourceType126 := shared.SourceRecurlyRecurlyEnum(r.Configuration.SourceRecurly.SourceType.ValueString())
		sourceRecurly = &shared.SourceRecurly{
			APIKey:     apiKey37,
			BeginTime:  beginTime,
			EndTime:    endTime,
			SourceType: sourceType126,
		}
	}
	if sourceRecurly != nil {
		configuration = shared.SourceConfiguration{
			SourceRecurly: sourceRecurly,
		}
	}
	var sourceRedshift *shared.SourceRedshift
	if r.Configuration.SourceRedshift != nil {
		database7 := r.Configuration.SourceRedshift.Database.ValueString()
		host11 := r.Configuration.SourceRedshift.Host.ValueString()
		jdbcURLParams5 := new(string)
		if !r.Configuration.SourceRedshift.JdbcURLParams.IsUnknown() && !r.Configuration.SourceRedshift.JdbcURLParams.IsNull() {
			*jdbcURLParams5 = r.Configuration.SourceRedshift.JdbcURLParams.ValueString()
		} else {
			jdbcURLParams5 = nil
		}
		password15 := r.Configuration.SourceRedshift.Password.ValueString()
		port11 := r.Configuration.SourceRedshift.Port.ValueInt64()
		schemas4 := make([]string, 0)
		for _, schemasItem4 := range r.Configuration.SourceRedshift.Schemas {
			schemas4 = append(schemas4, schemasItem4.ValueString())
		}
		sourceType127 := shared.SourceRedshiftRedshiftEnum(r.Configuration.SourceRedshift.SourceType.ValueString())
		username11 := r.Configuration.SourceRedshift.Username.ValueString()
		sourceRedshift = &shared.SourceRedshift{
			Database:      database7,
			Host:          host11,
			JdbcURLParams: jdbcURLParams5,
			Password:      password15,
			Port:          port11,
			Schemas:       schemas4,
			SourceType:    sourceType127,
			Username:      username11,
		}
	}
	if sourceRedshift != nil {
		configuration = shared.SourceConfiguration{
			SourceRedshift: sourceRedshift,
		}
	}
	var sourceRetently *shared.SourceRetently
	if r.Configuration.SourceRetently != nil {
		var credentials20 *shared.SourceRetentlyAuthenticationMechanism
		var sourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth *shared.SourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth
		if r.Configuration.SourceRetently.Credentials.SourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth != nil {
			authType27 := new(shared.SourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuthAuthTypeEnum)
			if !r.Configuration.SourceRetently.Credentials.SourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth.AuthType.IsUnknown() && !r.Configuration.SourceRetently.Credentials.SourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth.AuthType.IsNull() {
				*authType27 = shared.SourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuthAuthTypeEnum(r.Configuration.SourceRetently.Credentials.SourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth.AuthType.ValueString())
			} else {
				authType27 = nil
			}
			clientId26 := r.Configuration.SourceRetently.Credentials.SourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth.ClientID.ValueString()
			clientSecret25 := r.Configuration.SourceRetently.Credentials.SourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth.ClientSecret.ValueString()
			refreshToken20 := r.Configuration.SourceRetently.Credentials.SourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth.RefreshToken.ValueString()
			sourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth = &shared.SourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth{
				AuthType:     authType27,
				ClientID:     clientId26,
				ClientSecret: clientSecret25,
				RefreshToken: refreshToken20,
			}
		}
		if sourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth != nil {
			credentials20 = &shared.SourceRetentlyAuthenticationMechanism{
				SourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth: sourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth,
			}
		}
		var sourceRetentlyAuthenticationMechanismAuthenticateWithAPIToken *shared.SourceRetentlyAuthenticationMechanismAuthenticateWithAPIToken
		if r.Configuration.SourceRetently.Credentials.SourceRetentlyAuthenticationMechanismAuthenticateWithAPIToken != nil {
			apiKey38 := r.Configuration.SourceRetently.Credentials.SourceRetentlyAuthenticationMechanismAuthenticateWithAPIToken.APIKey.ValueString()
			authType28 := new(shared.SourceRetentlyAuthenticationMechanismAuthenticateWithAPITokenAuthTypeEnum)
			if !r.Configuration.SourceRetently.Credentials.SourceRetentlyAuthenticationMechanismAuthenticateWithAPIToken.AuthType.IsUnknown() && !r.Configuration.SourceRetently.Credentials.SourceRetentlyAuthenticationMechanismAuthenticateWithAPIToken.AuthType.IsNull() {
				*authType28 = shared.SourceRetentlyAuthenticationMechanismAuthenticateWithAPITokenAuthTypeEnum(r.Configuration.SourceRetently.Credentials.SourceRetentlyAuthenticationMechanismAuthenticateWithAPIToken.AuthType.ValueString())
			} else {
				authType28 = nil
			}
			sourceRetentlyAuthenticationMechanismAuthenticateWithAPIToken = &shared.SourceRetentlyAuthenticationMechanismAuthenticateWithAPIToken{
				APIKey:   apiKey38,
				AuthType: authType28,
			}
		}
		if sourceRetentlyAuthenticationMechanismAuthenticateWithAPIToken != nil {
			credentials20 = &shared.SourceRetentlyAuthenticationMechanism{
				SourceRetentlyAuthenticationMechanismAuthenticateWithAPIToken: sourceRetentlyAuthenticationMechanismAuthenticateWithAPIToken,
			}
		}
		sourceType128 := shared.SourceRetentlyRetentlyEnum(r.Configuration.SourceRetently.SourceType.ValueString())
		sourceRetently = &shared.SourceRetently{
			Credentials: credentials20,
			SourceType:  sourceType128,
		}
	}
	if sourceRetently != nil {
		configuration = shared.SourceConfiguration{
			SourceRetently: sourceRetently,
		}
	}
	var sourceRkiCovid *shared.SourceRkiCovid
	if r.Configuration.SourceRkiCovid != nil {
		sourceType129 := shared.SourceRkiCovidRkiCovidEnum(r.Configuration.SourceRkiCovid.SourceType.ValueString())
		startDate54 := r.Configuration.SourceRkiCovid.StartDate.ValueString()
		sourceRkiCovid = &shared.SourceRkiCovid{
			SourceType: sourceType129,
			StartDate:  startDate54,
		}
	}
	if sourceRkiCovid != nil {
		configuration = shared.SourceConfiguration{
			SourceRkiCovid: sourceRkiCovid,
		}
	}
	var sourceRss *shared.SourceRss
	if r.Configuration.SourceRss != nil {
		sourceType130 := shared.SourceRssRssEnum(r.Configuration.SourceRss.SourceType.ValueString())
		url3 := r.Configuration.SourceRss.URL.ValueString()
		sourceRss = &shared.SourceRss{
			SourceType: sourceType130,
			URL:        url3,
		}
	}
	if sourceRss != nil {
		configuration = shared.SourceConfiguration{
			SourceRss: sourceRss,
		}
	}
	var sourceS3 *shared.SourceS3
	if r.Configuration.SourceS3 != nil {
		dataset := r.Configuration.SourceS3.Dataset.ValueString()
		var format1 *shared.SourceS3FileFormat
		var sourceS3FileFormatCSV *shared.SourceS3FileFormatCSV
		if r.Configuration.SourceS3.Format.SourceS3FileFormatCSV != nil {
			additionalReaderOptions := new(string)
			if !r.Configuration.SourceS3.Format.SourceS3FileFormatCSV.AdditionalReaderOptions.IsUnknown() && !r.Configuration.SourceS3.Format.SourceS3FileFormatCSV.AdditionalReaderOptions.IsNull() {
				*additionalReaderOptions = r.Configuration.SourceS3.Format.SourceS3FileFormatCSV.AdditionalReaderOptions.ValueString()
			} else {
				additionalReaderOptions = nil
			}
			advancedOptions := new(string)
			if !r.Configuration.SourceS3.Format.SourceS3FileFormatCSV.AdvancedOptions.IsUnknown() && !r.Configuration.SourceS3.Format.SourceS3FileFormatCSV.AdvancedOptions.IsNull() {
				*advancedOptions = r.Configuration.SourceS3.Format.SourceS3FileFormatCSV.AdvancedOptions.ValueString()
			} else {
				advancedOptions = nil
			}
			blockSize := new(int64)
			if !r.Configuration.SourceS3.Format.SourceS3FileFormatCSV.BlockSize.IsUnknown() && !r.Configuration.SourceS3.Format.SourceS3FileFormatCSV.BlockSize.IsNull() {
				*blockSize = r.Configuration.SourceS3.Format.SourceS3FileFormatCSV.BlockSize.ValueInt64()
			} else {
				blockSize = nil
			}
			delimiter := new(string)
			if !r.Configuration.SourceS3.Format.SourceS3FileFormatCSV.Delimiter.IsUnknown() && !r.Configuration.SourceS3.Format.SourceS3FileFormatCSV.Delimiter.IsNull() {
				*delimiter = r.Configuration.SourceS3.Format.SourceS3FileFormatCSV.Delimiter.ValueString()
			} else {
				delimiter = nil
			}
			doubleQuote := new(bool)
			if !r.Configuration.SourceS3.Format.SourceS3FileFormatCSV.DoubleQuote.IsUnknown() && !r.Configuration.SourceS3.Format.SourceS3FileFormatCSV.DoubleQuote.IsNull() {
				*doubleQuote = r.Configuration.SourceS3.Format.SourceS3FileFormatCSV.DoubleQuote.ValueBool()
			} else {
				doubleQuote = nil
			}
			encoding := new(string)
			if !r.Configuration.SourceS3.Format.SourceS3FileFormatCSV.Encoding.IsUnknown() && !r.Configuration.SourceS3.Format.SourceS3FileFormatCSV.Encoding.IsNull() {
				*encoding = r.Configuration.SourceS3.Format.SourceS3FileFormatCSV.Encoding.ValueString()
			} else {
				encoding = nil
			}
			escapeChar := new(string)
			if !r.Configuration.SourceS3.Format.SourceS3FileFormatCSV.EscapeChar.IsUnknown() && !r.Configuration.SourceS3.Format.SourceS3FileFormatCSV.EscapeChar.IsNull() {
				*escapeChar = r.Configuration.SourceS3.Format.SourceS3FileFormatCSV.EscapeChar.ValueString()
			} else {
				escapeChar = nil
			}
			filetype := new(shared.SourceS3FileFormatCSVFiletypeEnum)
			if !r.Configuration.SourceS3.Format.SourceS3FileFormatCSV.Filetype.IsUnknown() && !r.Configuration.SourceS3.Format.SourceS3FileFormatCSV.Filetype.IsNull() {
				*filetype = shared.SourceS3FileFormatCSVFiletypeEnum(r.Configuration.SourceS3.Format.SourceS3FileFormatCSV.Filetype.ValueString())
			} else {
				filetype = nil
			}
			inferDatatypes := new(bool)
			if !r.Configuration.SourceS3.Format.SourceS3FileFormatCSV.InferDatatypes.IsUnknown() && !r.Configuration.SourceS3.Format.SourceS3FileFormatCSV.InferDatatypes.IsNull() {
				*inferDatatypes = r.Configuration.SourceS3.Format.SourceS3FileFormatCSV.InferDatatypes.ValueBool()
			} else {
				inferDatatypes = nil
			}
			newlinesInValues := new(bool)
			if !r.Configuration.SourceS3.Format.SourceS3FileFormatCSV.NewlinesInValues.IsUnknown() && !r.Configuration.SourceS3.Format.SourceS3FileFormatCSV.NewlinesInValues.IsNull() {
				*newlinesInValues = r.Configuration.SourceS3.Format.SourceS3FileFormatCSV.NewlinesInValues.ValueBool()
			} else {
				newlinesInValues = nil
			}
			quoteChar := new(string)
			if !r.Configuration.SourceS3.Format.SourceS3FileFormatCSV.QuoteChar.IsUnknown() && !r.Configuration.SourceS3.Format.SourceS3FileFormatCSV.QuoteChar.IsNull() {
				*quoteChar = r.Configuration.SourceS3.Format.SourceS3FileFormatCSV.QuoteChar.ValueString()
			} else {
				quoteChar = nil
			}
			sourceS3FileFormatCSV = &shared.SourceS3FileFormatCSV{
				AdditionalReaderOptions: additionalReaderOptions,
				AdvancedOptions:         advancedOptions,
				BlockSize:               blockSize,
				Delimiter:               delimiter,
				DoubleQuote:             doubleQuote,
				Encoding:                encoding,
				EscapeChar:              escapeChar,
				Filetype:                filetype,
				InferDatatypes:          inferDatatypes,
				NewlinesInValues:        newlinesInValues,
				QuoteChar:               quoteChar,
			}
		}
		if sourceS3FileFormatCSV != nil {
			format1 = &shared.SourceS3FileFormat{
				SourceS3FileFormatCSV: sourceS3FileFormatCSV,
			}
		}
		var sourceS3FileFormatParquet *shared.SourceS3FileFormatParquet
		if r.Configuration.SourceS3.Format.SourceS3FileFormatParquet != nil {
			batchSize1 := new(int64)
			if !r.Configuration.SourceS3.Format.SourceS3FileFormatParquet.BatchSize.IsUnknown() && !r.Configuration.SourceS3.Format.SourceS3FileFormatParquet.BatchSize.IsNull() {
				*batchSize1 = r.Configuration.SourceS3.Format.SourceS3FileFormatParquet.BatchSize.ValueInt64()
			} else {
				batchSize1 = nil
			}
			bufferSize := new(int64)
			if !r.Configuration.SourceS3.Format.SourceS3FileFormatParquet.BufferSize.IsUnknown() && !r.Configuration.SourceS3.Format.SourceS3FileFormatParquet.BufferSize.IsNull() {
				*bufferSize = r.Configuration.SourceS3.Format.SourceS3FileFormatParquet.BufferSize.ValueInt64()
			} else {
				bufferSize = nil
			}
			columns := make([]string, 0)
			for _, columnsItem := range r.Configuration.SourceS3.Format.SourceS3FileFormatParquet.Columns {
				columns = append(columns, columnsItem.ValueString())
			}
			filetype1 := new(shared.SourceS3FileFormatParquetFiletypeEnum)
			if !r.Configuration.SourceS3.Format.SourceS3FileFormatParquet.Filetype.IsUnknown() && !r.Configuration.SourceS3.Format.SourceS3FileFormatParquet.Filetype.IsNull() {
				*filetype1 = shared.SourceS3FileFormatParquetFiletypeEnum(r.Configuration.SourceS3.Format.SourceS3FileFormatParquet.Filetype.ValueString())
			} else {
				filetype1 = nil
			}
			sourceS3FileFormatParquet = &shared.SourceS3FileFormatParquet{
				BatchSize:  batchSize1,
				BufferSize: bufferSize,
				Columns:    columns,
				Filetype:   filetype1,
			}
		}
		if sourceS3FileFormatParquet != nil {
			format1 = &shared.SourceS3FileFormat{
				SourceS3FileFormatParquet: sourceS3FileFormatParquet,
			}
		}
		var sourceS3FileFormatAvro *shared.SourceS3FileFormatAvro
		if r.Configuration.SourceS3.Format.SourceS3FileFormatAvro != nil {
			filetype2 := new(shared.SourceS3FileFormatAvroFiletypeEnum)
			if !r.Configuration.SourceS3.Format.SourceS3FileFormatAvro.Filetype.IsUnknown() && !r.Configuration.SourceS3.Format.SourceS3FileFormatAvro.Filetype.IsNull() {
				*filetype2 = shared.SourceS3FileFormatAvroFiletypeEnum(r.Configuration.SourceS3.Format.SourceS3FileFormatAvro.Filetype.ValueString())
			} else {
				filetype2 = nil
			}
			sourceS3FileFormatAvro = &shared.SourceS3FileFormatAvro{
				Filetype: filetype2,
			}
		}
		if sourceS3FileFormatAvro != nil {
			format1 = &shared.SourceS3FileFormat{
				SourceS3FileFormatAvro: sourceS3FileFormatAvro,
			}
		}
		var sourceS3FileFormatJsonl *shared.SourceS3FileFormatJsonl
		if r.Configuration.SourceS3.Format.SourceS3FileFormatJsonl != nil {
			blockSize1 := new(int64)
			if !r.Configuration.SourceS3.Format.SourceS3FileFormatJsonl.BlockSize.IsUnknown() && !r.Configuration.SourceS3.Format.SourceS3FileFormatJsonl.BlockSize.IsNull() {
				*blockSize1 = r.Configuration.SourceS3.Format.SourceS3FileFormatJsonl.BlockSize.ValueInt64()
			} else {
				blockSize1 = nil
			}
			filetype3 := new(shared.SourceS3FileFormatJsonlFiletypeEnum)
			if !r.Configuration.SourceS3.Format.SourceS3FileFormatJsonl.Filetype.IsUnknown() && !r.Configuration.SourceS3.Format.SourceS3FileFormatJsonl.Filetype.IsNull() {
				*filetype3 = shared.SourceS3FileFormatJsonlFiletypeEnum(r.Configuration.SourceS3.Format.SourceS3FileFormatJsonl.Filetype.ValueString())
			} else {
				filetype3 = nil
			}
			newlinesInValues1 := new(bool)
			if !r.Configuration.SourceS3.Format.SourceS3FileFormatJsonl.NewlinesInValues.IsUnknown() && !r.Configuration.SourceS3.Format.SourceS3FileFormatJsonl.NewlinesInValues.IsNull() {
				*newlinesInValues1 = r.Configuration.SourceS3.Format.SourceS3FileFormatJsonl.NewlinesInValues.ValueBool()
			} else {
				newlinesInValues1 = nil
			}
			unexpectedFieldBehavior := new(shared.SourceS3FileFormatJsonlUnexpectedFieldBehaviorEnum)
			if !r.Configuration.SourceS3.Format.SourceS3FileFormatJsonl.UnexpectedFieldBehavior.IsUnknown() && !r.Configuration.SourceS3.Format.SourceS3FileFormatJsonl.UnexpectedFieldBehavior.IsNull() {
				*unexpectedFieldBehavior = shared.SourceS3FileFormatJsonlUnexpectedFieldBehaviorEnum(r.Configuration.SourceS3.Format.SourceS3FileFormatJsonl.UnexpectedFieldBehavior.ValueString())
			} else {
				unexpectedFieldBehavior = nil
			}
			sourceS3FileFormatJsonl = &shared.SourceS3FileFormatJsonl{
				BlockSize:               blockSize1,
				Filetype:                filetype3,
				NewlinesInValues:        newlinesInValues1,
				UnexpectedFieldBehavior: unexpectedFieldBehavior,
			}
		}
		if sourceS3FileFormatJsonl != nil {
			format1 = &shared.SourceS3FileFormat{
				SourceS3FileFormatJsonl: sourceS3FileFormatJsonl,
			}
		}
		pathPattern := r.Configuration.SourceS3.PathPattern.ValueString()
		awsAccessKeyId1 := new(string)
		if !r.Configuration.SourceS3.Provider.AwsAccessKeyID.IsUnknown() && !r.Configuration.SourceS3.Provider.AwsAccessKeyID.IsNull() {
			*awsAccessKeyId1 = r.Configuration.SourceS3.Provider.AwsAccessKeyID.ValueString()
		} else {
			awsAccessKeyId1 = nil
		}
		awsSecretAccessKey1 := new(string)
		if !r.Configuration.SourceS3.Provider.AwsSecretAccessKey.IsUnknown() && !r.Configuration.SourceS3.Provider.AwsSecretAccessKey.IsNull() {
			*awsSecretAccessKey1 = r.Configuration.SourceS3.Provider.AwsSecretAccessKey.ValueString()
		} else {
			awsSecretAccessKey1 = nil
		}
		bucket := r.Configuration.SourceS3.Provider.Bucket.ValueString()
		endpoint1 := new(string)
		if !r.Configuration.SourceS3.Provider.Endpoint.IsUnknown() && !r.Configuration.SourceS3.Provider.Endpoint.IsNull() {
			*endpoint1 = r.Configuration.SourceS3.Provider.Endpoint.ValueString()
		} else {
			endpoint1 = nil
		}
		pathPrefix := new(string)
		if !r.Configuration.SourceS3.Provider.PathPrefix.IsUnknown() && !r.Configuration.SourceS3.Provider.PathPrefix.IsNull() {
			*pathPrefix = r.Configuration.SourceS3.Provider.PathPrefix.ValueString()
		} else {
			pathPrefix = nil
		}
		provider1 := shared.SourceS3S3AmazonWebServices{
			AwsAccessKeyID:     awsAccessKeyId1,
			AwsSecretAccessKey: awsSecretAccessKey1,
			Bucket:             bucket,
			Endpoint:           endpoint1,
			PathPrefix:         pathPrefix,
		}
		schema := new(string)
		if !r.Configuration.SourceS3.Schema.IsUnknown() && !r.Configuration.SourceS3.Schema.IsNull() {
			*schema = r.Configuration.SourceS3.Schema.ValueString()
		} else {
			schema = nil
		}
		sourceType131 := shared.SourceS3S3Enum(r.Configuration.SourceS3.SourceType.ValueString())
		sourceS3 = &shared.SourceS3{
			Dataset:     dataset,
			Format:      format1,
			PathPattern: pathPattern,
			Provider:    provider1,
			Schema:      schema,
			SourceType:  sourceType131,
		}
	}
	if sourceS3 != nil {
		configuration = shared.SourceConfiguration{
			SourceS3: sourceS3,
		}
	}
	var sourceSalesforce *shared.SourceSalesforce
	if r.Configuration.SourceSalesforce != nil {
		authType29 := new(shared.SourceSalesforceAuthTypeEnum)
		if !r.Configuration.SourceSalesforce.AuthType.IsUnknown() && !r.Configuration.SourceSalesforce.AuthType.IsNull() {
			*authType29 = shared.SourceSalesforceAuthTypeEnum(r.Configuration.SourceSalesforce.AuthType.ValueString())
		} else {
			authType29 = nil
		}
		clientId27 := r.Configuration.SourceSalesforce.ClientID.ValueString()
		clientSecret26 := r.Configuration.SourceSalesforce.ClientSecret.ValueString()
		isSandbox1 := new(bool)
		if !r.Configuration.SourceSalesforce.IsSandbox.IsUnknown() && !r.Configuration.SourceSalesforce.IsSandbox.IsNull() {
			*isSandbox1 = r.Configuration.SourceSalesforce.IsSandbox.ValueBool()
		} else {
			isSandbox1 = nil
		}
		refreshToken21 := r.Configuration.SourceSalesforce.RefreshToken.ValueString()
		sourceType132 := shared.SourceSalesforceSalesforceEnum(r.Configuration.SourceSalesforce.SourceType.ValueString())
		startDate55 := new(time.Time)
		if !r.Configuration.SourceSalesforce.StartDate.IsUnknown() && !r.Configuration.SourceSalesforce.StartDate.IsNull() {
			*startDate55, _ = time.Parse(time.RFC3339Nano, r.Configuration.SourceSalesforce.StartDate.ValueString())
		} else {
			startDate55 = nil
		}
		streamsCriteria := make([]shared.SourceSalesforceStreamsCriteria, 0)
		for _, streamsCriteriaItem := range r.Configuration.SourceSalesforce.StreamsCriteria {
			criteria := shared.SourceSalesforceStreamsCriteriaSearchCriteriaEnum(streamsCriteriaItem.Criteria.ValueString())
			value := streamsCriteriaItem.Value.ValueString()
			streamsCriteria = append(streamsCriteria, shared.SourceSalesforceStreamsCriteria{
				Criteria: criteria,
				Value:    value,
			})
		}
		sourceSalesforce = &shared.SourceSalesforce{
			AuthType:        authType29,
			ClientID:        clientId27,
			ClientSecret:    clientSecret26,
			IsSandbox:       isSandbox1,
			RefreshToken:    refreshToken21,
			SourceType:      sourceType132,
			StartDate:       startDate55,
			StreamsCriteria: streamsCriteria,
		}
	}
	if sourceSalesforce != nil {
		configuration = shared.SourceConfiguration{
			SourceSalesforce: sourceSalesforce,
		}
	}
	var sourceSalesforceSinger *shared.SourceSalesforceSinger
	if r.Configuration.SourceSalesforceSinger != nil {
		apiType := shared.SourceSalesforceSingerAPITypeEnum(r.Configuration.SourceSalesforceSinger.APIType.ValueString())
		clientId28 := r.Configuration.SourceSalesforceSinger.ClientID.ValueString()
		clientSecret27 := r.Configuration.SourceSalesforceSinger.ClientSecret.ValueString()
		isSandbox2 := new(bool)
		if !r.Configuration.SourceSalesforceSinger.IsSandbox.IsUnknown() && !r.Configuration.SourceSalesforceSinger.IsSandbox.IsNull() {
			*isSandbox2 = r.Configuration.SourceSalesforceSinger.IsSandbox.ValueBool()
		} else {
			isSandbox2 = nil
		}
		quotaPercentPerRun := new(float64)
		if !r.Configuration.SourceSalesforceSinger.QuotaPercentPerRun.IsUnknown() && !r.Configuration.SourceSalesforceSinger.QuotaPercentPerRun.IsNull() {
			*quotaPercentPerRun, _ = r.Configuration.SourceSalesforceSinger.QuotaPercentPerRun.ValueBigFloat().Float64()
		} else {
			quotaPercentPerRun = nil
		}
		quotaPercentTotal := new(float64)
		if !r.Configuration.SourceSalesforceSinger.QuotaPercentTotal.IsUnknown() && !r.Configuration.SourceSalesforceSinger.QuotaPercentTotal.IsNull() {
			*quotaPercentTotal, _ = r.Configuration.SourceSalesforceSinger.QuotaPercentTotal.ValueBigFloat().Float64()
		} else {
			quotaPercentTotal = nil
		}
		refreshToken22 := r.Configuration.SourceSalesforceSinger.RefreshToken.ValueString()
		sourceType133 := shared.SourceSalesforceSingerSalesforceSingerEnum(r.Configuration.SourceSalesforceSinger.SourceType.ValueString())
		startDate56 := r.Configuration.SourceSalesforceSinger.StartDate.ValueString()
		sourceSalesforceSinger = &shared.SourceSalesforceSinger{
			APIType:            apiType,
			ClientID:           clientId28,
			ClientSecret:       clientSecret27,
			IsSandbox:          isSandbox2,
			QuotaPercentPerRun: quotaPercentPerRun,
			QuotaPercentTotal:  quotaPercentTotal,
			RefreshToken:       refreshToken22,
			SourceType:         sourceType133,
			StartDate:          startDate56,
		}
	}
	if sourceSalesforceSinger != nil {
		configuration = shared.SourceConfiguration{
			SourceSalesforceSinger: sourceSalesforceSinger,
		}
	}
	var sourceSalesloft *shared.SourceSalesloft
	if r.Configuration.SourceSalesloft != nil {
		var credentials21 shared.SourceSalesloftCredentials
		var sourceSalesloftCredentialsAuthenticateViaOAuth *shared.SourceSalesloftCredentialsAuthenticateViaOAuth
		if r.Configuration.SourceSalesloft.Credentials.SourceSalesloftCredentialsAuthenticateViaOAuth != nil {
			accessToken24 := r.Configuration.SourceSalesloft.Credentials.SourceSalesloftCredentialsAuthenticateViaOAuth.AccessToken.ValueString()
			authType30 := shared.SourceSalesloftCredentialsAuthenticateViaOAuthAuthTypeEnum(r.Configuration.SourceSalesloft.Credentials.SourceSalesloftCredentialsAuthenticateViaOAuth.AuthType.ValueString())
			clientId29 := r.Configuration.SourceSalesloft.Credentials.SourceSalesloftCredentialsAuthenticateViaOAuth.ClientID.ValueString()
			clientSecret28 := r.Configuration.SourceSalesloft.Credentials.SourceSalesloftCredentialsAuthenticateViaOAuth.ClientSecret.ValueString()
			refreshToken23 := r.Configuration.SourceSalesloft.Credentials.SourceSalesloftCredentialsAuthenticateViaOAuth.RefreshToken.ValueString()
			tokenExpiryDate2, _ := time.Parse(time.RFC3339Nano, r.Configuration.SourceSalesloft.Credentials.SourceSalesloftCredentialsAuthenticateViaOAuth.TokenExpiryDate.ValueString())
			sourceSalesloftCredentialsAuthenticateViaOAuth = &shared.SourceSalesloftCredentialsAuthenticateViaOAuth{
				AccessToken:     accessToken24,
				AuthType:        authType30,
				ClientID:        clientId29,
				ClientSecret:    clientSecret28,
				RefreshToken:    refreshToken23,
				TokenExpiryDate: tokenExpiryDate2,
			}
		}
		if sourceSalesloftCredentialsAuthenticateViaOAuth != nil {
			credentials21 = shared.SourceSalesloftCredentials{
				SourceSalesloftCredentialsAuthenticateViaOAuth: sourceSalesloftCredentialsAuthenticateViaOAuth,
			}
		}
		var sourceSalesloftCredentialsAuthenticateViaAPIKey *shared.SourceSalesloftCredentialsAuthenticateViaAPIKey
		if r.Configuration.SourceSalesloft.Credentials.SourceSalesloftCredentialsAuthenticateViaAPIKey != nil {
			apiKey39 := r.Configuration.SourceSalesloft.Credentials.SourceSalesloftCredentialsAuthenticateViaAPIKey.APIKey.ValueString()
			authType31 := shared.SourceSalesloftCredentialsAuthenticateViaAPIKeyAuthTypeEnum(r.Configuration.SourceSalesloft.Credentials.SourceSalesloftCredentialsAuthenticateViaAPIKey.AuthType.ValueString())
			sourceSalesloftCredentialsAuthenticateViaAPIKey = &shared.SourceSalesloftCredentialsAuthenticateViaAPIKey{
				APIKey:   apiKey39,
				AuthType: authType31,
			}
		}
		if sourceSalesloftCredentialsAuthenticateViaAPIKey != nil {
			credentials21 = shared.SourceSalesloftCredentials{
				SourceSalesloftCredentialsAuthenticateViaAPIKey: sourceSalesloftCredentialsAuthenticateViaAPIKey,
			}
		}
		sourceType134 := shared.SourceSalesloftSalesloftEnum(r.Configuration.SourceSalesloft.SourceType.ValueString())
		startDate57, _ := time.Parse(time.RFC3339Nano, r.Configuration.SourceSalesloft.StartDate.ValueString())
		sourceSalesloft = &shared.SourceSalesloft{
			Credentials: credentials21,
			SourceType:  sourceType134,
			StartDate:   startDate57,
		}
	}
	if sourceSalesloft != nil {
		configuration = shared.SourceConfiguration{
			SourceSalesloft: sourceSalesloft,
		}
	}
	var sourceSapFieldglass *shared.SourceSapFieldglass
	if r.Configuration.SourceSapFieldglass != nil {
		apiKey40 := r.Configuration.SourceSapFieldglass.APIKey.ValueString()
		sourceType135 := shared.SourceSapFieldglassSapFieldglassEnum(r.Configuration.SourceSapFieldglass.SourceType.ValueString())
		sourceSapFieldglass = &shared.SourceSapFieldglass{
			APIKey:     apiKey40,
			SourceType: sourceType135,
		}
	}
	if sourceSapFieldglass != nil {
		configuration = shared.SourceConfiguration{
			SourceSapFieldglass: sourceSapFieldglass,
		}
	}
	var sourceSecoda *shared.SourceSecoda
	if r.Configuration.SourceSecoda != nil {
		apiKey41 := r.Configuration.SourceSecoda.APIKey.ValueString()
		sourceType136 := shared.SourceSecodaSecodaEnum(r.Configuration.SourceSecoda.SourceType.ValueString())
		sourceSecoda = &shared.SourceSecoda{
			APIKey:     apiKey41,
			SourceType: sourceType136,
		}
	}
	if sourceSecoda != nil {
		configuration = shared.SourceConfiguration{
			SourceSecoda: sourceSecoda,
		}
	}
	var sourceSendgrid *shared.SourceSendgrid
	if r.Configuration.SourceSendgrid != nil {
		apikey2 := r.Configuration.SourceSendgrid.Apikey.ValueString()
		sourceType137 := shared.SourceSendgridSendgridEnum(r.Configuration.SourceSendgrid.SourceType.ValueString())
		startTime := new(time.Time)
		if !r.Configuration.SourceSendgrid.StartTime.IsUnknown() && !r.Configuration.SourceSendgrid.StartTime.IsNull() {
			*startTime, _ = time.Parse(time.RFC3339Nano, r.Configuration.SourceSendgrid.StartTime.ValueString())
		} else {
			startTime = nil
		}
		sourceSendgrid = &shared.SourceSendgrid{
			Apikey:     apikey2,
			SourceType: sourceType137,
			StartTime:  startTime,
		}
	}
	if sourceSendgrid != nil {
		configuration = shared.SourceConfiguration{
			SourceSendgrid: sourceSendgrid,
		}
	}
	var sourceSendinblue *shared.SourceSendinblue
	if r.Configuration.SourceSendinblue != nil {
		apiKey42 := r.Configuration.SourceSendinblue.APIKey.ValueString()
		sourceType138 := shared.SourceSendinblueSendinblueEnum(r.Configuration.SourceSendinblue.SourceType.ValueString())
		sourceSendinblue = &shared.SourceSendinblue{
			APIKey:     apiKey42,
			SourceType: sourceType138,
		}
	}
	if sourceSendinblue != nil {
		configuration = shared.SourceConfiguration{
			SourceSendinblue: sourceSendinblue,
		}
	}
	var sourceSenseforce *shared.SourceSenseforce
	if r.Configuration.SourceSenseforce != nil {
		accessToken25 := r.Configuration.SourceSenseforce.AccessToken.ValueString()
		backendURL := r.Configuration.SourceSenseforce.BackendURL.ValueString()
		datasetId2 := r.Configuration.SourceSenseforce.DatasetID.ValueString()
		sliceRange := new(int64)
		if !r.Configuration.SourceSenseforce.SliceRange.IsUnknown() && !r.Configuration.SourceSenseforce.SliceRange.IsNull() {
			*sliceRange = r.Configuration.SourceSenseforce.SliceRange.ValueInt64()
		} else {
			sliceRange = nil
		}
		sourceType139 := shared.SourceSenseforceSenseforceEnum(r.Configuration.SourceSenseforce.SourceType.ValueString())
		startDate58, _ := customTypes.NewDate(r.Configuration.SourceSenseforce.StartDate.ValueString())
		sourceSenseforce = &shared.SourceSenseforce{
			AccessToken: accessToken25,
			BackendURL:  backendURL,
			DatasetID:   datasetId2,
			SliceRange:  sliceRange,
			SourceType:  sourceType139,
			StartDate:   startDate58,
		}
	}
	if sourceSenseforce != nil {
		configuration = shared.SourceConfiguration{
			SourceSenseforce: sourceSenseforce,
		}
	}
	var sourceSentry *shared.SourceSentry
	if r.Configuration.SourceSentry != nil {
		authToken1 := r.Configuration.SourceSentry.AuthToken.ValueString()
		discoverFields := make([]interface{}, 0)
		for _, discoverFieldsItem := range r.Configuration.SourceSentry.DiscoverFields {
			var discoverFieldsTmp interface{}
			_ = json.Unmarshal([]byte(discoverFieldsItem.ValueString()), &discoverFieldsTmp)
			discoverFields = append(discoverFields, discoverFieldsTmp)
		}
		hostname := new(string)
		if !r.Configuration.SourceSentry.Hostname.IsUnknown() && !r.Configuration.SourceSentry.Hostname.IsNull() {
			*hostname = r.Configuration.SourceSentry.Hostname.ValueString()
		} else {
			hostname = nil
		}
		organization := r.Configuration.SourceSentry.Organization.ValueString()
		project := r.Configuration.SourceSentry.Project.ValueString()
		sourceType140 := shared.SourceSentrySentryEnum(r.Configuration.SourceSentry.SourceType.ValueString())
		sourceSentry = &shared.SourceSentry{
			AuthToken:      authToken1,
			DiscoverFields: discoverFields,
			Hostname:       hostname,
			Organization:   organization,
			Project:        project,
			SourceType:     sourceType140,
		}
	}
	if sourceSentry != nil {
		configuration = shared.SourceConfiguration{
			SourceSentry: sourceSentry,
		}
	}
	var sourceSftp *shared.SourceSftp
	if r.Configuration.SourceSftp != nil {
		var credentials22 *shared.SourceSftpAuthenticationWildcard
		var sourceSftpAuthenticationWildcardPasswordAuthentication *shared.SourceSftpAuthenticationWildcardPasswordAuthentication
		if r.Configuration.SourceSftp.Credentials.SourceSftpAuthenticationWildcardPasswordAuthentication != nil {
			authMethod9 := shared.SourceSftpAuthenticationWildcardPasswordAuthenticationAuthMethodEnum(r.Configuration.SourceSftp.Credentials.SourceSftpAuthenticationWildcardPasswordAuthentication.AuthMethod.ValueString())
			authUserPassword := r.Configuration.SourceSftp.Credentials.SourceSftpAuthenticationWildcardPasswordAuthentication.AuthUserPassword.ValueString()
			sourceSftpAuthenticationWildcardPasswordAuthentication = &shared.SourceSftpAuthenticationWildcardPasswordAuthentication{
				AuthMethod:       authMethod9,
				AuthUserPassword: authUserPassword,
			}
		}
		if sourceSftpAuthenticationWildcardPasswordAuthentication != nil {
			credentials22 = &shared.SourceSftpAuthenticationWildcard{
				SourceSftpAuthenticationWildcardPasswordAuthentication: sourceSftpAuthenticationWildcardPasswordAuthentication,
			}
		}
		var sourceSftpAuthenticationWildcardSSHKeyAuthentication *shared.SourceSftpAuthenticationWildcardSSHKeyAuthentication
		if r.Configuration.SourceSftp.Credentials.SourceSftpAuthenticationWildcardSSHKeyAuthentication != nil {
			authMethod10 := shared.SourceSftpAuthenticationWildcardSSHKeyAuthenticationAuthMethodEnum(r.Configuration.SourceSftp.Credentials.SourceSftpAuthenticationWildcardSSHKeyAuthentication.AuthMethod.ValueString())
			authSSHKey := r.Configuration.SourceSftp.Credentials.SourceSftpAuthenticationWildcardSSHKeyAuthentication.AuthSSHKey.ValueString()
			sourceSftpAuthenticationWildcardSSHKeyAuthentication = &shared.SourceSftpAuthenticationWildcardSSHKeyAuthentication{
				AuthMethod: authMethod10,
				AuthSSHKey: authSSHKey,
			}
		}
		if sourceSftpAuthenticationWildcardSSHKeyAuthentication != nil {
			credentials22 = &shared.SourceSftpAuthenticationWildcard{
				SourceSftpAuthenticationWildcardSSHKeyAuthentication: sourceSftpAuthenticationWildcardSSHKeyAuthentication,
			}
		}
		filePattern := new(string)
		if !r.Configuration.SourceSftp.FilePattern.IsUnknown() && !r.Configuration.SourceSftp.FilePattern.IsNull() {
			*filePattern = r.Configuration.SourceSftp.FilePattern.ValueString()
		} else {
			filePattern = nil
		}
		fileTypes := new(string)
		if !r.Configuration.SourceSftp.FileTypes.IsUnknown() && !r.Configuration.SourceSftp.FileTypes.IsNull() {
			*fileTypes = r.Configuration.SourceSftp.FileTypes.ValueString()
		} else {
			fileTypes = nil
		}
		folderPath := new(string)
		if !r.Configuration.SourceSftp.FolderPath.IsUnknown() && !r.Configuration.SourceSftp.FolderPath.IsNull() {
			*folderPath = r.Configuration.SourceSftp.FolderPath.ValueString()
		} else {
			folderPath = nil
		}
		host12 := r.Configuration.SourceSftp.Host.ValueString()
		port12 := r.Configuration.SourceSftp.Port.ValueInt64()
		sourceType141 := shared.SourceSftpSftpEnum(r.Configuration.SourceSftp.SourceType.ValueString())
		user4 := r.Configuration.SourceSftp.User.ValueString()
		sourceSftp = &shared.SourceSftp{
			Credentials: credentials22,
			FilePattern: filePattern,
			FileTypes:   fileTypes,
			FolderPath:  folderPath,
			Host:        host12,
			Port:        port12,
			SourceType:  sourceType141,
			User:        user4,
		}
	}
	if sourceSftp != nil {
		configuration = shared.SourceConfiguration{
			SourceSftp: sourceSftp,
		}
	}
	var sourceSftpBulk *shared.SourceSftpBulk
	if r.Configuration.SourceSftpBulk != nil {
		fileMostRecent := new(bool)
		if !r.Configuration.SourceSftpBulk.FileMostRecent.IsUnknown() && !r.Configuration.SourceSftpBulk.FileMostRecent.IsNull() {
			*fileMostRecent = r.Configuration.SourceSftpBulk.FileMostRecent.ValueBool()
		} else {
			fileMostRecent = nil
		}
		filePattern1 := new(string)
		if !r.Configuration.SourceSftpBulk.FilePattern.IsUnknown() && !r.Configuration.SourceSftpBulk.FilePattern.IsNull() {
			*filePattern1 = r.Configuration.SourceSftpBulk.FilePattern.ValueString()
		} else {
			filePattern1 = nil
		}
		fileType := new(shared.SourceSftpBulkFileTypeEnum)
		if !r.Configuration.SourceSftpBulk.FileType.IsUnknown() && !r.Configuration.SourceSftpBulk.FileType.IsNull() {
			*fileType = shared.SourceSftpBulkFileTypeEnum(r.Configuration.SourceSftpBulk.FileType.ValueString())
		} else {
			fileType = nil
		}
		folderPath1 := r.Configuration.SourceSftpBulk.FolderPath.ValueString()
		host13 := r.Configuration.SourceSftpBulk.Host.ValueString()
		password16 := new(string)
		if !r.Configuration.SourceSftpBulk.Password.IsUnknown() && !r.Configuration.SourceSftpBulk.Password.IsNull() {
			*password16 = r.Configuration.SourceSftpBulk.Password.ValueString()
		} else {
			password16 = nil
		}
		port13 := r.Configuration.SourceSftpBulk.Port.ValueInt64()
		privateKey2 := new(string)
		if !r.Configuration.SourceSftpBulk.PrivateKey.IsUnknown() && !r.Configuration.SourceSftpBulk.PrivateKey.IsNull() {
			*privateKey2 = r.Configuration.SourceSftpBulk.PrivateKey.ValueString()
		} else {
			privateKey2 = nil
		}
		sourceType142 := shared.SourceSftpBulkSftpBulkEnum(r.Configuration.SourceSftpBulk.SourceType.ValueString())
		startDate59, _ := time.Parse(time.RFC3339Nano, r.Configuration.SourceSftpBulk.StartDate.ValueString())
		streamName1 := r.Configuration.SourceSftpBulk.StreamName.ValueString()
		username12 := r.Configuration.SourceSftpBulk.Username.ValueString()
		sourceSftpBulk = &shared.SourceSftpBulk{
			FileMostRecent: fileMostRecent,
			FilePattern:    filePattern1,
			FileType:       fileType,
			FolderPath:     folderPath1,
			Host:           host13,
			Password:       password16,
			Port:           port13,
			PrivateKey:     privateKey2,
			SourceType:     sourceType142,
			StartDate:      startDate59,
			StreamName:     streamName1,
			Username:       username12,
		}
	}
	if sourceSftpBulk != nil {
		configuration = shared.SourceConfiguration{
			SourceSftpBulk: sourceSftpBulk,
		}
	}
	var sourceShopify *shared.SourceShopify
	if r.Configuration.SourceShopify != nil {
		var credentials23 *shared.SourceShopifyShopifyAuthorizationMethod
		var sourceShopifyShopifyAuthorizationMethodAPIPassword *shared.SourceShopifyShopifyAuthorizationMethodAPIPassword
		if r.Configuration.SourceShopify.Credentials.SourceShopifyShopifyAuthorizationMethodAPIPassword != nil {
			apiPassword := r.Configuration.SourceShopify.Credentials.SourceShopifyShopifyAuthorizationMethodAPIPassword.APIPassword.ValueString()
			authMethod11 := shared.SourceShopifyShopifyAuthorizationMethodAPIPasswordAuthMethodEnum(r.Configuration.SourceShopify.Credentials.SourceShopifyShopifyAuthorizationMethodAPIPassword.AuthMethod.ValueString())
			sourceShopifyShopifyAuthorizationMethodAPIPassword = &shared.SourceShopifyShopifyAuthorizationMethodAPIPassword{
				APIPassword: apiPassword,
				AuthMethod:  authMethod11,
			}
		}
		if sourceShopifyShopifyAuthorizationMethodAPIPassword != nil {
			credentials23 = &shared.SourceShopifyShopifyAuthorizationMethod{
				SourceShopifyShopifyAuthorizationMethodAPIPassword: sourceShopifyShopifyAuthorizationMethodAPIPassword,
			}
		}
		var sourceShopifyShopifyAuthorizationMethodOAuth20 *shared.SourceShopifyShopifyAuthorizationMethodOAuth20
		if r.Configuration.SourceShopify.Credentials.SourceShopifyShopifyAuthorizationMethodOAuth20 != nil {
			accessToken26 := new(string)
			if !r.Configuration.SourceShopify.Credentials.SourceShopifyShopifyAuthorizationMethodOAuth20.AccessToken.IsUnknown() && !r.Configuration.SourceShopify.Credentials.SourceShopifyShopifyAuthorizationMethodOAuth20.AccessToken.IsNull() {
				*accessToken26 = r.Configuration.SourceShopify.Credentials.SourceShopifyShopifyAuthorizationMethodOAuth20.AccessToken.ValueString()
			} else {
				accessToken26 = nil
			}
			authMethod12 := shared.SourceShopifyShopifyAuthorizationMethodOAuth20AuthMethodEnum(r.Configuration.SourceShopify.Credentials.SourceShopifyShopifyAuthorizationMethodOAuth20.AuthMethod.ValueString())
			clientId30 := new(string)
			if !r.Configuration.SourceShopify.Credentials.SourceShopifyShopifyAuthorizationMethodOAuth20.ClientID.IsUnknown() && !r.Configuration.SourceShopify.Credentials.SourceShopifyShopifyAuthorizationMethodOAuth20.ClientID.IsNull() {
				*clientId30 = r.Configuration.SourceShopify.Credentials.SourceShopifyShopifyAuthorizationMethodOAuth20.ClientID.ValueString()
			} else {
				clientId30 = nil
			}
			clientSecret29 := new(string)
			if !r.Configuration.SourceShopify.Credentials.SourceShopifyShopifyAuthorizationMethodOAuth20.ClientSecret.IsUnknown() && !r.Configuration.SourceShopify.Credentials.SourceShopifyShopifyAuthorizationMethodOAuth20.ClientSecret.IsNull() {
				*clientSecret29 = r.Configuration.SourceShopify.Credentials.SourceShopifyShopifyAuthorizationMethodOAuth20.ClientSecret.ValueString()
			} else {
				clientSecret29 = nil
			}
			sourceShopifyShopifyAuthorizationMethodOAuth20 = &shared.SourceShopifyShopifyAuthorizationMethodOAuth20{
				AccessToken:  accessToken26,
				AuthMethod:   authMethod12,
				ClientID:     clientId30,
				ClientSecret: clientSecret29,
			}
		}
		if sourceShopifyShopifyAuthorizationMethodOAuth20 != nil {
			credentials23 = &shared.SourceShopifyShopifyAuthorizationMethod{
				SourceShopifyShopifyAuthorizationMethodOAuth20: sourceShopifyShopifyAuthorizationMethodOAuth20,
			}
		}
		shop := r.Configuration.SourceShopify.Shop.ValueString()
		sourceType143 := shared.SourceShopifyShopifyEnum(r.Configuration.SourceShopify.SourceType.ValueString())
		startDate60 := r.Configuration.SourceShopify.StartDate.ValueString()
		sourceShopify = &shared.SourceShopify{
			Credentials: credentials23,
			Shop:        shop,
			SourceType:  sourceType143,
			StartDate:   startDate60,
		}
	}
	if sourceShopify != nil {
		configuration = shared.SourceConfiguration{
			SourceShopify: sourceShopify,
		}
	}
	var sourceShortio *shared.SourceShortio
	if r.Configuration.SourceShortio != nil {
		domainID := r.Configuration.SourceShortio.DomainID.ValueString()
		secretKey4 := r.Configuration.SourceShortio.SecretKey.ValueString()
		sourceType144 := shared.SourceShortioShortioEnum(r.Configuration.SourceShortio.SourceType.ValueString())
		startDate61 := r.Configuration.SourceShortio.StartDate.ValueString()
		sourceShortio = &shared.SourceShortio{
			DomainID:   domainID,
			SecretKey:  secretKey4,
			SourceType: sourceType144,
			StartDate:  startDate61,
		}
	}
	if sourceShortio != nil {
		configuration = shared.SourceConfiguration{
			SourceShortio: sourceShortio,
		}
	}
	var sourceSlack *shared.SourceSlack
	if r.Configuration.SourceSlack != nil {
		channelFilter := make([]string, 0)
		for _, channelFilterItem := range r.Configuration.SourceSlack.ChannelFilter {
			channelFilter = append(channelFilter, channelFilterItem.ValueString())
		}
		var credentials24 *shared.SourceSlackAuthenticationMechanism
		var sourceSlackAuthenticationMechanismSignInViaSlackOAuth *shared.SourceSlackAuthenticationMechanismSignInViaSlackOAuth
		if r.Configuration.SourceSlack.Credentials.SourceSlackAuthenticationMechanismSignInViaSlackOAuth != nil {
			accessToken27 := r.Configuration.SourceSlack.Credentials.SourceSlackAuthenticationMechanismSignInViaSlackOAuth.AccessToken.ValueString()
			clientId31 := r.Configuration.SourceSlack.Credentials.SourceSlackAuthenticationMechanismSignInViaSlackOAuth.ClientID.ValueString()
			clientSecret30 := r.Configuration.SourceSlack.Credentials.SourceSlackAuthenticationMechanismSignInViaSlackOAuth.ClientSecret.ValueString()
			optionTitle6 := shared.SourceSlackAuthenticationMechanismSignInViaSlackOAuthOptionTitleEnum(r.Configuration.SourceSlack.Credentials.SourceSlackAuthenticationMechanismSignInViaSlackOAuth.OptionTitle.ValueString())
			sourceSlackAuthenticationMechanismSignInViaSlackOAuth = &shared.SourceSlackAuthenticationMechanismSignInViaSlackOAuth{
				AccessToken:  accessToken27,
				ClientID:     clientId31,
				ClientSecret: clientSecret30,
				OptionTitle:  optionTitle6,
			}
		}
		if sourceSlackAuthenticationMechanismSignInViaSlackOAuth != nil {
			credentials24 = &shared.SourceSlackAuthenticationMechanism{
				SourceSlackAuthenticationMechanismSignInViaSlackOAuth: sourceSlackAuthenticationMechanismSignInViaSlackOAuth,
			}
		}
		var sourceSlackAuthenticationMechanismAPIToken *shared.SourceSlackAuthenticationMechanismAPIToken
		if r.Configuration.SourceSlack.Credentials.SourceSlackAuthenticationMechanismAPIToken != nil {
			apiToken11 := r.Configuration.SourceSlack.Credentials.SourceSlackAuthenticationMechanismAPIToken.APIToken.ValueString()
			optionTitle7 := shared.SourceSlackAuthenticationMechanismAPITokenOptionTitleEnum(r.Configuration.SourceSlack.Credentials.SourceSlackAuthenticationMechanismAPIToken.OptionTitle.ValueString())
			sourceSlackAuthenticationMechanismAPIToken = &shared.SourceSlackAuthenticationMechanismAPIToken{
				APIToken:    apiToken11,
				OptionTitle: optionTitle7,
			}
		}
		if sourceSlackAuthenticationMechanismAPIToken != nil {
			credentials24 = &shared.SourceSlackAuthenticationMechanism{
				SourceSlackAuthenticationMechanismAPIToken: sourceSlackAuthenticationMechanismAPIToken,
			}
		}
		joinChannels := r.Configuration.SourceSlack.JoinChannels.ValueBool()
		lookbackWindow := r.Configuration.SourceSlack.LookbackWindow.ValueInt64()
		sourceType145 := shared.SourceSlackSlackEnum(r.Configuration.SourceSlack.SourceType.ValueString())
		startDate62, _ := time.Parse(time.RFC3339Nano, r.Configuration.SourceSlack.StartDate.ValueString())
		sourceSlack = &shared.SourceSlack{
			ChannelFilter:  channelFilter,
			Credentials:    credentials24,
			JoinChannels:   joinChannels,
			LookbackWindow: lookbackWindow,
			SourceType:     sourceType145,
			StartDate:      startDate62,
		}
	}
	if sourceSlack != nil {
		configuration = shared.SourceConfiguration{
			SourceSlack: sourceSlack,
		}
	}
	var sourceSmaily *shared.SourceSmaily
	if r.Configuration.SourceSmaily != nil {
		apiPassword1 := r.Configuration.SourceSmaily.APIPassword.ValueString()
		apiSubdomain := r.Configuration.SourceSmaily.APISubdomain.ValueString()
		apiUsername := r.Configuration.SourceSmaily.APIUsername.ValueString()
		sourceType146 := shared.SourceSmailySmailyEnum(r.Configuration.SourceSmaily.SourceType.ValueString())
		sourceSmaily = &shared.SourceSmaily{
			APIPassword:  apiPassword1,
			APISubdomain: apiSubdomain,
			APIUsername:  apiUsername,
			SourceType:   sourceType146,
		}
	}
	if sourceSmaily != nil {
		configuration = shared.SourceConfiguration{
			SourceSmaily: sourceSmaily,
		}
	}
	var sourceSmartengage *shared.SourceSmartengage
	if r.Configuration.SourceSmartengage != nil {
		apiKey43 := r.Configuration.SourceSmartengage.APIKey.ValueString()
		sourceType147 := shared.SourceSmartengageSmartengageEnum(r.Configuration.SourceSmartengage.SourceType.ValueString())
		sourceSmartengage = &shared.SourceSmartengage{
			APIKey:     apiKey43,
			SourceType: sourceType147,
		}
	}
	if sourceSmartengage != nil {
		configuration = shared.SourceConfiguration{
			SourceSmartengage: sourceSmartengage,
		}
	}
	var sourceSmartsheets *shared.SourceSmartsheets
	if r.Configuration.SourceSmartsheets != nil {
		var credentials25 shared.SourceSmartsheetsAuthorizationMethod
		var sourceSmartsheetsAuthorizationMethodOAuth20 *shared.SourceSmartsheetsAuthorizationMethodOAuth20
		if r.Configuration.SourceSmartsheets.Credentials.SourceSmartsheetsAuthorizationMethodOAuth20 != nil {
			accessToken28 := r.Configuration.SourceSmartsheets.Credentials.SourceSmartsheetsAuthorizationMethodOAuth20.AccessToken.ValueString()
			authType32 := new(shared.SourceSmartsheetsAuthorizationMethodOAuth20AuthTypeEnum)
			if !r.Configuration.SourceSmartsheets.Credentials.SourceSmartsheetsAuthorizationMethodOAuth20.AuthType.IsUnknown() && !r.Configuration.SourceSmartsheets.Credentials.SourceSmartsheetsAuthorizationMethodOAuth20.AuthType.IsNull() {
				*authType32 = shared.SourceSmartsheetsAuthorizationMethodOAuth20AuthTypeEnum(r.Configuration.SourceSmartsheets.Credentials.SourceSmartsheetsAuthorizationMethodOAuth20.AuthType.ValueString())
			} else {
				authType32 = nil
			}
			clientId32 := r.Configuration.SourceSmartsheets.Credentials.SourceSmartsheetsAuthorizationMethodOAuth20.ClientID.ValueString()
			clientSecret31 := r.Configuration.SourceSmartsheets.Credentials.SourceSmartsheetsAuthorizationMethodOAuth20.ClientSecret.ValueString()
			refreshToken24 := r.Configuration.SourceSmartsheets.Credentials.SourceSmartsheetsAuthorizationMethodOAuth20.RefreshToken.ValueString()
			tokenExpiryDate3, _ := time.Parse(time.RFC3339Nano, r.Configuration.SourceSmartsheets.Credentials.SourceSmartsheetsAuthorizationMethodOAuth20.TokenExpiryDate.ValueString())
			sourceSmartsheetsAuthorizationMethodOAuth20 = &shared.SourceSmartsheetsAuthorizationMethodOAuth20{
				AccessToken:     accessToken28,
				AuthType:        authType32,
				ClientID:        clientId32,
				ClientSecret:    clientSecret31,
				RefreshToken:    refreshToken24,
				TokenExpiryDate: tokenExpiryDate3,
			}
		}
		if sourceSmartsheetsAuthorizationMethodOAuth20 != nil {
			credentials25 = shared.SourceSmartsheetsAuthorizationMethod{
				SourceSmartsheetsAuthorizationMethodOAuth20: sourceSmartsheetsAuthorizationMethodOAuth20,
			}
		}
		var sourceSmartsheetsAuthorizationMethodAPIAccessToken *shared.SourceSmartsheetsAuthorizationMethodAPIAccessToken
		if r.Configuration.SourceSmartsheets.Credentials.SourceSmartsheetsAuthorizationMethodAPIAccessToken != nil {
			accessToken29 := r.Configuration.SourceSmartsheets.Credentials.SourceSmartsheetsAuthorizationMethodAPIAccessToken.AccessToken.ValueString()
			authType33 := new(shared.SourceSmartsheetsAuthorizationMethodAPIAccessTokenAuthTypeEnum)
			if !r.Configuration.SourceSmartsheets.Credentials.SourceSmartsheetsAuthorizationMethodAPIAccessToken.AuthType.IsUnknown() && !r.Configuration.SourceSmartsheets.Credentials.SourceSmartsheetsAuthorizationMethodAPIAccessToken.AuthType.IsNull() {
				*authType33 = shared.SourceSmartsheetsAuthorizationMethodAPIAccessTokenAuthTypeEnum(r.Configuration.SourceSmartsheets.Credentials.SourceSmartsheetsAuthorizationMethodAPIAccessToken.AuthType.ValueString())
			} else {
				authType33 = nil
			}
			sourceSmartsheetsAuthorizationMethodAPIAccessToken = &shared.SourceSmartsheetsAuthorizationMethodAPIAccessToken{
				AccessToken: accessToken29,
				AuthType:    authType33,
			}
		}
		if sourceSmartsheetsAuthorizationMethodAPIAccessToken != nil {
			credentials25 = shared.SourceSmartsheetsAuthorizationMethod{
				SourceSmartsheetsAuthorizationMethodAPIAccessToken: sourceSmartsheetsAuthorizationMethodAPIAccessToken,
			}
		}
		sourceType148 := shared.SourceSmartsheetsSmartsheetsEnum(r.Configuration.SourceSmartsheets.SourceType.ValueString())
		spreadsheetId1 := r.Configuration.SourceSmartsheets.SpreadsheetID.ValueString()
		startDatetime1 := new(time.Time)
		if !r.Configuration.SourceSmartsheets.StartDatetime.IsUnknown() && !r.Configuration.SourceSmartsheets.StartDatetime.IsNull() {
			*startDatetime1, _ = time.Parse(time.RFC3339Nano, r.Configuration.SourceSmartsheets.StartDatetime.ValueString())
		} else {
			startDatetime1 = nil
		}
		sourceSmartsheets = &shared.SourceSmartsheets{
			Credentials:   credentials25,
			SourceType:    sourceType148,
			SpreadsheetID: spreadsheetId1,
			StartDatetime: startDatetime1,
		}
	}
	if sourceSmartsheets != nil {
		configuration = shared.SourceConfiguration{
			SourceSmartsheets: sourceSmartsheets,
		}
	}
	var sourceSnapchatMarketing *shared.SourceSnapchatMarketing
	if r.Configuration.SourceSnapchatMarketing != nil {
		clientId33 := r.Configuration.SourceSnapchatMarketing.ClientID.ValueString()
		clientSecret32 := r.Configuration.SourceSnapchatMarketing.ClientSecret.ValueString()
		endDate10 := new(customTypes.Date)
		if !r.Configuration.SourceSnapchatMarketing.EndDate.IsUnknown() && !r.Configuration.SourceSnapchatMarketing.EndDate.IsNull() {
			*endDate10, _ = customTypes.NewDate(r.Configuration.SourceSnapchatMarketing.EndDate.ValueString())
		} else {
			endDate10 = nil
		}
		refreshToken25 := r.Configuration.SourceSnapchatMarketing.RefreshToken.ValueString()
		sourceType149 := shared.SourceSnapchatMarketingSnapchatMarketingEnum(r.Configuration.SourceSnapchatMarketing.SourceType.ValueString())
		startDate63 := new(customTypes.Date)
		if !r.Configuration.SourceSnapchatMarketing.StartDate.IsUnknown() && !r.Configuration.SourceSnapchatMarketing.StartDate.IsNull() {
			*startDate63, _ = customTypes.NewDate(r.Configuration.SourceSnapchatMarketing.StartDate.ValueString())
		} else {
			startDate63 = nil
		}
		sourceSnapchatMarketing = &shared.SourceSnapchatMarketing{
			ClientID:     clientId33,
			ClientSecret: clientSecret32,
			EndDate:      endDate10,
			RefreshToken: refreshToken25,
			SourceType:   sourceType149,
			StartDate:    startDate63,
		}
	}
	if sourceSnapchatMarketing != nil {
		configuration = shared.SourceConfiguration{
			SourceSnapchatMarketing: sourceSnapchatMarketing,
		}
	}
	var sourceSnowflake *shared.SourceSnowflake
	if r.Configuration.SourceSnowflake != nil {
		var credentials26 *shared.SourceSnowflakeAuthorizationMethod
		var sourceSnowflakeAuthorizationMethodOAuth20 *shared.SourceSnowflakeAuthorizationMethodOAuth20
		if r.Configuration.SourceSnowflake.Credentials.SourceSnowflakeAuthorizationMethodOAuth20 != nil {
			accessToken30 := new(string)
			if !r.Configuration.SourceSnowflake.Credentials.SourceSnowflakeAuthorizationMethodOAuth20.AccessToken.IsUnknown() && !r.Configuration.SourceSnowflake.Credentials.SourceSnowflakeAuthorizationMethodOAuth20.AccessToken.IsNull() {
				*accessToken30 = r.Configuration.SourceSnowflake.Credentials.SourceSnowflakeAuthorizationMethodOAuth20.AccessToken.ValueString()
			} else {
				accessToken30 = nil
			}
			authType34 := shared.SourceSnowflakeAuthorizationMethodOAuth20AuthTypeEnum(r.Configuration.SourceSnowflake.Credentials.SourceSnowflakeAuthorizationMethodOAuth20.AuthType.ValueString())
			clientId34 := r.Configuration.SourceSnowflake.Credentials.SourceSnowflakeAuthorizationMethodOAuth20.ClientID.ValueString()
			clientSecret33 := r.Configuration.SourceSnowflake.Credentials.SourceSnowflakeAuthorizationMethodOAuth20.ClientSecret.ValueString()
			refreshToken26 := new(string)
			if !r.Configuration.SourceSnowflake.Credentials.SourceSnowflakeAuthorizationMethodOAuth20.RefreshToken.IsUnknown() && !r.Configuration.SourceSnowflake.Credentials.SourceSnowflakeAuthorizationMethodOAuth20.RefreshToken.IsNull() {
				*refreshToken26 = r.Configuration.SourceSnowflake.Credentials.SourceSnowflakeAuthorizationMethodOAuth20.RefreshToken.ValueString()
			} else {
				refreshToken26 = nil
			}
			sourceSnowflakeAuthorizationMethodOAuth20 = &shared.SourceSnowflakeAuthorizationMethodOAuth20{
				AccessToken:  accessToken30,
				AuthType:     authType34,
				ClientID:     clientId34,
				ClientSecret: clientSecret33,
				RefreshToken: refreshToken26,
			}
		}
		if sourceSnowflakeAuthorizationMethodOAuth20 != nil {
			credentials26 = &shared.SourceSnowflakeAuthorizationMethod{
				SourceSnowflakeAuthorizationMethodOAuth20: sourceSnowflakeAuthorizationMethodOAuth20,
			}
		}
		var sourceSnowflakeAuthorizationMethodUsernameAndPassword *shared.SourceSnowflakeAuthorizationMethodUsernameAndPassword
		if r.Configuration.SourceSnowflake.Credentials.SourceSnowflakeAuthorizationMethodUsernameAndPassword != nil {
			authType35 := shared.SourceSnowflakeAuthorizationMethodUsernameAndPasswordAuthTypeEnum(r.Configuration.SourceSnowflake.Credentials.SourceSnowflakeAuthorizationMethodUsernameAndPassword.AuthType.ValueString())
			password17 := r.Configuration.SourceSnowflake.Credentials.SourceSnowflakeAuthorizationMethodUsernameAndPassword.Password.ValueString()
			username13 := r.Configuration.SourceSnowflake.Credentials.SourceSnowflakeAuthorizationMethodUsernameAndPassword.Username.ValueString()
			sourceSnowflakeAuthorizationMethodUsernameAndPassword = &shared.SourceSnowflakeAuthorizationMethodUsernameAndPassword{
				AuthType: authType35,
				Password: password17,
				Username: username13,
			}
		}
		if sourceSnowflakeAuthorizationMethodUsernameAndPassword != nil {
			credentials26 = &shared.SourceSnowflakeAuthorizationMethod{
				SourceSnowflakeAuthorizationMethodUsernameAndPassword: sourceSnowflakeAuthorizationMethodUsernameAndPassword,
			}
		}
		database8 := r.Configuration.SourceSnowflake.Database.ValueString()
		host14 := r.Configuration.SourceSnowflake.Host.ValueString()
		jdbcURLParams6 := new(string)
		if !r.Configuration.SourceSnowflake.JdbcURLParams.IsUnknown() && !r.Configuration.SourceSnowflake.JdbcURLParams.IsNull() {
			*jdbcURLParams6 = r.Configuration.SourceSnowflake.JdbcURLParams.ValueString()
		} else {
			jdbcURLParams6 = nil
		}
		role := r.Configuration.SourceSnowflake.Role.ValueString()
		schema1 := new(string)
		if !r.Configuration.SourceSnowflake.Schema.IsUnknown() && !r.Configuration.SourceSnowflake.Schema.IsNull() {
			*schema1 = r.Configuration.SourceSnowflake.Schema.ValueString()
		} else {
			schema1 = nil
		}
		sourceType150 := shared.SourceSnowflakeSnowflakeEnum(r.Configuration.SourceSnowflake.SourceType.ValueString())
		warehouse := r.Configuration.SourceSnowflake.Warehouse.ValueString()
		sourceSnowflake = &shared.SourceSnowflake{
			Credentials:   credentials26,
			Database:      database8,
			Host:          host14,
			JdbcURLParams: jdbcURLParams6,
			Role:          role,
			Schema:        schema1,
			SourceType:    sourceType150,
			Warehouse:     warehouse,
		}
	}
	if sourceSnowflake != nil {
		configuration = shared.SourceConfiguration{
			SourceSnowflake: sourceSnowflake,
		}
	}
	var sourceSonarCloud *shared.SourceSonarCloud
	if r.Configuration.SourceSonarCloud != nil {
		componentKeys := make([]interface{}, 0)
		for _, componentKeysItem := range r.Configuration.SourceSonarCloud.ComponentKeys {
			var componentKeysTmp interface{}
			_ = json.Unmarshal([]byte(componentKeysItem.ValueString()), &componentKeysTmp)
			componentKeys = append(componentKeys, componentKeysTmp)
		}
		endDate11 := new(customTypes.Date)
		if !r.Configuration.SourceSonarCloud.EndDate.IsUnknown() && !r.Configuration.SourceSonarCloud.EndDate.IsNull() {
			*endDate11, _ = customTypes.NewDate(r.Configuration.SourceSonarCloud.EndDate.ValueString())
		} else {
			endDate11 = nil
		}
		organization1 := r.Configuration.SourceSonarCloud.Organization.ValueString()
		sourceType151 := shared.SourceSonarCloudSonarCloudEnum(r.Configuration.SourceSonarCloud.SourceType.ValueString())
		startDate64 := new(customTypes.Date)
		if !r.Configuration.SourceSonarCloud.StartDate.IsUnknown() && !r.Configuration.SourceSonarCloud.StartDate.IsNull() {
			*startDate64, _ = customTypes.NewDate(r.Configuration.SourceSonarCloud.StartDate.ValueString())
		} else {
			startDate64 = nil
		}
		userToken := r.Configuration.SourceSonarCloud.UserToken.ValueString()
		sourceSonarCloud = &shared.SourceSonarCloud{
			ComponentKeys: componentKeys,
			EndDate:       endDate11,
			Organization:  organization1,
			SourceType:    sourceType151,
			StartDate:     startDate64,
			UserToken:     userToken,
		}
	}
	if sourceSonarCloud != nil {
		configuration = shared.SourceConfiguration{
			SourceSonarCloud: sourceSonarCloud,
		}
	}
	var sourceSpacexAPI *shared.SourceSpacexAPI
	if r.Configuration.SourceSpacexAPI != nil {
		id1 := new(string)
		if !r.Configuration.SourceSpacexAPI.ID.IsUnknown() && !r.Configuration.SourceSpacexAPI.ID.IsNull() {
			*id1 = r.Configuration.SourceSpacexAPI.ID.ValueString()
		} else {
			id1 = nil
		}
		options := new(string)
		if !r.Configuration.SourceSpacexAPI.Options.IsUnknown() && !r.Configuration.SourceSpacexAPI.Options.IsNull() {
			*options = r.Configuration.SourceSpacexAPI.Options.ValueString()
		} else {
			options = nil
		}
		sourceType152 := shared.SourceSpacexAPISpacexAPIEnum(r.Configuration.SourceSpacexAPI.SourceType.ValueString())
		sourceSpacexAPI = &shared.SourceSpacexAPI{
			ID:         id1,
			Options:    options,
			SourceType: sourceType152,
		}
	}
	if sourceSpacexAPI != nil {
		configuration = shared.SourceConfiguration{
			SourceSpacexAPI: sourceSpacexAPI,
		}
	}
	var sourceSquare *shared.SourceSquare
	if r.Configuration.SourceSquare != nil {
		var credentials27 *shared.SourceSquareAuthentication
		var sourceSquareAuthenticationOauthAuthentication *shared.SourceSquareAuthenticationOauthAuthentication
		if r.Configuration.SourceSquare.Credentials.SourceSquareAuthenticationOauthAuthentication != nil {
			clientId35 := r.Configuration.SourceSquare.Credentials.SourceSquareAuthenticationOauthAuthentication.ClientID.ValueString()
			clientSecret34 := r.Configuration.SourceSquare.Credentials.SourceSquareAuthenticationOauthAuthentication.ClientSecret.ValueString()
			credentialsTitle2 := new(shared.SourceSquareAuthenticationOauthAuthenticationCredentialsTitleEnum)
			if !r.Configuration.SourceSquare.Credentials.SourceSquareAuthenticationOauthAuthentication.CredentialsTitle.IsUnknown() && !r.Configuration.SourceSquare.Credentials.SourceSquareAuthenticationOauthAuthentication.CredentialsTitle.IsNull() {
				*credentialsTitle2 = shared.SourceSquareAuthenticationOauthAuthenticationCredentialsTitleEnum(r.Configuration.SourceSquare.Credentials.SourceSquareAuthenticationOauthAuthentication.CredentialsTitle.ValueString())
			} else {
				credentialsTitle2 = nil
			}
			refreshToken27 := r.Configuration.SourceSquare.Credentials.SourceSquareAuthenticationOauthAuthentication.RefreshToken.ValueString()
			sourceSquareAuthenticationOauthAuthentication = &shared.SourceSquareAuthenticationOauthAuthentication{
				ClientID:         clientId35,
				ClientSecret:     clientSecret34,
				CredentialsTitle: credentialsTitle2,
				RefreshToken:     refreshToken27,
			}
		}
		if sourceSquareAuthenticationOauthAuthentication != nil {
			credentials27 = &shared.SourceSquareAuthentication{
				SourceSquareAuthenticationOauthAuthentication: sourceSquareAuthenticationOauthAuthentication,
			}
		}
		var sourceSquareAuthenticationAPIKey *shared.SourceSquareAuthenticationAPIKey
		if r.Configuration.SourceSquare.Credentials.SourceSquareAuthenticationAPIKey != nil {
			apiKey44 := r.Configuration.SourceSquare.Credentials.SourceSquareAuthenticationAPIKey.APIKey.ValueString()
			credentialsTitle3 := new(shared.SourceSquareAuthenticationAPIKeyCredentialsTitleEnum)
			if !r.Configuration.SourceSquare.Credentials.SourceSquareAuthenticationAPIKey.CredentialsTitle.IsUnknown() && !r.Configuration.SourceSquare.Credentials.SourceSquareAuthenticationAPIKey.CredentialsTitle.IsNull() {
				*credentialsTitle3 = shared.SourceSquareAuthenticationAPIKeyCredentialsTitleEnum(r.Configuration.SourceSquare.Credentials.SourceSquareAuthenticationAPIKey.CredentialsTitle.ValueString())
			} else {
				credentialsTitle3 = nil
			}
			sourceSquareAuthenticationAPIKey = &shared.SourceSquareAuthenticationAPIKey{
				APIKey:           apiKey44,
				CredentialsTitle: credentialsTitle3,
			}
		}
		if sourceSquareAuthenticationAPIKey != nil {
			credentials27 = &shared.SourceSquareAuthentication{
				SourceSquareAuthenticationAPIKey: sourceSquareAuthenticationAPIKey,
			}
		}
		includeDeletedObjects := new(bool)
		if !r.Configuration.SourceSquare.IncludeDeletedObjects.IsUnknown() && !r.Configuration.SourceSquare.IncludeDeletedObjects.IsNull() {
			*includeDeletedObjects = r.Configuration.SourceSquare.IncludeDeletedObjects.ValueBool()
		} else {
			includeDeletedObjects = nil
		}
		isSandbox3 := r.Configuration.SourceSquare.IsSandbox.ValueBool()
		sourceType153 := shared.SourceSquareSquareEnum(r.Configuration.SourceSquare.SourceType.ValueString())
		startDate65 := new(customTypes.Date)
		if !r.Configuration.SourceSquare.StartDate.IsUnknown() && !r.Configuration.SourceSquare.StartDate.IsNull() {
			*startDate65, _ = customTypes.NewDate(r.Configuration.SourceSquare.StartDate.ValueString())
		} else {
			startDate65 = nil
		}
		sourceSquare = &shared.SourceSquare{
			Credentials:           credentials27,
			IncludeDeletedObjects: includeDeletedObjects,
			IsSandbox:             isSandbox3,
			SourceType:            sourceType153,
			StartDate:             startDate65,
		}
	}
	if sourceSquare != nil {
		configuration = shared.SourceConfiguration{
			SourceSquare: sourceSquare,
		}
	}
	var sourceStrava *shared.SourceStrava
	if r.Configuration.SourceStrava != nil {
		athleteID := r.Configuration.SourceStrava.AthleteID.ValueInt64()
		authType36 := new(shared.SourceStravaAuthTypeEnum)
		if !r.Configuration.SourceStrava.AuthType.IsUnknown() && !r.Configuration.SourceStrava.AuthType.IsNull() {
			*authType36 = shared.SourceStravaAuthTypeEnum(r.Configuration.SourceStrava.AuthType.ValueString())
		} else {
			authType36 = nil
		}
		clientId36 := r.Configuration.SourceStrava.ClientID.ValueString()
		clientSecret35 := r.Configuration.SourceStrava.ClientSecret.ValueString()
		refreshToken28 := r.Configuration.SourceStrava.RefreshToken.ValueString()
		sourceType154 := shared.SourceStravaStravaEnum(r.Configuration.SourceStrava.SourceType.ValueString())
		startDate66, _ := time.Parse(time.RFC3339Nano, r.Configuration.SourceStrava.StartDate.ValueString())
		sourceStrava = &shared.SourceStrava{
			AthleteID:    athleteID,
			AuthType:     authType36,
			ClientID:     clientId36,
			ClientSecret: clientSecret35,
			RefreshToken: refreshToken28,
			SourceType:   sourceType154,
			StartDate:    startDate66,
		}
	}
	if sourceStrava != nil {
		configuration = shared.SourceConfiguration{
			SourceStrava: sourceStrava,
		}
	}
	var sourceStripe *shared.SourceStripe
	if r.Configuration.SourceStripe != nil {
		accountId2 := r.Configuration.SourceStripe.AccountID.ValueString()
		clientSecret36 := r.Configuration.SourceStripe.ClientSecret.ValueString()
		lookbackWindowDays2 := new(int64)
		if !r.Configuration.SourceStripe.LookbackWindowDays.IsUnknown() && !r.Configuration.SourceStripe.LookbackWindowDays.IsNull() {
			*lookbackWindowDays2 = r.Configuration.SourceStripe.LookbackWindowDays.ValueInt64()
		} else {
			lookbackWindowDays2 = nil
		}
		sliceRange1 := new(int64)
		if !r.Configuration.SourceStripe.SliceRange.IsUnknown() && !r.Configuration.SourceStripe.SliceRange.IsNull() {
			*sliceRange1 = r.Configuration.SourceStripe.SliceRange.ValueInt64()
		} else {
			sliceRange1 = nil
		}
		sourceType155 := shared.SourceStripeStripeEnum(r.Configuration.SourceStripe.SourceType.ValueString())
		startDate67, _ := time.Parse(time.RFC3339Nano, r.Configuration.SourceStripe.StartDate.ValueString())
		sourceStripe = &shared.SourceStripe{
			AccountID:          accountId2,
			ClientSecret:       clientSecret36,
			LookbackWindowDays: lookbackWindowDays2,
			SliceRange:         sliceRange1,
			SourceType:         sourceType155,
			StartDate:          startDate67,
		}
	}
	if sourceStripe != nil {
		configuration = shared.SourceConfiguration{
			SourceStripe: sourceStripe,
		}
	}
	var sourceSurveySparrow *shared.SourceSurveySparrow
	if r.Configuration.SourceSurveySparrow != nil {
		accessToken31 := r.Configuration.SourceSurveySparrow.AccessToken.ValueString()
		var region6 *shared.SourceSurveySparrowBaseURL
		var sourceSurveySparrowBaseURLEUBasedAccount *shared.SourceSurveySparrowBaseURLEUBasedAccount
		if r.Configuration.SourceSurveySparrow.Region.SourceSurveySparrowBaseURLEUBasedAccount != nil {
			urlBase := new(shared.SourceSurveySparrowBaseURLEUBasedAccountURLBaseEnum)
			if !r.Configuration.SourceSurveySparrow.Region.SourceSurveySparrowBaseURLEUBasedAccount.URLBase.IsUnknown() && !r.Configuration.SourceSurveySparrow.Region.SourceSurveySparrowBaseURLEUBasedAccount.URLBase.IsNull() {
				*urlBase = shared.SourceSurveySparrowBaseURLEUBasedAccountURLBaseEnum(r.Configuration.SourceSurveySparrow.Region.SourceSurveySparrowBaseURLEUBasedAccount.URLBase.ValueString())
			} else {
				urlBase = nil
			}
			sourceSurveySparrowBaseURLEUBasedAccount = &shared.SourceSurveySparrowBaseURLEUBasedAccount{
				URLBase: urlBase,
			}
		}
		if sourceSurveySparrowBaseURLEUBasedAccount != nil {
			region6 = &shared.SourceSurveySparrowBaseURL{
				SourceSurveySparrowBaseURLEUBasedAccount: sourceSurveySparrowBaseURLEUBasedAccount,
			}
		}
		var sourceSurveySparrowBaseURLGlobalAccount *shared.SourceSurveySparrowBaseURLGlobalAccount
		if r.Configuration.SourceSurveySparrow.Region.SourceSurveySparrowBaseURLGlobalAccount != nil {
			urlBase1 := new(shared.SourceSurveySparrowBaseURLGlobalAccountURLBaseEnum)
			if !r.Configuration.SourceSurveySparrow.Region.SourceSurveySparrowBaseURLGlobalAccount.URLBase.IsUnknown() && !r.Configuration.SourceSurveySparrow.Region.SourceSurveySparrowBaseURLGlobalAccount.URLBase.IsNull() {
				*urlBase1 = shared.SourceSurveySparrowBaseURLGlobalAccountURLBaseEnum(r.Configuration.SourceSurveySparrow.Region.SourceSurveySparrowBaseURLGlobalAccount.URLBase.ValueString())
			} else {
				urlBase1 = nil
			}
			sourceSurveySparrowBaseURLGlobalAccount = &shared.SourceSurveySparrowBaseURLGlobalAccount{
				URLBase: urlBase1,
			}
		}
		if sourceSurveySparrowBaseURLGlobalAccount != nil {
			region6 = &shared.SourceSurveySparrowBaseURL{
				SourceSurveySparrowBaseURLGlobalAccount: sourceSurveySparrowBaseURLGlobalAccount,
			}
		}
		sourceType156 := shared.SourceSurveySparrowSurveySparrowEnum(r.Configuration.SourceSurveySparrow.SourceType.ValueString())
		surveyID := make([]interface{}, 0)
		for _, surveyIDItem := range r.Configuration.SourceSurveySparrow.SurveyID {
			var surveyIDTmp interface{}
			_ = json.Unmarshal([]byte(surveyIDItem.ValueString()), &surveyIDTmp)
			surveyID = append(surveyID, surveyIDTmp)
		}
		sourceSurveySparrow = &shared.SourceSurveySparrow{
			AccessToken: accessToken31,
			Region:      region6,
			SourceType:  sourceType156,
			SurveyID:    surveyID,
		}
	}
	if sourceSurveySparrow != nil {
		configuration = shared.SourceConfiguration{
			SourceSurveySparrow: sourceSurveySparrow,
		}
	}
	var sourceSurveymonkey *shared.SourceSurveymonkey
	if r.Configuration.SourceSurveymonkey != nil {
		var credentials28 *shared.SourceSurveymonkeySurveyMonkeyAuthorizationMethod
		if r.Configuration.SourceSurveymonkey.Credentials != nil {
			accessToken32 := r.Configuration.SourceSurveymonkey.Credentials.AccessToken.ValueString()
			authMethod13 := shared.SourceSurveymonkeySurveyMonkeyAuthorizationMethodAuthMethodEnum(r.Configuration.SourceSurveymonkey.Credentials.AuthMethod.ValueString())
			clientId37 := new(string)
			if !r.Configuration.SourceSurveymonkey.Credentials.ClientID.IsUnknown() && !r.Configuration.SourceSurveymonkey.Credentials.ClientID.IsNull() {
				*clientId37 = r.Configuration.SourceSurveymonkey.Credentials.ClientID.ValueString()
			} else {
				clientId37 = nil
			}
			clientSecret37 := new(string)
			if !r.Configuration.SourceSurveymonkey.Credentials.ClientSecret.IsUnknown() && !r.Configuration.SourceSurveymonkey.Credentials.ClientSecret.IsNull() {
				*clientSecret37 = r.Configuration.SourceSurveymonkey.Credentials.ClientSecret.ValueString()
			} else {
				clientSecret37 = nil
			}
			credentials28 = &shared.SourceSurveymonkeySurveyMonkeyAuthorizationMethod{
				AccessToken:  accessToken32,
				AuthMethod:   authMethod13,
				ClientID:     clientId37,
				ClientSecret: clientSecret37,
			}
		}
		origin := new(shared.SourceSurveymonkeyOriginDatacenterOfTheSurveyMonkeyAccountEnum)
		if !r.Configuration.SourceSurveymonkey.Origin.IsUnknown() && !r.Configuration.SourceSurveymonkey.Origin.IsNull() {
			*origin = shared.SourceSurveymonkeyOriginDatacenterOfTheSurveyMonkeyAccountEnum(r.Configuration.SourceSurveymonkey.Origin.ValueString())
		} else {
			origin = nil
		}
		sourceType157 := shared.SourceSurveymonkeySurveymonkeyEnum(r.Configuration.SourceSurveymonkey.SourceType.ValueString())
		startDate68, _ := time.Parse(time.RFC3339Nano, r.Configuration.SourceSurveymonkey.StartDate.ValueString())
		surveyIds1 := make([]string, 0)
		for _, surveyIdsItem1 := range r.Configuration.SourceSurveymonkey.SurveyIds {
			surveyIds1 = append(surveyIds1, surveyIdsItem1.ValueString())
		}
		sourceSurveymonkey = &shared.SourceSurveymonkey{
			Credentials: credentials28,
			Origin:      origin,
			SourceType:  sourceType157,
			StartDate:   startDate68,
			SurveyIds:   surveyIds1,
		}
	}
	if sourceSurveymonkey != nil {
		configuration = shared.SourceConfiguration{
			SourceSurveymonkey: sourceSurveymonkey,
		}
	}
	var sourceTempo *shared.SourceTempo
	if r.Configuration.SourceTempo != nil {
		apiToken12 := r.Configuration.SourceTempo.APIToken.ValueString()
		sourceType158 := shared.SourceTempoTempoEnum(r.Configuration.SourceTempo.SourceType.ValueString())
		sourceTempo = &shared.SourceTempo{
			APIToken:   apiToken12,
			SourceType: sourceType158,
		}
	}
	if sourceTempo != nil {
		configuration = shared.SourceConfiguration{
			SourceTempo: sourceTempo,
		}
	}
	var sourceTheGuardianAPI *shared.SourceTheGuardianAPI
	if r.Configuration.SourceTheGuardianAPI != nil {
		apiKey45 := r.Configuration.SourceTheGuardianAPI.APIKey.ValueString()
		endDate12 := new(string)
		if !r.Configuration.SourceTheGuardianAPI.EndDate.IsUnknown() && !r.Configuration.SourceTheGuardianAPI.EndDate.IsNull() {
			*endDate12 = r.Configuration.SourceTheGuardianAPI.EndDate.ValueString()
		} else {
			endDate12 = nil
		}
		query3 := new(string)
		if !r.Configuration.SourceTheGuardianAPI.Query.IsUnknown() && !r.Configuration.SourceTheGuardianAPI.Query.IsNull() {
			*query3 = r.Configuration.SourceTheGuardianAPI.Query.ValueString()
		} else {
			query3 = nil
		}
		section := new(string)
		if !r.Configuration.SourceTheGuardianAPI.Section.IsUnknown() && !r.Configuration.SourceTheGuardianAPI.Section.IsNull() {
			*section = r.Configuration.SourceTheGuardianAPI.Section.ValueString()
		} else {
			section = nil
		}
		sourceType159 := shared.SourceTheGuardianAPITheGuardianAPIEnum(r.Configuration.SourceTheGuardianAPI.SourceType.ValueString())
		startDate69 := r.Configuration.SourceTheGuardianAPI.StartDate.ValueString()
		tag1 := new(string)
		if !r.Configuration.SourceTheGuardianAPI.Tag.IsUnknown() && !r.Configuration.SourceTheGuardianAPI.Tag.IsNull() {
			*tag1 = r.Configuration.SourceTheGuardianAPI.Tag.ValueString()
		} else {
			tag1 = nil
		}
		sourceTheGuardianAPI = &shared.SourceTheGuardianAPI{
			APIKey:     apiKey45,
			EndDate:    endDate12,
			Query:      query3,
			Section:    section,
			SourceType: sourceType159,
			StartDate:  startDate69,
			Tag:        tag1,
		}
	}
	if sourceTheGuardianAPI != nil {
		configuration = shared.SourceConfiguration{
			SourceTheGuardianAPI: sourceTheGuardianAPI,
		}
	}
	var sourceTiktokMarketing *shared.SourceTiktokMarketing
	if r.Configuration.SourceTiktokMarketing != nil {
		var credentials29 *shared.SourceTiktokMarketingAuthenticationMethod
		var sourceTiktokMarketingAuthenticationMethodOAuth20 *shared.SourceTiktokMarketingAuthenticationMethodOAuth20
		if r.Configuration.SourceTiktokMarketing.Credentials.SourceTiktokMarketingAuthenticationMethodOAuth20 != nil {
			accessToken33 := r.Configuration.SourceTiktokMarketing.Credentials.SourceTiktokMarketingAuthenticationMethodOAuth20.AccessToken.ValueString()
			advertiserID := new(string)
			if !r.Configuration.SourceTiktokMarketing.Credentials.SourceTiktokMarketingAuthenticationMethodOAuth20.AdvertiserID.IsUnknown() && !r.Configuration.SourceTiktokMarketing.Credentials.SourceTiktokMarketingAuthenticationMethodOAuth20.AdvertiserID.IsNull() {
				*advertiserID = r.Configuration.SourceTiktokMarketing.Credentials.SourceTiktokMarketingAuthenticationMethodOAuth20.AdvertiserID.ValueString()
			} else {
				advertiserID = nil
			}
			appId2 := r.Configuration.SourceTiktokMarketing.Credentials.SourceTiktokMarketingAuthenticationMethodOAuth20.AppID.ValueString()
			authType37 := new(shared.SourceTiktokMarketingAuthenticationMethodOAuth20AuthTypeEnum)
			if !r.Configuration.SourceTiktokMarketing.Credentials.SourceTiktokMarketingAuthenticationMethodOAuth20.AuthType.IsUnknown() && !r.Configuration.SourceTiktokMarketing.Credentials.SourceTiktokMarketingAuthenticationMethodOAuth20.AuthType.IsNull() {
				*authType37 = shared.SourceTiktokMarketingAuthenticationMethodOAuth20AuthTypeEnum(r.Configuration.SourceTiktokMarketing.Credentials.SourceTiktokMarketingAuthenticationMethodOAuth20.AuthType.ValueString())
			} else {
				authType37 = nil
			}
			secret2 := r.Configuration.SourceTiktokMarketing.Credentials.SourceTiktokMarketingAuthenticationMethodOAuth20.Secret.ValueString()
			sourceTiktokMarketingAuthenticationMethodOAuth20 = &shared.SourceTiktokMarketingAuthenticationMethodOAuth20{
				AccessToken:  accessToken33,
				AdvertiserID: advertiserID,
				AppID:        appId2,
				AuthType:     authType37,
				Secret:       secret2,
			}
		}
		if sourceTiktokMarketingAuthenticationMethodOAuth20 != nil {
			credentials29 = &shared.SourceTiktokMarketingAuthenticationMethod{
				SourceTiktokMarketingAuthenticationMethodOAuth20: sourceTiktokMarketingAuthenticationMethodOAuth20,
			}
		}
		var sourceTiktokMarketingAuthenticationMethodSandboxAccessToken *shared.SourceTiktokMarketingAuthenticationMethodSandboxAccessToken
		if r.Configuration.SourceTiktokMarketing.Credentials.SourceTiktokMarketingAuthenticationMethodSandboxAccessToken != nil {
			accessToken34 := r.Configuration.SourceTiktokMarketing.Credentials.SourceTiktokMarketingAuthenticationMethodSandboxAccessToken.AccessToken.ValueString()
			advertiserId1 := r.Configuration.SourceTiktokMarketing.Credentials.SourceTiktokMarketingAuthenticationMethodSandboxAccessToken.AdvertiserID.ValueString()
			authType38 := new(shared.SourceTiktokMarketingAuthenticationMethodSandboxAccessTokenAuthTypeEnum)
			if !r.Configuration.SourceTiktokMarketing.Credentials.SourceTiktokMarketingAuthenticationMethodSandboxAccessToken.AuthType.IsUnknown() && !r.Configuration.SourceTiktokMarketing.Credentials.SourceTiktokMarketingAuthenticationMethodSandboxAccessToken.AuthType.IsNull() {
				*authType38 = shared.SourceTiktokMarketingAuthenticationMethodSandboxAccessTokenAuthTypeEnum(r.Configuration.SourceTiktokMarketing.Credentials.SourceTiktokMarketingAuthenticationMethodSandboxAccessToken.AuthType.ValueString())
			} else {
				authType38 = nil
			}
			sourceTiktokMarketingAuthenticationMethodSandboxAccessToken = &shared.SourceTiktokMarketingAuthenticationMethodSandboxAccessToken{
				AccessToken:  accessToken34,
				AdvertiserID: advertiserId1,
				AuthType:     authType38,
			}
		}
		if sourceTiktokMarketingAuthenticationMethodSandboxAccessToken != nil {
			credentials29 = &shared.SourceTiktokMarketingAuthenticationMethod{
				SourceTiktokMarketingAuthenticationMethodSandboxAccessToken: sourceTiktokMarketingAuthenticationMethodSandboxAccessToken,
			}
		}
		endDate13 := new(customTypes.Date)
		if !r.Configuration.SourceTiktokMarketing.EndDate.IsUnknown() && !r.Configuration.SourceTiktokMarketing.EndDate.IsNull() {
			*endDate13, _ = customTypes.NewDate(r.Configuration.SourceTiktokMarketing.EndDate.ValueString())
		} else {
			endDate13 = nil
		}
		reportGranularity := new(shared.SourceTiktokMarketingReportAggregationGranularityEnum)
		if !r.Configuration.SourceTiktokMarketing.ReportGranularity.IsUnknown() && !r.Configuration.SourceTiktokMarketing.ReportGranularity.IsNull() {
			*reportGranularity = shared.SourceTiktokMarketingReportAggregationGranularityEnum(r.Configuration.SourceTiktokMarketing.ReportGranularity.ValueString())
		} else {
			reportGranularity = nil
		}
		sourceType160 := shared.SourceTiktokMarketingTiktokMarketingEnum(r.Configuration.SourceTiktokMarketing.SourceType.ValueString())
		startDate70 := new(customTypes.Date)
		if !r.Configuration.SourceTiktokMarketing.StartDate.IsUnknown() && !r.Configuration.SourceTiktokMarketing.StartDate.IsNull() {
			*startDate70, _ = customTypes.NewDate(r.Configuration.SourceTiktokMarketing.StartDate.ValueString())
		} else {
			startDate70 = nil
		}
		sourceTiktokMarketing = &shared.SourceTiktokMarketing{
			Credentials:       credentials29,
			EndDate:           endDate13,
			ReportGranularity: reportGranularity,
			SourceType:        sourceType160,
			StartDate:         startDate70,
		}
	}
	if sourceTiktokMarketing != nil {
		configuration = shared.SourceConfiguration{
			SourceTiktokMarketing: sourceTiktokMarketing,
		}
	}
	var sourceTodoist *shared.SourceTodoist
	if r.Configuration.SourceTodoist != nil {
		sourceType161 := shared.SourceTodoistTodoistEnum(r.Configuration.SourceTodoist.SourceType.ValueString())
		token5 := r.Configuration.SourceTodoist.Token.ValueString()
		sourceTodoist = &shared.SourceTodoist{
			SourceType: sourceType161,
			Token:      token5,
		}
	}
	if sourceTodoist != nil {
		configuration = shared.SourceConfiguration{
			SourceTodoist: sourceTodoist,
		}
	}
	var sourceTrello *shared.SourceTrello
	if r.Configuration.SourceTrello != nil {
		boardIds := make([]string, 0)
		for _, boardIdsItem := range r.Configuration.SourceTrello.BoardIds {
			boardIds = append(boardIds, boardIdsItem.ValueString())
		}
		key1 := r.Configuration.SourceTrello.Key.ValueString()
		sourceType162 := shared.SourceTrelloTrelloEnum(r.Configuration.SourceTrello.SourceType.ValueString())
		startDate71, _ := time.Parse(time.RFC3339Nano, r.Configuration.SourceTrello.StartDate.ValueString())
		token6 := r.Configuration.SourceTrello.Token.ValueString()
		sourceTrello = &shared.SourceTrello{
			BoardIds:   boardIds,
			Key:        key1,
			SourceType: sourceType162,
			StartDate:  startDate71,
			Token:      token6,
		}
	}
	if sourceTrello != nil {
		configuration = shared.SourceConfiguration{
			SourceTrello: sourceTrello,
		}
	}
	var sourceTrustpilot *shared.SourceTrustpilot
	if r.Configuration.SourceTrustpilot != nil {
		businessUnits := make([]string, 0)
		for _, businessUnitsItem := range r.Configuration.SourceTrustpilot.BusinessUnits {
			businessUnits = append(businessUnits, businessUnitsItem.ValueString())
		}
		var credentials30 shared.SourceTrustpilotAuthorizationMethod
		var sourceTrustpilotAuthorizationMethodOAuth20 *shared.SourceTrustpilotAuthorizationMethodOAuth20
		if r.Configuration.SourceTrustpilot.Credentials.SourceTrustpilotAuthorizationMethodOAuth20 != nil {
			accessToken35 := r.Configuration.SourceTrustpilot.Credentials.SourceTrustpilotAuthorizationMethodOAuth20.AccessToken.ValueString()
			authType39 := new(shared.SourceTrustpilotAuthorizationMethodOAuth20AuthTypeEnum)
			if !r.Configuration.SourceTrustpilot.Credentials.SourceTrustpilotAuthorizationMethodOAuth20.AuthType.IsUnknown() && !r.Configuration.SourceTrustpilot.Credentials.SourceTrustpilotAuthorizationMethodOAuth20.AuthType.IsNull() {
				*authType39 = shared.SourceTrustpilotAuthorizationMethodOAuth20AuthTypeEnum(r.Configuration.SourceTrustpilot.Credentials.SourceTrustpilotAuthorizationMethodOAuth20.AuthType.ValueString())
			} else {
				authType39 = nil
			}
			clientId38 := r.Configuration.SourceTrustpilot.Credentials.SourceTrustpilotAuthorizationMethodOAuth20.ClientID.ValueString()
			clientSecret38 := r.Configuration.SourceTrustpilot.Credentials.SourceTrustpilotAuthorizationMethodOAuth20.ClientSecret.ValueString()
			refreshToken29 := r.Configuration.SourceTrustpilot.Credentials.SourceTrustpilotAuthorizationMethodOAuth20.RefreshToken.ValueString()
			tokenExpiryDate4, _ := time.Parse(time.RFC3339Nano, r.Configuration.SourceTrustpilot.Credentials.SourceTrustpilotAuthorizationMethodOAuth20.TokenExpiryDate.ValueString())
			sourceTrustpilotAuthorizationMethodOAuth20 = &shared.SourceTrustpilotAuthorizationMethodOAuth20{
				AccessToken:     accessToken35,
				AuthType:        authType39,
				ClientID:        clientId38,
				ClientSecret:    clientSecret38,
				RefreshToken:    refreshToken29,
				TokenExpiryDate: tokenExpiryDate4,
			}
		}
		if sourceTrustpilotAuthorizationMethodOAuth20 != nil {
			credentials30 = shared.SourceTrustpilotAuthorizationMethod{
				SourceTrustpilotAuthorizationMethodOAuth20: sourceTrustpilotAuthorizationMethodOAuth20,
			}
		}
		var sourceTrustpilotAuthorizationMethodAPIKey *shared.SourceTrustpilotAuthorizationMethodAPIKey
		if r.Configuration.SourceTrustpilot.Credentials.SourceTrustpilotAuthorizationMethodAPIKey != nil {
			authType40 := new(shared.SourceTrustpilotAuthorizationMethodAPIKeyAuthTypeEnum)
			if !r.Configuration.SourceTrustpilot.Credentials.SourceTrustpilotAuthorizationMethodAPIKey.AuthType.IsUnknown() && !r.Configuration.SourceTrustpilot.Credentials.SourceTrustpilotAuthorizationMethodAPIKey.AuthType.IsNull() {
				*authType40 = shared.SourceTrustpilotAuthorizationMethodAPIKeyAuthTypeEnum(r.Configuration.SourceTrustpilot.Credentials.SourceTrustpilotAuthorizationMethodAPIKey.AuthType.ValueString())
			} else {
				authType40 = nil
			}
			clientId39 := r.Configuration.SourceTrustpilot.Credentials.SourceTrustpilotAuthorizationMethodAPIKey.ClientID.ValueString()
			sourceTrustpilotAuthorizationMethodAPIKey = &shared.SourceTrustpilotAuthorizationMethodAPIKey{
				AuthType: authType40,
				ClientID: clientId39,
			}
		}
		if sourceTrustpilotAuthorizationMethodAPIKey != nil {
			credentials30 = shared.SourceTrustpilotAuthorizationMethod{
				SourceTrustpilotAuthorizationMethodAPIKey: sourceTrustpilotAuthorizationMethodAPIKey,
			}
		}
		sourceType163 := shared.SourceTrustpilotTrustpilotEnum(r.Configuration.SourceTrustpilot.SourceType.ValueString())
		startDate72 := r.Configuration.SourceTrustpilot.StartDate.ValueString()
		sourceTrustpilot = &shared.SourceTrustpilot{
			BusinessUnits: businessUnits,
			Credentials:   credentials30,
			SourceType:    sourceType163,
			StartDate:     startDate72,
		}
	}
	if sourceTrustpilot != nil {
		configuration = shared.SourceConfiguration{
			SourceTrustpilot: sourceTrustpilot,
		}
	}
	var sourceTvmazeSchedule *shared.SourceTvmazeSchedule
	if r.Configuration.SourceTvmazeSchedule != nil {
		domesticScheduleCountryCode := r.Configuration.SourceTvmazeSchedule.DomesticScheduleCountryCode.ValueString()
		endDate14 := new(string)
		if !r.Configuration.SourceTvmazeSchedule.EndDate.IsUnknown() && !r.Configuration.SourceTvmazeSchedule.EndDate.IsNull() {
			*endDate14 = r.Configuration.SourceTvmazeSchedule.EndDate.ValueString()
		} else {
			endDate14 = nil
		}
		sourceType164 := shared.SourceTvmazeScheduleTvmazeScheduleEnum(r.Configuration.SourceTvmazeSchedule.SourceType.ValueString())
		startDate73 := r.Configuration.SourceTvmazeSchedule.StartDate.ValueString()
		webScheduleCountryCode := new(string)
		if !r.Configuration.SourceTvmazeSchedule.WebScheduleCountryCode.IsUnknown() && !r.Configuration.SourceTvmazeSchedule.WebScheduleCountryCode.IsNull() {
			*webScheduleCountryCode = r.Configuration.SourceTvmazeSchedule.WebScheduleCountryCode.ValueString()
		} else {
			webScheduleCountryCode = nil
		}
		sourceTvmazeSchedule = &shared.SourceTvmazeSchedule{
			DomesticScheduleCountryCode: domesticScheduleCountryCode,
			EndDate:                     endDate14,
			SourceType:                  sourceType164,
			StartDate:                   startDate73,
			WebScheduleCountryCode:      webScheduleCountryCode,
		}
	}
	if sourceTvmazeSchedule != nil {
		configuration = shared.SourceConfiguration{
			SourceTvmazeSchedule: sourceTvmazeSchedule,
		}
	}
	var sourceTwilio *shared.SourceTwilio
	if r.Configuration.SourceTwilio != nil {
		accountSid := r.Configuration.SourceTwilio.AccountSid.ValueString()
		authToken2 := r.Configuration.SourceTwilio.AuthToken.ValueString()
		lookbackWindow1 := new(int64)
		if !r.Configuration.SourceTwilio.LookbackWindow.IsUnknown() && !r.Configuration.SourceTwilio.LookbackWindow.IsNull() {
			*lookbackWindow1 = r.Configuration.SourceTwilio.LookbackWindow.ValueInt64()
		} else {
			lookbackWindow1 = nil
		}
		sourceType165 := shared.SourceTwilioTwilioEnum(r.Configuration.SourceTwilio.SourceType.ValueString())
		startDate74, _ := time.Parse(time.RFC3339Nano, r.Configuration.SourceTwilio.StartDate.ValueString())
		sourceTwilio = &shared.SourceTwilio{
			AccountSid:     accountSid,
			AuthToken:      authToken2,
			LookbackWindow: lookbackWindow1,
			SourceType:     sourceType165,
			StartDate:      startDate74,
		}
	}
	if sourceTwilio != nil {
		configuration = shared.SourceConfiguration{
			SourceTwilio: sourceTwilio,
		}
	}
	var sourceTwilioTaskrouter *shared.SourceTwilioTaskrouter
	if r.Configuration.SourceTwilioTaskrouter != nil {
		accountSid1 := r.Configuration.SourceTwilioTaskrouter.AccountSid.ValueString()
		authToken3 := r.Configuration.SourceTwilioTaskrouter.AuthToken.ValueString()
		sourceType166 := shared.SourceTwilioTaskrouterTwilioTaskrouterEnum(r.Configuration.SourceTwilioTaskrouter.SourceType.ValueString())
		sourceTwilioTaskrouter = &shared.SourceTwilioTaskrouter{
			AccountSid: accountSid1,
			AuthToken:  authToken3,
			SourceType: sourceType166,
		}
	}
	if sourceTwilioTaskrouter != nil {
		configuration = shared.SourceConfiguration{
			SourceTwilioTaskrouter: sourceTwilioTaskrouter,
		}
	}
	var sourceTwitter *shared.SourceTwitter
	if r.Configuration.SourceTwitter != nil {
		apiKey46 := r.Configuration.SourceTwitter.APIKey.ValueString()
		endDate15 := new(time.Time)
		if !r.Configuration.SourceTwitter.EndDate.IsUnknown() && !r.Configuration.SourceTwitter.EndDate.IsNull() {
			*endDate15, _ = time.Parse(time.RFC3339Nano, r.Configuration.SourceTwitter.EndDate.ValueString())
		} else {
			endDate15 = nil
		}
		query4 := r.Configuration.SourceTwitter.Query.ValueString()
		sourceType167 := shared.SourceTwitterTwitterEnum(r.Configuration.SourceTwitter.SourceType.ValueString())
		startDate75 := new(time.Time)
		if !r.Configuration.SourceTwitter.StartDate.IsUnknown() && !r.Configuration.SourceTwitter.StartDate.IsNull() {
			*startDate75, _ = time.Parse(time.RFC3339Nano, r.Configuration.SourceTwitter.StartDate.ValueString())
		} else {
			startDate75 = nil
		}
		sourceTwitter = &shared.SourceTwitter{
			APIKey:     apiKey46,
			EndDate:    endDate15,
			Query:      query4,
			SourceType: sourceType167,
			StartDate:  startDate75,
		}
	}
	if sourceTwitter != nil {
		configuration = shared.SourceConfiguration{
			SourceTwitter: sourceTwitter,
		}
	}
	var sourceTypeform *shared.SourceTypeform
	if r.Configuration.SourceTypeform != nil {
		formIds := make([]string, 0)
		for _, formIdsItem := range r.Configuration.SourceTypeform.FormIds {
			formIds = append(formIds, formIdsItem.ValueString())
		}
		sourceType168 := shared.SourceTypeformTypeformEnum(r.Configuration.SourceTypeform.SourceType.ValueString())
		startDate76, _ := time.Parse(time.RFC3339Nano, r.Configuration.SourceTypeform.StartDate.ValueString())
		token7 := r.Configuration.SourceTypeform.Token.ValueString()
		sourceTypeform = &shared.SourceTypeform{
			FormIds:    formIds,
			SourceType: sourceType168,
			StartDate:  startDate76,
			Token:      token7,
		}
	}
	if sourceTypeform != nil {
		configuration = shared.SourceConfiguration{
			SourceTypeform: sourceTypeform,
		}
	}
	var sourceUsCensus *shared.SourceUsCensus
	if r.Configuration.SourceUsCensus != nil {
		apiKey47 := r.Configuration.SourceUsCensus.APIKey.ValueString()
		queryParams := new(string)
		if !r.Configuration.SourceUsCensus.QueryParams.IsUnknown() && !r.Configuration.SourceUsCensus.QueryParams.IsNull() {
			*queryParams = r.Configuration.SourceUsCensus.QueryParams.ValueString()
		} else {
			queryParams = nil
		}
		queryPath := r.Configuration.SourceUsCensus.QueryPath.ValueString()
		sourceType169 := shared.SourceUsCensusUsCensusEnum(r.Configuration.SourceUsCensus.SourceType.ValueString())
		sourceUsCensus = &shared.SourceUsCensus{
			APIKey:      apiKey47,
			QueryParams: queryParams,
			QueryPath:   queryPath,
			SourceType:  sourceType169,
		}
	}
	if sourceUsCensus != nil {
		configuration = shared.SourceConfiguration{
			SourceUsCensus: sourceUsCensus,
		}
	}
	var sourceVantage *shared.SourceVantage
	if r.Configuration.SourceVantage != nil {
		accessToken36 := r.Configuration.SourceVantage.AccessToken.ValueString()
		sourceType170 := shared.SourceVantageVantageEnum(r.Configuration.SourceVantage.SourceType.ValueString())
		sourceVantage = &shared.SourceVantage{
			AccessToken: accessToken36,
			SourceType:  sourceType170,
		}
	}
	if sourceVantage != nil {
		configuration = shared.SourceConfiguration{
			SourceVantage: sourceVantage,
		}
	}
	var sourceWebflow *shared.SourceWebflow
	if r.Configuration.SourceWebflow != nil {
		apiKey48 := r.Configuration.SourceWebflow.APIKey.ValueString()
		siteID := r.Configuration.SourceWebflow.SiteID.ValueString()
		sourceType171 := shared.SourceWebflowWebflowEnum(r.Configuration.SourceWebflow.SourceType.ValueString())
		sourceWebflow = &shared.SourceWebflow{
			APIKey:     apiKey48,
			SiteID:     siteID,
			SourceType: sourceType171,
		}
	}
	if sourceWebflow != nil {
		configuration = shared.SourceConfiguration{
			SourceWebflow: sourceWebflow,
		}
	}
	var sourceWhiskyHunter *shared.SourceWhiskyHunter
	if r.Configuration.SourceWhiskyHunter != nil {
		sourceType172 := shared.SourceWhiskyHunterWhiskyHunterEnum(r.Configuration.SourceWhiskyHunter.SourceType.ValueString())
		sourceWhiskyHunter = &shared.SourceWhiskyHunter{
			SourceType: sourceType172,
		}
	}
	if sourceWhiskyHunter != nil {
		configuration = shared.SourceConfiguration{
			SourceWhiskyHunter: sourceWhiskyHunter,
		}
	}
	var sourceWikipediaPageviews *shared.SourceWikipediaPageviews
	if r.Configuration.SourceWikipediaPageviews != nil {
		access := r.Configuration.SourceWikipediaPageviews.Access.ValueString()
		agent := r.Configuration.SourceWikipediaPageviews.Agent.ValueString()
		article := r.Configuration.SourceWikipediaPageviews.Article.ValueString()
		country1 := r.Configuration.SourceWikipediaPageviews.Country.ValueString()
		end := r.Configuration.SourceWikipediaPageviews.End.ValueString()
		project1 := r.Configuration.SourceWikipediaPageviews.Project.ValueString()
		sourceType173 := shared.SourceWikipediaPageviewsWikipediaPageviewsEnum(r.Configuration.SourceWikipediaPageviews.SourceType.ValueString())
		start := r.Configuration.SourceWikipediaPageviews.Start.ValueString()
		sourceWikipediaPageviews = &shared.SourceWikipediaPageviews{
			Access:     access,
			Agent:      agent,
			Article:    article,
			Country:    country1,
			End:        end,
			Project:    project1,
			SourceType: sourceType173,
			Start:      start,
		}
	}
	if sourceWikipediaPageviews != nil {
		configuration = shared.SourceConfiguration{
			SourceWikipediaPageviews: sourceWikipediaPageviews,
		}
	}
	var sourceWoocommerce *shared.SourceWoocommerce
	if r.Configuration.SourceWoocommerce != nil {
		apiKey49 := r.Configuration.SourceWoocommerce.APIKey.ValueString()
		apiSecret1 := r.Configuration.SourceWoocommerce.APISecret.ValueString()
		shop1 := r.Configuration.SourceWoocommerce.Shop.ValueString()
		sourceType174 := shared.SourceWoocommerceWoocommerceEnum(r.Configuration.SourceWoocommerce.SourceType.ValueString())
		startDate77, _ := customTypes.NewDate(r.Configuration.SourceWoocommerce.StartDate.ValueString())
		sourceWoocommerce = &shared.SourceWoocommerce{
			APIKey:     apiKey49,
			APISecret:  apiSecret1,
			Shop:       shop1,
			SourceType: sourceType174,
			StartDate:  startDate77,
		}
	}
	if sourceWoocommerce != nil {
		configuration = shared.SourceConfiguration{
			SourceWoocommerce: sourceWoocommerce,
		}
	}
	var sourceXero *shared.SourceXero
	if r.Configuration.SourceXero != nil {
		accessToken37 := r.Configuration.SourceXero.Authentication.AccessToken.ValueString()
		clientId40 := r.Configuration.SourceXero.Authentication.ClientID.ValueString()
		clientSecret39 := r.Configuration.SourceXero.Authentication.ClientSecret.ValueString()
		refreshToken30 := r.Configuration.SourceXero.Authentication.RefreshToken.ValueString()
		tokenExpiryDate5 := r.Configuration.SourceXero.Authentication.TokenExpiryDate.ValueString()
		authentication := shared.SourceXeroAuthenticateViaXeroOAuth{
			AccessToken:     accessToken37,
			ClientID:        clientId40,
			ClientSecret:    clientSecret39,
			RefreshToken:    refreshToken30,
			TokenExpiryDate: tokenExpiryDate5,
		}
		sourceType175 := shared.SourceXeroXeroEnum(r.Configuration.SourceXero.SourceType.ValueString())
		startDate78, _ := time.Parse(time.RFC3339Nano, r.Configuration.SourceXero.StartDate.ValueString())
		tenantId3 := r.Configuration.SourceXero.TenantID.ValueString()
		sourceXero = &shared.SourceXero{
			Authentication: authentication,
			SourceType:     sourceType175,
			StartDate:      startDate78,
			TenantID:       tenantId3,
		}
	}
	if sourceXero != nil {
		configuration = shared.SourceConfiguration{
			SourceXero: sourceXero,
		}
	}
	var sourceXkcd *shared.SourceXkcd
	if r.Configuration.SourceXkcd != nil {
		sourceType176 := shared.SourceXkcdXkcdEnum(r.Configuration.SourceXkcd.SourceType.ValueString())
		sourceXkcd = &shared.SourceXkcd{
			SourceType: sourceType176,
		}
	}
	if sourceXkcd != nil {
		configuration = shared.SourceConfiguration{
			SourceXkcd: sourceXkcd,
		}
	}
	var sourceYandexMetrica *shared.SourceYandexMetrica
	if r.Configuration.SourceYandexMetrica != nil {
		authToken4 := r.Configuration.SourceYandexMetrica.AuthToken.ValueString()
		counterID := r.Configuration.SourceYandexMetrica.CounterID.ValueString()
		endDate16 := new(customTypes.Date)
		if !r.Configuration.SourceYandexMetrica.EndDate.IsUnknown() && !r.Configuration.SourceYandexMetrica.EndDate.IsNull() {
			*endDate16, _ = customTypes.NewDate(r.Configuration.SourceYandexMetrica.EndDate.ValueString())
		} else {
			endDate16 = nil
		}
		sourceType177 := shared.SourceYandexMetricaYandexMetricaEnum(r.Configuration.SourceYandexMetrica.SourceType.ValueString())
		startDate79, _ := customTypes.NewDate(r.Configuration.SourceYandexMetrica.StartDate.ValueString())
		sourceYandexMetrica = &shared.SourceYandexMetrica{
			AuthToken:  authToken4,
			CounterID:  counterID,
			EndDate:    endDate16,
			SourceType: sourceType177,
			StartDate:  startDate79,
		}
	}
	if sourceYandexMetrica != nil {
		configuration = shared.SourceConfiguration{
			SourceYandexMetrica: sourceYandexMetrica,
		}
	}
	var sourceYounium *shared.SourceYounium
	if r.Configuration.SourceYounium != nil {
		legalEntity := r.Configuration.SourceYounium.LegalEntity.ValueString()
		password18 := r.Configuration.SourceYounium.Password.ValueString()
		playground1 := new(bool)
		if !r.Configuration.SourceYounium.Playground.IsUnknown() && !r.Configuration.SourceYounium.Playground.IsNull() {
			*playground1 = r.Configuration.SourceYounium.Playground.ValueBool()
		} else {
			playground1 = nil
		}
		sourceType178 := shared.SourceYouniumYouniumEnum(r.Configuration.SourceYounium.SourceType.ValueString())
		username14 := r.Configuration.SourceYounium.Username.ValueString()
		sourceYounium = &shared.SourceYounium{
			LegalEntity: legalEntity,
			Password:    password18,
			Playground:  playground1,
			SourceType:  sourceType178,
			Username:    username14,
		}
	}
	if sourceYounium != nil {
		configuration = shared.SourceConfiguration{
			SourceYounium: sourceYounium,
		}
	}
	var sourceYoutubeAnalytics *shared.SourceYoutubeAnalytics
	if r.Configuration.SourceYoutubeAnalytics != nil {
		clientId41 := r.Configuration.SourceYoutubeAnalytics.Credentials.ClientID.ValueString()
		clientSecret40 := r.Configuration.SourceYoutubeAnalytics.Credentials.ClientSecret.ValueString()
		refreshToken31 := r.Configuration.SourceYoutubeAnalytics.Credentials.RefreshToken.ValueString()
		credentials31 := shared.SourceYoutubeAnalyticsAuthenticateViaOAuth20{
			ClientID:     clientId41,
			ClientSecret: clientSecret40,
			RefreshToken: refreshToken31,
		}
		sourceType179 := shared.SourceYoutubeAnalyticsYoutubeAnalyticsEnum(r.Configuration.SourceYoutubeAnalytics.SourceType.ValueString())
		sourceYoutubeAnalytics = &shared.SourceYoutubeAnalytics{
			Credentials: credentials31,
			SourceType:  sourceType179,
		}
	}
	if sourceYoutubeAnalytics != nil {
		configuration = shared.SourceConfiguration{
			SourceYoutubeAnalytics: sourceYoutubeAnalytics,
		}
	}
	var sourceZendeskChat *shared.SourceZendeskChat
	if r.Configuration.SourceZendeskChat != nil {
		var credentials32 *shared.SourceZendeskChatAuthorizationMethod
		var sourceZendeskChatAuthorizationMethodOAuth20 *shared.SourceZendeskChatAuthorizationMethodOAuth20
		if r.Configuration.SourceZendeskChat.Credentials.SourceZendeskChatAuthorizationMethodOAuth20 != nil {
			accessToken38 := new(string)
			if !r.Configuration.SourceZendeskChat.Credentials.SourceZendeskChatAuthorizationMethodOAuth20.AccessToken.IsUnknown() && !r.Configuration.SourceZendeskChat.Credentials.SourceZendeskChatAuthorizationMethodOAuth20.AccessToken.IsNull() {
				*accessToken38 = r.Configuration.SourceZendeskChat.Credentials.SourceZendeskChatAuthorizationMethodOAuth20.AccessToken.ValueString()
			} else {
				accessToken38 = nil
			}
			clientId42 := new(string)
			if !r.Configuration.SourceZendeskChat.Credentials.SourceZendeskChatAuthorizationMethodOAuth20.ClientID.IsUnknown() && !r.Configuration.SourceZendeskChat.Credentials.SourceZendeskChatAuthorizationMethodOAuth20.ClientID.IsNull() {
				*clientId42 = r.Configuration.SourceZendeskChat.Credentials.SourceZendeskChatAuthorizationMethodOAuth20.ClientID.ValueString()
			} else {
				clientId42 = nil
			}
			clientSecret41 := new(string)
			if !r.Configuration.SourceZendeskChat.Credentials.SourceZendeskChatAuthorizationMethodOAuth20.ClientSecret.IsUnknown() && !r.Configuration.SourceZendeskChat.Credentials.SourceZendeskChatAuthorizationMethodOAuth20.ClientSecret.IsNull() {
				*clientSecret41 = r.Configuration.SourceZendeskChat.Credentials.SourceZendeskChatAuthorizationMethodOAuth20.ClientSecret.ValueString()
			} else {
				clientSecret41 = nil
			}
			credentials33 := shared.SourceZendeskChatAuthorizationMethodOAuth20CredentialsEnum(r.Configuration.SourceZendeskChat.Credentials.SourceZendeskChatAuthorizationMethodOAuth20.Credentials.ValueString())
			refreshToken32 := new(string)
			if !r.Configuration.SourceZendeskChat.Credentials.SourceZendeskChatAuthorizationMethodOAuth20.RefreshToken.IsUnknown() && !r.Configuration.SourceZendeskChat.Credentials.SourceZendeskChatAuthorizationMethodOAuth20.RefreshToken.IsNull() {
				*refreshToken32 = r.Configuration.SourceZendeskChat.Credentials.SourceZendeskChatAuthorizationMethodOAuth20.RefreshToken.ValueString()
			} else {
				refreshToken32 = nil
			}
			sourceZendeskChatAuthorizationMethodOAuth20 = &shared.SourceZendeskChatAuthorizationMethodOAuth20{
				AccessToken:  accessToken38,
				ClientID:     clientId42,
				ClientSecret: clientSecret41,
				Credentials:  credentials33,
				RefreshToken: refreshToken32,
			}
		}
		if sourceZendeskChatAuthorizationMethodOAuth20 != nil {
			credentials32 = &shared.SourceZendeskChatAuthorizationMethod{
				SourceZendeskChatAuthorizationMethodOAuth20: sourceZendeskChatAuthorizationMethodOAuth20,
			}
		}
		var sourceZendeskChatAuthorizationMethodAccessToken *shared.SourceZendeskChatAuthorizationMethodAccessToken
		if r.Configuration.SourceZendeskChat.Credentials.SourceZendeskChatAuthorizationMethodAccessToken != nil {
			accessToken39 := r.Configuration.SourceZendeskChat.Credentials.SourceZendeskChatAuthorizationMethodAccessToken.AccessToken.ValueString()
			credentials34 := shared.SourceZendeskChatAuthorizationMethodAccessTokenCredentialsEnum(r.Configuration.SourceZendeskChat.Credentials.SourceZendeskChatAuthorizationMethodAccessToken.Credentials.ValueString())
			sourceZendeskChatAuthorizationMethodAccessToken = &shared.SourceZendeskChatAuthorizationMethodAccessToken{
				AccessToken: accessToken39,
				Credentials: credentials34,
			}
		}
		if sourceZendeskChatAuthorizationMethodAccessToken != nil {
			credentials32 = &shared.SourceZendeskChatAuthorizationMethod{
				SourceZendeskChatAuthorizationMethodAccessToken: sourceZendeskChatAuthorizationMethodAccessToken,
			}
		}
		sourceType180 := shared.SourceZendeskChatZendeskChatEnum(r.Configuration.SourceZendeskChat.SourceType.ValueString())
		startDate80, _ := time.Parse(time.RFC3339Nano, r.Configuration.SourceZendeskChat.StartDate.ValueString())
		subdomain2 := new(string)
		if !r.Configuration.SourceZendeskChat.Subdomain.IsUnknown() && !r.Configuration.SourceZendeskChat.Subdomain.IsNull() {
			*subdomain2 = r.Configuration.SourceZendeskChat.Subdomain.ValueString()
		} else {
			subdomain2 = nil
		}
		sourceZendeskChat = &shared.SourceZendeskChat{
			Credentials: credentials32,
			SourceType:  sourceType180,
			StartDate:   startDate80,
			Subdomain:   subdomain2,
		}
	}
	if sourceZendeskChat != nil {
		configuration = shared.SourceConfiguration{
			SourceZendeskChat: sourceZendeskChat,
		}
	}
	var sourceZendeskSunshine *shared.SourceZendeskSunshine
	if r.Configuration.SourceZendeskSunshine != nil {
		var credentials35 *shared.SourceZendeskSunshineAuthorizationMethod
		var sourceZendeskSunshineAuthorizationMethodOAuth20 *shared.SourceZendeskSunshineAuthorizationMethodOAuth20
		if r.Configuration.SourceZendeskSunshine.Credentials.SourceZendeskSunshineAuthorizationMethodOAuth20 != nil {
			accessToken40 := r.Configuration.SourceZendeskSunshine.Credentials.SourceZendeskSunshineAuthorizationMethodOAuth20.AccessToken.ValueString()
			authMethod14 := shared.SourceZendeskSunshineAuthorizationMethodOAuth20AuthMethodEnum(r.Configuration.SourceZendeskSunshine.Credentials.SourceZendeskSunshineAuthorizationMethodOAuth20.AuthMethod.ValueString())
			clientId43 := r.Configuration.SourceZendeskSunshine.Credentials.SourceZendeskSunshineAuthorizationMethodOAuth20.ClientID.ValueString()
			clientSecret42 := r.Configuration.SourceZendeskSunshine.Credentials.SourceZendeskSunshineAuthorizationMethodOAuth20.ClientSecret.ValueString()
			sourceZendeskSunshineAuthorizationMethodOAuth20 = &shared.SourceZendeskSunshineAuthorizationMethodOAuth20{
				AccessToken:  accessToken40,
				AuthMethod:   authMethod14,
				ClientID:     clientId43,
				ClientSecret: clientSecret42,
			}
		}
		if sourceZendeskSunshineAuthorizationMethodOAuth20 != nil {
			credentials35 = &shared.SourceZendeskSunshineAuthorizationMethod{
				SourceZendeskSunshineAuthorizationMethodOAuth20: sourceZendeskSunshineAuthorizationMethodOAuth20,
			}
		}
		var sourceZendeskSunshineAuthorizationMethodAPIToken *shared.SourceZendeskSunshineAuthorizationMethodAPIToken
		if r.Configuration.SourceZendeskSunshine.Credentials.SourceZendeskSunshineAuthorizationMethodAPIToken != nil {
			apiToken13 := r.Configuration.SourceZendeskSunshine.Credentials.SourceZendeskSunshineAuthorizationMethodAPIToken.APIToken.ValueString()
			authMethod15 := shared.SourceZendeskSunshineAuthorizationMethodAPITokenAuthMethodEnum(r.Configuration.SourceZendeskSunshine.Credentials.SourceZendeskSunshineAuthorizationMethodAPIToken.AuthMethod.ValueString())
			email6 := r.Configuration.SourceZendeskSunshine.Credentials.SourceZendeskSunshineAuthorizationMethodAPIToken.Email.ValueString()
			sourceZendeskSunshineAuthorizationMethodAPIToken = &shared.SourceZendeskSunshineAuthorizationMethodAPIToken{
				APIToken:   apiToken13,
				AuthMethod: authMethod15,
				Email:      email6,
			}
		}
		if sourceZendeskSunshineAuthorizationMethodAPIToken != nil {
			credentials35 = &shared.SourceZendeskSunshineAuthorizationMethod{
				SourceZendeskSunshineAuthorizationMethodAPIToken: sourceZendeskSunshineAuthorizationMethodAPIToken,
			}
		}
		sourceType181 := shared.SourceZendeskSunshineZendeskSunshineEnum(r.Configuration.SourceZendeskSunshine.SourceType.ValueString())
		startDate81 := r.Configuration.SourceZendeskSunshine.StartDate.ValueString()
		subdomain3 := r.Configuration.SourceZendeskSunshine.Subdomain.ValueString()
		sourceZendeskSunshine = &shared.SourceZendeskSunshine{
			Credentials: credentials35,
			SourceType:  sourceType181,
			StartDate:   startDate81,
			Subdomain:   subdomain3,
		}
	}
	if sourceZendeskSunshine != nil {
		configuration = shared.SourceConfiguration{
			SourceZendeskSunshine: sourceZendeskSunshine,
		}
	}
	var sourceZendeskSupport *shared.SourceZendeskSupport
	if r.Configuration.SourceZendeskSupport != nil {
		var credentials36 *shared.SourceZendeskSupportAuthentication
		var sourceZendeskSupportAuthenticationOAuth20 *shared.SourceZendeskSupportAuthenticationOAuth20
		if r.Configuration.SourceZendeskSupport.Credentials.SourceZendeskSupportAuthenticationOAuth20 != nil {
			accessToken41 := r.Configuration.SourceZendeskSupport.Credentials.SourceZendeskSupportAuthenticationOAuth20.AccessToken.ValueString()
			credentials37 := new(shared.SourceZendeskSupportAuthenticationOAuth20CredentialsEnum)
			if !r.Configuration.SourceZendeskSupport.Credentials.SourceZendeskSupportAuthenticationOAuth20.Credentials.IsUnknown() && !r.Configuration.SourceZendeskSupport.Credentials.SourceZendeskSupportAuthenticationOAuth20.Credentials.IsNull() {
				*credentials37 = shared.SourceZendeskSupportAuthenticationOAuth20CredentialsEnum(r.Configuration.SourceZendeskSupport.Credentials.SourceZendeskSupportAuthenticationOAuth20.Credentials.ValueString())
			} else {
				credentials37 = nil
			}
			sourceZendeskSupportAuthenticationOAuth20 = &shared.SourceZendeskSupportAuthenticationOAuth20{
				AccessToken: accessToken41,
				Credentials: credentials37,
			}
		}
		if sourceZendeskSupportAuthenticationOAuth20 != nil {
			credentials36 = &shared.SourceZendeskSupportAuthentication{
				SourceZendeskSupportAuthenticationOAuth20: sourceZendeskSupportAuthenticationOAuth20,
			}
		}
		var sourceZendeskSupportAuthenticationAPIToken *shared.SourceZendeskSupportAuthenticationAPIToken
		if r.Configuration.SourceZendeskSupport.Credentials.SourceZendeskSupportAuthenticationAPIToken != nil {
			apiToken14 := r.Configuration.SourceZendeskSupport.Credentials.SourceZendeskSupportAuthenticationAPIToken.APIToken.ValueString()
			credentials38 := new(shared.SourceZendeskSupportAuthenticationAPITokenCredentialsEnum)
			if !r.Configuration.SourceZendeskSupport.Credentials.SourceZendeskSupportAuthenticationAPIToken.Credentials.IsUnknown() && !r.Configuration.SourceZendeskSupport.Credentials.SourceZendeskSupportAuthenticationAPIToken.Credentials.IsNull() {
				*credentials38 = shared.SourceZendeskSupportAuthenticationAPITokenCredentialsEnum(r.Configuration.SourceZendeskSupport.Credentials.SourceZendeskSupportAuthenticationAPIToken.Credentials.ValueString())
			} else {
				credentials38 = nil
			}
			email7 := r.Configuration.SourceZendeskSupport.Credentials.SourceZendeskSupportAuthenticationAPIToken.Email.ValueString()
			sourceZendeskSupportAuthenticationAPIToken = &shared.SourceZendeskSupportAuthenticationAPIToken{
				APIToken:    apiToken14,
				Credentials: credentials38,
				Email:       email7,
			}
		}
		if sourceZendeskSupportAuthenticationAPIToken != nil {
			credentials36 = &shared.SourceZendeskSupportAuthentication{
				SourceZendeskSupportAuthenticationAPIToken: sourceZendeskSupportAuthenticationAPIToken,
			}
		}
		ignorePagination := new(bool)
		if !r.Configuration.SourceZendeskSupport.IgnorePagination.IsUnknown() && !r.Configuration.SourceZendeskSupport.IgnorePagination.IsNull() {
			*ignorePagination = r.Configuration.SourceZendeskSupport.IgnorePagination.ValueBool()
		} else {
			ignorePagination = nil
		}
		sourceType182 := shared.SourceZendeskSupportZendeskSupportEnum(r.Configuration.SourceZendeskSupport.SourceType.ValueString())
		startDate82, _ := time.Parse(time.RFC3339Nano, r.Configuration.SourceZendeskSupport.StartDate.ValueString())
		subdomain4 := r.Configuration.SourceZendeskSupport.Subdomain.ValueString()
		sourceZendeskSupport = &shared.SourceZendeskSupport{
			Credentials:      credentials36,
			IgnorePagination: ignorePagination,
			SourceType:       sourceType182,
			StartDate:        startDate82,
			Subdomain:        subdomain4,
		}
	}
	if sourceZendeskSupport != nil {
		configuration = shared.SourceConfiguration{
			SourceZendeskSupport: sourceZendeskSupport,
		}
	}
	var sourceZendeskTalk *shared.SourceZendeskTalk
	if r.Configuration.SourceZendeskTalk != nil {
		var credentials39 *shared.SourceZendeskTalkAuthentication
		var sourceZendeskTalkAuthenticationAPIToken *shared.SourceZendeskTalkAuthenticationAPIToken
		if r.Configuration.SourceZendeskTalk.Credentials.SourceZendeskTalkAuthenticationAPIToken != nil {
			apiToken15 := r.Configuration.SourceZendeskTalk.Credentials.SourceZendeskTalkAuthenticationAPIToken.APIToken.ValueString()
			authType41 := new(shared.SourceZendeskTalkAuthenticationAPITokenAuthTypeEnum)
			if !r.Configuration.SourceZendeskTalk.Credentials.SourceZendeskTalkAuthenticationAPIToken.AuthType.IsUnknown() && !r.Configuration.SourceZendeskTalk.Credentials.SourceZendeskTalkAuthenticationAPIToken.AuthType.IsNull() {
				*authType41 = shared.SourceZendeskTalkAuthenticationAPITokenAuthTypeEnum(r.Configuration.SourceZendeskTalk.Credentials.SourceZendeskTalkAuthenticationAPIToken.AuthType.ValueString())
			} else {
				authType41 = nil
			}
			email8 := r.Configuration.SourceZendeskTalk.Credentials.SourceZendeskTalkAuthenticationAPIToken.Email.ValueString()
			sourceZendeskTalkAuthenticationAPIToken = &shared.SourceZendeskTalkAuthenticationAPIToken{
				APIToken: apiToken15,
				AuthType: authType41,
				Email:    email8,
			}
		}
		if sourceZendeskTalkAuthenticationAPIToken != nil {
			credentials39 = &shared.SourceZendeskTalkAuthentication{
				SourceZendeskTalkAuthenticationAPIToken: sourceZendeskTalkAuthenticationAPIToken,
			}
		}
		var sourceZendeskTalkAuthenticationOAuth20 *shared.SourceZendeskTalkAuthenticationOAuth20
		if r.Configuration.SourceZendeskTalk.Credentials.SourceZendeskTalkAuthenticationOAuth20 != nil {
			accessToken42 := r.Configuration.SourceZendeskTalk.Credentials.SourceZendeskTalkAuthenticationOAuth20.AccessToken.ValueString()
			authType42 := new(shared.SourceZendeskTalkAuthenticationOAuth20AuthTypeEnum)
			if !r.Configuration.SourceZendeskTalk.Credentials.SourceZendeskTalkAuthenticationOAuth20.AuthType.IsUnknown() && !r.Configuration.SourceZendeskTalk.Credentials.SourceZendeskTalkAuthenticationOAuth20.AuthType.IsNull() {
				*authType42 = shared.SourceZendeskTalkAuthenticationOAuth20AuthTypeEnum(r.Configuration.SourceZendeskTalk.Credentials.SourceZendeskTalkAuthenticationOAuth20.AuthType.ValueString())
			} else {
				authType42 = nil
			}
			sourceZendeskTalkAuthenticationOAuth20 = &shared.SourceZendeskTalkAuthenticationOAuth20{
				AccessToken: accessToken42,
				AuthType:    authType42,
			}
		}
		if sourceZendeskTalkAuthenticationOAuth20 != nil {
			credentials39 = &shared.SourceZendeskTalkAuthentication{
				SourceZendeskTalkAuthenticationOAuth20: sourceZendeskTalkAuthenticationOAuth20,
			}
		}
		sourceType183 := shared.SourceZendeskTalkZendeskTalkEnum(r.Configuration.SourceZendeskTalk.SourceType.ValueString())
		startDate83, _ := time.Parse(time.RFC3339Nano, r.Configuration.SourceZendeskTalk.StartDate.ValueString())
		subdomain5 := r.Configuration.SourceZendeskTalk.Subdomain.ValueString()
		sourceZendeskTalk = &shared.SourceZendeskTalk{
			Credentials: credentials39,
			SourceType:  sourceType183,
			StartDate:   startDate83,
			Subdomain:   subdomain5,
		}
	}
	if sourceZendeskTalk != nil {
		configuration = shared.SourceConfiguration{
			SourceZendeskTalk: sourceZendeskTalk,
		}
	}
	var sourceZenloop *shared.SourceZenloop
	if r.Configuration.SourceZenloop != nil {
		apiToken16 := r.Configuration.SourceZenloop.APIToken.ValueString()
		dateFrom := new(string)
		if !r.Configuration.SourceZenloop.DateFrom.IsUnknown() && !r.Configuration.SourceZenloop.DateFrom.IsNull() {
			*dateFrom = r.Configuration.SourceZenloop.DateFrom.ValueString()
		} else {
			dateFrom = nil
		}
		sourceType184 := shared.SourceZenloopZenloopEnum(r.Configuration.SourceZenloop.SourceType.ValueString())
		surveyGroupID := new(string)
		if !r.Configuration.SourceZenloop.SurveyGroupID.IsUnknown() && !r.Configuration.SourceZenloop.SurveyGroupID.IsNull() {
			*surveyGroupID = r.Configuration.SourceZenloop.SurveyGroupID.ValueString()
		} else {
			surveyGroupID = nil
		}
		surveyId1 := new(string)
		if !r.Configuration.SourceZenloop.SurveyID.IsUnknown() && !r.Configuration.SourceZenloop.SurveyID.IsNull() {
			*surveyId1 = r.Configuration.SourceZenloop.SurveyID.ValueString()
		} else {
			surveyId1 = nil
		}
		sourceZenloop = &shared.SourceZenloop{
			APIToken:      apiToken16,
			DateFrom:      dateFrom,
			SourceType:    sourceType184,
			SurveyGroupID: surveyGroupID,
			SurveyID:      surveyId1,
		}
	}
	if sourceZenloop != nil {
		configuration = shared.SourceConfiguration{
			SourceZenloop: sourceZenloop,
		}
	}
	var sourceZohoCrm *shared.SourceZohoCrm
	if r.Configuration.SourceZohoCrm != nil {
		clientId44 := r.Configuration.SourceZohoCrm.ClientID.ValueString()
		clientSecret43 := r.Configuration.SourceZohoCrm.ClientSecret.ValueString()
		dcRegion := shared.SourceZohoCrmDataCenterLocationEnum(r.Configuration.SourceZohoCrm.DcRegion.ValueString())
		edition := shared.SourceZohoCRMZohoCRMEditionEnum(r.Configuration.SourceZohoCrm.Edition.ValueString())
		environment2 := shared.SourceZohoCrmEnvironmentEnum(r.Configuration.SourceZohoCrm.Environment.ValueString())
		refreshToken33 := r.Configuration.SourceZohoCrm.RefreshToken.ValueString()
		sourceType185 := shared.SourceZohoCrmZohoCrmEnum(r.Configuration.SourceZohoCrm.SourceType.ValueString())
		startDatetime2 := new(time.Time)
		if !r.Configuration.SourceZohoCrm.StartDatetime.IsUnknown() && !r.Configuration.SourceZohoCrm.StartDatetime.IsNull() {
			*startDatetime2, _ = time.Parse(time.RFC3339Nano, r.Configuration.SourceZohoCrm.StartDatetime.ValueString())
		} else {
			startDatetime2 = nil
		}
		sourceZohoCrm = &shared.SourceZohoCrm{
			ClientID:      clientId44,
			ClientSecret:  clientSecret43,
			DcRegion:      dcRegion,
			Edition:       edition,
			Environment:   environment2,
			RefreshToken:  refreshToken33,
			SourceType:    sourceType185,
			StartDatetime: startDatetime2,
		}
	}
	if sourceZohoCrm != nil {
		configuration = shared.SourceConfiguration{
			SourceZohoCrm: sourceZohoCrm,
		}
	}
	var sourceZoom *shared.SourceZoom
	if r.Configuration.SourceZoom != nil {
		jwtToken := r.Configuration.SourceZoom.JwtToken.ValueString()
		sourceType186 := shared.SourceZoomZoomEnum(r.Configuration.SourceZoom.SourceType.ValueString())
		sourceZoom = &shared.SourceZoom{
			JwtToken:   jwtToken,
			SourceType: sourceType186,
		}
	}
	if sourceZoom != nil {
		configuration = shared.SourceConfiguration{
			SourceZoom: sourceZoom,
		}
	}
	var sourceZuora *shared.SourceZuora
	if r.Configuration.SourceZuora != nil {
		clientId45 := r.Configuration.SourceZuora.ClientID.ValueString()
		clientSecret44 := r.Configuration.SourceZuora.ClientSecret.ValueString()
		isSandbox4 := new(bool)
		if !r.Configuration.SourceZuora.IsSandbox.IsUnknown() && !r.Configuration.SourceZuora.IsSandbox.IsNull() {
			*isSandbox4 = r.Configuration.SourceZuora.IsSandbox.ValueBool()
		} else {
			isSandbox4 = nil
		}
		sourceType187 := shared.SourceZuoraZuoraEnum(r.Configuration.SourceZuora.SourceType.ValueString())
		startDate84 := r.Configuration.SourceZuora.StartDate.ValueString()
		windowInDays3 := new(int64)
		if !r.Configuration.SourceZuora.WindowInDays.IsUnknown() && !r.Configuration.SourceZuora.WindowInDays.IsNull() {
			*windowInDays3 = r.Configuration.SourceZuora.WindowInDays.ValueInt64()
		} else {
			windowInDays3 = nil
		}
		sourceZuora = &shared.SourceZuora{
			ClientID:     clientId45,
			ClientSecret: clientSecret44,
			IsSandbox:    isSandbox4,
			SourceType:   sourceType187,
			StartDate:    startDate84,
			WindowInDays: windowInDays3,
		}
	}
	if sourceZuora != nil {
		configuration = shared.SourceConfiguration{
			SourceZuora: sourceZuora,
		}
	}
	name1 := r.Name.ValueString()
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceCreateRequest{
		Configuration: configuration,
		Name:          name1,
		SecretID:      secretID,
		WorkspaceID:   workspaceID,
	}
	return &out

}

func (r *SourceResourceModel) RefreshFromSDKType(resp *shared.SourceCreateRequest) {
	if resp.Configuration.SourcePokeapi != nil {
		r.Configuration.SourcePokeapi = &SourcePokeapi{}
		r.Configuration.SourcePokeapi.PokemonName = types.StringValue(resp.Configuration.SourcePokeapi.PokemonName)
		r.Configuration.SourcePokeapi.SourceType = types.StringValue(string(resp.Configuration.SourcePokeapi.SourceType))
	}
	if resp.Configuration.SourceAirtable != nil {
		r.Configuration.SourceAirtable = &SourceAirtable{}
		if resp.Configuration.SourceAirtable.Credentials == nil {
			r.Configuration.SourceAirtable.Credentials = nil
		} else {
			r.Configuration.SourceAirtable.Credentials = &SourceAirtableAuthentication{}
			if resp.Configuration.SourceAirtable.Credentials.SourceAirtableAuthenticationOAuth20 != nil {
				r.Configuration.SourceAirtable.Credentials.SourceAirtableAuthenticationOAuth20 = &SourceAirtableAuthenticationOAuth20{}
				if resp.Configuration.SourceAirtable.Credentials.SourceAirtableAuthenticationOAuth20.AccessToken != nil {
					r.Configuration.SourceAirtable.Credentials.SourceAirtableAuthenticationOAuth20.AccessToken = types.StringValue(*resp.Configuration.SourceAirtable.Credentials.SourceAirtableAuthenticationOAuth20.AccessToken)
				} else {
					r.Configuration.SourceAirtable.Credentials.SourceAirtableAuthenticationOAuth20.AccessToken = types.StringNull()
				}
				if resp.Configuration.SourceAirtable.Credentials.SourceAirtableAuthenticationOAuth20.AuthMethod != nil {
					r.Configuration.SourceAirtable.Credentials.SourceAirtableAuthenticationOAuth20.AuthMethod = types.StringValue(string(*resp.Configuration.SourceAirtable.Credentials.SourceAirtableAuthenticationOAuth20.AuthMethod))
				} else {
					r.Configuration.SourceAirtable.Credentials.SourceAirtableAuthenticationOAuth20.AuthMethod = types.StringNull()
				}
				r.Configuration.SourceAirtable.Credentials.SourceAirtableAuthenticationOAuth20.ClientID = types.StringValue(resp.Configuration.SourceAirtable.Credentials.SourceAirtableAuthenticationOAuth20.ClientID)
				r.Configuration.SourceAirtable.Credentials.SourceAirtableAuthenticationOAuth20.ClientSecret = types.StringValue(resp.Configuration.SourceAirtable.Credentials.SourceAirtableAuthenticationOAuth20.ClientSecret)
				r.Configuration.SourceAirtable.Credentials.SourceAirtableAuthenticationOAuth20.RefreshToken = types.StringValue(resp.Configuration.SourceAirtable.Credentials.SourceAirtableAuthenticationOAuth20.RefreshToken)
				if resp.Configuration.SourceAirtable.Credentials.SourceAirtableAuthenticationOAuth20.TokenExpiryDate != nil {
					r.Configuration.SourceAirtable.Credentials.SourceAirtableAuthenticationOAuth20.TokenExpiryDate = types.StringValue(resp.Configuration.SourceAirtable.Credentials.SourceAirtableAuthenticationOAuth20.TokenExpiryDate.Format(time.RFC3339))
				} else {
					r.Configuration.SourceAirtable.Credentials.SourceAirtableAuthenticationOAuth20.TokenExpiryDate = types.StringNull()
				}
			}
			if resp.Configuration.SourceAirtable.Credentials.SourceAirtableAuthenticationPersonalAccessToken != nil {
				r.Configuration.SourceAirtable.Credentials.SourceAirtableAuthenticationPersonalAccessToken = &SourceAirtableAuthenticationPersonalAccessToken{}
				r.Configuration.SourceAirtable.Credentials.SourceAirtableAuthenticationPersonalAccessToken.APIKey = types.StringValue(resp.Configuration.SourceAirtable.Credentials.SourceAirtableAuthenticationPersonalAccessToken.APIKey)
				if resp.Configuration.SourceAirtable.Credentials.SourceAirtableAuthenticationPersonalAccessToken.AuthMethod != nil {
					r.Configuration.SourceAirtable.Credentials.SourceAirtableAuthenticationPersonalAccessToken.AuthMethod = types.StringValue(string(*resp.Configuration.SourceAirtable.Credentials.SourceAirtableAuthenticationPersonalAccessToken.AuthMethod))
				} else {
					r.Configuration.SourceAirtable.Credentials.SourceAirtableAuthenticationPersonalAccessToken.AuthMethod = types.StringNull()
				}
			}
		}
		r.Configuration.SourceAirtable.SourceType = types.StringValue(string(resp.Configuration.SourceAirtable.SourceType))
	}
	if resp.Configuration.SourceAlloydb != nil {
		r.Configuration.SourceAlloydb = &SourceAlloydb{}
		r.Configuration.SourceAlloydb.Database = types.StringValue(resp.Configuration.SourceAlloydb.Database)
		r.Configuration.SourceAlloydb.Host = types.StringValue(resp.Configuration.SourceAlloydb.Host)
		if resp.Configuration.SourceAlloydb.JdbcURLParams != nil {
			r.Configuration.SourceAlloydb.JdbcURLParams = types.StringValue(*resp.Configuration.SourceAlloydb.JdbcURLParams)
		} else {
			r.Configuration.SourceAlloydb.JdbcURLParams = types.StringNull()
		}
		if resp.Configuration.SourceAlloydb.Password != nil {
			r.Configuration.SourceAlloydb.Password = types.StringValue(*resp.Configuration.SourceAlloydb.Password)
		} else {
			r.Configuration.SourceAlloydb.Password = types.StringNull()
		}
		r.Configuration.SourceAlloydb.Port = types.Int64Value(resp.Configuration.SourceAlloydb.Port)
		if resp.Configuration.SourceAlloydb.ReplicationMethod == nil {
			r.Configuration.SourceAlloydb.ReplicationMethod = nil
		} else {
			r.Configuration.SourceAlloydb.ReplicationMethod = &SourceAlloydbReplicationMethod{}
			if resp.Configuration.SourceAlloydb.ReplicationMethod.SourceAlloydbReplicationMethodStandard != nil {
				r.Configuration.SourceAlloydb.ReplicationMethod.SourceAlloydbReplicationMethodStandard = &SourceAlloydbReplicationMethodStandard{}
				r.Configuration.SourceAlloydb.ReplicationMethod.SourceAlloydbReplicationMethodStandard.Method = types.StringValue(string(resp.Configuration.SourceAlloydb.ReplicationMethod.SourceAlloydbReplicationMethodStandard.Method))
			}
			if resp.Configuration.SourceAlloydb.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC != nil {
				r.Configuration.SourceAlloydb.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC = &SourceAlloydbReplicationMethodLogicalReplicationCDC{}
				if resp.Configuration.SourceAlloydb.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC.InitialWaitingSeconds != nil {
					r.Configuration.SourceAlloydb.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC.InitialWaitingSeconds = types.Int64Value(*resp.Configuration.SourceAlloydb.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC.InitialWaitingSeconds)
				} else {
					r.Configuration.SourceAlloydb.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC.InitialWaitingSeconds = types.Int64Null()
				}
				if resp.Configuration.SourceAlloydb.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC.LsnCommitBehaviour != nil {
					r.Configuration.SourceAlloydb.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC.LsnCommitBehaviour = types.StringValue(string(*resp.Configuration.SourceAlloydb.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC.LsnCommitBehaviour))
				} else {
					r.Configuration.SourceAlloydb.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC.LsnCommitBehaviour = types.StringNull()
				}
				r.Configuration.SourceAlloydb.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC.Method = types.StringValue(string(resp.Configuration.SourceAlloydb.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC.Method))
				if resp.Configuration.SourceAlloydb.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC.Plugin != nil {
					r.Configuration.SourceAlloydb.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC.Plugin = types.StringValue(string(*resp.Configuration.SourceAlloydb.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC.Plugin))
				} else {
					r.Configuration.SourceAlloydb.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC.Plugin = types.StringNull()
				}
				r.Configuration.SourceAlloydb.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC.Publication = types.StringValue(resp.Configuration.SourceAlloydb.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC.Publication)
				r.Configuration.SourceAlloydb.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC.ReplicationSlot = types.StringValue(resp.Configuration.SourceAlloydb.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC.ReplicationSlot)
			}
		}
		r.Configuration.SourceAlloydb.Schemas = nil
		for _, v := range resp.Configuration.SourceAlloydb.Schemas {
			r.Configuration.SourceAlloydb.Schemas = append(r.Configuration.SourceAlloydb.Schemas, types.StringValue(v))
		}
		r.Configuration.SourceAlloydb.SourceType = types.StringValue(string(resp.Configuration.SourceAlloydb.SourceType))
		if resp.Configuration.SourceAlloydb.SslMode == nil {
			r.Configuration.SourceAlloydb.SslMode = nil
		} else {
			r.Configuration.SourceAlloydb.SslMode = &SourceAlloydbSSLModes{}
			if resp.Configuration.SourceAlloydb.SslMode.SourceAlloydbSSLModesAllow != nil {
				r.Configuration.SourceAlloydb.SslMode.SourceAlloydbSSLModesAllow = &SourceAlloydbSSLModesAllow{}
				r.Configuration.SourceAlloydb.SslMode.SourceAlloydbSSLModesAllow.Mode = types.StringValue(string(resp.Configuration.SourceAlloydb.SslMode.SourceAlloydbSSLModesAllow.Mode))
			}
			if resp.Configuration.SourceAlloydb.SslMode.SourceAlloydbSSLModesPrefer != nil {
				r.Configuration.SourceAlloydb.SslMode.SourceAlloydbSSLModesPrefer = &SourceAlloydbSSLModesPrefer{}
				r.Configuration.SourceAlloydb.SslMode.SourceAlloydbSSLModesPrefer.Mode = types.StringValue(string(resp.Configuration.SourceAlloydb.SslMode.SourceAlloydbSSLModesPrefer.Mode))
			}
			if resp.Configuration.SourceAlloydb.SslMode.SourceAlloydbSSLModesRequire != nil {
				r.Configuration.SourceAlloydb.SslMode.SourceAlloydbSSLModesRequire = &SourceAlloydbSSLModesRequire{}
				r.Configuration.SourceAlloydb.SslMode.SourceAlloydbSSLModesRequire.Mode = types.StringValue(string(resp.Configuration.SourceAlloydb.SslMode.SourceAlloydbSSLModesRequire.Mode))
			}
			if resp.Configuration.SourceAlloydb.SslMode.SourceAlloydbSSLModesVerifyCa != nil {
				r.Configuration.SourceAlloydb.SslMode.SourceAlloydbSSLModesVerifyCa = &SourceAlloydbSSLModesVerifyCa{}
				r.Configuration.SourceAlloydb.SslMode.SourceAlloydbSSLModesVerifyCa.CaCertificate = types.StringValue(resp.Configuration.SourceAlloydb.SslMode.SourceAlloydbSSLModesVerifyCa.CaCertificate)
				if resp.Configuration.SourceAlloydb.SslMode.SourceAlloydbSSLModesVerifyCa.ClientCertificate != nil {
					r.Configuration.SourceAlloydb.SslMode.SourceAlloydbSSLModesVerifyCa.ClientCertificate = types.StringValue(*resp.Configuration.SourceAlloydb.SslMode.SourceAlloydbSSLModesVerifyCa.ClientCertificate)
				} else {
					r.Configuration.SourceAlloydb.SslMode.SourceAlloydbSSLModesVerifyCa.ClientCertificate = types.StringNull()
				}
				if resp.Configuration.SourceAlloydb.SslMode.SourceAlloydbSSLModesVerifyCa.ClientKey != nil {
					r.Configuration.SourceAlloydb.SslMode.SourceAlloydbSSLModesVerifyCa.ClientKey = types.StringValue(*resp.Configuration.SourceAlloydb.SslMode.SourceAlloydbSSLModesVerifyCa.ClientKey)
				} else {
					r.Configuration.SourceAlloydb.SslMode.SourceAlloydbSSLModesVerifyCa.ClientKey = types.StringNull()
				}
				if resp.Configuration.SourceAlloydb.SslMode.SourceAlloydbSSLModesVerifyCa.ClientKeyPassword != nil {
					r.Configuration.SourceAlloydb.SslMode.SourceAlloydbSSLModesVerifyCa.ClientKeyPassword = types.StringValue(*resp.Configuration.SourceAlloydb.SslMode.SourceAlloydbSSLModesVerifyCa.ClientKeyPassword)
				} else {
					r.Configuration.SourceAlloydb.SslMode.SourceAlloydbSSLModesVerifyCa.ClientKeyPassword = types.StringNull()
				}
				r.Configuration.SourceAlloydb.SslMode.SourceAlloydbSSLModesVerifyCa.Mode = types.StringValue(string(resp.Configuration.SourceAlloydb.SslMode.SourceAlloydbSSLModesVerifyCa.Mode))
			}
			if resp.Configuration.SourceAlloydb.SslMode.SourceAlloydbSSLModesVerifyFull != nil {
				r.Configuration.SourceAlloydb.SslMode.SourceAlloydbSSLModesVerifyFull = &SourceAlloydbSSLModesVerifyFull{}
				r.Configuration.SourceAlloydb.SslMode.SourceAlloydbSSLModesVerifyFull.CaCertificate = types.StringValue(resp.Configuration.SourceAlloydb.SslMode.SourceAlloydbSSLModesVerifyFull.CaCertificate)
				if resp.Configuration.SourceAlloydb.SslMode.SourceAlloydbSSLModesVerifyFull.ClientCertificate != nil {
					r.Configuration.SourceAlloydb.SslMode.SourceAlloydbSSLModesVerifyFull.ClientCertificate = types.StringValue(*resp.Configuration.SourceAlloydb.SslMode.SourceAlloydbSSLModesVerifyFull.ClientCertificate)
				} else {
					r.Configuration.SourceAlloydb.SslMode.SourceAlloydbSSLModesVerifyFull.ClientCertificate = types.StringNull()
				}
				if resp.Configuration.SourceAlloydb.SslMode.SourceAlloydbSSLModesVerifyFull.ClientKey != nil {
					r.Configuration.SourceAlloydb.SslMode.SourceAlloydbSSLModesVerifyFull.ClientKey = types.StringValue(*resp.Configuration.SourceAlloydb.SslMode.SourceAlloydbSSLModesVerifyFull.ClientKey)
				} else {
					r.Configuration.SourceAlloydb.SslMode.SourceAlloydbSSLModesVerifyFull.ClientKey = types.StringNull()
				}
				if resp.Configuration.SourceAlloydb.SslMode.SourceAlloydbSSLModesVerifyFull.ClientKeyPassword != nil {
					r.Configuration.SourceAlloydb.SslMode.SourceAlloydbSSLModesVerifyFull.ClientKeyPassword = types.StringValue(*resp.Configuration.SourceAlloydb.SslMode.SourceAlloydbSSLModesVerifyFull.ClientKeyPassword)
				} else {
					r.Configuration.SourceAlloydb.SslMode.SourceAlloydbSSLModesVerifyFull.ClientKeyPassword = types.StringNull()
				}
				r.Configuration.SourceAlloydb.SslMode.SourceAlloydbSSLModesVerifyFull.Mode = types.StringValue(string(resp.Configuration.SourceAlloydb.SslMode.SourceAlloydbSSLModesVerifyFull.Mode))
			}
		}
		if resp.Configuration.SourceAlloydb.TunnelMethod == nil {
			r.Configuration.SourceAlloydb.TunnelMethod = nil
		} else {
			r.Configuration.SourceAlloydb.TunnelMethod = &SourceAlloydbSSHTunnelMethod{}
			if resp.Configuration.SourceAlloydb.TunnelMethod.SourceAlloydbSSHTunnelMethodNoTunnel != nil {
				r.Configuration.SourceAlloydb.TunnelMethod.SourceAlloydbSSHTunnelMethodNoTunnel = &DestinationClickhouseSSHTunnelMethodNoTunnel{}
				r.Configuration.SourceAlloydb.TunnelMethod.SourceAlloydbSSHTunnelMethodNoTunnel.TunnelMethod = types.StringValue(string(resp.Configuration.SourceAlloydb.TunnelMethod.SourceAlloydbSSHTunnelMethodNoTunnel.TunnelMethod))
			}
			if resp.Configuration.SourceAlloydb.TunnelMethod.SourceAlloydbSSHTunnelMethodSSHKeyAuthentication != nil {
				r.Configuration.SourceAlloydb.TunnelMethod.SourceAlloydbSSHTunnelMethodSSHKeyAuthentication = &DestinationClickhouseSSHTunnelMethodSSHKeyAuthentication{}
				r.Configuration.SourceAlloydb.TunnelMethod.SourceAlloydbSSHTunnelMethodSSHKeyAuthentication.SSHKey = types.StringValue(resp.Configuration.SourceAlloydb.TunnelMethod.SourceAlloydbSSHTunnelMethodSSHKeyAuthentication.SSHKey)
				r.Configuration.SourceAlloydb.TunnelMethod.SourceAlloydbSSHTunnelMethodSSHKeyAuthentication.TunnelHost = types.StringValue(resp.Configuration.SourceAlloydb.TunnelMethod.SourceAlloydbSSHTunnelMethodSSHKeyAuthentication.TunnelHost)
				r.Configuration.SourceAlloydb.TunnelMethod.SourceAlloydbSSHTunnelMethodSSHKeyAuthentication.TunnelMethod = types.StringValue(string(resp.Configuration.SourceAlloydb.TunnelMethod.SourceAlloydbSSHTunnelMethodSSHKeyAuthentication.TunnelMethod))
				r.Configuration.SourceAlloydb.TunnelMethod.SourceAlloydbSSHTunnelMethodSSHKeyAuthentication.TunnelPort = types.Int64Value(resp.Configuration.SourceAlloydb.TunnelMethod.SourceAlloydbSSHTunnelMethodSSHKeyAuthentication.TunnelPort)
				r.Configuration.SourceAlloydb.TunnelMethod.SourceAlloydbSSHTunnelMethodSSHKeyAuthentication.TunnelUser = types.StringValue(resp.Configuration.SourceAlloydb.TunnelMethod.SourceAlloydbSSHTunnelMethodSSHKeyAuthentication.TunnelUser)
			}
			if resp.Configuration.SourceAlloydb.TunnelMethod.SourceAlloydbSSHTunnelMethodPasswordAuthentication != nil {
				r.Configuration.SourceAlloydb.TunnelMethod.SourceAlloydbSSHTunnelMethodPasswordAuthentication = &DestinationClickhouseSSHTunnelMethodPasswordAuthentication{}
				r.Configuration.SourceAlloydb.TunnelMethod.SourceAlloydbSSHTunnelMethodPasswordAuthentication.TunnelHost = types.StringValue(resp.Configuration.SourceAlloydb.TunnelMethod.SourceAlloydbSSHTunnelMethodPasswordAuthentication.TunnelHost)
				r.Configuration.SourceAlloydb.TunnelMethod.SourceAlloydbSSHTunnelMethodPasswordAuthentication.TunnelMethod = types.StringValue(string(resp.Configuration.SourceAlloydb.TunnelMethod.SourceAlloydbSSHTunnelMethodPasswordAuthentication.TunnelMethod))
				r.Configuration.SourceAlloydb.TunnelMethod.SourceAlloydbSSHTunnelMethodPasswordAuthentication.TunnelPort = types.Int64Value(resp.Configuration.SourceAlloydb.TunnelMethod.SourceAlloydbSSHTunnelMethodPasswordAuthentication.TunnelPort)
				r.Configuration.SourceAlloydb.TunnelMethod.SourceAlloydbSSHTunnelMethodPasswordAuthentication.TunnelUser = types.StringValue(resp.Configuration.SourceAlloydb.TunnelMethod.SourceAlloydbSSHTunnelMethodPasswordAuthentication.TunnelUser)
				r.Configuration.SourceAlloydb.TunnelMethod.SourceAlloydbSSHTunnelMethodPasswordAuthentication.TunnelUserPassword = types.StringValue(resp.Configuration.SourceAlloydb.TunnelMethod.SourceAlloydbSSHTunnelMethodPasswordAuthentication.TunnelUserPassword)
			}
		}
		r.Configuration.SourceAlloydb.Username = types.StringValue(resp.Configuration.SourceAlloydb.Username)
	}
	if resp.Configuration.SourceAmazonAds != nil {
		r.Configuration.SourceAmazonAds = &SourceAmazonAds{}
		if resp.Configuration.SourceAmazonAds.AuthType != nil {
			r.Configuration.SourceAmazonAds.AuthType = types.StringValue(string(*resp.Configuration.SourceAmazonAds.AuthType))
		} else {
			r.Configuration.SourceAmazonAds.AuthType = types.StringNull()
		}
		r.Configuration.SourceAmazonAds.ClientID = types.StringValue(resp.Configuration.SourceAmazonAds.ClientID)
		r.Configuration.SourceAmazonAds.ClientSecret = types.StringValue(resp.Configuration.SourceAmazonAds.ClientSecret)
		if resp.Configuration.SourceAmazonAds.LookBackWindow != nil {
			r.Configuration.SourceAmazonAds.LookBackWindow = types.Int64Value(*resp.Configuration.SourceAmazonAds.LookBackWindow)
		} else {
			r.Configuration.SourceAmazonAds.LookBackWindow = types.Int64Null()
		}
		r.Configuration.SourceAmazonAds.Profiles = nil
		for _, v := range resp.Configuration.SourceAmazonAds.Profiles {
			r.Configuration.SourceAmazonAds.Profiles = append(r.Configuration.SourceAmazonAds.Profiles, types.Int64Value(v))
		}
		r.Configuration.SourceAmazonAds.RefreshToken = types.StringValue(resp.Configuration.SourceAmazonAds.RefreshToken)
		if resp.Configuration.SourceAmazonAds.Region != nil {
			r.Configuration.SourceAmazonAds.Region = types.StringValue(string(*resp.Configuration.SourceAmazonAds.Region))
		} else {
			r.Configuration.SourceAmazonAds.Region = types.StringNull()
		}
		r.Configuration.SourceAmazonAds.ReportRecordTypes = nil
		for _, v := range resp.Configuration.SourceAmazonAds.ReportRecordTypes {
			r.Configuration.SourceAmazonAds.ReportRecordTypes = append(r.Configuration.SourceAmazonAds.ReportRecordTypes, types.StringValue(string(v)))
		}
		r.Configuration.SourceAmazonAds.SourceType = types.StringValue(string(resp.Configuration.SourceAmazonAds.SourceType))
		if resp.Configuration.SourceAmazonAds.StartDate != nil {
			r.Configuration.SourceAmazonAds.StartDate = types.StringValue(*resp.Configuration.SourceAmazonAds.StartDate)
		} else {
			r.Configuration.SourceAmazonAds.StartDate = types.StringNull()
		}
		r.Configuration.SourceAmazonAds.StateFilter = nil
		for _, v := range resp.Configuration.SourceAmazonAds.StateFilter {
			r.Configuration.SourceAmazonAds.StateFilter = append(r.Configuration.SourceAmazonAds.StateFilter, types.StringValue(string(v)))
		}
	}
	if resp.Configuration.SourceAmazonSellerPartner != nil {
		r.Configuration.SourceAmazonSellerPartner = &SourceAmazonSellerPartner{}
		r.Configuration.SourceAmazonSellerPartner.AppID = types.StringValue(resp.Configuration.SourceAmazonSellerPartner.AppID)
		if resp.Configuration.SourceAmazonSellerPartner.AuthType != nil {
			r.Configuration.SourceAmazonSellerPartner.AuthType = types.StringValue(string(*resp.Configuration.SourceAmazonSellerPartner.AuthType))
		} else {
			r.Configuration.SourceAmazonSellerPartner.AuthType = types.StringNull()
		}
		if resp.Configuration.SourceAmazonSellerPartner.AwsAccessKey != nil {
			r.Configuration.SourceAmazonSellerPartner.AwsAccessKey = types.StringValue(*resp.Configuration.SourceAmazonSellerPartner.AwsAccessKey)
		} else {
			r.Configuration.SourceAmazonSellerPartner.AwsAccessKey = types.StringNull()
		}
		r.Configuration.SourceAmazonSellerPartner.AwsEnvironment = types.StringValue(string(resp.Configuration.SourceAmazonSellerPartner.AwsEnvironment))
		if resp.Configuration.SourceAmazonSellerPartner.AwsSecretKey != nil {
			r.Configuration.SourceAmazonSellerPartner.AwsSecretKey = types.StringValue(*resp.Configuration.SourceAmazonSellerPartner.AwsSecretKey)
		} else {
			r.Configuration.SourceAmazonSellerPartner.AwsSecretKey = types.StringNull()
		}
		r.Configuration.SourceAmazonSellerPartner.LwaAppID = types.StringValue(resp.Configuration.SourceAmazonSellerPartner.LwaAppID)
		r.Configuration.SourceAmazonSellerPartner.LwaClientSecret = types.StringValue(resp.Configuration.SourceAmazonSellerPartner.LwaClientSecret)
		if resp.Configuration.SourceAmazonSellerPartner.MaxWaitSeconds != nil {
			r.Configuration.SourceAmazonSellerPartner.MaxWaitSeconds = types.Int64Value(*resp.Configuration.SourceAmazonSellerPartner.MaxWaitSeconds)
		} else {
			r.Configuration.SourceAmazonSellerPartner.MaxWaitSeconds = types.Int64Null()
		}
		if resp.Configuration.SourceAmazonSellerPartner.PeriodInDays != nil {
			r.Configuration.SourceAmazonSellerPartner.PeriodInDays = types.Int64Value(*resp.Configuration.SourceAmazonSellerPartner.PeriodInDays)
		} else {
			r.Configuration.SourceAmazonSellerPartner.PeriodInDays = types.Int64Null()
		}
		r.Configuration.SourceAmazonSellerPartner.RefreshToken = types.StringValue(resp.Configuration.SourceAmazonSellerPartner.RefreshToken)
		r.Configuration.SourceAmazonSellerPartner.Region = types.StringValue(string(resp.Configuration.SourceAmazonSellerPartner.Region))
		if resp.Configuration.SourceAmazonSellerPartner.ReplicationEndDate != nil {
			r.Configuration.SourceAmazonSellerPartner.ReplicationEndDate = types.StringValue(*resp.Configuration.SourceAmazonSellerPartner.ReplicationEndDate)
		} else {
			r.Configuration.SourceAmazonSellerPartner.ReplicationEndDate = types.StringNull()
		}
		r.Configuration.SourceAmazonSellerPartner.ReplicationStartDate = types.StringValue(resp.Configuration.SourceAmazonSellerPartner.ReplicationStartDate)
		if resp.Configuration.SourceAmazonSellerPartner.ReportOptions != nil {
			r.Configuration.SourceAmazonSellerPartner.ReportOptions = types.StringValue(*resp.Configuration.SourceAmazonSellerPartner.ReportOptions)
		} else {
			r.Configuration.SourceAmazonSellerPartner.ReportOptions = types.StringNull()
		}
		if resp.Configuration.SourceAmazonSellerPartner.RoleArn != nil {
			r.Configuration.SourceAmazonSellerPartner.RoleArn = types.StringValue(*resp.Configuration.SourceAmazonSellerPartner.RoleArn)
		} else {
			r.Configuration.SourceAmazonSellerPartner.RoleArn = types.StringNull()
		}
		r.Configuration.SourceAmazonSellerPartner.SourceType = types.StringValue(string(resp.Configuration.SourceAmazonSellerPartner.SourceType))
	}
	if resp.Configuration.SourceAmazonSqs != nil {
		r.Configuration.SourceAmazonSqs = &SourceAmazonSqs{}
		if resp.Configuration.SourceAmazonSqs.AccessKey != nil {
			r.Configuration.SourceAmazonSqs.AccessKey = types.StringValue(*resp.Configuration.SourceAmazonSqs.AccessKey)
		} else {
			r.Configuration.SourceAmazonSqs.AccessKey = types.StringNull()
		}
		if resp.Configuration.SourceAmazonSqs.AttributesToReturn != nil {
			r.Configuration.SourceAmazonSqs.AttributesToReturn = types.StringValue(*resp.Configuration.SourceAmazonSqs.AttributesToReturn)
		} else {
			r.Configuration.SourceAmazonSqs.AttributesToReturn = types.StringNull()
		}
		r.Configuration.SourceAmazonSqs.DeleteMessages = types.BoolValue(resp.Configuration.SourceAmazonSqs.DeleteMessages)
		if resp.Configuration.SourceAmazonSqs.MaxBatchSize != nil {
			r.Configuration.SourceAmazonSqs.MaxBatchSize = types.Int64Value(*resp.Configuration.SourceAmazonSqs.MaxBatchSize)
		} else {
			r.Configuration.SourceAmazonSqs.MaxBatchSize = types.Int64Null()
		}
		if resp.Configuration.SourceAmazonSqs.MaxWaitTime != nil {
			r.Configuration.SourceAmazonSqs.MaxWaitTime = types.Int64Value(*resp.Configuration.SourceAmazonSqs.MaxWaitTime)
		} else {
			r.Configuration.SourceAmazonSqs.MaxWaitTime = types.Int64Null()
		}
		r.Configuration.SourceAmazonSqs.QueueURL = types.StringValue(resp.Configuration.SourceAmazonSqs.QueueURL)
		r.Configuration.SourceAmazonSqs.Region = types.StringValue(string(resp.Configuration.SourceAmazonSqs.Region))
		if resp.Configuration.SourceAmazonSqs.SecretKey != nil {
			r.Configuration.SourceAmazonSqs.SecretKey = types.StringValue(*resp.Configuration.SourceAmazonSqs.SecretKey)
		} else {
			r.Configuration.SourceAmazonSqs.SecretKey = types.StringNull()
		}
		r.Configuration.SourceAmazonSqs.SourceType = types.StringValue(string(resp.Configuration.SourceAmazonSqs.SourceType))
		if resp.Configuration.SourceAmazonSqs.VisibilityTimeout != nil {
			r.Configuration.SourceAmazonSqs.VisibilityTimeout = types.Int64Value(*resp.Configuration.SourceAmazonSqs.VisibilityTimeout)
		} else {
			r.Configuration.SourceAmazonSqs.VisibilityTimeout = types.Int64Null()
		}
	}
	if resp.Configuration.SourceAmplitude != nil {
		r.Configuration.SourceAmplitude = &SourceAmplitude{}
		r.Configuration.SourceAmplitude.APIKey = types.StringValue(resp.Configuration.SourceAmplitude.APIKey)
		if resp.Configuration.SourceAmplitude.DataRegion != nil {
			r.Configuration.SourceAmplitude.DataRegion = types.StringValue(string(*resp.Configuration.SourceAmplitude.DataRegion))
		} else {
			r.Configuration.SourceAmplitude.DataRegion = types.StringNull()
		}
		if resp.Configuration.SourceAmplitude.EventTimeInterval == nil {
			r.Configuration.SourceAmplitude.EventTimeInterval = nil
		} else {
			r.Configuration.SourceAmplitude.EventTimeInterval = &SourceAmplitudeEventStreamTimeInterval{}
			r.Configuration.SourceAmplitude.EventTimeInterval.Size = types.Int64Value(resp.Configuration.SourceAmplitude.EventTimeInterval.Size)
			r.Configuration.SourceAmplitude.EventTimeInterval.SizeUnit = types.StringValue(string(resp.Configuration.SourceAmplitude.EventTimeInterval.SizeUnit))
		}
		r.Configuration.SourceAmplitude.SecretKey = types.StringValue(resp.Configuration.SourceAmplitude.SecretKey)
		r.Configuration.SourceAmplitude.SourceType = types.StringValue(string(resp.Configuration.SourceAmplitude.SourceType))
		r.Configuration.SourceAmplitude.StartDate = types.StringValue(resp.Configuration.SourceAmplitude.StartDate)
	}
	if resp.Configuration.SourceApifyDataset != nil {
		r.Configuration.SourceApifyDataset = &SourceApifyDataset{}
		if resp.Configuration.SourceApifyDataset.Clean != nil {
			r.Configuration.SourceApifyDataset.Clean = types.BoolValue(*resp.Configuration.SourceApifyDataset.Clean)
		} else {
			r.Configuration.SourceApifyDataset.Clean = types.BoolNull()
		}
		r.Configuration.SourceApifyDataset.DatasetID = types.StringValue(resp.Configuration.SourceApifyDataset.DatasetID)
		r.Configuration.SourceApifyDataset.SourceType = types.StringValue(string(resp.Configuration.SourceApifyDataset.SourceType))
	}
	if resp.Configuration.SourceAsana != nil {
		r.Configuration.SourceAsana = &SourceAsana{}
		if resp.Configuration.SourceAsana.Credentials == nil {
			r.Configuration.SourceAsana.Credentials = nil
		} else {
			r.Configuration.SourceAsana.Credentials = &SourceAsanaAuthenticationMechanism{}
			if resp.Configuration.SourceAsana.Credentials.SourceAsanaAuthenticationMechanismAuthenticateWithPersonalAccessToken != nil {
				r.Configuration.SourceAsana.Credentials.SourceAsanaAuthenticationMechanismAuthenticateWithPersonalAccessToken = &SourceAsanaAuthenticationMechanismAuthenticateWithPersonalAccessToken{}
				if resp.Configuration.SourceAsana.Credentials.SourceAsanaAuthenticationMechanismAuthenticateWithPersonalAccessToken.OptionTitle != nil {
					r.Configuration.SourceAsana.Credentials.SourceAsanaAuthenticationMechanismAuthenticateWithPersonalAccessToken.OptionTitle = types.StringValue(string(*resp.Configuration.SourceAsana.Credentials.SourceAsanaAuthenticationMechanismAuthenticateWithPersonalAccessToken.OptionTitle))
				} else {
					r.Configuration.SourceAsana.Credentials.SourceAsanaAuthenticationMechanismAuthenticateWithPersonalAccessToken.OptionTitle = types.StringNull()
				}
				r.Configuration.SourceAsana.Credentials.SourceAsanaAuthenticationMechanismAuthenticateWithPersonalAccessToken.PersonalAccessToken = types.StringValue(resp.Configuration.SourceAsana.Credentials.SourceAsanaAuthenticationMechanismAuthenticateWithPersonalAccessToken.PersonalAccessToken)
			}
			if resp.Configuration.SourceAsana.Credentials.SourceAsanaAuthenticationMechanismAuthenticateViaAsanaOauth != nil {
				r.Configuration.SourceAsana.Credentials.SourceAsanaAuthenticationMechanismAuthenticateViaAsanaOauth = &SourceAsanaAuthenticationMechanismAuthenticateViaAsanaOauth{}
				r.Configuration.SourceAsana.Credentials.SourceAsanaAuthenticationMechanismAuthenticateViaAsanaOauth.ClientID = types.StringValue(resp.Configuration.SourceAsana.Credentials.SourceAsanaAuthenticationMechanismAuthenticateViaAsanaOauth.ClientID)
				r.Configuration.SourceAsana.Credentials.SourceAsanaAuthenticationMechanismAuthenticateViaAsanaOauth.ClientSecret = types.StringValue(resp.Configuration.SourceAsana.Credentials.SourceAsanaAuthenticationMechanismAuthenticateViaAsanaOauth.ClientSecret)
				if resp.Configuration.SourceAsana.Credentials.SourceAsanaAuthenticationMechanismAuthenticateViaAsanaOauth.OptionTitle != nil {
					r.Configuration.SourceAsana.Credentials.SourceAsanaAuthenticationMechanismAuthenticateViaAsanaOauth.OptionTitle = types.StringValue(string(*resp.Configuration.SourceAsana.Credentials.SourceAsanaAuthenticationMechanismAuthenticateViaAsanaOauth.OptionTitle))
				} else {
					r.Configuration.SourceAsana.Credentials.SourceAsanaAuthenticationMechanismAuthenticateViaAsanaOauth.OptionTitle = types.StringNull()
				}
				r.Configuration.SourceAsana.Credentials.SourceAsanaAuthenticationMechanismAuthenticateViaAsanaOauth.RefreshToken = types.StringValue(resp.Configuration.SourceAsana.Credentials.SourceAsanaAuthenticationMechanismAuthenticateViaAsanaOauth.RefreshToken)
			}
		}
		r.Configuration.SourceAsana.SourceType = types.StringValue(string(resp.Configuration.SourceAsana.SourceType))
	}
	if resp.Configuration.SourceAuth0 != nil {
		r.Configuration.SourceAuth0 = &SourceAuth0{}
		r.Configuration.SourceAuth0.BaseURL = types.StringValue(resp.Configuration.SourceAuth0.BaseURL)
		if resp.Configuration.SourceAuth0.Credentials.SourceAuth0AuthenticationMethodOAuth2ConfidentialApplication != nil {
			r.Configuration.SourceAuth0.Credentials.SourceAuth0AuthenticationMethodOAuth2ConfidentialApplication = &SourceAuth0AuthenticationMethodOAuth2ConfidentialApplication{}
			r.Configuration.SourceAuth0.Credentials.SourceAuth0AuthenticationMethodOAuth2ConfidentialApplication.Audience = types.StringValue(resp.Configuration.SourceAuth0.Credentials.SourceAuth0AuthenticationMethodOAuth2ConfidentialApplication.Audience)
			r.Configuration.SourceAuth0.Credentials.SourceAuth0AuthenticationMethodOAuth2ConfidentialApplication.AuthType = types.StringValue(string(resp.Configuration.SourceAuth0.Credentials.SourceAuth0AuthenticationMethodOAuth2ConfidentialApplication.AuthType))
			r.Configuration.SourceAuth0.Credentials.SourceAuth0AuthenticationMethodOAuth2ConfidentialApplication.ClientID = types.StringValue(resp.Configuration.SourceAuth0.Credentials.SourceAuth0AuthenticationMethodOAuth2ConfidentialApplication.ClientID)
			r.Configuration.SourceAuth0.Credentials.SourceAuth0AuthenticationMethodOAuth2ConfidentialApplication.ClientSecret = types.StringValue(resp.Configuration.SourceAuth0.Credentials.SourceAuth0AuthenticationMethodOAuth2ConfidentialApplication.ClientSecret)
		}
		if resp.Configuration.SourceAuth0.Credentials.SourceAuth0AuthenticationMethodOAuth2AccessToken != nil {
			r.Configuration.SourceAuth0.Credentials.SourceAuth0AuthenticationMethodOAuth2AccessToken = &SourceAuth0AuthenticationMethodOAuth2AccessToken{}
			r.Configuration.SourceAuth0.Credentials.SourceAuth0AuthenticationMethodOAuth2AccessToken.AccessToken = types.StringValue(resp.Configuration.SourceAuth0.Credentials.SourceAuth0AuthenticationMethodOAuth2AccessToken.AccessToken)
			r.Configuration.SourceAuth0.Credentials.SourceAuth0AuthenticationMethodOAuth2AccessToken.AuthType = types.StringValue(string(resp.Configuration.SourceAuth0.Credentials.SourceAuth0AuthenticationMethodOAuth2AccessToken.AuthType))
		}
		r.Configuration.SourceAuth0.SourceType = types.StringValue(string(resp.Configuration.SourceAuth0.SourceType))
	}
	if resp.Configuration.SourceAwsCloudtrail != nil {
		r.Configuration.SourceAwsCloudtrail = &SourceAwsCloudtrail{}
		r.Configuration.SourceAwsCloudtrail.AwsKeyID = types.StringValue(resp.Configuration.SourceAwsCloudtrail.AwsKeyID)
		r.Configuration.SourceAwsCloudtrail.AwsRegionName = types.StringValue(resp.Configuration.SourceAwsCloudtrail.AwsRegionName)
		r.Configuration.SourceAwsCloudtrail.AwsSecretKey = types.StringValue(resp.Configuration.SourceAwsCloudtrail.AwsSecretKey)
		r.Configuration.SourceAwsCloudtrail.SourceType = types.StringValue(string(resp.Configuration.SourceAwsCloudtrail.SourceType))
		r.Configuration.SourceAwsCloudtrail.StartDate = types.StringValue(resp.Configuration.SourceAwsCloudtrail.StartDate.String())
	}
	if resp.Configuration.SourceAzureTable != nil {
		r.Configuration.SourceAzureTable = &SourceAzureTable{}
		r.Configuration.SourceAzureTable.SourceType = types.StringValue(string(resp.Configuration.SourceAzureTable.SourceType))
		r.Configuration.SourceAzureTable.StorageAccessKey = types.StringValue(resp.Configuration.SourceAzureTable.StorageAccessKey)
		r.Configuration.SourceAzureTable.StorageAccountName = types.StringValue(resp.Configuration.SourceAzureTable.StorageAccountName)
		if resp.Configuration.SourceAzureTable.StorageEndpointSuffix != nil {
			r.Configuration.SourceAzureTable.StorageEndpointSuffix = types.StringValue(*resp.Configuration.SourceAzureTable.StorageEndpointSuffix)
		} else {
			r.Configuration.SourceAzureTable.StorageEndpointSuffix = types.StringNull()
		}
	}
	if resp.Configuration.SourceBambooHr != nil {
		r.Configuration.SourceBambooHr = &SourceBambooHr{}
		r.Configuration.SourceBambooHr.APIKey = types.StringValue(resp.Configuration.SourceBambooHr.APIKey)
		if resp.Configuration.SourceBambooHr.CustomReportsFields != nil {
			r.Configuration.SourceBambooHr.CustomReportsFields = types.StringValue(*resp.Configuration.SourceBambooHr.CustomReportsFields)
		} else {
			r.Configuration.SourceBambooHr.CustomReportsFields = types.StringNull()
		}
		if resp.Configuration.SourceBambooHr.CustomReportsIncludeDefaultFields != nil {
			r.Configuration.SourceBambooHr.CustomReportsIncludeDefaultFields = types.BoolValue(*resp.Configuration.SourceBambooHr.CustomReportsIncludeDefaultFields)
		} else {
			r.Configuration.SourceBambooHr.CustomReportsIncludeDefaultFields = types.BoolNull()
		}
		r.Configuration.SourceBambooHr.SourceType = types.StringValue(string(resp.Configuration.SourceBambooHr.SourceType))
		r.Configuration.SourceBambooHr.Subdomain = types.StringValue(resp.Configuration.SourceBambooHr.Subdomain)
	}
	if resp.Configuration.SourceBigcommerce != nil {
		r.Configuration.SourceBigcommerce = &SourceBigcommerce{}
		r.Configuration.SourceBigcommerce.AccessToken = types.StringValue(resp.Configuration.SourceBigcommerce.AccessToken)
		r.Configuration.SourceBigcommerce.SourceType = types.StringValue(string(resp.Configuration.SourceBigcommerce.SourceType))
		r.Configuration.SourceBigcommerce.StartDate = types.StringValue(resp.Configuration.SourceBigcommerce.StartDate)
		r.Configuration.SourceBigcommerce.StoreHash = types.StringValue(resp.Configuration.SourceBigcommerce.StoreHash)
	}
	if resp.Configuration.SourceBigquery != nil {
		r.Configuration.SourceBigquery = &SourceBigquery{}
		r.Configuration.SourceBigquery.CredentialsJSON = types.StringValue(resp.Configuration.SourceBigquery.CredentialsJSON)
		if resp.Configuration.SourceBigquery.DatasetID != nil {
			r.Configuration.SourceBigquery.DatasetID = types.StringValue(*resp.Configuration.SourceBigquery.DatasetID)
		} else {
			r.Configuration.SourceBigquery.DatasetID = types.StringNull()
		}
		r.Configuration.SourceBigquery.ProjectID = types.StringValue(resp.Configuration.SourceBigquery.ProjectID)
		r.Configuration.SourceBigquery.SourceType = types.StringValue(string(resp.Configuration.SourceBigquery.SourceType))
	}
	if resp.Configuration.SourceBingAds != nil {
		r.Configuration.SourceBingAds = &SourceBingAds{}
		if resp.Configuration.SourceBingAds.AuthMethod != nil {
			r.Configuration.SourceBingAds.AuthMethod = types.StringValue(string(*resp.Configuration.SourceBingAds.AuthMethod))
		} else {
			r.Configuration.SourceBingAds.AuthMethod = types.StringNull()
		}
		r.Configuration.SourceBingAds.ClientID = types.StringValue(resp.Configuration.SourceBingAds.ClientID)
		if resp.Configuration.SourceBingAds.ClientSecret != nil {
			r.Configuration.SourceBingAds.ClientSecret = types.StringValue(*resp.Configuration.SourceBingAds.ClientSecret)
		} else {
			r.Configuration.SourceBingAds.ClientSecret = types.StringNull()
		}
		r.Configuration.SourceBingAds.DeveloperToken = types.StringValue(resp.Configuration.SourceBingAds.DeveloperToken)
		r.Configuration.SourceBingAds.RefreshToken = types.StringValue(resp.Configuration.SourceBingAds.RefreshToken)
		r.Configuration.SourceBingAds.ReportsStartDate = types.StringValue(resp.Configuration.SourceBingAds.ReportsStartDate.String())
		r.Configuration.SourceBingAds.SourceType = types.StringValue(string(resp.Configuration.SourceBingAds.SourceType))
		if resp.Configuration.SourceBingAds.TenantID != nil {
			r.Configuration.SourceBingAds.TenantID = types.StringValue(*resp.Configuration.SourceBingAds.TenantID)
		} else {
			r.Configuration.SourceBingAds.TenantID = types.StringNull()
		}
	}
	if resp.Configuration.SourceBraintree != nil {
		r.Configuration.SourceBraintree = &SourceBraintree{}
		r.Configuration.SourceBraintree.Environment = types.StringValue(string(resp.Configuration.SourceBraintree.Environment))
		r.Configuration.SourceBraintree.MerchantID = types.StringValue(resp.Configuration.SourceBraintree.MerchantID)
		r.Configuration.SourceBraintree.PrivateKey = types.StringValue(resp.Configuration.SourceBraintree.PrivateKey)
		r.Configuration.SourceBraintree.PublicKey = types.StringValue(resp.Configuration.SourceBraintree.PublicKey)
		r.Configuration.SourceBraintree.SourceType = types.StringValue(string(resp.Configuration.SourceBraintree.SourceType))
		if resp.Configuration.SourceBraintree.StartDate != nil {
			r.Configuration.SourceBraintree.StartDate = types.StringValue(resp.Configuration.SourceBraintree.StartDate.Format(time.RFC3339))
		} else {
			r.Configuration.SourceBraintree.StartDate = types.StringNull()
		}
	}
	if resp.Configuration.SourceBraze != nil {
		r.Configuration.SourceBraze = &SourceBraze{}
		r.Configuration.SourceBraze.APIKey = types.StringValue(resp.Configuration.SourceBraze.APIKey)
		r.Configuration.SourceBraze.SourceType = types.StringValue(string(resp.Configuration.SourceBraze.SourceType))
		r.Configuration.SourceBraze.StartDate = types.StringValue(resp.Configuration.SourceBraze.StartDate.String())
		r.Configuration.SourceBraze.URL = types.StringValue(resp.Configuration.SourceBraze.URL)
	}
	if resp.Configuration.SourceChargebee != nil {
		r.Configuration.SourceChargebee = &SourceChargebee{}
		r.Configuration.SourceChargebee.ProductCatalog = types.StringValue(string(resp.Configuration.SourceChargebee.ProductCatalog))
		r.Configuration.SourceChargebee.Site = types.StringValue(resp.Configuration.SourceChargebee.Site)
		r.Configuration.SourceChargebee.SiteAPIKey = types.StringValue(resp.Configuration.SourceChargebee.SiteAPIKey)
		r.Configuration.SourceChargebee.SourceType = types.StringValue(string(resp.Configuration.SourceChargebee.SourceType))
		r.Configuration.SourceChargebee.StartDate = types.StringValue(resp.Configuration.SourceChargebee.StartDate.Format(time.RFC3339))
	}
	if resp.Configuration.SourceChartmogul != nil {
		r.Configuration.SourceChartmogul = &SourceChartmogul{}
		r.Configuration.SourceChartmogul.APIKey = types.StringValue(resp.Configuration.SourceChartmogul.APIKey)
		r.Configuration.SourceChartmogul.Interval = types.StringValue(string(resp.Configuration.SourceChartmogul.Interval))
		r.Configuration.SourceChartmogul.SourceType = types.StringValue(string(resp.Configuration.SourceChartmogul.SourceType))
		r.Configuration.SourceChartmogul.StartDate = types.StringValue(resp.Configuration.SourceChartmogul.StartDate.Format(time.RFC3339))
	}
	if resp.Configuration.SourceClickhouse != nil {
		r.Configuration.SourceClickhouse = &SourceClickhouse{}
		r.Configuration.SourceClickhouse.Database = types.StringValue(resp.Configuration.SourceClickhouse.Database)
		r.Configuration.SourceClickhouse.Host = types.StringValue(resp.Configuration.SourceClickhouse.Host)
		if resp.Configuration.SourceClickhouse.Password != nil {
			r.Configuration.SourceClickhouse.Password = types.StringValue(*resp.Configuration.SourceClickhouse.Password)
		} else {
			r.Configuration.SourceClickhouse.Password = types.StringNull()
		}
		r.Configuration.SourceClickhouse.Port = types.Int64Value(resp.Configuration.SourceClickhouse.Port)
		r.Configuration.SourceClickhouse.SourceType = types.StringValue(string(resp.Configuration.SourceClickhouse.SourceType))
		if resp.Configuration.SourceClickhouse.TunnelMethod == nil {
			r.Configuration.SourceClickhouse.TunnelMethod = nil
		} else {
			r.Configuration.SourceClickhouse.TunnelMethod = &SourceClickhouseSSHTunnelMethod{}
			if resp.Configuration.SourceClickhouse.TunnelMethod.SourceClickhouseSSHTunnelMethodNoTunnel != nil {
				r.Configuration.SourceClickhouse.TunnelMethod.SourceClickhouseSSHTunnelMethodNoTunnel = &DestinationClickhouseSSHTunnelMethodNoTunnel{}
				r.Configuration.SourceClickhouse.TunnelMethod.SourceClickhouseSSHTunnelMethodNoTunnel.TunnelMethod = types.StringValue(string(resp.Configuration.SourceClickhouse.TunnelMethod.SourceClickhouseSSHTunnelMethodNoTunnel.TunnelMethod))
			}
			if resp.Configuration.SourceClickhouse.TunnelMethod.SourceClickhouseSSHTunnelMethodSSHKeyAuthentication != nil {
				r.Configuration.SourceClickhouse.TunnelMethod.SourceClickhouseSSHTunnelMethodSSHKeyAuthentication = &DestinationClickhouseSSHTunnelMethodSSHKeyAuthentication{}
				r.Configuration.SourceClickhouse.TunnelMethod.SourceClickhouseSSHTunnelMethodSSHKeyAuthentication.SSHKey = types.StringValue(resp.Configuration.SourceClickhouse.TunnelMethod.SourceClickhouseSSHTunnelMethodSSHKeyAuthentication.SSHKey)
				r.Configuration.SourceClickhouse.TunnelMethod.SourceClickhouseSSHTunnelMethodSSHKeyAuthentication.TunnelHost = types.StringValue(resp.Configuration.SourceClickhouse.TunnelMethod.SourceClickhouseSSHTunnelMethodSSHKeyAuthentication.TunnelHost)
				r.Configuration.SourceClickhouse.TunnelMethod.SourceClickhouseSSHTunnelMethodSSHKeyAuthentication.TunnelMethod = types.StringValue(string(resp.Configuration.SourceClickhouse.TunnelMethod.SourceClickhouseSSHTunnelMethodSSHKeyAuthentication.TunnelMethod))
				r.Configuration.SourceClickhouse.TunnelMethod.SourceClickhouseSSHTunnelMethodSSHKeyAuthentication.TunnelPort = types.Int64Value(resp.Configuration.SourceClickhouse.TunnelMethod.SourceClickhouseSSHTunnelMethodSSHKeyAuthentication.TunnelPort)
				r.Configuration.SourceClickhouse.TunnelMethod.SourceClickhouseSSHTunnelMethodSSHKeyAuthentication.TunnelUser = types.StringValue(resp.Configuration.SourceClickhouse.TunnelMethod.SourceClickhouseSSHTunnelMethodSSHKeyAuthentication.TunnelUser)
			}
			if resp.Configuration.SourceClickhouse.TunnelMethod.SourceClickhouseSSHTunnelMethodPasswordAuthentication != nil {
				r.Configuration.SourceClickhouse.TunnelMethod.SourceClickhouseSSHTunnelMethodPasswordAuthentication = &DestinationClickhouseSSHTunnelMethodPasswordAuthentication{}
				r.Configuration.SourceClickhouse.TunnelMethod.SourceClickhouseSSHTunnelMethodPasswordAuthentication.TunnelHost = types.StringValue(resp.Configuration.SourceClickhouse.TunnelMethod.SourceClickhouseSSHTunnelMethodPasswordAuthentication.TunnelHost)
				r.Configuration.SourceClickhouse.TunnelMethod.SourceClickhouseSSHTunnelMethodPasswordAuthentication.TunnelMethod = types.StringValue(string(resp.Configuration.SourceClickhouse.TunnelMethod.SourceClickhouseSSHTunnelMethodPasswordAuthentication.TunnelMethod))
				r.Configuration.SourceClickhouse.TunnelMethod.SourceClickhouseSSHTunnelMethodPasswordAuthentication.TunnelPort = types.Int64Value(resp.Configuration.SourceClickhouse.TunnelMethod.SourceClickhouseSSHTunnelMethodPasswordAuthentication.TunnelPort)
				r.Configuration.SourceClickhouse.TunnelMethod.SourceClickhouseSSHTunnelMethodPasswordAuthentication.TunnelUser = types.StringValue(resp.Configuration.SourceClickhouse.TunnelMethod.SourceClickhouseSSHTunnelMethodPasswordAuthentication.TunnelUser)
				r.Configuration.SourceClickhouse.TunnelMethod.SourceClickhouseSSHTunnelMethodPasswordAuthentication.TunnelUserPassword = types.StringValue(resp.Configuration.SourceClickhouse.TunnelMethod.SourceClickhouseSSHTunnelMethodPasswordAuthentication.TunnelUserPassword)
			}
		}
		r.Configuration.SourceClickhouse.Username = types.StringValue(resp.Configuration.SourceClickhouse.Username)
	}
	if resp.Configuration.SourceClickupAPI != nil {
		r.Configuration.SourceClickupAPI = &SourceClickupAPI{}
		r.Configuration.SourceClickupAPI.APIToken = types.StringValue(resp.Configuration.SourceClickupAPI.APIToken)
		if resp.Configuration.SourceClickupAPI.FolderID != nil {
			r.Configuration.SourceClickupAPI.FolderID = types.StringValue(*resp.Configuration.SourceClickupAPI.FolderID)
		} else {
			r.Configuration.SourceClickupAPI.FolderID = types.StringNull()
		}
		if resp.Configuration.SourceClickupAPI.IncludeClosedTasks != nil {
			r.Configuration.SourceClickupAPI.IncludeClosedTasks = types.BoolValue(*resp.Configuration.SourceClickupAPI.IncludeClosedTasks)
		} else {
			r.Configuration.SourceClickupAPI.IncludeClosedTasks = types.BoolNull()
		}
		if resp.Configuration.SourceClickupAPI.ListID != nil {
			r.Configuration.SourceClickupAPI.ListID = types.StringValue(*resp.Configuration.SourceClickupAPI.ListID)
		} else {
			r.Configuration.SourceClickupAPI.ListID = types.StringNull()
		}
		r.Configuration.SourceClickupAPI.SourceType = types.StringValue(string(resp.Configuration.SourceClickupAPI.SourceType))
		if resp.Configuration.SourceClickupAPI.SpaceID != nil {
			r.Configuration.SourceClickupAPI.SpaceID = types.StringValue(*resp.Configuration.SourceClickupAPI.SpaceID)
		} else {
			r.Configuration.SourceClickupAPI.SpaceID = types.StringNull()
		}
		if resp.Configuration.SourceClickupAPI.TeamID != nil {
			r.Configuration.SourceClickupAPI.TeamID = types.StringValue(*resp.Configuration.SourceClickupAPI.TeamID)
		} else {
			r.Configuration.SourceClickupAPI.TeamID = types.StringNull()
		}
	}
	if resp.Configuration.SourceCloseCom != nil {
		r.Configuration.SourceCloseCom = &SourceCloseCom{}
		r.Configuration.SourceCloseCom.APIKey = types.StringValue(resp.Configuration.SourceCloseCom.APIKey)
		r.Configuration.SourceCloseCom.SourceType = types.StringValue(string(resp.Configuration.SourceCloseCom.SourceType))
		if resp.Configuration.SourceCloseCom.StartDate != nil {
			r.Configuration.SourceCloseCom.StartDate = types.StringValue(resp.Configuration.SourceCloseCom.StartDate.Format(time.RFC3339))
		} else {
			r.Configuration.SourceCloseCom.StartDate = types.StringNull()
		}
	}
	if resp.Configuration.SourceCoda != nil {
		r.Configuration.SourceCoda = &SourceCoda{}
		r.Configuration.SourceCoda.AuthToken = types.StringValue(resp.Configuration.SourceCoda.AuthToken)
		r.Configuration.SourceCoda.SourceType = types.StringValue(string(resp.Configuration.SourceCoda.SourceType))
	}
	if resp.Configuration.SourceCoinAPI != nil {
		r.Configuration.SourceCoinAPI = &SourceCoinAPI{}
		r.Configuration.SourceCoinAPI.APIKey = types.StringValue(resp.Configuration.SourceCoinAPI.APIKey)
		if resp.Configuration.SourceCoinAPI.EndDate != nil {
			r.Configuration.SourceCoinAPI.EndDate = types.StringValue(*resp.Configuration.SourceCoinAPI.EndDate)
		} else {
			r.Configuration.SourceCoinAPI.EndDate = types.StringNull()
		}
		r.Configuration.SourceCoinAPI.Environment = types.StringValue(string(resp.Configuration.SourceCoinAPI.Environment))
		if resp.Configuration.SourceCoinAPI.Limit != nil {
			r.Configuration.SourceCoinAPI.Limit = types.Int64Value(*resp.Configuration.SourceCoinAPI.Limit)
		} else {
			r.Configuration.SourceCoinAPI.Limit = types.Int64Null()
		}
		r.Configuration.SourceCoinAPI.Period = types.StringValue(resp.Configuration.SourceCoinAPI.Period)
		r.Configuration.SourceCoinAPI.SourceType = types.StringValue(string(resp.Configuration.SourceCoinAPI.SourceType))
		r.Configuration.SourceCoinAPI.StartDate = types.StringValue(resp.Configuration.SourceCoinAPI.StartDate)
		r.Configuration.SourceCoinAPI.SymbolID = types.StringValue(resp.Configuration.SourceCoinAPI.SymbolID)
	}
	if resp.Configuration.SourceCoinmarketcap != nil {
		r.Configuration.SourceCoinmarketcap = &SourceCoinmarketcap{}
		r.Configuration.SourceCoinmarketcap.APIKey = types.StringValue(resp.Configuration.SourceCoinmarketcap.APIKey)
		r.Configuration.SourceCoinmarketcap.DataType = types.StringValue(string(resp.Configuration.SourceCoinmarketcap.DataType))
		r.Configuration.SourceCoinmarketcap.SourceType = types.StringValue(string(resp.Configuration.SourceCoinmarketcap.SourceType))
		r.Configuration.SourceCoinmarketcap.Symbols = nil
		for _, v := range resp.Configuration.SourceCoinmarketcap.Symbols {
			r.Configuration.SourceCoinmarketcap.Symbols = append(r.Configuration.SourceCoinmarketcap.Symbols, types.StringValue(v))
		}
	}
	if resp.Configuration.SourceConfigcat != nil {
		r.Configuration.SourceConfigcat = &SourceConfigcat{}
		r.Configuration.SourceConfigcat.Password = types.StringValue(resp.Configuration.SourceConfigcat.Password)
		r.Configuration.SourceConfigcat.SourceType = types.StringValue(string(resp.Configuration.SourceConfigcat.SourceType))
		r.Configuration.SourceConfigcat.Username = types.StringValue(resp.Configuration.SourceConfigcat.Username)
	}
	if resp.Configuration.SourceConfluence != nil {
		r.Configuration.SourceConfluence = &SourceConfluence{}
		r.Configuration.SourceConfluence.APIToken = types.StringValue(resp.Configuration.SourceConfluence.APIToken)
		r.Configuration.SourceConfluence.DomainName = types.StringValue(resp.Configuration.SourceConfluence.DomainName)
		r.Configuration.SourceConfluence.Email = types.StringValue(resp.Configuration.SourceConfluence.Email)
		r.Configuration.SourceConfluence.SourceType = types.StringValue(string(resp.Configuration.SourceConfluence.SourceType))
	}
	if resp.Configuration.SourceDatascope != nil {
		r.Configuration.SourceDatascope = &SourceDatascope{}
		r.Configuration.SourceDatascope.APIKey = types.StringValue(resp.Configuration.SourceDatascope.APIKey)
		r.Configuration.SourceDatascope.SourceType = types.StringValue(string(resp.Configuration.SourceDatascope.SourceType))
		r.Configuration.SourceDatascope.StartDate = types.StringValue(resp.Configuration.SourceDatascope.StartDate)
	}
	if resp.Configuration.SourceDelighted != nil {
		r.Configuration.SourceDelighted = &SourceDelighted{}
		r.Configuration.SourceDelighted.APIKey = types.StringValue(resp.Configuration.SourceDelighted.APIKey)
		r.Configuration.SourceDelighted.Since = types.StringValue(resp.Configuration.SourceDelighted.Since.Format(time.RFC3339))
		r.Configuration.SourceDelighted.SourceType = types.StringValue(string(resp.Configuration.SourceDelighted.SourceType))
	}
	if resp.Configuration.SourceDixa != nil {
		r.Configuration.SourceDixa = &SourceDixa{}
		r.Configuration.SourceDixa.APIToken = types.StringValue(resp.Configuration.SourceDixa.APIToken)
		if resp.Configuration.SourceDixa.BatchSize != nil {
			r.Configuration.SourceDixa.BatchSize = types.Int64Value(*resp.Configuration.SourceDixa.BatchSize)
		} else {
			r.Configuration.SourceDixa.BatchSize = types.Int64Null()
		}
		r.Configuration.SourceDixa.SourceType = types.StringValue(string(resp.Configuration.SourceDixa.SourceType))
		r.Configuration.SourceDixa.StartDate = types.StringValue(resp.Configuration.SourceDixa.StartDate)
	}
	if resp.Configuration.SourceDockerhub != nil {
		r.Configuration.SourceDockerhub = &SourceDockerhub{}
		r.Configuration.SourceDockerhub.DockerUsername = types.StringValue(resp.Configuration.SourceDockerhub.DockerUsername)
		r.Configuration.SourceDockerhub.SourceType = types.StringValue(string(resp.Configuration.SourceDockerhub.SourceType))
	}
	if resp.Configuration.SourceDremio != nil {
		r.Configuration.SourceDremio = &SourceDremio{}
		r.Configuration.SourceDremio.APIKey = types.StringValue(resp.Configuration.SourceDremio.APIKey)
		r.Configuration.SourceDremio.BaseURL = types.StringValue(resp.Configuration.SourceDremio.BaseURL)
		r.Configuration.SourceDremio.SourceType = types.StringValue(string(resp.Configuration.SourceDremio.SourceType))
	}
	if resp.Configuration.SourceDynamodb != nil {
		r.Configuration.SourceDynamodb = &SourceDynamodb{}
		r.Configuration.SourceDynamodb.AccessKeyID = types.StringValue(resp.Configuration.SourceDynamodb.AccessKeyID)
		if resp.Configuration.SourceDynamodb.Endpoint != nil {
			r.Configuration.SourceDynamodb.Endpoint = types.StringValue(*resp.Configuration.SourceDynamodb.Endpoint)
		} else {
			r.Configuration.SourceDynamodb.Endpoint = types.StringNull()
		}
		if resp.Configuration.SourceDynamodb.Region != nil {
			r.Configuration.SourceDynamodb.Region = types.StringValue(string(*resp.Configuration.SourceDynamodb.Region))
		} else {
			r.Configuration.SourceDynamodb.Region = types.StringNull()
		}
		if resp.Configuration.SourceDynamodb.ReservedAttributeNames != nil {
			r.Configuration.SourceDynamodb.ReservedAttributeNames = types.StringValue(*resp.Configuration.SourceDynamodb.ReservedAttributeNames)
		} else {
			r.Configuration.SourceDynamodb.ReservedAttributeNames = types.StringNull()
		}
		r.Configuration.SourceDynamodb.SecretAccessKey = types.StringValue(resp.Configuration.SourceDynamodb.SecretAccessKey)
		r.Configuration.SourceDynamodb.SourceType = types.StringValue(string(resp.Configuration.SourceDynamodb.SourceType))
	}
	if resp.Configuration.SourceE2eTestCloud != nil {
		r.Configuration.SourceE2eTestCloud = &SourceE2eTestCloud{}
		r.Configuration.SourceE2eTestCloud.MaxMessages = types.Int64Value(resp.Configuration.SourceE2eTestCloud.MaxMessages)
		if resp.Configuration.SourceE2eTestCloud.MessageIntervalMs != nil {
			r.Configuration.SourceE2eTestCloud.MessageIntervalMs = types.Int64Value(*resp.Configuration.SourceE2eTestCloud.MessageIntervalMs)
		} else {
			r.Configuration.SourceE2eTestCloud.MessageIntervalMs = types.Int64Null()
		}
		if resp.Configuration.SourceE2eTestCloud.MockCatalog.SourceE2eTestCloudMockCatalogSingleSchema != nil {
			r.Configuration.SourceE2eTestCloud.MockCatalog.SourceE2eTestCloudMockCatalogSingleSchema = &SourceE2eTestCloudMockCatalogSingleSchema{}
			if resp.Configuration.SourceE2eTestCloud.MockCatalog.SourceE2eTestCloudMockCatalogSingleSchema.StreamDuplication != nil {
				r.Configuration.SourceE2eTestCloud.MockCatalog.SourceE2eTestCloudMockCatalogSingleSchema.StreamDuplication = types.Int64Value(*resp.Configuration.SourceE2eTestCloud.MockCatalog.SourceE2eTestCloudMockCatalogSingleSchema.StreamDuplication)
			} else {
				r.Configuration.SourceE2eTestCloud.MockCatalog.SourceE2eTestCloudMockCatalogSingleSchema.StreamDuplication = types.Int64Null()
			}
			r.Configuration.SourceE2eTestCloud.MockCatalog.SourceE2eTestCloudMockCatalogSingleSchema.StreamName = types.StringValue(resp.Configuration.SourceE2eTestCloud.MockCatalog.SourceE2eTestCloudMockCatalogSingleSchema.StreamName)
			r.Configuration.SourceE2eTestCloud.MockCatalog.SourceE2eTestCloudMockCatalogSingleSchema.StreamSchema = types.StringValue(resp.Configuration.SourceE2eTestCloud.MockCatalog.SourceE2eTestCloudMockCatalogSingleSchema.StreamSchema)
			r.Configuration.SourceE2eTestCloud.MockCatalog.SourceE2eTestCloudMockCatalogSingleSchema.Type = types.StringValue(string(resp.Configuration.SourceE2eTestCloud.MockCatalog.SourceE2eTestCloudMockCatalogSingleSchema.Type))
		}
		if resp.Configuration.SourceE2eTestCloud.MockCatalog.SourceE2eTestCloudMockCatalogMultiSchema != nil {
			r.Configuration.SourceE2eTestCloud.MockCatalog.SourceE2eTestCloudMockCatalogMultiSchema = &SourceE2eTestCloudMockCatalogMultiSchema{}
			r.Configuration.SourceE2eTestCloud.MockCatalog.SourceE2eTestCloudMockCatalogMultiSchema.StreamSchemas = types.StringValue(resp.Configuration.SourceE2eTestCloud.MockCatalog.SourceE2eTestCloudMockCatalogMultiSchema.StreamSchemas)
			r.Configuration.SourceE2eTestCloud.MockCatalog.SourceE2eTestCloudMockCatalogMultiSchema.Type = types.StringValue(string(resp.Configuration.SourceE2eTestCloud.MockCatalog.SourceE2eTestCloudMockCatalogMultiSchema.Type))
		}
		if resp.Configuration.SourceE2eTestCloud.Seed != nil {
			r.Configuration.SourceE2eTestCloud.Seed = types.Int64Value(*resp.Configuration.SourceE2eTestCloud.Seed)
		} else {
			r.Configuration.SourceE2eTestCloud.Seed = types.Int64Null()
		}
		r.Configuration.SourceE2eTestCloud.SourceType = types.StringValue(string(resp.Configuration.SourceE2eTestCloud.SourceType))
		if resp.Configuration.SourceE2eTestCloud.Type != nil {
			r.Configuration.SourceE2eTestCloud.Type = types.StringValue(string(*resp.Configuration.SourceE2eTestCloud.Type))
		} else {
			r.Configuration.SourceE2eTestCloud.Type = types.StringNull()
		}
	}
	if resp.Configuration.SourceEmailoctopus != nil {
		r.Configuration.SourceEmailoctopus = &SourceEmailoctopus{}
		r.Configuration.SourceEmailoctopus.APIKey = types.StringValue(resp.Configuration.SourceEmailoctopus.APIKey)
		r.Configuration.SourceEmailoctopus.SourceType = types.StringValue(string(resp.Configuration.SourceEmailoctopus.SourceType))
	}
	if resp.Configuration.SourceExchangeRates != nil {
		r.Configuration.SourceExchangeRates = &SourceExchangeRates{}
		r.Configuration.SourceExchangeRates.AccessKey = types.StringValue(resp.Configuration.SourceExchangeRates.AccessKey)
		if resp.Configuration.SourceExchangeRates.Base != nil {
			r.Configuration.SourceExchangeRates.Base = types.StringValue(*resp.Configuration.SourceExchangeRates.Base)
		} else {
			r.Configuration.SourceExchangeRates.Base = types.StringNull()
		}
		if resp.Configuration.SourceExchangeRates.IgnoreWeekends != nil {
			r.Configuration.SourceExchangeRates.IgnoreWeekends = types.BoolValue(*resp.Configuration.SourceExchangeRates.IgnoreWeekends)
		} else {
			r.Configuration.SourceExchangeRates.IgnoreWeekends = types.BoolNull()
		}
		r.Configuration.SourceExchangeRates.SourceType = types.StringValue(string(resp.Configuration.SourceExchangeRates.SourceType))
		r.Configuration.SourceExchangeRates.StartDate = types.StringValue(resp.Configuration.SourceExchangeRates.StartDate.String())
	}
	if resp.Configuration.SourceFacebookMarketing != nil {
		r.Configuration.SourceFacebookMarketing = &SourceFacebookMarketing{}
		r.Configuration.SourceFacebookMarketing.AccessToken = types.StringValue(resp.Configuration.SourceFacebookMarketing.AccessToken)
		r.Configuration.SourceFacebookMarketing.AccountID = types.StringValue(resp.Configuration.SourceFacebookMarketing.AccountID)
		if resp.Configuration.SourceFacebookMarketing.ActionBreakdownsAllowEmpty != nil {
			r.Configuration.SourceFacebookMarketing.ActionBreakdownsAllowEmpty = types.BoolValue(*resp.Configuration.SourceFacebookMarketing.ActionBreakdownsAllowEmpty)
		} else {
			r.Configuration.SourceFacebookMarketing.ActionBreakdownsAllowEmpty = types.BoolNull()
		}
		r.Configuration.SourceFacebookMarketing.CustomInsights = nil
		for _, customInsightsItem := range resp.Configuration.SourceFacebookMarketing.CustomInsights {
			var customInsights1 SourceFacebookMarketingInsightConfig
			customInsights1.ActionBreakdowns = nil
			for _, v := range customInsightsItem.ActionBreakdowns {
				customInsights1.ActionBreakdowns = append(customInsights1.ActionBreakdowns, types.StringValue(string(v)))
			}
			customInsights1.Breakdowns = nil
			for _, v := range customInsightsItem.Breakdowns {
				customInsights1.Breakdowns = append(customInsights1.Breakdowns, types.StringValue(string(v)))
			}
			if customInsightsItem.EndDate != nil {
				customInsights1.EndDate = types.StringValue(customInsightsItem.EndDate.Format(time.RFC3339))
			} else {
				customInsights1.EndDate = types.StringNull()
			}
			customInsights1.Fields = nil
			for _, v := range customInsightsItem.Fields {
				customInsights1.Fields = append(customInsights1.Fields, types.StringValue(string(v)))
			}
			if customInsightsItem.InsightsLookbackWindow != nil {
				customInsights1.InsightsLookbackWindow = types.Int64Value(*customInsightsItem.InsightsLookbackWindow)
			} else {
				customInsights1.InsightsLookbackWindow = types.Int64Null()
			}
			if customInsightsItem.Level != nil {
				customInsights1.Level = types.StringValue(string(*customInsightsItem.Level))
			} else {
				customInsights1.Level = types.StringNull()
			}
			customInsights1.Name = types.StringValue(customInsightsItem.Name)
			if customInsightsItem.StartDate != nil {
				customInsights1.StartDate = types.StringValue(customInsightsItem.StartDate.Format(time.RFC3339))
			} else {
				customInsights1.StartDate = types.StringNull()
			}
			if customInsightsItem.TimeIncrement != nil {
				customInsights1.TimeIncrement = types.Int64Value(*customInsightsItem.TimeIncrement)
			} else {
				customInsights1.TimeIncrement = types.Int64Null()
			}
			r.Configuration.SourceFacebookMarketing.CustomInsights = append(r.Configuration.SourceFacebookMarketing.CustomInsights, customInsights1)
		}
		if resp.Configuration.SourceFacebookMarketing.EndDate != nil {
			r.Configuration.SourceFacebookMarketing.EndDate = types.StringValue(*resp.Configuration.SourceFacebookMarketing.EndDate)
		} else {
			r.Configuration.SourceFacebookMarketing.EndDate = types.StringNull()
		}
		if resp.Configuration.SourceFacebookMarketing.FetchThumbnailImages != nil {
			r.Configuration.SourceFacebookMarketing.FetchThumbnailImages = types.BoolValue(*resp.Configuration.SourceFacebookMarketing.FetchThumbnailImages)
		} else {
			r.Configuration.SourceFacebookMarketing.FetchThumbnailImages = types.BoolNull()
		}
		if resp.Configuration.SourceFacebookMarketing.IncludeDeleted != nil {
			r.Configuration.SourceFacebookMarketing.IncludeDeleted = types.BoolValue(*resp.Configuration.SourceFacebookMarketing.IncludeDeleted)
		} else {
			r.Configuration.SourceFacebookMarketing.IncludeDeleted = types.BoolNull()
		}
		if resp.Configuration.SourceFacebookMarketing.InsightsLookbackWindow != nil {
			r.Configuration.SourceFacebookMarketing.InsightsLookbackWindow = types.Int64Value(*resp.Configuration.SourceFacebookMarketing.InsightsLookbackWindow)
		} else {
			r.Configuration.SourceFacebookMarketing.InsightsLookbackWindow = types.Int64Null()
		}
		if resp.Configuration.SourceFacebookMarketing.MaxBatchSize != nil {
			r.Configuration.SourceFacebookMarketing.MaxBatchSize = types.Int64Value(*resp.Configuration.SourceFacebookMarketing.MaxBatchSize)
		} else {
			r.Configuration.SourceFacebookMarketing.MaxBatchSize = types.Int64Null()
		}
		if resp.Configuration.SourceFacebookMarketing.PageSize != nil {
			r.Configuration.SourceFacebookMarketing.PageSize = types.Int64Value(*resp.Configuration.SourceFacebookMarketing.PageSize)
		} else {
			r.Configuration.SourceFacebookMarketing.PageSize = types.Int64Null()
		}
		r.Configuration.SourceFacebookMarketing.SourceType = types.StringValue(string(resp.Configuration.SourceFacebookMarketing.SourceType))
		r.Configuration.SourceFacebookMarketing.StartDate = types.StringValue(resp.Configuration.SourceFacebookMarketing.StartDate.Format(time.RFC3339))
	}
	if resp.Configuration.SourceFacebookPages != nil {
		r.Configuration.SourceFacebookPages = &SourceFacebookPages{}
		r.Configuration.SourceFacebookPages.AccessToken = types.StringValue(resp.Configuration.SourceFacebookPages.AccessToken)
		r.Configuration.SourceFacebookPages.PageID = types.StringValue(resp.Configuration.SourceFacebookPages.PageID)
		r.Configuration.SourceFacebookPages.SourceType = types.StringValue(string(resp.Configuration.SourceFacebookPages.SourceType))
	}
	if resp.Configuration.SourceFaker != nil {
		r.Configuration.SourceFaker = &SourceFaker{}
		r.Configuration.SourceFaker.Count = types.Int64Value(resp.Configuration.SourceFaker.Count)
		if resp.Configuration.SourceFaker.Parallelism != nil {
			r.Configuration.SourceFaker.Parallelism = types.Int64Value(*resp.Configuration.SourceFaker.Parallelism)
		} else {
			r.Configuration.SourceFaker.Parallelism = types.Int64Null()
		}
		if resp.Configuration.SourceFaker.RecordsPerSlice != nil {
			r.Configuration.SourceFaker.RecordsPerSlice = types.Int64Value(*resp.Configuration.SourceFaker.RecordsPerSlice)
		} else {
			r.Configuration.SourceFaker.RecordsPerSlice = types.Int64Null()
		}
		if resp.Configuration.SourceFaker.RecordsPerSync != nil {
			r.Configuration.SourceFaker.RecordsPerSync = types.Int64Value(*resp.Configuration.SourceFaker.RecordsPerSync)
		} else {
			r.Configuration.SourceFaker.RecordsPerSync = types.Int64Null()
		}
		if resp.Configuration.SourceFaker.Seed != nil {
			r.Configuration.SourceFaker.Seed = types.Int64Value(*resp.Configuration.SourceFaker.Seed)
		} else {
			r.Configuration.SourceFaker.Seed = types.Int64Null()
		}
		r.Configuration.SourceFaker.SourceType = types.StringValue(string(resp.Configuration.SourceFaker.SourceType))
	}
	if resp.Configuration.SourceFauna != nil {
		r.Configuration.SourceFauna = &SourceFauna{}
		if resp.Configuration.SourceFauna.Collection == nil {
			r.Configuration.SourceFauna.Collection = nil
		} else {
			r.Configuration.SourceFauna.Collection = &SourceFaunaCollection{}
			if resp.Configuration.SourceFauna.Collection.Deletions.SourceFaunaCollectionDeletionModeDisabled != nil {
				r.Configuration.SourceFauna.Collection.Deletions.SourceFaunaCollectionDeletionModeDisabled = &SourceFaunaCollectionDeletionModeDisabled{}
				r.Configuration.SourceFauna.Collection.Deletions.SourceFaunaCollectionDeletionModeDisabled.DeletionMode = types.StringValue(string(resp.Configuration.SourceFauna.Collection.Deletions.SourceFaunaCollectionDeletionModeDisabled.DeletionMode))
			}
			if resp.Configuration.SourceFauna.Collection.Deletions.SourceFaunaCollectionDeletionModeEnabled != nil {
				r.Configuration.SourceFauna.Collection.Deletions.SourceFaunaCollectionDeletionModeEnabled = &SourceFaunaCollectionDeletionModeEnabled{}
				r.Configuration.SourceFauna.Collection.Deletions.SourceFaunaCollectionDeletionModeEnabled.Column = types.StringValue(resp.Configuration.SourceFauna.Collection.Deletions.SourceFaunaCollectionDeletionModeEnabled.Column)
				r.Configuration.SourceFauna.Collection.Deletions.SourceFaunaCollectionDeletionModeEnabled.DeletionMode = types.StringValue(string(resp.Configuration.SourceFauna.Collection.Deletions.SourceFaunaCollectionDeletionModeEnabled.DeletionMode))
			}
			r.Configuration.SourceFauna.Collection.PageSize = types.Int64Value(resp.Configuration.SourceFauna.Collection.PageSize)
		}
		r.Configuration.SourceFauna.Domain = types.StringValue(resp.Configuration.SourceFauna.Domain)
		r.Configuration.SourceFauna.Port = types.Int64Value(resp.Configuration.SourceFauna.Port)
		r.Configuration.SourceFauna.Scheme = types.StringValue(resp.Configuration.SourceFauna.Scheme)
		r.Configuration.SourceFauna.Secret = types.StringValue(resp.Configuration.SourceFauna.Secret)
		r.Configuration.SourceFauna.SourceType = types.StringValue(string(resp.Configuration.SourceFauna.SourceType))
	}
	if resp.Configuration.SourceFileSecure != nil {
		r.Configuration.SourceFileSecure = &SourceFileSecure{}
		r.Configuration.SourceFileSecure.DatasetName = types.StringValue(resp.Configuration.SourceFileSecure.DatasetName)
		r.Configuration.SourceFileSecure.Format = types.StringValue(string(resp.Configuration.SourceFileSecure.Format))
		if resp.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderHTTPSPublicWeb != nil {
			r.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderHTTPSPublicWeb = &SourceFileSecureStorageProviderHTTPSPublicWeb{}
			r.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderHTTPSPublicWeb.Storage = types.StringValue(string(resp.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderHTTPSPublicWeb.Storage))
			if resp.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderHTTPSPublicWeb.UserAgent != nil {
				r.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderHTTPSPublicWeb.UserAgent = types.BoolValue(*resp.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderHTTPSPublicWeb.UserAgent)
			} else {
				r.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderHTTPSPublicWeb.UserAgent = types.BoolNull()
			}
		}
		if resp.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderGCSGoogleCloudStorage != nil {
			r.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderGCSGoogleCloudStorage = &SourceFileSecureStorageProviderGCSGoogleCloudStorage{}
			if resp.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderGCSGoogleCloudStorage.ServiceAccountJSON != nil {
				r.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderGCSGoogleCloudStorage.ServiceAccountJSON = types.StringValue(*resp.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderGCSGoogleCloudStorage.ServiceAccountJSON)
			} else {
				r.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderGCSGoogleCloudStorage.ServiceAccountJSON = types.StringNull()
			}
			r.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderGCSGoogleCloudStorage.Storage = types.StringValue(string(resp.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderGCSGoogleCloudStorage.Storage))
		}
		if resp.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderS3AmazonWebServices != nil {
			r.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderS3AmazonWebServices = &SourceFileSecureStorageProviderS3AmazonWebServices{}
			if resp.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderS3AmazonWebServices.AwsAccessKeyID != nil {
				r.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderS3AmazonWebServices.AwsAccessKeyID = types.StringValue(*resp.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderS3AmazonWebServices.AwsAccessKeyID)
			} else {
				r.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderS3AmazonWebServices.AwsAccessKeyID = types.StringNull()
			}
			if resp.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderS3AmazonWebServices.AwsSecretAccessKey != nil {
				r.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderS3AmazonWebServices.AwsSecretAccessKey = types.StringValue(*resp.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderS3AmazonWebServices.AwsSecretAccessKey)
			} else {
				r.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderS3AmazonWebServices.AwsSecretAccessKey = types.StringNull()
			}
			r.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderS3AmazonWebServices.Storage = types.StringValue(string(resp.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderS3AmazonWebServices.Storage))
		}
		if resp.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderAzBlobAzureBlobStorage != nil {
			r.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderAzBlobAzureBlobStorage = &SourceFileSecureStorageProviderAzBlobAzureBlobStorage{}
			if resp.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderAzBlobAzureBlobStorage.SasToken != nil {
				r.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderAzBlobAzureBlobStorage.SasToken = types.StringValue(*resp.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderAzBlobAzureBlobStorage.SasToken)
			} else {
				r.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderAzBlobAzureBlobStorage.SasToken = types.StringNull()
			}
			if resp.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderAzBlobAzureBlobStorage.SharedKey != nil {
				r.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderAzBlobAzureBlobStorage.SharedKey = types.StringValue(*resp.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderAzBlobAzureBlobStorage.SharedKey)
			} else {
				r.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderAzBlobAzureBlobStorage.SharedKey = types.StringNull()
			}
			r.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderAzBlobAzureBlobStorage.Storage = types.StringValue(string(resp.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderAzBlobAzureBlobStorage.Storage))
			r.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderAzBlobAzureBlobStorage.StorageAccount = types.StringValue(resp.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderAzBlobAzureBlobStorage.StorageAccount)
		}
		if resp.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderSSHSecureShell != nil {
			r.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderSSHSecureShell = &SourceFileSecureStorageProviderSSHSecureShell{}
			r.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderSSHSecureShell.Host = types.StringValue(resp.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderSSHSecureShell.Host)
			if resp.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderSSHSecureShell.Password != nil {
				r.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderSSHSecureShell.Password = types.StringValue(*resp.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderSSHSecureShell.Password)
			} else {
				r.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderSSHSecureShell.Password = types.StringNull()
			}
			if resp.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderSSHSecureShell.Port != nil {
				r.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderSSHSecureShell.Port = types.StringValue(*resp.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderSSHSecureShell.Port)
			} else {
				r.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderSSHSecureShell.Port = types.StringNull()
			}
			r.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderSSHSecureShell.Storage = types.StringValue(string(resp.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderSSHSecureShell.Storage))
			r.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderSSHSecureShell.User = types.StringValue(resp.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderSSHSecureShell.User)
		}
		if resp.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderSCPSecureCopyProtocol != nil {
			r.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderSCPSecureCopyProtocol = &SourceFileSecureStorageProviderSCPSecureCopyProtocol{}
			r.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderSCPSecureCopyProtocol.Host = types.StringValue(resp.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderSCPSecureCopyProtocol.Host)
			if resp.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderSCPSecureCopyProtocol.Password != nil {
				r.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderSCPSecureCopyProtocol.Password = types.StringValue(*resp.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderSCPSecureCopyProtocol.Password)
			} else {
				r.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderSCPSecureCopyProtocol.Password = types.StringNull()
			}
			if resp.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderSCPSecureCopyProtocol.Port != nil {
				r.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderSCPSecureCopyProtocol.Port = types.StringValue(*resp.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderSCPSecureCopyProtocol.Port)
			} else {
				r.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderSCPSecureCopyProtocol.Port = types.StringNull()
			}
			r.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderSCPSecureCopyProtocol.Storage = types.StringValue(string(resp.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderSCPSecureCopyProtocol.Storage))
			r.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderSCPSecureCopyProtocol.User = types.StringValue(resp.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderSCPSecureCopyProtocol.User)
		}
		if resp.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderSFTPSecureFileTransferProtocol != nil {
			r.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderSFTPSecureFileTransferProtocol = &SourceFileSecureStorageProviderSFTPSecureFileTransferProtocol{}
			r.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderSFTPSecureFileTransferProtocol.Host = types.StringValue(resp.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderSFTPSecureFileTransferProtocol.Host)
			if resp.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderSFTPSecureFileTransferProtocol.Password != nil {
				r.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderSFTPSecureFileTransferProtocol.Password = types.StringValue(*resp.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderSFTPSecureFileTransferProtocol.Password)
			} else {
				r.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderSFTPSecureFileTransferProtocol.Password = types.StringNull()
			}
			if resp.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderSFTPSecureFileTransferProtocol.Port != nil {
				r.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderSFTPSecureFileTransferProtocol.Port = types.StringValue(*resp.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderSFTPSecureFileTransferProtocol.Port)
			} else {
				r.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderSFTPSecureFileTransferProtocol.Port = types.StringNull()
			}
			r.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderSFTPSecureFileTransferProtocol.Storage = types.StringValue(string(resp.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderSFTPSecureFileTransferProtocol.Storage))
			r.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderSFTPSecureFileTransferProtocol.User = types.StringValue(resp.Configuration.SourceFileSecure.Provider.SourceFileSecureStorageProviderSFTPSecureFileTransferProtocol.User)
		}
		if resp.Configuration.SourceFileSecure.ReaderOptions != nil {
			r.Configuration.SourceFileSecure.ReaderOptions = types.StringValue(*resp.Configuration.SourceFileSecure.ReaderOptions)
		} else {
			r.Configuration.SourceFileSecure.ReaderOptions = types.StringNull()
		}
		r.Configuration.SourceFileSecure.SourceType = types.StringValue(string(resp.Configuration.SourceFileSecure.SourceType))
		r.Configuration.SourceFileSecure.URL = types.StringValue(resp.Configuration.SourceFileSecure.URL)
	}
	if resp.Configuration.SourceFirebolt != nil {
		r.Configuration.SourceFirebolt = &SourceFirebolt{}
		if resp.Configuration.SourceFirebolt.Account != nil {
			r.Configuration.SourceFirebolt.Account = types.StringValue(*resp.Configuration.SourceFirebolt.Account)
		} else {
			r.Configuration.SourceFirebolt.Account = types.StringNull()
		}
		r.Configuration.SourceFirebolt.Database = types.StringValue(resp.Configuration.SourceFirebolt.Database)
		if resp.Configuration.SourceFirebolt.Engine != nil {
			r.Configuration.SourceFirebolt.Engine = types.StringValue(*resp.Configuration.SourceFirebolt.Engine)
		} else {
			r.Configuration.SourceFirebolt.Engine = types.StringNull()
		}
		if resp.Configuration.SourceFirebolt.Host != nil {
			r.Configuration.SourceFirebolt.Host = types.StringValue(*resp.Configuration.SourceFirebolt.Host)
		} else {
			r.Configuration.SourceFirebolt.Host = types.StringNull()
		}
		r.Configuration.SourceFirebolt.Password = types.StringValue(resp.Configuration.SourceFirebolt.Password)
		r.Configuration.SourceFirebolt.SourceType = types.StringValue(string(resp.Configuration.SourceFirebolt.SourceType))
		r.Configuration.SourceFirebolt.Username = types.StringValue(resp.Configuration.SourceFirebolt.Username)
	}
	if resp.Configuration.SourceFreshcaller != nil {
		r.Configuration.SourceFreshcaller = &SourceFreshcaller{}
		r.Configuration.SourceFreshcaller.APIKey = types.StringValue(resp.Configuration.SourceFreshcaller.APIKey)
		r.Configuration.SourceFreshcaller.Domain = types.StringValue(resp.Configuration.SourceFreshcaller.Domain)
		if resp.Configuration.SourceFreshcaller.RequestsPerMinute != nil {
			r.Configuration.SourceFreshcaller.RequestsPerMinute = types.Int64Value(*resp.Configuration.SourceFreshcaller.RequestsPerMinute)
		} else {
			r.Configuration.SourceFreshcaller.RequestsPerMinute = types.Int64Null()
		}
		r.Configuration.SourceFreshcaller.SourceType = types.StringValue(string(resp.Configuration.SourceFreshcaller.SourceType))
		startDateResult, _ := json.Marshal(resp.Configuration.SourceFreshcaller.StartDate)
		r.Configuration.SourceFreshcaller.StartDate = types.StringValue(string(startDateResult))
		if resp.Configuration.SourceFreshcaller.SyncLagMinutes != nil {
			r.Configuration.SourceFreshcaller.SyncLagMinutes = types.Int64Value(*resp.Configuration.SourceFreshcaller.SyncLagMinutes)
		} else {
			r.Configuration.SourceFreshcaller.SyncLagMinutes = types.Int64Null()
		}
	}
	if resp.Configuration.SourceFreshdesk != nil {
		r.Configuration.SourceFreshdesk = &SourceFreshdesk{}
		r.Configuration.SourceFreshdesk.APIKey = types.StringValue(resp.Configuration.SourceFreshdesk.APIKey)
		r.Configuration.SourceFreshdesk.Domain = types.StringValue(resp.Configuration.SourceFreshdesk.Domain)
		if resp.Configuration.SourceFreshdesk.RequestsPerMinute != nil {
			r.Configuration.SourceFreshdesk.RequestsPerMinute = types.Int64Value(*resp.Configuration.SourceFreshdesk.RequestsPerMinute)
		} else {
			r.Configuration.SourceFreshdesk.RequestsPerMinute = types.Int64Null()
		}
		r.Configuration.SourceFreshdesk.SourceType = types.StringValue(string(resp.Configuration.SourceFreshdesk.SourceType))
		if resp.Configuration.SourceFreshdesk.StartDate != nil {
			r.Configuration.SourceFreshdesk.StartDate = types.StringValue(resp.Configuration.SourceFreshdesk.StartDate.Format(time.RFC3339))
		} else {
			r.Configuration.SourceFreshdesk.StartDate = types.StringNull()
		}
	}
	if resp.Configuration.SourceFreshsales != nil {
		r.Configuration.SourceFreshsales = &SourceFreshsales{}
		r.Configuration.SourceFreshsales.APIKey = types.StringValue(resp.Configuration.SourceFreshsales.APIKey)
		r.Configuration.SourceFreshsales.DomainName = types.StringValue(resp.Configuration.SourceFreshsales.DomainName)
		r.Configuration.SourceFreshsales.SourceType = types.StringValue(string(resp.Configuration.SourceFreshsales.SourceType))
	}
	if resp.Configuration.SourceGcs != nil {
		r.Configuration.SourceGcs = &SourceGcs{}
		r.Configuration.SourceGcs.GcsBucket = types.StringValue(resp.Configuration.SourceGcs.GcsBucket)
		r.Configuration.SourceGcs.GcsPath = types.StringValue(resp.Configuration.SourceGcs.GcsPath)
		r.Configuration.SourceGcs.ServiceAccount = types.StringValue(resp.Configuration.SourceGcs.ServiceAccount)
		r.Configuration.SourceGcs.SourceType = types.StringValue(string(resp.Configuration.SourceGcs.SourceType))
	}
	if resp.Configuration.SourceGetlago != nil {
		r.Configuration.SourceGetlago = &SourceGetlago{}
		r.Configuration.SourceGetlago.APIKey = types.StringValue(resp.Configuration.SourceGetlago.APIKey)
		r.Configuration.SourceGetlago.SourceType = types.StringValue(string(resp.Configuration.SourceGetlago.SourceType))
	}
	if resp.Configuration.SourceGithub != nil {
		r.Configuration.SourceGithub = &SourceGithub{}
		if resp.Configuration.SourceGithub.Branch != nil {
			r.Configuration.SourceGithub.Branch = types.StringValue(*resp.Configuration.SourceGithub.Branch)
		} else {
			r.Configuration.SourceGithub.Branch = types.StringNull()
		}
		if resp.Configuration.SourceGithub.Credentials == nil {
			r.Configuration.SourceGithub.Credentials = nil
		} else {
			r.Configuration.SourceGithub.Credentials = &SourceGithubAuthentication{}
			if resp.Configuration.SourceGithub.Credentials.SourceGithubAuthenticationOAuth != nil {
				r.Configuration.SourceGithub.Credentials.SourceGithubAuthenticationOAuth = &SourceGithubAuthenticationOAuth{}
				r.Configuration.SourceGithub.Credentials.SourceGithubAuthenticationOAuth.AccessToken = types.StringValue(resp.Configuration.SourceGithub.Credentials.SourceGithubAuthenticationOAuth.AccessToken)
				if resp.Configuration.SourceGithub.Credentials.SourceGithubAuthenticationOAuth.OptionTitle != nil {
					r.Configuration.SourceGithub.Credentials.SourceGithubAuthenticationOAuth.OptionTitle = types.StringValue(string(*resp.Configuration.SourceGithub.Credentials.SourceGithubAuthenticationOAuth.OptionTitle))
				} else {
					r.Configuration.SourceGithub.Credentials.SourceGithubAuthenticationOAuth.OptionTitle = types.StringNull()
				}
			}
			if resp.Configuration.SourceGithub.Credentials.SourceGithubAuthenticationPersonalAccessToken != nil {
				r.Configuration.SourceGithub.Credentials.SourceGithubAuthenticationPersonalAccessToken = &SourceGithubAuthenticationPersonalAccessToken{}
				if resp.Configuration.SourceGithub.Credentials.SourceGithubAuthenticationPersonalAccessToken.OptionTitle != nil {
					r.Configuration.SourceGithub.Credentials.SourceGithubAuthenticationPersonalAccessToken.OptionTitle = types.StringValue(string(*resp.Configuration.SourceGithub.Credentials.SourceGithubAuthenticationPersonalAccessToken.OptionTitle))
				} else {
					r.Configuration.SourceGithub.Credentials.SourceGithubAuthenticationPersonalAccessToken.OptionTitle = types.StringNull()
				}
				r.Configuration.SourceGithub.Credentials.SourceGithubAuthenticationPersonalAccessToken.PersonalAccessToken = types.StringValue(resp.Configuration.SourceGithub.Credentials.SourceGithubAuthenticationPersonalAccessToken.PersonalAccessToken)
			}
		}
		if resp.Configuration.SourceGithub.PageSizeForLargeStreams != nil {
			r.Configuration.SourceGithub.PageSizeForLargeStreams = types.Int64Value(*resp.Configuration.SourceGithub.PageSizeForLargeStreams)
		} else {
			r.Configuration.SourceGithub.PageSizeForLargeStreams = types.Int64Null()
		}
		r.Configuration.SourceGithub.Repository = types.StringValue(resp.Configuration.SourceGithub.Repository)
		r.Configuration.SourceGithub.SourceType = types.StringValue(string(resp.Configuration.SourceGithub.SourceType))
		r.Configuration.SourceGithub.StartDate = types.StringValue(resp.Configuration.SourceGithub.StartDate.Format(time.RFC3339))
	}
	if resp.Configuration.SourceGitlab != nil {
		r.Configuration.SourceGitlab = &SourceGitlab{}
		r.Configuration.SourceGitlab.APIURL = types.StringValue(resp.Configuration.SourceGitlab.APIURL)
		if resp.Configuration.SourceGitlab.Credentials.SourceGitlabAuthorizationMethodOAuth20 != nil {
			r.Configuration.SourceGitlab.Credentials.SourceGitlabAuthorizationMethodOAuth20 = &SourceGitlabAuthorizationMethodOAuth20{}
			r.Configuration.SourceGitlab.Credentials.SourceGitlabAuthorizationMethodOAuth20.AccessToken = types.StringValue(resp.Configuration.SourceGitlab.Credentials.SourceGitlabAuthorizationMethodOAuth20.AccessToken)
			if resp.Configuration.SourceGitlab.Credentials.SourceGitlabAuthorizationMethodOAuth20.AuthType != nil {
				r.Configuration.SourceGitlab.Credentials.SourceGitlabAuthorizationMethodOAuth20.AuthType = types.StringValue(string(*resp.Configuration.SourceGitlab.Credentials.SourceGitlabAuthorizationMethodOAuth20.AuthType))
			} else {
				r.Configuration.SourceGitlab.Credentials.SourceGitlabAuthorizationMethodOAuth20.AuthType = types.StringNull()
			}
			r.Configuration.SourceGitlab.Credentials.SourceGitlabAuthorizationMethodOAuth20.ClientID = types.StringValue(resp.Configuration.SourceGitlab.Credentials.SourceGitlabAuthorizationMethodOAuth20.ClientID)
			r.Configuration.SourceGitlab.Credentials.SourceGitlabAuthorizationMethodOAuth20.ClientSecret = types.StringValue(resp.Configuration.SourceGitlab.Credentials.SourceGitlabAuthorizationMethodOAuth20.ClientSecret)
			r.Configuration.SourceGitlab.Credentials.SourceGitlabAuthorizationMethodOAuth20.RefreshToken = types.StringValue(resp.Configuration.SourceGitlab.Credentials.SourceGitlabAuthorizationMethodOAuth20.RefreshToken)
			r.Configuration.SourceGitlab.Credentials.SourceGitlabAuthorizationMethodOAuth20.TokenExpiryDate = types.StringValue(resp.Configuration.SourceGitlab.Credentials.SourceGitlabAuthorizationMethodOAuth20.TokenExpiryDate.Format(time.RFC3339))
		}
		if resp.Configuration.SourceGitlab.Credentials.SourceGitlabAuthorizationMethodPrivateToken != nil {
			r.Configuration.SourceGitlab.Credentials.SourceGitlabAuthorizationMethodPrivateToken = &SourceGitlabAuthorizationMethodPrivateToken{}
			r.Configuration.SourceGitlab.Credentials.SourceGitlabAuthorizationMethodPrivateToken.AccessToken = types.StringValue(resp.Configuration.SourceGitlab.Credentials.SourceGitlabAuthorizationMethodPrivateToken.AccessToken)
			if resp.Configuration.SourceGitlab.Credentials.SourceGitlabAuthorizationMethodPrivateToken.AuthType != nil {
				r.Configuration.SourceGitlab.Credentials.SourceGitlabAuthorizationMethodPrivateToken.AuthType = types.StringValue(string(*resp.Configuration.SourceGitlab.Credentials.SourceGitlabAuthorizationMethodPrivateToken.AuthType))
			} else {
				r.Configuration.SourceGitlab.Credentials.SourceGitlabAuthorizationMethodPrivateToken.AuthType = types.StringNull()
			}
		}
		if resp.Configuration.SourceGitlab.Groups != nil {
			r.Configuration.SourceGitlab.Groups = types.StringValue(*resp.Configuration.SourceGitlab.Groups)
		} else {
			r.Configuration.SourceGitlab.Groups = types.StringNull()
		}
		if resp.Configuration.SourceGitlab.Projects != nil {
			r.Configuration.SourceGitlab.Projects = types.StringValue(*resp.Configuration.SourceGitlab.Projects)
		} else {
			r.Configuration.SourceGitlab.Projects = types.StringNull()
		}
		r.Configuration.SourceGitlab.SourceType = types.StringValue(string(resp.Configuration.SourceGitlab.SourceType))
		r.Configuration.SourceGitlab.StartDate = types.StringValue(resp.Configuration.SourceGitlab.StartDate.Format(time.RFC3339))
	}
	if resp.Configuration.SourceGlassfrog != nil {
		r.Configuration.SourceGlassfrog = &SourceGlassfrog{}
		r.Configuration.SourceGlassfrog.APIKey = types.StringValue(resp.Configuration.SourceGlassfrog.APIKey)
		r.Configuration.SourceGlassfrog.SourceType = types.StringValue(string(resp.Configuration.SourceGlassfrog.SourceType))
	}
	if resp.Configuration.SourceGnews != nil {
		r.Configuration.SourceGnews = &SourceGnews{}
		r.Configuration.SourceGnews.APIKey = types.StringValue(resp.Configuration.SourceGnews.APIKey)
		if resp.Configuration.SourceGnews.Country != nil {
			r.Configuration.SourceGnews.Country = types.StringValue(string(*resp.Configuration.SourceGnews.Country))
		} else {
			r.Configuration.SourceGnews.Country = types.StringNull()
		}
		if resp.Configuration.SourceGnews.EndDate != nil {
			r.Configuration.SourceGnews.EndDate = types.StringValue(*resp.Configuration.SourceGnews.EndDate)
		} else {
			r.Configuration.SourceGnews.EndDate = types.StringNull()
		}
		r.Configuration.SourceGnews.In = nil
		for _, v := range resp.Configuration.SourceGnews.In {
			r.Configuration.SourceGnews.In = append(r.Configuration.SourceGnews.In, types.StringValue(string(v)))
		}
		if resp.Configuration.SourceGnews.Language != nil {
			r.Configuration.SourceGnews.Language = types.StringValue(string(*resp.Configuration.SourceGnews.Language))
		} else {
			r.Configuration.SourceGnews.Language = types.StringNull()
		}
		r.Configuration.SourceGnews.Nullable = nil
		for _, v := range resp.Configuration.SourceGnews.Nullable {
			r.Configuration.SourceGnews.Nullable = append(r.Configuration.SourceGnews.Nullable, types.StringValue(string(v)))
		}
		r.Configuration.SourceGnews.Query = types.StringValue(resp.Configuration.SourceGnews.Query)
		if resp.Configuration.SourceGnews.Sortby != nil {
			r.Configuration.SourceGnews.Sortby = types.StringValue(string(*resp.Configuration.SourceGnews.Sortby))
		} else {
			r.Configuration.SourceGnews.Sortby = types.StringNull()
		}
		r.Configuration.SourceGnews.SourceType = types.StringValue(string(resp.Configuration.SourceGnews.SourceType))
		if resp.Configuration.SourceGnews.StartDate != nil {
			r.Configuration.SourceGnews.StartDate = types.StringValue(*resp.Configuration.SourceGnews.StartDate)
		} else {
			r.Configuration.SourceGnews.StartDate = types.StringNull()
		}
		if resp.Configuration.SourceGnews.TopHeadlinesQuery != nil {
			r.Configuration.SourceGnews.TopHeadlinesQuery = types.StringValue(*resp.Configuration.SourceGnews.TopHeadlinesQuery)
		} else {
			r.Configuration.SourceGnews.TopHeadlinesQuery = types.StringNull()
		}
		if resp.Configuration.SourceGnews.TopHeadlinesTopic != nil {
			r.Configuration.SourceGnews.TopHeadlinesTopic = types.StringValue(string(*resp.Configuration.SourceGnews.TopHeadlinesTopic))
		} else {
			r.Configuration.SourceGnews.TopHeadlinesTopic = types.StringNull()
		}
	}
	if resp.Configuration.SourceGoogleAds != nil {
		r.Configuration.SourceGoogleAds = &SourceGoogleAds{}
		if resp.Configuration.SourceGoogleAds.ConversionWindowDays != nil {
			r.Configuration.SourceGoogleAds.ConversionWindowDays = types.Int64Value(*resp.Configuration.SourceGoogleAds.ConversionWindowDays)
		} else {
			r.Configuration.SourceGoogleAds.ConversionWindowDays = types.Int64Null()
		}
		if resp.Configuration.SourceGoogleAds.Credentials.AccessToken != nil {
			r.Configuration.SourceGoogleAds.Credentials.AccessToken = types.StringValue(*resp.Configuration.SourceGoogleAds.Credentials.AccessToken)
		} else {
			r.Configuration.SourceGoogleAds.Credentials.AccessToken = types.StringNull()
		}
		r.Configuration.SourceGoogleAds.Credentials.ClientID = types.StringValue(resp.Configuration.SourceGoogleAds.Credentials.ClientID)
		r.Configuration.SourceGoogleAds.Credentials.ClientSecret = types.StringValue(resp.Configuration.SourceGoogleAds.Credentials.ClientSecret)
		r.Configuration.SourceGoogleAds.Credentials.DeveloperToken = types.StringValue(resp.Configuration.SourceGoogleAds.Credentials.DeveloperToken)
		r.Configuration.SourceGoogleAds.Credentials.RefreshToken = types.StringValue(resp.Configuration.SourceGoogleAds.Credentials.RefreshToken)
		r.Configuration.SourceGoogleAds.CustomQueries = nil
		for _, customQueriesItem := range resp.Configuration.SourceGoogleAds.CustomQueries {
			var customQueries1 SourceGoogleAdsCustomQueries
			customQueries1.Query = types.StringValue(customQueriesItem.Query)
			customQueries1.TableName = types.StringValue(customQueriesItem.TableName)
			r.Configuration.SourceGoogleAds.CustomQueries = append(r.Configuration.SourceGoogleAds.CustomQueries, customQueries1)
		}
		r.Configuration.SourceGoogleAds.CustomerID = types.StringValue(resp.Configuration.SourceGoogleAds.CustomerID)
		if resp.Configuration.SourceGoogleAds.EndDate != nil {
			r.Configuration.SourceGoogleAds.EndDate = types.StringValue(resp.Configuration.SourceGoogleAds.EndDate.String())
		} else {
			r.Configuration.SourceGoogleAds.EndDate = types.StringNull()
		}
		if resp.Configuration.SourceGoogleAds.LoginCustomerID != nil {
			r.Configuration.SourceGoogleAds.LoginCustomerID = types.StringValue(*resp.Configuration.SourceGoogleAds.LoginCustomerID)
		} else {
			r.Configuration.SourceGoogleAds.LoginCustomerID = types.StringNull()
		}
		r.Configuration.SourceGoogleAds.SourceType = types.StringValue(string(resp.Configuration.SourceGoogleAds.SourceType))
		r.Configuration.SourceGoogleAds.StartDate = types.StringValue(resp.Configuration.SourceGoogleAds.StartDate.String())
	}
	if resp.Configuration.SourceGoogleAnalyticsDataAPI != nil {
		r.Configuration.SourceGoogleAnalyticsDataAPI = &SourceGoogleAnalyticsDataAPI{}
		if resp.Configuration.SourceGoogleAnalyticsDataAPI.Credentials == nil {
			r.Configuration.SourceGoogleAnalyticsDataAPI.Credentials = nil
		} else {
			r.Configuration.SourceGoogleAnalyticsDataAPI.Credentials = &SourceGoogleAnalyticsDataAPICredentials{}
			if resp.Configuration.SourceGoogleAnalyticsDataAPI.Credentials.SourceGoogleAnalyticsDataAPICredentialsAuthenticateViaGoogleOauth != nil {
				r.Configuration.SourceGoogleAnalyticsDataAPI.Credentials.SourceGoogleAnalyticsDataAPICredentialsAuthenticateViaGoogleOauth = &SourceGoogleAnalyticsDataAPICredentialsAuthenticateViaGoogleOauth{}
				if resp.Configuration.SourceGoogleAnalyticsDataAPI.Credentials.SourceGoogleAnalyticsDataAPICredentialsAuthenticateViaGoogleOauth.AccessToken != nil {
					r.Configuration.SourceGoogleAnalyticsDataAPI.Credentials.SourceGoogleAnalyticsDataAPICredentialsAuthenticateViaGoogleOauth.AccessToken = types.StringValue(*resp.Configuration.SourceGoogleAnalyticsDataAPI.Credentials.SourceGoogleAnalyticsDataAPICredentialsAuthenticateViaGoogleOauth.AccessToken)
				} else {
					r.Configuration.SourceGoogleAnalyticsDataAPI.Credentials.SourceGoogleAnalyticsDataAPICredentialsAuthenticateViaGoogleOauth.AccessToken = types.StringNull()
				}
				if resp.Configuration.SourceGoogleAnalyticsDataAPI.Credentials.SourceGoogleAnalyticsDataAPICredentialsAuthenticateViaGoogleOauth.AuthType != nil {
					r.Configuration.SourceGoogleAnalyticsDataAPI.Credentials.SourceGoogleAnalyticsDataAPICredentialsAuthenticateViaGoogleOauth.AuthType = types.StringValue(string(*resp.Configuration.SourceGoogleAnalyticsDataAPI.Credentials.SourceGoogleAnalyticsDataAPICredentialsAuthenticateViaGoogleOauth.AuthType))
				} else {
					r.Configuration.SourceGoogleAnalyticsDataAPI.Credentials.SourceGoogleAnalyticsDataAPICredentialsAuthenticateViaGoogleOauth.AuthType = types.StringNull()
				}
				r.Configuration.SourceGoogleAnalyticsDataAPI.Credentials.SourceGoogleAnalyticsDataAPICredentialsAuthenticateViaGoogleOauth.ClientID = types.StringValue(resp.Configuration.SourceGoogleAnalyticsDataAPI.Credentials.SourceGoogleAnalyticsDataAPICredentialsAuthenticateViaGoogleOauth.ClientID)
				r.Configuration.SourceGoogleAnalyticsDataAPI.Credentials.SourceGoogleAnalyticsDataAPICredentialsAuthenticateViaGoogleOauth.ClientSecret = types.StringValue(resp.Configuration.SourceGoogleAnalyticsDataAPI.Credentials.SourceGoogleAnalyticsDataAPICredentialsAuthenticateViaGoogleOauth.ClientSecret)
				r.Configuration.SourceGoogleAnalyticsDataAPI.Credentials.SourceGoogleAnalyticsDataAPICredentialsAuthenticateViaGoogleOauth.RefreshToken = types.StringValue(resp.Configuration.SourceGoogleAnalyticsDataAPI.Credentials.SourceGoogleAnalyticsDataAPICredentialsAuthenticateViaGoogleOauth.RefreshToken)
			}
			if resp.Configuration.SourceGoogleAnalyticsDataAPI.Credentials.SourceGoogleAnalyticsDataAPICredentialsServiceAccountKeyAuthentication != nil {
				r.Configuration.SourceGoogleAnalyticsDataAPI.Credentials.SourceGoogleAnalyticsDataAPICredentialsServiceAccountKeyAuthentication = &SourceGoogleAnalyticsDataAPICredentialsServiceAccountKeyAuthentication{}
				if resp.Configuration.SourceGoogleAnalyticsDataAPI.Credentials.SourceGoogleAnalyticsDataAPICredentialsServiceAccountKeyAuthentication.AuthType != nil {
					r.Configuration.SourceGoogleAnalyticsDataAPI.Credentials.SourceGoogleAnalyticsDataAPICredentialsServiceAccountKeyAuthentication.AuthType = types.StringValue(string(*resp.Configuration.SourceGoogleAnalyticsDataAPI.Credentials.SourceGoogleAnalyticsDataAPICredentialsServiceAccountKeyAuthentication.AuthType))
				} else {
					r.Configuration.SourceGoogleAnalyticsDataAPI.Credentials.SourceGoogleAnalyticsDataAPICredentialsServiceAccountKeyAuthentication.AuthType = types.StringNull()
				}
				r.Configuration.SourceGoogleAnalyticsDataAPI.Credentials.SourceGoogleAnalyticsDataAPICredentialsServiceAccountKeyAuthentication.CredentialsJSON = types.StringValue(resp.Configuration.SourceGoogleAnalyticsDataAPI.Credentials.SourceGoogleAnalyticsDataAPICredentialsServiceAccountKeyAuthentication.CredentialsJSON)
			}
		}
		if resp.Configuration.SourceGoogleAnalyticsDataAPI.CustomReports != nil {
			r.Configuration.SourceGoogleAnalyticsDataAPI.CustomReports = types.StringValue(*resp.Configuration.SourceGoogleAnalyticsDataAPI.CustomReports)
		} else {
			r.Configuration.SourceGoogleAnalyticsDataAPI.CustomReports = types.StringNull()
		}
		r.Configuration.SourceGoogleAnalyticsDataAPI.DateRangesStartDate = types.StringValue(resp.Configuration.SourceGoogleAnalyticsDataAPI.DateRangesStartDate.String())
		r.Configuration.SourceGoogleAnalyticsDataAPI.PropertyID = types.StringValue(resp.Configuration.SourceGoogleAnalyticsDataAPI.PropertyID)
		r.Configuration.SourceGoogleAnalyticsDataAPI.SourceType = types.StringValue(string(resp.Configuration.SourceGoogleAnalyticsDataAPI.SourceType))
		if resp.Configuration.SourceGoogleAnalyticsDataAPI.WindowInDays != nil {
			r.Configuration.SourceGoogleAnalyticsDataAPI.WindowInDays = types.Int64Value(*resp.Configuration.SourceGoogleAnalyticsDataAPI.WindowInDays)
		} else {
			r.Configuration.SourceGoogleAnalyticsDataAPI.WindowInDays = types.Int64Null()
		}
	}
	if resp.Configuration.SourceGoogleAnalyticsV4 != nil {
		r.Configuration.SourceGoogleAnalyticsV4 = &SourceGoogleAnalyticsV4{}
		if resp.Configuration.SourceGoogleAnalyticsV4.Credentials == nil {
			r.Configuration.SourceGoogleAnalyticsV4.Credentials = nil
		} else {
			r.Configuration.SourceGoogleAnalyticsV4.Credentials = &SourceGoogleAnalyticsV4Credentials{}
			if resp.Configuration.SourceGoogleAnalyticsV4.Credentials.SourceGoogleAnalyticsV4CredentialsAuthenticateViaGoogleOauth != nil {
				r.Configuration.SourceGoogleAnalyticsV4.Credentials.SourceGoogleAnalyticsV4CredentialsAuthenticateViaGoogleOauth = &SourceGoogleAnalyticsDataAPICredentialsAuthenticateViaGoogleOauth{}
				if resp.Configuration.SourceGoogleAnalyticsV4.Credentials.SourceGoogleAnalyticsV4CredentialsAuthenticateViaGoogleOauth.AccessToken != nil {
					r.Configuration.SourceGoogleAnalyticsV4.Credentials.SourceGoogleAnalyticsV4CredentialsAuthenticateViaGoogleOauth.AccessToken = types.StringValue(*resp.Configuration.SourceGoogleAnalyticsV4.Credentials.SourceGoogleAnalyticsV4CredentialsAuthenticateViaGoogleOauth.AccessToken)
				} else {
					r.Configuration.SourceGoogleAnalyticsV4.Credentials.SourceGoogleAnalyticsV4CredentialsAuthenticateViaGoogleOauth.AccessToken = types.StringNull()
				}
				if resp.Configuration.SourceGoogleAnalyticsV4.Credentials.SourceGoogleAnalyticsV4CredentialsAuthenticateViaGoogleOauth.AuthType != nil {
					r.Configuration.SourceGoogleAnalyticsV4.Credentials.SourceGoogleAnalyticsV4CredentialsAuthenticateViaGoogleOauth.AuthType = types.StringValue(string(*resp.Configuration.SourceGoogleAnalyticsV4.Credentials.SourceGoogleAnalyticsV4CredentialsAuthenticateViaGoogleOauth.AuthType))
				} else {
					r.Configuration.SourceGoogleAnalyticsV4.Credentials.SourceGoogleAnalyticsV4CredentialsAuthenticateViaGoogleOauth.AuthType = types.StringNull()
				}
				r.Configuration.SourceGoogleAnalyticsV4.Credentials.SourceGoogleAnalyticsV4CredentialsAuthenticateViaGoogleOauth.ClientID = types.StringValue(resp.Configuration.SourceGoogleAnalyticsV4.Credentials.SourceGoogleAnalyticsV4CredentialsAuthenticateViaGoogleOauth.ClientID)
				r.Configuration.SourceGoogleAnalyticsV4.Credentials.SourceGoogleAnalyticsV4CredentialsAuthenticateViaGoogleOauth.ClientSecret = types.StringValue(resp.Configuration.SourceGoogleAnalyticsV4.Credentials.SourceGoogleAnalyticsV4CredentialsAuthenticateViaGoogleOauth.ClientSecret)
				r.Configuration.SourceGoogleAnalyticsV4.Credentials.SourceGoogleAnalyticsV4CredentialsAuthenticateViaGoogleOauth.RefreshToken = types.StringValue(resp.Configuration.SourceGoogleAnalyticsV4.Credentials.SourceGoogleAnalyticsV4CredentialsAuthenticateViaGoogleOauth.RefreshToken)
			}
			if resp.Configuration.SourceGoogleAnalyticsV4.Credentials.SourceGoogleAnalyticsV4CredentialsServiceAccountKeyAuthentication != nil {
				r.Configuration.SourceGoogleAnalyticsV4.Credentials.SourceGoogleAnalyticsV4CredentialsServiceAccountKeyAuthentication = &SourceGoogleAnalyticsDataAPICredentialsServiceAccountKeyAuthentication{}
				if resp.Configuration.SourceGoogleAnalyticsV4.Credentials.SourceGoogleAnalyticsV4CredentialsServiceAccountKeyAuthentication.AuthType != nil {
					r.Configuration.SourceGoogleAnalyticsV4.Credentials.SourceGoogleAnalyticsV4CredentialsServiceAccountKeyAuthentication.AuthType = types.StringValue(string(*resp.Configuration.SourceGoogleAnalyticsV4.Credentials.SourceGoogleAnalyticsV4CredentialsServiceAccountKeyAuthentication.AuthType))
				} else {
					r.Configuration.SourceGoogleAnalyticsV4.Credentials.SourceGoogleAnalyticsV4CredentialsServiceAccountKeyAuthentication.AuthType = types.StringNull()
				}
				r.Configuration.SourceGoogleAnalyticsV4.Credentials.SourceGoogleAnalyticsV4CredentialsServiceAccountKeyAuthentication.CredentialsJSON = types.StringValue(resp.Configuration.SourceGoogleAnalyticsV4.Credentials.SourceGoogleAnalyticsV4CredentialsServiceAccountKeyAuthentication.CredentialsJSON)
			}
		}
		if resp.Configuration.SourceGoogleAnalyticsV4.CustomReports != nil {
			r.Configuration.SourceGoogleAnalyticsV4.CustomReports = types.StringValue(*resp.Configuration.SourceGoogleAnalyticsV4.CustomReports)
		} else {
			r.Configuration.SourceGoogleAnalyticsV4.CustomReports = types.StringNull()
		}
		r.Configuration.SourceGoogleAnalyticsV4.SourceType = types.StringValue(string(resp.Configuration.SourceGoogleAnalyticsV4.SourceType))
		r.Configuration.SourceGoogleAnalyticsV4.StartDate = types.StringValue(resp.Configuration.SourceGoogleAnalyticsV4.StartDate)
		r.Configuration.SourceGoogleAnalyticsV4.ViewID = types.StringValue(resp.Configuration.SourceGoogleAnalyticsV4.ViewID)
		if resp.Configuration.SourceGoogleAnalyticsV4.WindowInDays != nil {
			r.Configuration.SourceGoogleAnalyticsV4.WindowInDays = types.Int64Value(*resp.Configuration.SourceGoogleAnalyticsV4.WindowInDays)
		} else {
			r.Configuration.SourceGoogleAnalyticsV4.WindowInDays = types.Int64Null()
		}
	}
	if resp.Configuration.SourceGoogleDirectory != nil {
		r.Configuration.SourceGoogleDirectory = &SourceGoogleDirectory{}
		r.Configuration.SourceGoogleDirectory.CredentialsJSON = types.StringValue(resp.Configuration.SourceGoogleDirectory.CredentialsJSON)
		r.Configuration.SourceGoogleDirectory.Email = types.StringValue(resp.Configuration.SourceGoogleDirectory.Email)
		r.Configuration.SourceGoogleDirectory.SourceType = types.StringValue(string(resp.Configuration.SourceGoogleDirectory.SourceType))
	}
	if resp.Configuration.SourceGoogleSearchConsole != nil {
		r.Configuration.SourceGoogleSearchConsole = &SourceGoogleSearchConsole{}
		if resp.Configuration.SourceGoogleSearchConsole.Authorization.SourceGoogleSearchConsoleAuthenticationTypeOAuth != nil {
			r.Configuration.SourceGoogleSearchConsole.Authorization.SourceGoogleSearchConsoleAuthenticationTypeOAuth = &SourceGoogleSearchConsoleAuthenticationTypeOAuth{}
			if resp.Configuration.SourceGoogleSearchConsole.Authorization.SourceGoogleSearchConsoleAuthenticationTypeOAuth.AccessToken != nil {
				r.Configuration.SourceGoogleSearchConsole.Authorization.SourceGoogleSearchConsoleAuthenticationTypeOAuth.AccessToken = types.StringValue(*resp.Configuration.SourceGoogleSearchConsole.Authorization.SourceGoogleSearchConsoleAuthenticationTypeOAuth.AccessToken)
			} else {
				r.Configuration.SourceGoogleSearchConsole.Authorization.SourceGoogleSearchConsoleAuthenticationTypeOAuth.AccessToken = types.StringNull()
			}
			r.Configuration.SourceGoogleSearchConsole.Authorization.SourceGoogleSearchConsoleAuthenticationTypeOAuth.AuthType = types.StringValue(string(resp.Configuration.SourceGoogleSearchConsole.Authorization.SourceGoogleSearchConsoleAuthenticationTypeOAuth.AuthType))
			r.Configuration.SourceGoogleSearchConsole.Authorization.SourceGoogleSearchConsoleAuthenticationTypeOAuth.ClientID = types.StringValue(resp.Configuration.SourceGoogleSearchConsole.Authorization.SourceGoogleSearchConsoleAuthenticationTypeOAuth.ClientID)
			r.Configuration.SourceGoogleSearchConsole.Authorization.SourceGoogleSearchConsoleAuthenticationTypeOAuth.ClientSecret = types.StringValue(resp.Configuration.SourceGoogleSearchConsole.Authorization.SourceGoogleSearchConsoleAuthenticationTypeOAuth.ClientSecret)
			r.Configuration.SourceGoogleSearchConsole.Authorization.SourceGoogleSearchConsoleAuthenticationTypeOAuth.RefreshToken = types.StringValue(resp.Configuration.SourceGoogleSearchConsole.Authorization.SourceGoogleSearchConsoleAuthenticationTypeOAuth.RefreshToken)
		}
		if resp.Configuration.SourceGoogleSearchConsole.Authorization.SourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthentication != nil {
			r.Configuration.SourceGoogleSearchConsole.Authorization.SourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthentication = &SourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthentication{}
			r.Configuration.SourceGoogleSearchConsole.Authorization.SourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthentication.AuthType = types.StringValue(string(resp.Configuration.SourceGoogleSearchConsole.Authorization.SourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthentication.AuthType))
			r.Configuration.SourceGoogleSearchConsole.Authorization.SourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthentication.Email = types.StringValue(resp.Configuration.SourceGoogleSearchConsole.Authorization.SourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthentication.Email)
			r.Configuration.SourceGoogleSearchConsole.Authorization.SourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthentication.ServiceAccountInfo = types.StringValue(resp.Configuration.SourceGoogleSearchConsole.Authorization.SourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthentication.ServiceAccountInfo)
		}
		if resp.Configuration.SourceGoogleSearchConsole.CustomReports != nil {
			r.Configuration.SourceGoogleSearchConsole.CustomReports = types.StringValue(*resp.Configuration.SourceGoogleSearchConsole.CustomReports)
		} else {
			r.Configuration.SourceGoogleSearchConsole.CustomReports = types.StringNull()
		}
		if resp.Configuration.SourceGoogleSearchConsole.EndDate != nil {
			r.Configuration.SourceGoogleSearchConsole.EndDate = types.StringValue(resp.Configuration.SourceGoogleSearchConsole.EndDate.String())
		} else {
			r.Configuration.SourceGoogleSearchConsole.EndDate = types.StringNull()
		}
		r.Configuration.SourceGoogleSearchConsole.SiteUrls = nil
		for _, v := range resp.Configuration.SourceGoogleSearchConsole.SiteUrls {
			r.Configuration.SourceGoogleSearchConsole.SiteUrls = append(r.Configuration.SourceGoogleSearchConsole.SiteUrls, types.StringValue(v))
		}
		r.Configuration.SourceGoogleSearchConsole.SourceType = types.StringValue(string(resp.Configuration.SourceGoogleSearchConsole.SourceType))
		r.Configuration.SourceGoogleSearchConsole.StartDate = types.StringValue(resp.Configuration.SourceGoogleSearchConsole.StartDate.String())
	}
	if resp.Configuration.SourceGoogleSheets != nil {
		r.Configuration.SourceGoogleSheets = &SourceGoogleSheets{}
		if resp.Configuration.SourceGoogleSheets.Credentials.SourceGoogleSheetsAuthenticationAuthenticateViaGoogleOAuth != nil {
			r.Configuration.SourceGoogleSheets.Credentials.SourceGoogleSheetsAuthenticationAuthenticateViaGoogleOAuth = &SourceGoogleSheetsAuthenticationAuthenticateViaGoogleOAuth{}
			r.Configuration.SourceGoogleSheets.Credentials.SourceGoogleSheetsAuthenticationAuthenticateViaGoogleOAuth.AuthType = types.StringValue(string(resp.Configuration.SourceGoogleSheets.Credentials.SourceGoogleSheetsAuthenticationAuthenticateViaGoogleOAuth.AuthType))
			r.Configuration.SourceGoogleSheets.Credentials.SourceGoogleSheetsAuthenticationAuthenticateViaGoogleOAuth.ClientID = types.StringValue(resp.Configuration.SourceGoogleSheets.Credentials.SourceGoogleSheetsAuthenticationAuthenticateViaGoogleOAuth.ClientID)
			r.Configuration.SourceGoogleSheets.Credentials.SourceGoogleSheetsAuthenticationAuthenticateViaGoogleOAuth.ClientSecret = types.StringValue(resp.Configuration.SourceGoogleSheets.Credentials.SourceGoogleSheetsAuthenticationAuthenticateViaGoogleOAuth.ClientSecret)
			r.Configuration.SourceGoogleSheets.Credentials.SourceGoogleSheetsAuthenticationAuthenticateViaGoogleOAuth.RefreshToken = types.StringValue(resp.Configuration.SourceGoogleSheets.Credentials.SourceGoogleSheetsAuthenticationAuthenticateViaGoogleOAuth.RefreshToken)
		}
		if resp.Configuration.SourceGoogleSheets.Credentials.SourceGoogleSheetsAuthenticationServiceAccountKeyAuthentication != nil {
			r.Configuration.SourceGoogleSheets.Credentials.SourceGoogleSheetsAuthenticationServiceAccountKeyAuthentication = &SourceGoogleSheetsAuthenticationServiceAccountKeyAuthentication{}
			r.Configuration.SourceGoogleSheets.Credentials.SourceGoogleSheetsAuthenticationServiceAccountKeyAuthentication.AuthType = types.StringValue(string(resp.Configuration.SourceGoogleSheets.Credentials.SourceGoogleSheetsAuthenticationServiceAccountKeyAuthentication.AuthType))
			r.Configuration.SourceGoogleSheets.Credentials.SourceGoogleSheetsAuthenticationServiceAccountKeyAuthentication.ServiceAccountInfo = types.StringValue(resp.Configuration.SourceGoogleSheets.Credentials.SourceGoogleSheetsAuthenticationServiceAccountKeyAuthentication.ServiceAccountInfo)
		}
		if resp.Configuration.SourceGoogleSheets.RowBatchSize != nil {
			r.Configuration.SourceGoogleSheets.RowBatchSize = types.Int64Value(*resp.Configuration.SourceGoogleSheets.RowBatchSize)
		} else {
			r.Configuration.SourceGoogleSheets.RowBatchSize = types.Int64Null()
		}
		r.Configuration.SourceGoogleSheets.SourceType = types.StringValue(string(resp.Configuration.SourceGoogleSheets.SourceType))
		r.Configuration.SourceGoogleSheets.SpreadsheetID = types.StringValue(resp.Configuration.SourceGoogleSheets.SpreadsheetID)
	}
	if resp.Configuration.SourceGoogleWebfonts != nil {
		r.Configuration.SourceGoogleWebfonts = &SourceGoogleWebfonts{}
		if resp.Configuration.SourceGoogleWebfonts.Alt != nil {
			r.Configuration.SourceGoogleWebfonts.Alt = types.StringValue(*resp.Configuration.SourceGoogleWebfonts.Alt)
		} else {
			r.Configuration.SourceGoogleWebfonts.Alt = types.StringNull()
		}
		r.Configuration.SourceGoogleWebfonts.APIKey = types.StringValue(resp.Configuration.SourceGoogleWebfonts.APIKey)
		if resp.Configuration.SourceGoogleWebfonts.PrettyPrint != nil {
			r.Configuration.SourceGoogleWebfonts.PrettyPrint = types.StringValue(*resp.Configuration.SourceGoogleWebfonts.PrettyPrint)
		} else {
			r.Configuration.SourceGoogleWebfonts.PrettyPrint = types.StringNull()
		}
		if resp.Configuration.SourceGoogleWebfonts.Sort != nil {
			r.Configuration.SourceGoogleWebfonts.Sort = types.StringValue(*resp.Configuration.SourceGoogleWebfonts.Sort)
		} else {
			r.Configuration.SourceGoogleWebfonts.Sort = types.StringNull()
		}
		r.Configuration.SourceGoogleWebfonts.SourceType = types.StringValue(string(resp.Configuration.SourceGoogleWebfonts.SourceType))
	}
	if resp.Configuration.SourceGoogleWorkspaceAdminReports != nil {
		r.Configuration.SourceGoogleWorkspaceAdminReports = &SourceGoogleWorkspaceAdminReports{}
		r.Configuration.SourceGoogleWorkspaceAdminReports.CredentialsJSON = types.StringValue(resp.Configuration.SourceGoogleWorkspaceAdminReports.CredentialsJSON)
		r.Configuration.SourceGoogleWorkspaceAdminReports.Email = types.StringValue(resp.Configuration.SourceGoogleWorkspaceAdminReports.Email)
		if resp.Configuration.SourceGoogleWorkspaceAdminReports.Lookback != nil {
			r.Configuration.SourceGoogleWorkspaceAdminReports.Lookback = types.Int64Value(*resp.Configuration.SourceGoogleWorkspaceAdminReports.Lookback)
		} else {
			r.Configuration.SourceGoogleWorkspaceAdminReports.Lookback = types.Int64Null()
		}
		r.Configuration.SourceGoogleWorkspaceAdminReports.SourceType = types.StringValue(string(resp.Configuration.SourceGoogleWorkspaceAdminReports.SourceType))
	}
	if resp.Configuration.SourceGreenhouse != nil {
		r.Configuration.SourceGreenhouse = &SourceGreenhouse{}
		r.Configuration.SourceGreenhouse.APIKey = types.StringValue(resp.Configuration.SourceGreenhouse.APIKey)
		r.Configuration.SourceGreenhouse.SourceType = types.StringValue(string(resp.Configuration.SourceGreenhouse.SourceType))
	}
	if resp.Configuration.SourceGridly != nil {
		r.Configuration.SourceGridly = &SourceGridly{}
		r.Configuration.SourceGridly.APIKey = types.StringValue(resp.Configuration.SourceGridly.APIKey)
		r.Configuration.SourceGridly.GridID = types.StringValue(resp.Configuration.SourceGridly.GridID)
		r.Configuration.SourceGridly.SourceType = types.StringValue(string(resp.Configuration.SourceGridly.SourceType))
	}
	if resp.Configuration.SourceHarvest != nil {
		r.Configuration.SourceHarvest = &SourceHarvest{}
		r.Configuration.SourceHarvest.AccountID = types.StringValue(resp.Configuration.SourceHarvest.AccountID)
		if resp.Configuration.SourceHarvest.Credentials == nil {
			r.Configuration.SourceHarvest.Credentials = nil
		} else {
			r.Configuration.SourceHarvest.Credentials = &SourceHarvestAuthenticationMechanism{}
			if resp.Configuration.SourceHarvest.Credentials.SourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuth != nil {
				r.Configuration.SourceHarvest.Credentials.SourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuth = &SourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuth{}
				if resp.Configuration.SourceHarvest.Credentials.SourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuth.AuthType != nil {
					r.Configuration.SourceHarvest.Credentials.SourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuth.AuthType = types.StringValue(string(*resp.Configuration.SourceHarvest.Credentials.SourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuth.AuthType))
				} else {
					r.Configuration.SourceHarvest.Credentials.SourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuth.AuthType = types.StringNull()
				}
				r.Configuration.SourceHarvest.Credentials.SourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuth.ClientID = types.StringValue(resp.Configuration.SourceHarvest.Credentials.SourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuth.ClientID)
				r.Configuration.SourceHarvest.Credentials.SourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuth.ClientSecret = types.StringValue(resp.Configuration.SourceHarvest.Credentials.SourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuth.ClientSecret)
				r.Configuration.SourceHarvest.Credentials.SourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuth.RefreshToken = types.StringValue(resp.Configuration.SourceHarvest.Credentials.SourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuth.RefreshToken)
			}
			if resp.Configuration.SourceHarvest.Credentials.SourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessToken != nil {
				r.Configuration.SourceHarvest.Credentials.SourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessToken = &SourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessToken{}
				r.Configuration.SourceHarvest.Credentials.SourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessToken.APIToken = types.StringValue(resp.Configuration.SourceHarvest.Credentials.SourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessToken.APIToken)
				if resp.Configuration.SourceHarvest.Credentials.SourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessToken.AuthType != nil {
					r.Configuration.SourceHarvest.Credentials.SourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessToken.AuthType = types.StringValue(string(*resp.Configuration.SourceHarvest.Credentials.SourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessToken.AuthType))
				} else {
					r.Configuration.SourceHarvest.Credentials.SourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessToken.AuthType = types.StringNull()
				}
			}
		}
		if resp.Configuration.SourceHarvest.ReplicationEndDate != nil {
			r.Configuration.SourceHarvest.ReplicationEndDate = types.StringValue(*resp.Configuration.SourceHarvest.ReplicationEndDate)
		} else {
			r.Configuration.SourceHarvest.ReplicationEndDate = types.StringNull()
		}
		r.Configuration.SourceHarvest.ReplicationStartDate = types.StringValue(resp.Configuration.SourceHarvest.ReplicationStartDate)
		r.Configuration.SourceHarvest.SourceType = types.StringValue(string(resp.Configuration.SourceHarvest.SourceType))
	}
	if resp.Configuration.SourceHubplanner != nil {
		r.Configuration.SourceHubplanner = &SourceHubplanner{}
		r.Configuration.SourceHubplanner.APIKey = types.StringValue(resp.Configuration.SourceHubplanner.APIKey)
		r.Configuration.SourceHubplanner.SourceType = types.StringValue(string(resp.Configuration.SourceHubplanner.SourceType))
	}
	if resp.Configuration.SourceHubspot != nil {
		r.Configuration.SourceHubspot = &SourceHubspot{}
		if resp.Configuration.SourceHubspot.Credentials.SourceHubspotAuthenticationOAuth != nil {
			r.Configuration.SourceHubspot.Credentials.SourceHubspotAuthenticationOAuth = &SourceHubspotAuthenticationOAuth{}
			r.Configuration.SourceHubspot.Credentials.SourceHubspotAuthenticationOAuth.ClientID = types.StringValue(resp.Configuration.SourceHubspot.Credentials.SourceHubspotAuthenticationOAuth.ClientID)
			r.Configuration.SourceHubspot.Credentials.SourceHubspotAuthenticationOAuth.ClientSecret = types.StringValue(resp.Configuration.SourceHubspot.Credentials.SourceHubspotAuthenticationOAuth.ClientSecret)
			r.Configuration.SourceHubspot.Credentials.SourceHubspotAuthenticationOAuth.CredentialsTitle = types.StringValue(string(resp.Configuration.SourceHubspot.Credentials.SourceHubspotAuthenticationOAuth.CredentialsTitle))
			r.Configuration.SourceHubspot.Credentials.SourceHubspotAuthenticationOAuth.RefreshToken = types.StringValue(resp.Configuration.SourceHubspot.Credentials.SourceHubspotAuthenticationOAuth.RefreshToken)
		}
		if resp.Configuration.SourceHubspot.Credentials.SourceHubspotAuthenticationPrivateApp != nil {
			r.Configuration.SourceHubspot.Credentials.SourceHubspotAuthenticationPrivateApp = &SourceHubspotAuthenticationPrivateApp{}
			r.Configuration.SourceHubspot.Credentials.SourceHubspotAuthenticationPrivateApp.AccessToken = types.StringValue(resp.Configuration.SourceHubspot.Credentials.SourceHubspotAuthenticationPrivateApp.AccessToken)
			r.Configuration.SourceHubspot.Credentials.SourceHubspotAuthenticationPrivateApp.CredentialsTitle = types.StringValue(string(resp.Configuration.SourceHubspot.Credentials.SourceHubspotAuthenticationPrivateApp.CredentialsTitle))
		}
		r.Configuration.SourceHubspot.SourceType = types.StringValue(string(resp.Configuration.SourceHubspot.SourceType))
		r.Configuration.SourceHubspot.StartDate = types.StringValue(resp.Configuration.SourceHubspot.StartDate)
	}
	if resp.Configuration.SourceInsightly != nil {
		r.Configuration.SourceInsightly = &SourceInsightly{}
		r.Configuration.SourceInsightly.SourceType = types.StringValue(string(resp.Configuration.SourceInsightly.SourceType))
		r.Configuration.SourceInsightly.StartDate = types.StringValue(resp.Configuration.SourceInsightly.StartDate)
		r.Configuration.SourceInsightly.Token = types.StringValue(resp.Configuration.SourceInsightly.Token)
	}
	if resp.Configuration.SourceInstagram != nil {
		r.Configuration.SourceInstagram = &SourceInstagram{}
		r.Configuration.SourceInstagram.AccessToken = types.StringValue(resp.Configuration.SourceInstagram.AccessToken)
		r.Configuration.SourceInstagram.SourceType = types.StringValue(string(resp.Configuration.SourceInstagram.SourceType))
		r.Configuration.SourceInstagram.StartDate = types.StringValue(resp.Configuration.SourceInstagram.StartDate.Format(time.RFC3339))
	}
	if resp.Configuration.SourceInstatus != nil {
		r.Configuration.SourceInstatus = &SourceInstatus{}
		r.Configuration.SourceInstatus.APIKey = types.StringValue(resp.Configuration.SourceInstatus.APIKey)
		r.Configuration.SourceInstatus.SourceType = types.StringValue(string(resp.Configuration.SourceInstatus.SourceType))
	}
	if resp.Configuration.SourceIntercom != nil {
		r.Configuration.SourceIntercom = &SourceIntercom{}
		r.Configuration.SourceIntercom.AccessToken = types.StringValue(resp.Configuration.SourceIntercom.AccessToken)
		r.Configuration.SourceIntercom.SourceType = types.StringValue(string(resp.Configuration.SourceIntercom.SourceType))
		r.Configuration.SourceIntercom.StartDate = types.StringValue(resp.Configuration.SourceIntercom.StartDate.Format(time.RFC3339))
	}
	if resp.Configuration.SourceIp2whois != nil {
		r.Configuration.SourceIp2whois = &SourceIp2whois{}
		if resp.Configuration.SourceIp2whois.APIKey != nil {
			r.Configuration.SourceIp2whois.APIKey = types.StringValue(*resp.Configuration.SourceIp2whois.APIKey)
		} else {
			r.Configuration.SourceIp2whois.APIKey = types.StringNull()
		}
		if resp.Configuration.SourceIp2whois.Domain != nil {
			r.Configuration.SourceIp2whois.Domain = types.StringValue(*resp.Configuration.SourceIp2whois.Domain)
		} else {
			r.Configuration.SourceIp2whois.Domain = types.StringNull()
		}
		r.Configuration.SourceIp2whois.SourceType = types.StringValue(string(resp.Configuration.SourceIp2whois.SourceType))
	}
	if resp.Configuration.SourceIterable != nil {
		r.Configuration.SourceIterable = &SourceIterable{}
		r.Configuration.SourceIterable.APIKey = types.StringValue(resp.Configuration.SourceIterable.APIKey)
		r.Configuration.SourceIterable.SourceType = types.StringValue(string(resp.Configuration.SourceIterable.SourceType))
		r.Configuration.SourceIterable.StartDate = types.StringValue(resp.Configuration.SourceIterable.StartDate.Format(time.RFC3339))
	}
	if resp.Configuration.SourceJira != nil {
		r.Configuration.SourceJira = &SourceJira{}
		r.Configuration.SourceJira.APIToken = types.StringValue(resp.Configuration.SourceJira.APIToken)
		r.Configuration.SourceJira.Domain = types.StringValue(resp.Configuration.SourceJira.Domain)
		r.Configuration.SourceJira.Email = types.StringValue(resp.Configuration.SourceJira.Email)
		if resp.Configuration.SourceJira.EnableExperimentalStreams != nil {
			r.Configuration.SourceJira.EnableExperimentalStreams = types.BoolValue(*resp.Configuration.SourceJira.EnableExperimentalStreams)
		} else {
			r.Configuration.SourceJira.EnableExperimentalStreams = types.BoolNull()
		}
		if resp.Configuration.SourceJira.ExpandIssueChangelog != nil {
			r.Configuration.SourceJira.ExpandIssueChangelog = types.BoolValue(*resp.Configuration.SourceJira.ExpandIssueChangelog)
		} else {
			r.Configuration.SourceJira.ExpandIssueChangelog = types.BoolNull()
		}
		r.Configuration.SourceJira.Projects = nil
		for _, v := range resp.Configuration.SourceJira.Projects {
			r.Configuration.SourceJira.Projects = append(r.Configuration.SourceJira.Projects, types.StringValue(v))
		}
		if resp.Configuration.SourceJira.RenderFields != nil {
			r.Configuration.SourceJira.RenderFields = types.BoolValue(*resp.Configuration.SourceJira.RenderFields)
		} else {
			r.Configuration.SourceJira.RenderFields = types.BoolNull()
		}
		r.Configuration.SourceJira.SourceType = types.StringValue(string(resp.Configuration.SourceJira.SourceType))
		if resp.Configuration.SourceJira.StartDate != nil {
			r.Configuration.SourceJira.StartDate = types.StringValue(resp.Configuration.SourceJira.StartDate.Format(time.RFC3339))
		} else {
			r.Configuration.SourceJira.StartDate = types.StringNull()
		}
	}
	if resp.Configuration.SourceK6Cloud != nil {
		r.Configuration.SourceK6Cloud = &SourceK6Cloud{}
		r.Configuration.SourceK6Cloud.APIToken = types.StringValue(resp.Configuration.SourceK6Cloud.APIToken)
		r.Configuration.SourceK6Cloud.SourceType = types.StringValue(string(resp.Configuration.SourceK6Cloud.SourceType))
	}
	if resp.Configuration.SourceKlarna != nil {
		r.Configuration.SourceKlarna = &SourceKlarna{}
		r.Configuration.SourceKlarna.Password = types.StringValue(resp.Configuration.SourceKlarna.Password)
		r.Configuration.SourceKlarna.Playground = types.BoolValue(resp.Configuration.SourceKlarna.Playground)
		r.Configuration.SourceKlarna.Region = types.StringValue(string(resp.Configuration.SourceKlarna.Region))
		r.Configuration.SourceKlarna.SourceType = types.StringValue(string(resp.Configuration.SourceKlarna.SourceType))
		r.Configuration.SourceKlarna.Username = types.StringValue(resp.Configuration.SourceKlarna.Username)
	}
	if resp.Configuration.SourceKlaviyo != nil {
		r.Configuration.SourceKlaviyo = &SourceKlaviyo{}
		r.Configuration.SourceKlaviyo.APIKey = types.StringValue(resp.Configuration.SourceKlaviyo.APIKey)
		r.Configuration.SourceKlaviyo.SourceType = types.StringValue(string(resp.Configuration.SourceKlaviyo.SourceType))
		r.Configuration.SourceKlaviyo.StartDate = types.StringValue(resp.Configuration.SourceKlaviyo.StartDate.Format(time.RFC3339))
	}
	if resp.Configuration.SourceKustomerSinger != nil {
		r.Configuration.SourceKustomerSinger = &SourceKustomerSinger{}
		r.Configuration.SourceKustomerSinger.APIToken = types.StringValue(resp.Configuration.SourceKustomerSinger.APIToken)
		r.Configuration.SourceKustomerSinger.SourceType = types.StringValue(string(resp.Configuration.SourceKustomerSinger.SourceType))
		r.Configuration.SourceKustomerSinger.StartDate = types.StringValue(resp.Configuration.SourceKustomerSinger.StartDate)
	}
	if resp.Configuration.SourceLaunchdarkly != nil {
		r.Configuration.SourceLaunchdarkly = &SourceLaunchdarkly{}
		r.Configuration.SourceLaunchdarkly.AccessToken = types.StringValue(resp.Configuration.SourceLaunchdarkly.AccessToken)
		r.Configuration.SourceLaunchdarkly.SourceType = types.StringValue(string(resp.Configuration.SourceLaunchdarkly.SourceType))
	}
	if resp.Configuration.SourceLemlist != nil {
		r.Configuration.SourceLemlist = &SourceLemlist{}
		r.Configuration.SourceLemlist.APIKey = types.StringValue(resp.Configuration.SourceLemlist.APIKey)
		r.Configuration.SourceLemlist.SourceType = types.StringValue(string(resp.Configuration.SourceLemlist.SourceType))
	}
	if resp.Configuration.SourceLinkedinAds != nil {
		r.Configuration.SourceLinkedinAds = &SourceLinkedinAds{}
		r.Configuration.SourceLinkedinAds.AccountIds = nil
		for _, v := range resp.Configuration.SourceLinkedinAds.AccountIds {
			r.Configuration.SourceLinkedinAds.AccountIds = append(r.Configuration.SourceLinkedinAds.AccountIds, types.Int64Value(v))
		}
		if resp.Configuration.SourceLinkedinAds.Credentials == nil {
			r.Configuration.SourceLinkedinAds.Credentials = nil
		} else {
			r.Configuration.SourceLinkedinAds.Credentials = &SourceLinkedinAdsAuthentication{}
			if resp.Configuration.SourceLinkedinAds.Credentials.SourceLinkedinAdsAuthenticationOAuth20 != nil {
				r.Configuration.SourceLinkedinAds.Credentials.SourceLinkedinAdsAuthenticationOAuth20 = &SourceLinkedinAdsAuthenticationOAuth20{}
				if resp.Configuration.SourceLinkedinAds.Credentials.SourceLinkedinAdsAuthenticationOAuth20.AuthMethod != nil {
					r.Configuration.SourceLinkedinAds.Credentials.SourceLinkedinAdsAuthenticationOAuth20.AuthMethod = types.StringValue(string(*resp.Configuration.SourceLinkedinAds.Credentials.SourceLinkedinAdsAuthenticationOAuth20.AuthMethod))
				} else {
					r.Configuration.SourceLinkedinAds.Credentials.SourceLinkedinAdsAuthenticationOAuth20.AuthMethod = types.StringNull()
				}
				r.Configuration.SourceLinkedinAds.Credentials.SourceLinkedinAdsAuthenticationOAuth20.ClientID = types.StringValue(resp.Configuration.SourceLinkedinAds.Credentials.SourceLinkedinAdsAuthenticationOAuth20.ClientID)
				r.Configuration.SourceLinkedinAds.Credentials.SourceLinkedinAdsAuthenticationOAuth20.ClientSecret = types.StringValue(resp.Configuration.SourceLinkedinAds.Credentials.SourceLinkedinAdsAuthenticationOAuth20.ClientSecret)
				r.Configuration.SourceLinkedinAds.Credentials.SourceLinkedinAdsAuthenticationOAuth20.RefreshToken = types.StringValue(resp.Configuration.SourceLinkedinAds.Credentials.SourceLinkedinAdsAuthenticationOAuth20.RefreshToken)
			}
			if resp.Configuration.SourceLinkedinAds.Credentials.SourceLinkedinAdsAuthenticationAccessToken != nil {
				r.Configuration.SourceLinkedinAds.Credentials.SourceLinkedinAdsAuthenticationAccessToken = &SourceLinkedinAdsAuthenticationAccessToken{}
				r.Configuration.SourceLinkedinAds.Credentials.SourceLinkedinAdsAuthenticationAccessToken.AccessToken = types.StringValue(resp.Configuration.SourceLinkedinAds.Credentials.SourceLinkedinAdsAuthenticationAccessToken.AccessToken)
				if resp.Configuration.SourceLinkedinAds.Credentials.SourceLinkedinAdsAuthenticationAccessToken.AuthMethod != nil {
					r.Configuration.SourceLinkedinAds.Credentials.SourceLinkedinAdsAuthenticationAccessToken.AuthMethod = types.StringValue(string(*resp.Configuration.SourceLinkedinAds.Credentials.SourceLinkedinAdsAuthenticationAccessToken.AuthMethod))
				} else {
					r.Configuration.SourceLinkedinAds.Credentials.SourceLinkedinAdsAuthenticationAccessToken.AuthMethod = types.StringNull()
				}
			}
		}
		r.Configuration.SourceLinkedinAds.SourceType = types.StringValue(string(resp.Configuration.SourceLinkedinAds.SourceType))
		r.Configuration.SourceLinkedinAds.StartDate = types.StringValue(resp.Configuration.SourceLinkedinAds.StartDate.String())
	}
	if resp.Configuration.SourceLinkedinPages != nil {
		r.Configuration.SourceLinkedinPages = &SourceLinkedinPages{}
		if resp.Configuration.SourceLinkedinPages.Credentials == nil {
			r.Configuration.SourceLinkedinPages.Credentials = nil
		} else {
			r.Configuration.SourceLinkedinPages.Credentials = &SourceLinkedinPagesAuthentication{}
			if resp.Configuration.SourceLinkedinPages.Credentials.SourceLinkedinPagesAuthenticationOAuth20 != nil {
				r.Configuration.SourceLinkedinPages.Credentials.SourceLinkedinPagesAuthenticationOAuth20 = &SourceLinkedinAdsAuthenticationOAuth20{}
				if resp.Configuration.SourceLinkedinPages.Credentials.SourceLinkedinPagesAuthenticationOAuth20.AuthMethod != nil {
					r.Configuration.SourceLinkedinPages.Credentials.SourceLinkedinPagesAuthenticationOAuth20.AuthMethod = types.StringValue(string(*resp.Configuration.SourceLinkedinPages.Credentials.SourceLinkedinPagesAuthenticationOAuth20.AuthMethod))
				} else {
					r.Configuration.SourceLinkedinPages.Credentials.SourceLinkedinPagesAuthenticationOAuth20.AuthMethod = types.StringNull()
				}
				r.Configuration.SourceLinkedinPages.Credentials.SourceLinkedinPagesAuthenticationOAuth20.ClientID = types.StringValue(resp.Configuration.SourceLinkedinPages.Credentials.SourceLinkedinPagesAuthenticationOAuth20.ClientID)
				r.Configuration.SourceLinkedinPages.Credentials.SourceLinkedinPagesAuthenticationOAuth20.ClientSecret = types.StringValue(resp.Configuration.SourceLinkedinPages.Credentials.SourceLinkedinPagesAuthenticationOAuth20.ClientSecret)
				r.Configuration.SourceLinkedinPages.Credentials.SourceLinkedinPagesAuthenticationOAuth20.RefreshToken = types.StringValue(resp.Configuration.SourceLinkedinPages.Credentials.SourceLinkedinPagesAuthenticationOAuth20.RefreshToken)
			}
			if resp.Configuration.SourceLinkedinPages.Credentials.SourceLinkedinPagesAuthenticationAccessToken != nil {
				r.Configuration.SourceLinkedinPages.Credentials.SourceLinkedinPagesAuthenticationAccessToken = &SourceLinkedinAdsAuthenticationAccessToken{}
				r.Configuration.SourceLinkedinPages.Credentials.SourceLinkedinPagesAuthenticationAccessToken.AccessToken = types.StringValue(resp.Configuration.SourceLinkedinPages.Credentials.SourceLinkedinPagesAuthenticationAccessToken.AccessToken)
				if resp.Configuration.SourceLinkedinPages.Credentials.SourceLinkedinPagesAuthenticationAccessToken.AuthMethod != nil {
					r.Configuration.SourceLinkedinPages.Credentials.SourceLinkedinPagesAuthenticationAccessToken.AuthMethod = types.StringValue(string(*resp.Configuration.SourceLinkedinPages.Credentials.SourceLinkedinPagesAuthenticationAccessToken.AuthMethod))
				} else {
					r.Configuration.SourceLinkedinPages.Credentials.SourceLinkedinPagesAuthenticationAccessToken.AuthMethod = types.StringNull()
				}
			}
		}
		r.Configuration.SourceLinkedinPages.OrgID = types.StringValue(resp.Configuration.SourceLinkedinPages.OrgID)
		r.Configuration.SourceLinkedinPages.SourceType = types.StringValue(string(resp.Configuration.SourceLinkedinPages.SourceType))
	}
	if resp.Configuration.SourceLinnworks != nil {
		r.Configuration.SourceLinnworks = &SourceLinnworks{}
		r.Configuration.SourceLinnworks.ApplicationID = types.StringValue(resp.Configuration.SourceLinnworks.ApplicationID)
		r.Configuration.SourceLinnworks.ApplicationSecret = types.StringValue(resp.Configuration.SourceLinnworks.ApplicationSecret)
		r.Configuration.SourceLinnworks.SourceType = types.StringValue(string(resp.Configuration.SourceLinnworks.SourceType))
		r.Configuration.SourceLinnworks.StartDate = types.StringValue(resp.Configuration.SourceLinnworks.StartDate.Format(time.RFC3339))
		r.Configuration.SourceLinnworks.Token = types.StringValue(resp.Configuration.SourceLinnworks.Token)
	}
	if resp.Configuration.SourceLokalise != nil {
		r.Configuration.SourceLokalise = &SourceLokalise{}
		r.Configuration.SourceLokalise.APIKey = types.StringValue(resp.Configuration.SourceLokalise.APIKey)
		r.Configuration.SourceLokalise.ProjectID = types.StringValue(resp.Configuration.SourceLokalise.ProjectID)
		r.Configuration.SourceLokalise.SourceType = types.StringValue(string(resp.Configuration.SourceLokalise.SourceType))
	}
	if resp.Configuration.SourceMailchimp != nil {
		r.Configuration.SourceMailchimp = &SourceMailchimp{}
		if resp.Configuration.SourceMailchimp.CampaignID != nil {
			r.Configuration.SourceMailchimp.CampaignID = types.StringValue(*resp.Configuration.SourceMailchimp.CampaignID)
		} else {
			r.Configuration.SourceMailchimp.CampaignID = types.StringNull()
		}
		if resp.Configuration.SourceMailchimp.Credentials == nil {
			r.Configuration.SourceMailchimp.Credentials = nil
		} else {
			r.Configuration.SourceMailchimp.Credentials = &SourceMailchimpAuthentication{}
			if resp.Configuration.SourceMailchimp.Credentials.SourceMailchimpAuthenticationOAuth20 != nil {
				r.Configuration.SourceMailchimp.Credentials.SourceMailchimpAuthenticationOAuth20 = &SourceMailchimpAuthenticationOAuth20{}
				r.Configuration.SourceMailchimp.Credentials.SourceMailchimpAuthenticationOAuth20.AccessToken = types.StringValue(resp.Configuration.SourceMailchimp.Credentials.SourceMailchimpAuthenticationOAuth20.AccessToken)
				r.Configuration.SourceMailchimp.Credentials.SourceMailchimpAuthenticationOAuth20.AuthType = types.StringValue(string(resp.Configuration.SourceMailchimp.Credentials.SourceMailchimpAuthenticationOAuth20.AuthType))
				if resp.Configuration.SourceMailchimp.Credentials.SourceMailchimpAuthenticationOAuth20.ClientID != nil {
					r.Configuration.SourceMailchimp.Credentials.SourceMailchimpAuthenticationOAuth20.ClientID = types.StringValue(*resp.Configuration.SourceMailchimp.Credentials.SourceMailchimpAuthenticationOAuth20.ClientID)
				} else {
					r.Configuration.SourceMailchimp.Credentials.SourceMailchimpAuthenticationOAuth20.ClientID = types.StringNull()
				}
				if resp.Configuration.SourceMailchimp.Credentials.SourceMailchimpAuthenticationOAuth20.ClientSecret != nil {
					r.Configuration.SourceMailchimp.Credentials.SourceMailchimpAuthenticationOAuth20.ClientSecret = types.StringValue(*resp.Configuration.SourceMailchimp.Credentials.SourceMailchimpAuthenticationOAuth20.ClientSecret)
				} else {
					r.Configuration.SourceMailchimp.Credentials.SourceMailchimpAuthenticationOAuth20.ClientSecret = types.StringNull()
				}
			}
			if resp.Configuration.SourceMailchimp.Credentials.SourceMailchimpAuthenticationAPIKey != nil {
				r.Configuration.SourceMailchimp.Credentials.SourceMailchimpAuthenticationAPIKey = &SourceMailchimpAuthenticationAPIKey{}
				r.Configuration.SourceMailchimp.Credentials.SourceMailchimpAuthenticationAPIKey.Apikey = types.StringValue(resp.Configuration.SourceMailchimp.Credentials.SourceMailchimpAuthenticationAPIKey.Apikey)
				r.Configuration.SourceMailchimp.Credentials.SourceMailchimpAuthenticationAPIKey.AuthType = types.StringValue(string(resp.Configuration.SourceMailchimp.Credentials.SourceMailchimpAuthenticationAPIKey.AuthType))
			}
		}
		r.Configuration.SourceMailchimp.SourceType = types.StringValue(string(resp.Configuration.SourceMailchimp.SourceType))
	}
	if resp.Configuration.SourceMailgun != nil {
		r.Configuration.SourceMailgun = &SourceMailgun{}
		if resp.Configuration.SourceMailgun.DomainRegion != nil {
			r.Configuration.SourceMailgun.DomainRegion = types.StringValue(*resp.Configuration.SourceMailgun.DomainRegion)
		} else {
			r.Configuration.SourceMailgun.DomainRegion = types.StringNull()
		}
		r.Configuration.SourceMailgun.PrivateKey = types.StringValue(resp.Configuration.SourceMailgun.PrivateKey)
		r.Configuration.SourceMailgun.SourceType = types.StringValue(string(resp.Configuration.SourceMailgun.SourceType))
		if resp.Configuration.SourceMailgun.StartDate != nil {
			r.Configuration.SourceMailgun.StartDate = types.StringValue(resp.Configuration.SourceMailgun.StartDate.Format(time.RFC3339))
		} else {
			r.Configuration.SourceMailgun.StartDate = types.StringNull()
		}
	}
	if resp.Configuration.SourceMailjetSms != nil {
		r.Configuration.SourceMailjetSms = &SourceMailjetSms{}
		if resp.Configuration.SourceMailjetSms.EndDate != nil {
			r.Configuration.SourceMailjetSms.EndDate = types.Int64Value(*resp.Configuration.SourceMailjetSms.EndDate)
		} else {
			r.Configuration.SourceMailjetSms.EndDate = types.Int64Null()
		}
		r.Configuration.SourceMailjetSms.SourceType = types.StringValue(string(resp.Configuration.SourceMailjetSms.SourceType))
		if resp.Configuration.SourceMailjetSms.StartDate != nil {
			r.Configuration.SourceMailjetSms.StartDate = types.Int64Value(*resp.Configuration.SourceMailjetSms.StartDate)
		} else {
			r.Configuration.SourceMailjetSms.StartDate = types.Int64Null()
		}
		r.Configuration.SourceMailjetSms.Token = types.StringValue(resp.Configuration.SourceMailjetSms.Token)
	}
	if resp.Configuration.SourceMarketo != nil {
		r.Configuration.SourceMarketo = &SourceMarketo{}
		r.Configuration.SourceMarketo.ClientID = types.StringValue(resp.Configuration.SourceMarketo.ClientID)
		r.Configuration.SourceMarketo.ClientSecret = types.StringValue(resp.Configuration.SourceMarketo.ClientSecret)
		r.Configuration.SourceMarketo.DomainURL = types.StringValue(resp.Configuration.SourceMarketo.DomainURL)
		r.Configuration.SourceMarketo.SourceType = types.StringValue(string(resp.Configuration.SourceMarketo.SourceType))
		r.Configuration.SourceMarketo.StartDate = types.StringValue(resp.Configuration.SourceMarketo.StartDate)
	}
	if resp.Configuration.SourceMetabase != nil {
		r.Configuration.SourceMetabase = &SourceMetabase{}
		r.Configuration.SourceMetabase.InstanceAPIURL = types.StringValue(resp.Configuration.SourceMetabase.InstanceAPIURL)
		if resp.Configuration.SourceMetabase.Password != nil {
			r.Configuration.SourceMetabase.Password = types.StringValue(*resp.Configuration.SourceMetabase.Password)
		} else {
			r.Configuration.SourceMetabase.Password = types.StringNull()
		}
		if resp.Configuration.SourceMetabase.SessionToken != nil {
			r.Configuration.SourceMetabase.SessionToken = types.StringValue(*resp.Configuration.SourceMetabase.SessionToken)
		} else {
			r.Configuration.SourceMetabase.SessionToken = types.StringNull()
		}
		r.Configuration.SourceMetabase.SourceType = types.StringValue(string(resp.Configuration.SourceMetabase.SourceType))
		if resp.Configuration.SourceMetabase.Username != nil {
			r.Configuration.SourceMetabase.Username = types.StringValue(*resp.Configuration.SourceMetabase.Username)
		} else {
			r.Configuration.SourceMetabase.Username = types.StringNull()
		}
	}
	if resp.Configuration.SourceMicrosoftTeams != nil {
		r.Configuration.SourceMicrosoftTeams = &SourceMicrosoftTeams{}
		if resp.Configuration.SourceMicrosoftTeams.Credentials == nil {
			r.Configuration.SourceMicrosoftTeams.Credentials = nil
		} else {
			r.Configuration.SourceMicrosoftTeams.Credentials = &SourceMicrosoftTeamsAuthenticationMechanism{}
			if resp.Configuration.SourceMicrosoftTeams.Credentials.SourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoftOAuth20 != nil {
				r.Configuration.SourceMicrosoftTeams.Credentials.SourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoftOAuth20 = &SourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoftOAuth20{}
				if resp.Configuration.SourceMicrosoftTeams.Credentials.SourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoftOAuth20.AuthType != nil {
					r.Configuration.SourceMicrosoftTeams.Credentials.SourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoftOAuth20.AuthType = types.StringValue(string(*resp.Configuration.SourceMicrosoftTeams.Credentials.SourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoftOAuth20.AuthType))
				} else {
					r.Configuration.SourceMicrosoftTeams.Credentials.SourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoftOAuth20.AuthType = types.StringNull()
				}
				r.Configuration.SourceMicrosoftTeams.Credentials.SourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoftOAuth20.ClientID = types.StringValue(resp.Configuration.SourceMicrosoftTeams.Credentials.SourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoftOAuth20.ClientID)
				r.Configuration.SourceMicrosoftTeams.Credentials.SourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoftOAuth20.ClientSecret = types.StringValue(resp.Configuration.SourceMicrosoftTeams.Credentials.SourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoftOAuth20.ClientSecret)
				r.Configuration.SourceMicrosoftTeams.Credentials.SourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoftOAuth20.RefreshToken = types.StringValue(resp.Configuration.SourceMicrosoftTeams.Credentials.SourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoftOAuth20.RefreshToken)
				r.Configuration.SourceMicrosoftTeams.Credentials.SourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoftOAuth20.TenantID = types.StringValue(resp.Configuration.SourceMicrosoftTeams.Credentials.SourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoftOAuth20.TenantID)
			}
			if resp.Configuration.SourceMicrosoftTeams.Credentials.SourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoft != nil {
				r.Configuration.SourceMicrosoftTeams.Credentials.SourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoft = &SourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoft{}
				if resp.Configuration.SourceMicrosoftTeams.Credentials.SourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoft.AuthType != nil {
					r.Configuration.SourceMicrosoftTeams.Credentials.SourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoft.AuthType = types.StringValue(string(*resp.Configuration.SourceMicrosoftTeams.Credentials.SourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoft.AuthType))
				} else {
					r.Configuration.SourceMicrosoftTeams.Credentials.SourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoft.AuthType = types.StringNull()
				}
				r.Configuration.SourceMicrosoftTeams.Credentials.SourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoft.ClientID = types.StringValue(resp.Configuration.SourceMicrosoftTeams.Credentials.SourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoft.ClientID)
				r.Configuration.SourceMicrosoftTeams.Credentials.SourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoft.ClientSecret = types.StringValue(resp.Configuration.SourceMicrosoftTeams.Credentials.SourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoft.ClientSecret)
				r.Configuration.SourceMicrosoftTeams.Credentials.SourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoft.TenantID = types.StringValue(resp.Configuration.SourceMicrosoftTeams.Credentials.SourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoft.TenantID)
			}
		}
		r.Configuration.SourceMicrosoftTeams.Period = types.StringValue(resp.Configuration.SourceMicrosoftTeams.Period)
		r.Configuration.SourceMicrosoftTeams.SourceType = types.StringValue(string(resp.Configuration.SourceMicrosoftTeams.SourceType))
	}
	if resp.Configuration.SourceMixpanel != nil {
		r.Configuration.SourceMixpanel = &SourceMixpanel{}
		if resp.Configuration.SourceMixpanel.AttributionWindow != nil {
			r.Configuration.SourceMixpanel.AttributionWindow = types.Int64Value(*resp.Configuration.SourceMixpanel.AttributionWindow)
		} else {
			r.Configuration.SourceMixpanel.AttributionWindow = types.Int64Null()
		}
		if resp.Configuration.SourceMixpanel.Credentials == nil {
			r.Configuration.SourceMixpanel.Credentials = nil
		} else {
			r.Configuration.SourceMixpanel.Credentials = &SourceMixpanelAuthenticationWildcard{}
			if resp.Configuration.SourceMixpanel.Credentials.SourceMixpanelAuthenticationWildcardServiceAccount != nil {
				r.Configuration.SourceMixpanel.Credentials.SourceMixpanelAuthenticationWildcardServiceAccount = &SourceMixpanelAuthenticationWildcardServiceAccount{}
				if resp.Configuration.SourceMixpanel.Credentials.SourceMixpanelAuthenticationWildcardServiceAccount.OptionTitle != nil {
					r.Configuration.SourceMixpanel.Credentials.SourceMixpanelAuthenticationWildcardServiceAccount.OptionTitle = types.StringValue(string(*resp.Configuration.SourceMixpanel.Credentials.SourceMixpanelAuthenticationWildcardServiceAccount.OptionTitle))
				} else {
					r.Configuration.SourceMixpanel.Credentials.SourceMixpanelAuthenticationWildcardServiceAccount.OptionTitle = types.StringNull()
				}
				r.Configuration.SourceMixpanel.Credentials.SourceMixpanelAuthenticationWildcardServiceAccount.Secret = types.StringValue(resp.Configuration.SourceMixpanel.Credentials.SourceMixpanelAuthenticationWildcardServiceAccount.Secret)
				r.Configuration.SourceMixpanel.Credentials.SourceMixpanelAuthenticationWildcardServiceAccount.Username = types.StringValue(resp.Configuration.SourceMixpanel.Credentials.SourceMixpanelAuthenticationWildcardServiceAccount.Username)
			}
			if resp.Configuration.SourceMixpanel.Credentials.SourceMixpanelAuthenticationWildcardProjectSecret != nil {
				r.Configuration.SourceMixpanel.Credentials.SourceMixpanelAuthenticationWildcardProjectSecret = &SourceMixpanelAuthenticationWildcardProjectSecret{}
				r.Configuration.SourceMixpanel.Credentials.SourceMixpanelAuthenticationWildcardProjectSecret.APISecret = types.StringValue(resp.Configuration.SourceMixpanel.Credentials.SourceMixpanelAuthenticationWildcardProjectSecret.APISecret)
				if resp.Configuration.SourceMixpanel.Credentials.SourceMixpanelAuthenticationWildcardProjectSecret.OptionTitle != nil {
					r.Configuration.SourceMixpanel.Credentials.SourceMixpanelAuthenticationWildcardProjectSecret.OptionTitle = types.StringValue(string(*resp.Configuration.SourceMixpanel.Credentials.SourceMixpanelAuthenticationWildcardProjectSecret.OptionTitle))
				} else {
					r.Configuration.SourceMixpanel.Credentials.SourceMixpanelAuthenticationWildcardProjectSecret.OptionTitle = types.StringNull()
				}
			}
		}
		if resp.Configuration.SourceMixpanel.DateWindowSize != nil {
			r.Configuration.SourceMixpanel.DateWindowSize = types.Int64Value(*resp.Configuration.SourceMixpanel.DateWindowSize)
		} else {
			r.Configuration.SourceMixpanel.DateWindowSize = types.Int64Null()
		}
		if resp.Configuration.SourceMixpanel.EndDate != nil {
			r.Configuration.SourceMixpanel.EndDate = types.StringValue(*resp.Configuration.SourceMixpanel.EndDate)
		} else {
			r.Configuration.SourceMixpanel.EndDate = types.StringNull()
		}
		if resp.Configuration.SourceMixpanel.ProjectID != nil {
			r.Configuration.SourceMixpanel.ProjectID = types.Int64Value(*resp.Configuration.SourceMixpanel.ProjectID)
		} else {
			r.Configuration.SourceMixpanel.ProjectID = types.Int64Null()
		}
		if resp.Configuration.SourceMixpanel.ProjectTimezone != nil {
			r.Configuration.SourceMixpanel.ProjectTimezone = types.StringValue(*resp.Configuration.SourceMixpanel.ProjectTimezone)
		} else {
			r.Configuration.SourceMixpanel.ProjectTimezone = types.StringNull()
		}
		if resp.Configuration.SourceMixpanel.Region != nil {
			r.Configuration.SourceMixpanel.Region = types.StringValue(string(*resp.Configuration.SourceMixpanel.Region))
		} else {
			r.Configuration.SourceMixpanel.Region = types.StringNull()
		}
		if resp.Configuration.SourceMixpanel.SelectPropertiesByDefault != nil {
			r.Configuration.SourceMixpanel.SelectPropertiesByDefault = types.BoolValue(*resp.Configuration.SourceMixpanel.SelectPropertiesByDefault)
		} else {
			r.Configuration.SourceMixpanel.SelectPropertiesByDefault = types.BoolNull()
		}
		r.Configuration.SourceMixpanel.SourceType = types.StringValue(string(resp.Configuration.SourceMixpanel.SourceType))
		if resp.Configuration.SourceMixpanel.StartDate != nil {
			r.Configuration.SourceMixpanel.StartDate = types.StringValue(*resp.Configuration.SourceMixpanel.StartDate)
		} else {
			r.Configuration.SourceMixpanel.StartDate = types.StringNull()
		}
	}
	if resp.Configuration.SourceMonday != nil {
		r.Configuration.SourceMonday = &SourceMonday{}
		if resp.Configuration.SourceMonday.Credentials == nil {
			r.Configuration.SourceMonday.Credentials = nil
		} else {
			r.Configuration.SourceMonday.Credentials = &SourceMondayAuthorizationMethod{}
			if resp.Configuration.SourceMonday.Credentials.SourceMondayAuthorizationMethodOAuth20 != nil {
				r.Configuration.SourceMonday.Credentials.SourceMondayAuthorizationMethodOAuth20 = &SourceMondayAuthorizationMethodOAuth20{}
				r.Configuration.SourceMonday.Credentials.SourceMondayAuthorizationMethodOAuth20.AccessToken = types.StringValue(resp.Configuration.SourceMonday.Credentials.SourceMondayAuthorizationMethodOAuth20.AccessToken)
				r.Configuration.SourceMonday.Credentials.SourceMondayAuthorizationMethodOAuth20.AuthType = types.StringValue(string(resp.Configuration.SourceMonday.Credentials.SourceMondayAuthorizationMethodOAuth20.AuthType))
				r.Configuration.SourceMonday.Credentials.SourceMondayAuthorizationMethodOAuth20.ClientID = types.StringValue(resp.Configuration.SourceMonday.Credentials.SourceMondayAuthorizationMethodOAuth20.ClientID)
				r.Configuration.SourceMonday.Credentials.SourceMondayAuthorizationMethodOAuth20.ClientSecret = types.StringValue(resp.Configuration.SourceMonday.Credentials.SourceMondayAuthorizationMethodOAuth20.ClientSecret)
				if resp.Configuration.SourceMonday.Credentials.SourceMondayAuthorizationMethodOAuth20.Subdomain != nil {
					r.Configuration.SourceMonday.Credentials.SourceMondayAuthorizationMethodOAuth20.Subdomain = types.StringValue(*resp.Configuration.SourceMonday.Credentials.SourceMondayAuthorizationMethodOAuth20.Subdomain)
				} else {
					r.Configuration.SourceMonday.Credentials.SourceMondayAuthorizationMethodOAuth20.Subdomain = types.StringNull()
				}
			}
			if resp.Configuration.SourceMonday.Credentials.SourceMondayAuthorizationMethodAPIToken != nil {
				r.Configuration.SourceMonday.Credentials.SourceMondayAuthorizationMethodAPIToken = &SourceMondayAuthorizationMethodAPIToken{}
				r.Configuration.SourceMonday.Credentials.SourceMondayAuthorizationMethodAPIToken.APIToken = types.StringValue(resp.Configuration.SourceMonday.Credentials.SourceMondayAuthorizationMethodAPIToken.APIToken)
				r.Configuration.SourceMonday.Credentials.SourceMondayAuthorizationMethodAPIToken.AuthType = types.StringValue(string(resp.Configuration.SourceMonday.Credentials.SourceMondayAuthorizationMethodAPIToken.AuthType))
			}
		}
		r.Configuration.SourceMonday.SourceType = types.StringValue(string(resp.Configuration.SourceMonday.SourceType))
	}
	if resp.Configuration.SourceMongodb != nil {
		r.Configuration.SourceMongodb = &SourceMongodb{}
		if resp.Configuration.SourceMongodb.AuthSource != nil {
			r.Configuration.SourceMongodb.AuthSource = types.StringValue(*resp.Configuration.SourceMongodb.AuthSource)
		} else {
			r.Configuration.SourceMongodb.AuthSource = types.StringNull()
		}
		r.Configuration.SourceMongodb.Database = types.StringValue(resp.Configuration.SourceMongodb.Database)
		if resp.Configuration.SourceMongodb.InstanceType == nil {
			r.Configuration.SourceMongodb.InstanceType = nil
		} else {
			r.Configuration.SourceMongodb.InstanceType = &SourceMongodbMongoDbInstanceType{}
			if resp.Configuration.SourceMongodb.InstanceType.SourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstance != nil {
				r.Configuration.SourceMongodb.InstanceType.SourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstance = &SourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstance{}
				r.Configuration.SourceMongodb.InstanceType.SourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstance.Host = types.StringValue(resp.Configuration.SourceMongodb.InstanceType.SourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstance.Host)
				r.Configuration.SourceMongodb.InstanceType.SourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstance.Instance = types.StringValue(string(resp.Configuration.SourceMongodb.InstanceType.SourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstance.Instance))
				r.Configuration.SourceMongodb.InstanceType.SourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstance.Port = types.Int64Value(resp.Configuration.SourceMongodb.InstanceType.SourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstance.Port)
			}
			if resp.Configuration.SourceMongodb.InstanceType.SourceMongodbMongoDbInstanceTypeReplicaSet != nil {
				r.Configuration.SourceMongodb.InstanceType.SourceMongodbMongoDbInstanceTypeReplicaSet = &SourceMongodbMongoDbInstanceTypeReplicaSet{}
				r.Configuration.SourceMongodb.InstanceType.SourceMongodbMongoDbInstanceTypeReplicaSet.Instance = types.StringValue(string(resp.Configuration.SourceMongodb.InstanceType.SourceMongodbMongoDbInstanceTypeReplicaSet.Instance))
				if resp.Configuration.SourceMongodb.InstanceType.SourceMongodbMongoDbInstanceTypeReplicaSet.ReplicaSet != nil {
					r.Configuration.SourceMongodb.InstanceType.SourceMongodbMongoDbInstanceTypeReplicaSet.ReplicaSet = types.StringValue(*resp.Configuration.SourceMongodb.InstanceType.SourceMongodbMongoDbInstanceTypeReplicaSet.ReplicaSet)
				} else {
					r.Configuration.SourceMongodb.InstanceType.SourceMongodbMongoDbInstanceTypeReplicaSet.ReplicaSet = types.StringNull()
				}
				r.Configuration.SourceMongodb.InstanceType.SourceMongodbMongoDbInstanceTypeReplicaSet.ServerAddresses = types.StringValue(resp.Configuration.SourceMongodb.InstanceType.SourceMongodbMongoDbInstanceTypeReplicaSet.ServerAddresses)
			}
			if resp.Configuration.SourceMongodb.InstanceType.SourceMongodbMongoDBInstanceTypeMongoDBAtlas != nil {
				r.Configuration.SourceMongodb.InstanceType.SourceMongodbMongoDBInstanceTypeMongoDBAtlas = &SourceMongodbMongoDBInstanceTypeMongoDBAtlas{}
				r.Configuration.SourceMongodb.InstanceType.SourceMongodbMongoDBInstanceTypeMongoDBAtlas.ClusterURL = types.StringValue(resp.Configuration.SourceMongodb.InstanceType.SourceMongodbMongoDBInstanceTypeMongoDBAtlas.ClusterURL)
				r.Configuration.SourceMongodb.InstanceType.SourceMongodbMongoDBInstanceTypeMongoDBAtlas.Instance = types.StringValue(string(resp.Configuration.SourceMongodb.InstanceType.SourceMongodbMongoDBInstanceTypeMongoDBAtlas.Instance))
			}
		}
		if resp.Configuration.SourceMongodb.Password != nil {
			r.Configuration.SourceMongodb.Password = types.StringValue(*resp.Configuration.SourceMongodb.Password)
		} else {
			r.Configuration.SourceMongodb.Password = types.StringNull()
		}
		r.Configuration.SourceMongodb.SourceType = types.StringValue(string(resp.Configuration.SourceMongodb.SourceType))
		if resp.Configuration.SourceMongodb.User != nil {
			r.Configuration.SourceMongodb.User = types.StringValue(*resp.Configuration.SourceMongodb.User)
		} else {
			r.Configuration.SourceMongodb.User = types.StringNull()
		}
	}
	if resp.Configuration.SourceMssql != nil {
		r.Configuration.SourceMssql = &SourceMssql{}
		r.Configuration.SourceMssql.Database = types.StringValue(resp.Configuration.SourceMssql.Database)
		r.Configuration.SourceMssql.Host = types.StringValue(resp.Configuration.SourceMssql.Host)
		if resp.Configuration.SourceMssql.JdbcURLParams != nil {
			r.Configuration.SourceMssql.JdbcURLParams = types.StringValue(*resp.Configuration.SourceMssql.JdbcURLParams)
		} else {
			r.Configuration.SourceMssql.JdbcURLParams = types.StringNull()
		}
		if resp.Configuration.SourceMssql.Password != nil {
			r.Configuration.SourceMssql.Password = types.StringValue(*resp.Configuration.SourceMssql.Password)
		} else {
			r.Configuration.SourceMssql.Password = types.StringNull()
		}
		r.Configuration.SourceMssql.Port = types.Int64Value(resp.Configuration.SourceMssql.Port)
		if resp.Configuration.SourceMssql.ReplicationMethod == nil {
			r.Configuration.SourceMssql.ReplicationMethod = nil
		} else {
			r.Configuration.SourceMssql.ReplicationMethod = &SourceMssqlReplicationMethod{}
			if resp.Configuration.SourceMssql.ReplicationMethod.SourceMssqlReplicationMethodStandard != nil {
				r.Configuration.SourceMssql.ReplicationMethod.SourceMssqlReplicationMethodStandard = &SourceMssqlReplicationMethodStandard{}
				r.Configuration.SourceMssql.ReplicationMethod.SourceMssqlReplicationMethodStandard.Method = types.StringValue(string(resp.Configuration.SourceMssql.ReplicationMethod.SourceMssqlReplicationMethodStandard.Method))
			}
			if resp.Configuration.SourceMssql.ReplicationMethod.SourceMssqlReplicationMethodLogicalReplicationCDC != nil {
				r.Configuration.SourceMssql.ReplicationMethod.SourceMssqlReplicationMethodLogicalReplicationCDC = &SourceMssqlReplicationMethodLogicalReplicationCDC{}
				if resp.Configuration.SourceMssql.ReplicationMethod.SourceMssqlReplicationMethodLogicalReplicationCDC.DataToSync != nil {
					r.Configuration.SourceMssql.ReplicationMethod.SourceMssqlReplicationMethodLogicalReplicationCDC.DataToSync = types.StringValue(string(*resp.Configuration.SourceMssql.ReplicationMethod.SourceMssqlReplicationMethodLogicalReplicationCDC.DataToSync))
				} else {
					r.Configuration.SourceMssql.ReplicationMethod.SourceMssqlReplicationMethodLogicalReplicationCDC.DataToSync = types.StringNull()
				}
				if resp.Configuration.SourceMssql.ReplicationMethod.SourceMssqlReplicationMethodLogicalReplicationCDC.InitialWaitingSeconds != nil {
					r.Configuration.SourceMssql.ReplicationMethod.SourceMssqlReplicationMethodLogicalReplicationCDC.InitialWaitingSeconds = types.Int64Value(*resp.Configuration.SourceMssql.ReplicationMethod.SourceMssqlReplicationMethodLogicalReplicationCDC.InitialWaitingSeconds)
				} else {
					r.Configuration.SourceMssql.ReplicationMethod.SourceMssqlReplicationMethodLogicalReplicationCDC.InitialWaitingSeconds = types.Int64Null()
				}
				r.Configuration.SourceMssql.ReplicationMethod.SourceMssqlReplicationMethodLogicalReplicationCDC.Method = types.StringValue(string(resp.Configuration.SourceMssql.ReplicationMethod.SourceMssqlReplicationMethodLogicalReplicationCDC.Method))
				if resp.Configuration.SourceMssql.ReplicationMethod.SourceMssqlReplicationMethodLogicalReplicationCDC.SnapshotIsolation != nil {
					r.Configuration.SourceMssql.ReplicationMethod.SourceMssqlReplicationMethodLogicalReplicationCDC.SnapshotIsolation = types.StringValue(string(*resp.Configuration.SourceMssql.ReplicationMethod.SourceMssqlReplicationMethodLogicalReplicationCDC.SnapshotIsolation))
				} else {
					r.Configuration.SourceMssql.ReplicationMethod.SourceMssqlReplicationMethodLogicalReplicationCDC.SnapshotIsolation = types.StringNull()
				}
			}
		}
		r.Configuration.SourceMssql.Schemas = nil
		for _, v := range resp.Configuration.SourceMssql.Schemas {
			r.Configuration.SourceMssql.Schemas = append(r.Configuration.SourceMssql.Schemas, types.StringValue(v))
		}
		r.Configuration.SourceMssql.SourceType = types.StringValue(string(resp.Configuration.SourceMssql.SourceType))
		if resp.Configuration.SourceMssql.SslMethod == nil {
			r.Configuration.SourceMssql.SslMethod = nil
		} else {
			r.Configuration.SourceMssql.SslMethod = &SourceMssqlSSLMethod{}
			if resp.Configuration.SourceMssql.SslMethod.SourceMssqlSSLMethodEncryptedTrustServerCertificate != nil {
				r.Configuration.SourceMssql.SslMethod.SourceMssqlSSLMethodEncryptedTrustServerCertificate = &DestinationMssqlSSLMethodEncryptedTrustServerCertificate{}
				r.Configuration.SourceMssql.SslMethod.SourceMssqlSSLMethodEncryptedTrustServerCertificate.SslMethod = types.StringValue(string(resp.Configuration.SourceMssql.SslMethod.SourceMssqlSSLMethodEncryptedTrustServerCertificate.SslMethod))
			}
			if resp.Configuration.SourceMssql.SslMethod.SourceMssqlSSLMethodEncryptedVerifyCertificate != nil {
				r.Configuration.SourceMssql.SslMethod.SourceMssqlSSLMethodEncryptedVerifyCertificate = &DestinationMssqlSSLMethodEncryptedVerifyCertificate{}
				if resp.Configuration.SourceMssql.SslMethod.SourceMssqlSSLMethodEncryptedVerifyCertificate.HostNameInCertificate != nil {
					r.Configuration.SourceMssql.SslMethod.SourceMssqlSSLMethodEncryptedVerifyCertificate.HostNameInCertificate = types.StringValue(*resp.Configuration.SourceMssql.SslMethod.SourceMssqlSSLMethodEncryptedVerifyCertificate.HostNameInCertificate)
				} else {
					r.Configuration.SourceMssql.SslMethod.SourceMssqlSSLMethodEncryptedVerifyCertificate.HostNameInCertificate = types.StringNull()
				}
				r.Configuration.SourceMssql.SslMethod.SourceMssqlSSLMethodEncryptedVerifyCertificate.SslMethod = types.StringValue(string(resp.Configuration.SourceMssql.SslMethod.SourceMssqlSSLMethodEncryptedVerifyCertificate.SslMethod))
			}
		}
		if resp.Configuration.SourceMssql.TunnelMethod == nil {
			r.Configuration.SourceMssql.TunnelMethod = nil
		} else {
			r.Configuration.SourceMssql.TunnelMethod = &SourceMssqlSSHTunnelMethod{}
			if resp.Configuration.SourceMssql.TunnelMethod.SourceMssqlSSHTunnelMethodNoTunnel != nil {
				r.Configuration.SourceMssql.TunnelMethod.SourceMssqlSSHTunnelMethodNoTunnel = &DestinationClickhouseSSHTunnelMethodNoTunnel{}
				r.Configuration.SourceMssql.TunnelMethod.SourceMssqlSSHTunnelMethodNoTunnel.TunnelMethod = types.StringValue(string(resp.Configuration.SourceMssql.TunnelMethod.SourceMssqlSSHTunnelMethodNoTunnel.TunnelMethod))
			}
			if resp.Configuration.SourceMssql.TunnelMethod.SourceMssqlSSHTunnelMethodSSHKeyAuthentication != nil {
				r.Configuration.SourceMssql.TunnelMethod.SourceMssqlSSHTunnelMethodSSHKeyAuthentication = &DestinationClickhouseSSHTunnelMethodSSHKeyAuthentication{}
				r.Configuration.SourceMssql.TunnelMethod.SourceMssqlSSHTunnelMethodSSHKeyAuthentication.SSHKey = types.StringValue(resp.Configuration.SourceMssql.TunnelMethod.SourceMssqlSSHTunnelMethodSSHKeyAuthentication.SSHKey)
				r.Configuration.SourceMssql.TunnelMethod.SourceMssqlSSHTunnelMethodSSHKeyAuthentication.TunnelHost = types.StringValue(resp.Configuration.SourceMssql.TunnelMethod.SourceMssqlSSHTunnelMethodSSHKeyAuthentication.TunnelHost)
				r.Configuration.SourceMssql.TunnelMethod.SourceMssqlSSHTunnelMethodSSHKeyAuthentication.TunnelMethod = types.StringValue(string(resp.Configuration.SourceMssql.TunnelMethod.SourceMssqlSSHTunnelMethodSSHKeyAuthentication.TunnelMethod))
				r.Configuration.SourceMssql.TunnelMethod.SourceMssqlSSHTunnelMethodSSHKeyAuthentication.TunnelPort = types.Int64Value(resp.Configuration.SourceMssql.TunnelMethod.SourceMssqlSSHTunnelMethodSSHKeyAuthentication.TunnelPort)
				r.Configuration.SourceMssql.TunnelMethod.SourceMssqlSSHTunnelMethodSSHKeyAuthentication.TunnelUser = types.StringValue(resp.Configuration.SourceMssql.TunnelMethod.SourceMssqlSSHTunnelMethodSSHKeyAuthentication.TunnelUser)
			}
			if resp.Configuration.SourceMssql.TunnelMethod.SourceMssqlSSHTunnelMethodPasswordAuthentication != nil {
				r.Configuration.SourceMssql.TunnelMethod.SourceMssqlSSHTunnelMethodPasswordAuthentication = &DestinationClickhouseSSHTunnelMethodPasswordAuthentication{}
				r.Configuration.SourceMssql.TunnelMethod.SourceMssqlSSHTunnelMethodPasswordAuthentication.TunnelHost = types.StringValue(resp.Configuration.SourceMssql.TunnelMethod.SourceMssqlSSHTunnelMethodPasswordAuthentication.TunnelHost)
				r.Configuration.SourceMssql.TunnelMethod.SourceMssqlSSHTunnelMethodPasswordAuthentication.TunnelMethod = types.StringValue(string(resp.Configuration.SourceMssql.TunnelMethod.SourceMssqlSSHTunnelMethodPasswordAuthentication.TunnelMethod))
				r.Configuration.SourceMssql.TunnelMethod.SourceMssqlSSHTunnelMethodPasswordAuthentication.TunnelPort = types.Int64Value(resp.Configuration.SourceMssql.TunnelMethod.SourceMssqlSSHTunnelMethodPasswordAuthentication.TunnelPort)
				r.Configuration.SourceMssql.TunnelMethod.SourceMssqlSSHTunnelMethodPasswordAuthentication.TunnelUser = types.StringValue(resp.Configuration.SourceMssql.TunnelMethod.SourceMssqlSSHTunnelMethodPasswordAuthentication.TunnelUser)
				r.Configuration.SourceMssql.TunnelMethod.SourceMssqlSSHTunnelMethodPasswordAuthentication.TunnelUserPassword = types.StringValue(resp.Configuration.SourceMssql.TunnelMethod.SourceMssqlSSHTunnelMethodPasswordAuthentication.TunnelUserPassword)
			}
		}
		r.Configuration.SourceMssql.Username = types.StringValue(resp.Configuration.SourceMssql.Username)
	}
	if resp.Configuration.SourceMyHours != nil {
		r.Configuration.SourceMyHours = &SourceMyHours{}
		r.Configuration.SourceMyHours.Email = types.StringValue(resp.Configuration.SourceMyHours.Email)
		if resp.Configuration.SourceMyHours.LogsBatchSize != nil {
			r.Configuration.SourceMyHours.LogsBatchSize = types.Int64Value(*resp.Configuration.SourceMyHours.LogsBatchSize)
		} else {
			r.Configuration.SourceMyHours.LogsBatchSize = types.Int64Null()
		}
		r.Configuration.SourceMyHours.Password = types.StringValue(resp.Configuration.SourceMyHours.Password)
		r.Configuration.SourceMyHours.SourceType = types.StringValue(string(resp.Configuration.SourceMyHours.SourceType))
		r.Configuration.SourceMyHours.StartDate = types.StringValue(resp.Configuration.SourceMyHours.StartDate)
	}
	if resp.Configuration.SourceMysql != nil {
		r.Configuration.SourceMysql = &SourceMysql{}
		r.Configuration.SourceMysql.Database = types.StringValue(resp.Configuration.SourceMysql.Database)
		r.Configuration.SourceMysql.Host = types.StringValue(resp.Configuration.SourceMysql.Host)
		if resp.Configuration.SourceMysql.JdbcURLParams != nil {
			r.Configuration.SourceMysql.JdbcURLParams = types.StringValue(*resp.Configuration.SourceMysql.JdbcURLParams)
		} else {
			r.Configuration.SourceMysql.JdbcURLParams = types.StringNull()
		}
		if resp.Configuration.SourceMysql.Password != nil {
			r.Configuration.SourceMysql.Password = types.StringValue(*resp.Configuration.SourceMysql.Password)
		} else {
			r.Configuration.SourceMysql.Password = types.StringNull()
		}
		r.Configuration.SourceMysql.Port = types.Int64Value(resp.Configuration.SourceMysql.Port)
		if resp.Configuration.SourceMysql.ReplicationMethod.SourceMysqlReplicationMethodStandard != nil {
			r.Configuration.SourceMysql.ReplicationMethod.SourceMysqlReplicationMethodStandard = &SourceMssqlReplicationMethodStandard{}
			r.Configuration.SourceMysql.ReplicationMethod.SourceMysqlReplicationMethodStandard.Method = types.StringValue(string(resp.Configuration.SourceMysql.ReplicationMethod.SourceMysqlReplicationMethodStandard.Method))
		}
		if resp.Configuration.SourceMysql.ReplicationMethod.SourceMysqlReplicationMethodLogicalReplicationCDC != nil {
			r.Configuration.SourceMysql.ReplicationMethod.SourceMysqlReplicationMethodLogicalReplicationCDC = &SourceMysqlReplicationMethodLogicalReplicationCDC{}
			if resp.Configuration.SourceMysql.ReplicationMethod.SourceMysqlReplicationMethodLogicalReplicationCDC.InitialWaitingSeconds != nil {
				r.Configuration.SourceMysql.ReplicationMethod.SourceMysqlReplicationMethodLogicalReplicationCDC.InitialWaitingSeconds = types.Int64Value(*resp.Configuration.SourceMysql.ReplicationMethod.SourceMysqlReplicationMethodLogicalReplicationCDC.InitialWaitingSeconds)
			} else {
				r.Configuration.SourceMysql.ReplicationMethod.SourceMysqlReplicationMethodLogicalReplicationCDC.InitialWaitingSeconds = types.Int64Null()
			}
			r.Configuration.SourceMysql.ReplicationMethod.SourceMysqlReplicationMethodLogicalReplicationCDC.Method = types.StringValue(string(resp.Configuration.SourceMysql.ReplicationMethod.SourceMysqlReplicationMethodLogicalReplicationCDC.Method))
			if resp.Configuration.SourceMysql.ReplicationMethod.SourceMysqlReplicationMethodLogicalReplicationCDC.ServerTimeZone != nil {
				r.Configuration.SourceMysql.ReplicationMethod.SourceMysqlReplicationMethodLogicalReplicationCDC.ServerTimeZone = types.StringValue(*resp.Configuration.SourceMysql.ReplicationMethod.SourceMysqlReplicationMethodLogicalReplicationCDC.ServerTimeZone)
			} else {
				r.Configuration.SourceMysql.ReplicationMethod.SourceMysqlReplicationMethodLogicalReplicationCDC.ServerTimeZone = types.StringNull()
			}
		}
		r.Configuration.SourceMysql.SourceType = types.StringValue(string(resp.Configuration.SourceMysql.SourceType))
		if resp.Configuration.SourceMysql.SslMode == nil {
			r.Configuration.SourceMysql.SslMode = nil
		} else {
			r.Configuration.SourceMysql.SslMode = &SourceMysqlSSLModes{}
			if resp.Configuration.SourceMysql.SslMode.SourceMysqlSSLModesPreferred != nil {
				r.Configuration.SourceMysql.SslMode.SourceMysqlSSLModesPreferred = &SourceMysqlSSLModesPreferred{}
				r.Configuration.SourceMysql.SslMode.SourceMysqlSSLModesPreferred.Mode = types.StringValue(string(resp.Configuration.SourceMysql.SslMode.SourceMysqlSSLModesPreferred.Mode))
			}
			if resp.Configuration.SourceMysql.SslMode.SourceMysqlSSLModesRequired != nil {
				r.Configuration.SourceMysql.SslMode.SourceMysqlSSLModesRequired = &SourceMysqlSSLModesRequired{}
				r.Configuration.SourceMysql.SslMode.SourceMysqlSSLModesRequired.Mode = types.StringValue(string(resp.Configuration.SourceMysql.SslMode.SourceMysqlSSLModesRequired.Mode))
			}
			if resp.Configuration.SourceMysql.SslMode.SourceMysqlSSLModesVerifyCA != nil {
				r.Configuration.SourceMysql.SslMode.SourceMysqlSSLModesVerifyCA = &SourceMysqlSSLModesVerifyCA{}
				r.Configuration.SourceMysql.SslMode.SourceMysqlSSLModesVerifyCA.CaCertificate = types.StringValue(resp.Configuration.SourceMysql.SslMode.SourceMysqlSSLModesVerifyCA.CaCertificate)
				if resp.Configuration.SourceMysql.SslMode.SourceMysqlSSLModesVerifyCA.ClientCertificate != nil {
					r.Configuration.SourceMysql.SslMode.SourceMysqlSSLModesVerifyCA.ClientCertificate = types.StringValue(*resp.Configuration.SourceMysql.SslMode.SourceMysqlSSLModesVerifyCA.ClientCertificate)
				} else {
					r.Configuration.SourceMysql.SslMode.SourceMysqlSSLModesVerifyCA.ClientCertificate = types.StringNull()
				}
				if resp.Configuration.SourceMysql.SslMode.SourceMysqlSSLModesVerifyCA.ClientKey != nil {
					r.Configuration.SourceMysql.SslMode.SourceMysqlSSLModesVerifyCA.ClientKey = types.StringValue(*resp.Configuration.SourceMysql.SslMode.SourceMysqlSSLModesVerifyCA.ClientKey)
				} else {
					r.Configuration.SourceMysql.SslMode.SourceMysqlSSLModesVerifyCA.ClientKey = types.StringNull()
				}
				if resp.Configuration.SourceMysql.SslMode.SourceMysqlSSLModesVerifyCA.ClientKeyPassword != nil {
					r.Configuration.SourceMysql.SslMode.SourceMysqlSSLModesVerifyCA.ClientKeyPassword = types.StringValue(*resp.Configuration.SourceMysql.SslMode.SourceMysqlSSLModesVerifyCA.ClientKeyPassword)
				} else {
					r.Configuration.SourceMysql.SslMode.SourceMysqlSSLModesVerifyCA.ClientKeyPassword = types.StringNull()
				}
				r.Configuration.SourceMysql.SslMode.SourceMysqlSSLModesVerifyCA.Mode = types.StringValue(string(resp.Configuration.SourceMysql.SslMode.SourceMysqlSSLModesVerifyCA.Mode))
			}
			if resp.Configuration.SourceMysql.SslMode.SourceMysqlSSLModesVerifyIdentity != nil {
				r.Configuration.SourceMysql.SslMode.SourceMysqlSSLModesVerifyIdentity = &SourceMysqlSSLModesVerifyIdentity{}
				r.Configuration.SourceMysql.SslMode.SourceMysqlSSLModesVerifyIdentity.CaCertificate = types.StringValue(resp.Configuration.SourceMysql.SslMode.SourceMysqlSSLModesVerifyIdentity.CaCertificate)
				if resp.Configuration.SourceMysql.SslMode.SourceMysqlSSLModesVerifyIdentity.ClientCertificate != nil {
					r.Configuration.SourceMysql.SslMode.SourceMysqlSSLModesVerifyIdentity.ClientCertificate = types.StringValue(*resp.Configuration.SourceMysql.SslMode.SourceMysqlSSLModesVerifyIdentity.ClientCertificate)
				} else {
					r.Configuration.SourceMysql.SslMode.SourceMysqlSSLModesVerifyIdentity.ClientCertificate = types.StringNull()
				}
				if resp.Configuration.SourceMysql.SslMode.SourceMysqlSSLModesVerifyIdentity.ClientKey != nil {
					r.Configuration.SourceMysql.SslMode.SourceMysqlSSLModesVerifyIdentity.ClientKey = types.StringValue(*resp.Configuration.SourceMysql.SslMode.SourceMysqlSSLModesVerifyIdentity.ClientKey)
				} else {
					r.Configuration.SourceMysql.SslMode.SourceMysqlSSLModesVerifyIdentity.ClientKey = types.StringNull()
				}
				if resp.Configuration.SourceMysql.SslMode.SourceMysqlSSLModesVerifyIdentity.ClientKeyPassword != nil {
					r.Configuration.SourceMysql.SslMode.SourceMysqlSSLModesVerifyIdentity.ClientKeyPassword = types.StringValue(*resp.Configuration.SourceMysql.SslMode.SourceMysqlSSLModesVerifyIdentity.ClientKeyPassword)
				} else {
					r.Configuration.SourceMysql.SslMode.SourceMysqlSSLModesVerifyIdentity.ClientKeyPassword = types.StringNull()
				}
				r.Configuration.SourceMysql.SslMode.SourceMysqlSSLModesVerifyIdentity.Mode = types.StringValue(string(resp.Configuration.SourceMysql.SslMode.SourceMysqlSSLModesVerifyIdentity.Mode))
			}
		}
		if resp.Configuration.SourceMysql.TunnelMethod == nil {
			r.Configuration.SourceMysql.TunnelMethod = nil
		} else {
			r.Configuration.SourceMysql.TunnelMethod = &SourceMysqlSSHTunnelMethod{}
			if resp.Configuration.SourceMysql.TunnelMethod.SourceMysqlSSHTunnelMethodNoTunnel != nil {
				r.Configuration.SourceMysql.TunnelMethod.SourceMysqlSSHTunnelMethodNoTunnel = &DestinationClickhouseSSHTunnelMethodNoTunnel{}
				r.Configuration.SourceMysql.TunnelMethod.SourceMysqlSSHTunnelMethodNoTunnel.TunnelMethod = types.StringValue(string(resp.Configuration.SourceMysql.TunnelMethod.SourceMysqlSSHTunnelMethodNoTunnel.TunnelMethod))
			}
			if resp.Configuration.SourceMysql.TunnelMethod.SourceMysqlSSHTunnelMethodSSHKeyAuthentication != nil {
				r.Configuration.SourceMysql.TunnelMethod.SourceMysqlSSHTunnelMethodSSHKeyAuthentication = &DestinationClickhouseSSHTunnelMethodSSHKeyAuthentication{}
				r.Configuration.SourceMysql.TunnelMethod.SourceMysqlSSHTunnelMethodSSHKeyAuthentication.SSHKey = types.StringValue(resp.Configuration.SourceMysql.TunnelMethod.SourceMysqlSSHTunnelMethodSSHKeyAuthentication.SSHKey)
				r.Configuration.SourceMysql.TunnelMethod.SourceMysqlSSHTunnelMethodSSHKeyAuthentication.TunnelHost = types.StringValue(resp.Configuration.SourceMysql.TunnelMethod.SourceMysqlSSHTunnelMethodSSHKeyAuthentication.TunnelHost)
				r.Configuration.SourceMysql.TunnelMethod.SourceMysqlSSHTunnelMethodSSHKeyAuthentication.TunnelMethod = types.StringValue(string(resp.Configuration.SourceMysql.TunnelMethod.SourceMysqlSSHTunnelMethodSSHKeyAuthentication.TunnelMethod))
				r.Configuration.SourceMysql.TunnelMethod.SourceMysqlSSHTunnelMethodSSHKeyAuthentication.TunnelPort = types.Int64Value(resp.Configuration.SourceMysql.TunnelMethod.SourceMysqlSSHTunnelMethodSSHKeyAuthentication.TunnelPort)
				r.Configuration.SourceMysql.TunnelMethod.SourceMysqlSSHTunnelMethodSSHKeyAuthentication.TunnelUser = types.StringValue(resp.Configuration.SourceMysql.TunnelMethod.SourceMysqlSSHTunnelMethodSSHKeyAuthentication.TunnelUser)
			}
			if resp.Configuration.SourceMysql.TunnelMethod.SourceMysqlSSHTunnelMethodPasswordAuthentication != nil {
				r.Configuration.SourceMysql.TunnelMethod.SourceMysqlSSHTunnelMethodPasswordAuthentication = &DestinationClickhouseSSHTunnelMethodPasswordAuthentication{}
				r.Configuration.SourceMysql.TunnelMethod.SourceMysqlSSHTunnelMethodPasswordAuthentication.TunnelHost = types.StringValue(resp.Configuration.SourceMysql.TunnelMethod.SourceMysqlSSHTunnelMethodPasswordAuthentication.TunnelHost)
				r.Configuration.SourceMysql.TunnelMethod.SourceMysqlSSHTunnelMethodPasswordAuthentication.TunnelMethod = types.StringValue(string(resp.Configuration.SourceMysql.TunnelMethod.SourceMysqlSSHTunnelMethodPasswordAuthentication.TunnelMethod))
				r.Configuration.SourceMysql.TunnelMethod.SourceMysqlSSHTunnelMethodPasswordAuthentication.TunnelPort = types.Int64Value(resp.Configuration.SourceMysql.TunnelMethod.SourceMysqlSSHTunnelMethodPasswordAuthentication.TunnelPort)
				r.Configuration.SourceMysql.TunnelMethod.SourceMysqlSSHTunnelMethodPasswordAuthentication.TunnelUser = types.StringValue(resp.Configuration.SourceMysql.TunnelMethod.SourceMysqlSSHTunnelMethodPasswordAuthentication.TunnelUser)
				r.Configuration.SourceMysql.TunnelMethod.SourceMysqlSSHTunnelMethodPasswordAuthentication.TunnelUserPassword = types.StringValue(resp.Configuration.SourceMysql.TunnelMethod.SourceMysqlSSHTunnelMethodPasswordAuthentication.TunnelUserPassword)
			}
		}
		r.Configuration.SourceMysql.Username = types.StringValue(resp.Configuration.SourceMysql.Username)
	}
	if resp.Configuration.SourceNetsuite != nil {
		r.Configuration.SourceNetsuite = &SourceNetsuite{}
		r.Configuration.SourceNetsuite.ConsumerKey = types.StringValue(resp.Configuration.SourceNetsuite.ConsumerKey)
		r.Configuration.SourceNetsuite.ConsumerSecret = types.StringValue(resp.Configuration.SourceNetsuite.ConsumerSecret)
		r.Configuration.SourceNetsuite.ObjectTypes = nil
		for _, v := range resp.Configuration.SourceNetsuite.ObjectTypes {
			r.Configuration.SourceNetsuite.ObjectTypes = append(r.Configuration.SourceNetsuite.ObjectTypes, types.StringValue(v))
		}
		r.Configuration.SourceNetsuite.Realm = types.StringValue(resp.Configuration.SourceNetsuite.Realm)
		r.Configuration.SourceNetsuite.SourceType = types.StringValue(string(resp.Configuration.SourceNetsuite.SourceType))
		r.Configuration.SourceNetsuite.StartDatetime = types.StringValue(resp.Configuration.SourceNetsuite.StartDatetime)
		r.Configuration.SourceNetsuite.TokenKey = types.StringValue(resp.Configuration.SourceNetsuite.TokenKey)
		r.Configuration.SourceNetsuite.TokenSecret = types.StringValue(resp.Configuration.SourceNetsuite.TokenSecret)
		if resp.Configuration.SourceNetsuite.WindowInDays != nil {
			r.Configuration.SourceNetsuite.WindowInDays = types.Int64Value(*resp.Configuration.SourceNetsuite.WindowInDays)
		} else {
			r.Configuration.SourceNetsuite.WindowInDays = types.Int64Null()
		}
	}
	if resp.Configuration.SourceNotion != nil {
		r.Configuration.SourceNotion = &SourceNotion{}
		if resp.Configuration.SourceNotion.Credentials == nil {
			r.Configuration.SourceNotion.Credentials = nil
		} else {
			r.Configuration.SourceNotion.Credentials = &SourceNotionAuthenticateUsing{}
			if resp.Configuration.SourceNotion.Credentials.SourceNotionAuthenticateUsingOAuth20 != nil {
				r.Configuration.SourceNotion.Credentials.SourceNotionAuthenticateUsingOAuth20 = &SourceNotionAuthenticateUsingOAuth20{}
				r.Configuration.SourceNotion.Credentials.SourceNotionAuthenticateUsingOAuth20.AccessToken = types.StringValue(resp.Configuration.SourceNotion.Credentials.SourceNotionAuthenticateUsingOAuth20.AccessToken)
				r.Configuration.SourceNotion.Credentials.SourceNotionAuthenticateUsingOAuth20.AuthType = types.StringValue(string(resp.Configuration.SourceNotion.Credentials.SourceNotionAuthenticateUsingOAuth20.AuthType))
				r.Configuration.SourceNotion.Credentials.SourceNotionAuthenticateUsingOAuth20.ClientID = types.StringValue(resp.Configuration.SourceNotion.Credentials.SourceNotionAuthenticateUsingOAuth20.ClientID)
				r.Configuration.SourceNotion.Credentials.SourceNotionAuthenticateUsingOAuth20.ClientSecret = types.StringValue(resp.Configuration.SourceNotion.Credentials.SourceNotionAuthenticateUsingOAuth20.ClientSecret)
			}
			if resp.Configuration.SourceNotion.Credentials.SourceNotionAuthenticateUsingAccessToken != nil {
				r.Configuration.SourceNotion.Credentials.SourceNotionAuthenticateUsingAccessToken = &SourceNotionAuthenticateUsingAccessToken{}
				r.Configuration.SourceNotion.Credentials.SourceNotionAuthenticateUsingAccessToken.AuthType = types.StringValue(string(resp.Configuration.SourceNotion.Credentials.SourceNotionAuthenticateUsingAccessToken.AuthType))
				r.Configuration.SourceNotion.Credentials.SourceNotionAuthenticateUsingAccessToken.Token = types.StringValue(resp.Configuration.SourceNotion.Credentials.SourceNotionAuthenticateUsingAccessToken.Token)
			}
		}
		r.Configuration.SourceNotion.SourceType = types.StringValue(string(resp.Configuration.SourceNotion.SourceType))
		r.Configuration.SourceNotion.StartDate = types.StringValue(resp.Configuration.SourceNotion.StartDate.Format(time.RFC3339))
	}
	if resp.Configuration.SourceNytimes != nil {
		r.Configuration.SourceNytimes = &SourceNytimes{}
		r.Configuration.SourceNytimes.APIKey = types.StringValue(resp.Configuration.SourceNytimes.APIKey)
		if resp.Configuration.SourceNytimes.EndDate != nil {
			r.Configuration.SourceNytimes.EndDate = types.StringValue(resp.Configuration.SourceNytimes.EndDate.String())
		} else {
			r.Configuration.SourceNytimes.EndDate = types.StringNull()
		}
		r.Configuration.SourceNytimes.Period = types.StringValue(string(resp.Configuration.SourceNytimes.Period))
		if resp.Configuration.SourceNytimes.ShareType != nil {
			r.Configuration.SourceNytimes.ShareType = types.StringValue(string(*resp.Configuration.SourceNytimes.ShareType))
		} else {
			r.Configuration.SourceNytimes.ShareType = types.StringNull()
		}
		r.Configuration.SourceNytimes.SourceType = types.StringValue(string(resp.Configuration.SourceNytimes.SourceType))
		r.Configuration.SourceNytimes.StartDate = types.StringValue(resp.Configuration.SourceNytimes.StartDate.String())
	}
	if resp.Configuration.SourceOkta != nil {
		r.Configuration.SourceOkta = &SourceOkta{}
		if resp.Configuration.SourceOkta.Credentials == nil {
			r.Configuration.SourceOkta.Credentials = nil
		} else {
			r.Configuration.SourceOkta.Credentials = &SourceOktaAuthorizationMethod{}
			if resp.Configuration.SourceOkta.Credentials.SourceOktaAuthorizationMethodOAuth20 != nil {
				r.Configuration.SourceOkta.Credentials.SourceOktaAuthorizationMethodOAuth20 = &SourceOktaAuthorizationMethodOAuth20{}
				r.Configuration.SourceOkta.Credentials.SourceOktaAuthorizationMethodOAuth20.AuthType = types.StringValue(string(resp.Configuration.SourceOkta.Credentials.SourceOktaAuthorizationMethodOAuth20.AuthType))
				r.Configuration.SourceOkta.Credentials.SourceOktaAuthorizationMethodOAuth20.ClientID = types.StringValue(resp.Configuration.SourceOkta.Credentials.SourceOktaAuthorizationMethodOAuth20.ClientID)
				r.Configuration.SourceOkta.Credentials.SourceOktaAuthorizationMethodOAuth20.ClientSecret = types.StringValue(resp.Configuration.SourceOkta.Credentials.SourceOktaAuthorizationMethodOAuth20.ClientSecret)
				r.Configuration.SourceOkta.Credentials.SourceOktaAuthorizationMethodOAuth20.RefreshToken = types.StringValue(resp.Configuration.SourceOkta.Credentials.SourceOktaAuthorizationMethodOAuth20.RefreshToken)
			}
			if resp.Configuration.SourceOkta.Credentials.SourceOktaAuthorizationMethodAPIToken != nil {
				r.Configuration.SourceOkta.Credentials.SourceOktaAuthorizationMethodAPIToken = &SourceMondayAuthorizationMethodAPIToken{}
				r.Configuration.SourceOkta.Credentials.SourceOktaAuthorizationMethodAPIToken.APIToken = types.StringValue(resp.Configuration.SourceOkta.Credentials.SourceOktaAuthorizationMethodAPIToken.APIToken)
				r.Configuration.SourceOkta.Credentials.SourceOktaAuthorizationMethodAPIToken.AuthType = types.StringValue(string(resp.Configuration.SourceOkta.Credentials.SourceOktaAuthorizationMethodAPIToken.AuthType))
			}
		}
		if resp.Configuration.SourceOkta.Domain != nil {
			r.Configuration.SourceOkta.Domain = types.StringValue(*resp.Configuration.SourceOkta.Domain)
		} else {
			r.Configuration.SourceOkta.Domain = types.StringNull()
		}
		r.Configuration.SourceOkta.SourceType = types.StringValue(string(resp.Configuration.SourceOkta.SourceType))
		if resp.Configuration.SourceOkta.StartDate != nil {
			r.Configuration.SourceOkta.StartDate = types.StringValue(*resp.Configuration.SourceOkta.StartDate)
		} else {
			r.Configuration.SourceOkta.StartDate = types.StringNull()
		}
	}
	if resp.Configuration.SourceOmnisend != nil {
		r.Configuration.SourceOmnisend = &SourceOmnisend{}
		r.Configuration.SourceOmnisend.APIKey = types.StringValue(resp.Configuration.SourceOmnisend.APIKey)
		r.Configuration.SourceOmnisend.SourceType = types.StringValue(string(resp.Configuration.SourceOmnisend.SourceType))
	}
	if resp.Configuration.SourceOnesignal != nil {
		r.Configuration.SourceOnesignal = &SourceOnesignal{}
		r.Configuration.SourceOnesignal.Applications = nil
		for _, applicationsItem := range resp.Configuration.SourceOnesignal.Applications {
			var applications1 SourceOnesignalApplications
			applications1.AppAPIKey = types.StringValue(applicationsItem.AppAPIKey)
			applications1.AppID = types.StringValue(applicationsItem.AppID)
			if applicationsItem.AppName != nil {
				applications1.AppName = types.StringValue(*applicationsItem.AppName)
			} else {
				applications1.AppName = types.StringNull()
			}
			r.Configuration.SourceOnesignal.Applications = append(r.Configuration.SourceOnesignal.Applications, applications1)
		}
		r.Configuration.SourceOnesignal.OutcomeNames = types.StringValue(resp.Configuration.SourceOnesignal.OutcomeNames)
		r.Configuration.SourceOnesignal.SourceType = types.StringValue(string(resp.Configuration.SourceOnesignal.SourceType))
		r.Configuration.SourceOnesignal.StartDate = types.StringValue(resp.Configuration.SourceOnesignal.StartDate.Format(time.RFC3339))
		r.Configuration.SourceOnesignal.UserAuthKey = types.StringValue(resp.Configuration.SourceOnesignal.UserAuthKey)
	}
	if resp.Configuration.SourceOpenweather != nil {
		r.Configuration.SourceOpenweather = &SourceOpenweather{}
		r.Configuration.SourceOpenweather.Appid = types.StringValue(resp.Configuration.SourceOpenweather.Appid)
		if resp.Configuration.SourceOpenweather.Lang != nil {
			r.Configuration.SourceOpenweather.Lang = types.StringValue(string(*resp.Configuration.SourceOpenweather.Lang))
		} else {
			r.Configuration.SourceOpenweather.Lang = types.StringNull()
		}
		r.Configuration.SourceOpenweather.Lat = types.StringValue(resp.Configuration.SourceOpenweather.Lat)
		r.Configuration.SourceOpenweather.Lon = types.StringValue(resp.Configuration.SourceOpenweather.Lon)
		r.Configuration.SourceOpenweather.SourceType = types.StringValue(string(resp.Configuration.SourceOpenweather.SourceType))
		if resp.Configuration.SourceOpenweather.Units != nil {
			r.Configuration.SourceOpenweather.Units = types.StringValue(string(*resp.Configuration.SourceOpenweather.Units))
		} else {
			r.Configuration.SourceOpenweather.Units = types.StringNull()
		}
	}
	if resp.Configuration.SourceOracle != nil {
		r.Configuration.SourceOracle = &SourceOracle{}
		if resp.Configuration.SourceOracle.ConnectionData == nil {
			r.Configuration.SourceOracle.ConnectionData = nil
		} else {
			r.Configuration.SourceOracle.ConnectionData = &SourceOracleConnectBy{}
			if resp.Configuration.SourceOracle.ConnectionData.SourceOracleConnectByServiceName != nil {
				r.Configuration.SourceOracle.ConnectionData.SourceOracleConnectByServiceName = &SourceOracleConnectByServiceName{}
				if resp.Configuration.SourceOracle.ConnectionData.SourceOracleConnectByServiceName.ConnectionType != nil {
					r.Configuration.SourceOracle.ConnectionData.SourceOracleConnectByServiceName.ConnectionType = types.StringValue(string(*resp.Configuration.SourceOracle.ConnectionData.SourceOracleConnectByServiceName.ConnectionType))
				} else {
					r.Configuration.SourceOracle.ConnectionData.SourceOracleConnectByServiceName.ConnectionType = types.StringNull()
				}
				r.Configuration.SourceOracle.ConnectionData.SourceOracleConnectByServiceName.ServiceName = types.StringValue(resp.Configuration.SourceOracle.ConnectionData.SourceOracleConnectByServiceName.ServiceName)
			}
			if resp.Configuration.SourceOracle.ConnectionData.SourceOracleConnectBySystemIDSID != nil {
				r.Configuration.SourceOracle.ConnectionData.SourceOracleConnectBySystemIDSID = &SourceOracleConnectBySystemIDSID{}
				if resp.Configuration.SourceOracle.ConnectionData.SourceOracleConnectBySystemIDSID.ConnectionType != nil {
					r.Configuration.SourceOracle.ConnectionData.SourceOracleConnectBySystemIDSID.ConnectionType = types.StringValue(string(*resp.Configuration.SourceOracle.ConnectionData.SourceOracleConnectBySystemIDSID.ConnectionType))
				} else {
					r.Configuration.SourceOracle.ConnectionData.SourceOracleConnectBySystemIDSID.ConnectionType = types.StringNull()
				}
				r.Configuration.SourceOracle.ConnectionData.SourceOracleConnectBySystemIDSID.Sid = types.StringValue(resp.Configuration.SourceOracle.ConnectionData.SourceOracleConnectBySystemIDSID.Sid)
			}
		}
		if resp.Configuration.SourceOracle.Encryption.SourceOracleEncryptionNativeNetworkEncryptionNNE != nil {
			r.Configuration.SourceOracle.Encryption.SourceOracleEncryptionNativeNetworkEncryptionNNE = &SourceOracleEncryptionNativeNetworkEncryptionNNE{}
			if resp.Configuration.SourceOracle.Encryption.SourceOracleEncryptionNativeNetworkEncryptionNNE.EncryptionAlgorithm != nil {
				r.Configuration.SourceOracle.Encryption.SourceOracleEncryptionNativeNetworkEncryptionNNE.EncryptionAlgorithm = types.StringValue(string(*resp.Configuration.SourceOracle.Encryption.SourceOracleEncryptionNativeNetworkEncryptionNNE.EncryptionAlgorithm))
			} else {
				r.Configuration.SourceOracle.Encryption.SourceOracleEncryptionNativeNetworkEncryptionNNE.EncryptionAlgorithm = types.StringNull()
			}
			r.Configuration.SourceOracle.Encryption.SourceOracleEncryptionNativeNetworkEncryptionNNE.EncryptionMethod = types.StringValue(string(resp.Configuration.SourceOracle.Encryption.SourceOracleEncryptionNativeNetworkEncryptionNNE.EncryptionMethod))
		}
		if resp.Configuration.SourceOracle.Encryption.SourceOracleEncryptionTLSEncryptedVerifyCertificate != nil {
			r.Configuration.SourceOracle.Encryption.SourceOracleEncryptionTLSEncryptedVerifyCertificate = &SourceOracleEncryptionTLSEncryptedVerifyCertificate{}
			r.Configuration.SourceOracle.Encryption.SourceOracleEncryptionTLSEncryptedVerifyCertificate.EncryptionMethod = types.StringValue(string(resp.Configuration.SourceOracle.Encryption.SourceOracleEncryptionTLSEncryptedVerifyCertificate.EncryptionMethod))
			r.Configuration.SourceOracle.Encryption.SourceOracleEncryptionTLSEncryptedVerifyCertificate.SslCertificate = types.StringValue(resp.Configuration.SourceOracle.Encryption.SourceOracleEncryptionTLSEncryptedVerifyCertificate.SslCertificate)
		}
		r.Configuration.SourceOracle.Host = types.StringValue(resp.Configuration.SourceOracle.Host)
		if resp.Configuration.SourceOracle.JdbcURLParams != nil {
			r.Configuration.SourceOracle.JdbcURLParams = types.StringValue(*resp.Configuration.SourceOracle.JdbcURLParams)
		} else {
			r.Configuration.SourceOracle.JdbcURLParams = types.StringNull()
		}
		if resp.Configuration.SourceOracle.Password != nil {
			r.Configuration.SourceOracle.Password = types.StringValue(*resp.Configuration.SourceOracle.Password)
		} else {
			r.Configuration.SourceOracle.Password = types.StringNull()
		}
		r.Configuration.SourceOracle.Port = types.Int64Value(resp.Configuration.SourceOracle.Port)
		r.Configuration.SourceOracle.Schemas = nil
		for _, v := range resp.Configuration.SourceOracle.Schemas {
			r.Configuration.SourceOracle.Schemas = append(r.Configuration.SourceOracle.Schemas, types.StringValue(v))
		}
		r.Configuration.SourceOracle.SourceType = types.StringValue(string(resp.Configuration.SourceOracle.SourceType))
		if resp.Configuration.SourceOracle.TunnelMethod == nil {
			r.Configuration.SourceOracle.TunnelMethod = nil
		} else {
			r.Configuration.SourceOracle.TunnelMethod = &SourceOracleSSHTunnelMethod{}
			if resp.Configuration.SourceOracle.TunnelMethod.SourceOracleSSHTunnelMethodNoTunnel != nil {
				r.Configuration.SourceOracle.TunnelMethod.SourceOracleSSHTunnelMethodNoTunnel = &DestinationClickhouseSSHTunnelMethodNoTunnel{}
				r.Configuration.SourceOracle.TunnelMethod.SourceOracleSSHTunnelMethodNoTunnel.TunnelMethod = types.StringValue(string(resp.Configuration.SourceOracle.TunnelMethod.SourceOracleSSHTunnelMethodNoTunnel.TunnelMethod))
			}
			if resp.Configuration.SourceOracle.TunnelMethod.SourceOracleSSHTunnelMethodSSHKeyAuthentication != nil {
				r.Configuration.SourceOracle.TunnelMethod.SourceOracleSSHTunnelMethodSSHKeyAuthentication = &DestinationClickhouseSSHTunnelMethodSSHKeyAuthentication{}
				r.Configuration.SourceOracle.TunnelMethod.SourceOracleSSHTunnelMethodSSHKeyAuthentication.SSHKey = types.StringValue(resp.Configuration.SourceOracle.TunnelMethod.SourceOracleSSHTunnelMethodSSHKeyAuthentication.SSHKey)
				r.Configuration.SourceOracle.TunnelMethod.SourceOracleSSHTunnelMethodSSHKeyAuthentication.TunnelHost = types.StringValue(resp.Configuration.SourceOracle.TunnelMethod.SourceOracleSSHTunnelMethodSSHKeyAuthentication.TunnelHost)
				r.Configuration.SourceOracle.TunnelMethod.SourceOracleSSHTunnelMethodSSHKeyAuthentication.TunnelMethod = types.StringValue(string(resp.Configuration.SourceOracle.TunnelMethod.SourceOracleSSHTunnelMethodSSHKeyAuthentication.TunnelMethod))
				r.Configuration.SourceOracle.TunnelMethod.SourceOracleSSHTunnelMethodSSHKeyAuthentication.TunnelPort = types.Int64Value(resp.Configuration.SourceOracle.TunnelMethod.SourceOracleSSHTunnelMethodSSHKeyAuthentication.TunnelPort)
				r.Configuration.SourceOracle.TunnelMethod.SourceOracleSSHTunnelMethodSSHKeyAuthentication.TunnelUser = types.StringValue(resp.Configuration.SourceOracle.TunnelMethod.SourceOracleSSHTunnelMethodSSHKeyAuthentication.TunnelUser)
			}
			if resp.Configuration.SourceOracle.TunnelMethod.SourceOracleSSHTunnelMethodPasswordAuthentication != nil {
				r.Configuration.SourceOracle.TunnelMethod.SourceOracleSSHTunnelMethodPasswordAuthentication = &DestinationClickhouseSSHTunnelMethodPasswordAuthentication{}
				r.Configuration.SourceOracle.TunnelMethod.SourceOracleSSHTunnelMethodPasswordAuthentication.TunnelHost = types.StringValue(resp.Configuration.SourceOracle.TunnelMethod.SourceOracleSSHTunnelMethodPasswordAuthentication.TunnelHost)
				r.Configuration.SourceOracle.TunnelMethod.SourceOracleSSHTunnelMethodPasswordAuthentication.TunnelMethod = types.StringValue(string(resp.Configuration.SourceOracle.TunnelMethod.SourceOracleSSHTunnelMethodPasswordAuthentication.TunnelMethod))
				r.Configuration.SourceOracle.TunnelMethod.SourceOracleSSHTunnelMethodPasswordAuthentication.TunnelPort = types.Int64Value(resp.Configuration.SourceOracle.TunnelMethod.SourceOracleSSHTunnelMethodPasswordAuthentication.TunnelPort)
				r.Configuration.SourceOracle.TunnelMethod.SourceOracleSSHTunnelMethodPasswordAuthentication.TunnelUser = types.StringValue(resp.Configuration.SourceOracle.TunnelMethod.SourceOracleSSHTunnelMethodPasswordAuthentication.TunnelUser)
				r.Configuration.SourceOracle.TunnelMethod.SourceOracleSSHTunnelMethodPasswordAuthentication.TunnelUserPassword = types.StringValue(resp.Configuration.SourceOracle.TunnelMethod.SourceOracleSSHTunnelMethodPasswordAuthentication.TunnelUserPassword)
			}
		}
		r.Configuration.SourceOracle.Username = types.StringValue(resp.Configuration.SourceOracle.Username)
	}
	if resp.Configuration.SourceOrb != nil {
		r.Configuration.SourceOrb = &SourceOrb{}
		r.Configuration.SourceOrb.APIKey = types.StringValue(resp.Configuration.SourceOrb.APIKey)
		if resp.Configuration.SourceOrb.LookbackWindowDays != nil {
			r.Configuration.SourceOrb.LookbackWindowDays = types.Int64Value(*resp.Configuration.SourceOrb.LookbackWindowDays)
		} else {
			r.Configuration.SourceOrb.LookbackWindowDays = types.Int64Null()
		}
		r.Configuration.SourceOrb.NumericEventPropertiesKeys = nil
		for _, v := range resp.Configuration.SourceOrb.NumericEventPropertiesKeys {
			r.Configuration.SourceOrb.NumericEventPropertiesKeys = append(r.Configuration.SourceOrb.NumericEventPropertiesKeys, types.StringValue(v))
		}
		if resp.Configuration.SourceOrb.PlanID != nil {
			r.Configuration.SourceOrb.PlanID = types.StringValue(*resp.Configuration.SourceOrb.PlanID)
		} else {
			r.Configuration.SourceOrb.PlanID = types.StringNull()
		}
		r.Configuration.SourceOrb.SourceType = types.StringValue(string(resp.Configuration.SourceOrb.SourceType))
		r.Configuration.SourceOrb.StartDate = types.StringValue(resp.Configuration.SourceOrb.StartDate)
		r.Configuration.SourceOrb.StringEventPropertiesKeys = nil
		for _, v := range resp.Configuration.SourceOrb.StringEventPropertiesKeys {
			r.Configuration.SourceOrb.StringEventPropertiesKeys = append(r.Configuration.SourceOrb.StringEventPropertiesKeys, types.StringValue(v))
		}
		if resp.Configuration.SourceOrb.SubscriptionUsageGroupingKey != nil {
			r.Configuration.SourceOrb.SubscriptionUsageGroupingKey = types.StringValue(*resp.Configuration.SourceOrb.SubscriptionUsageGroupingKey)
		} else {
			r.Configuration.SourceOrb.SubscriptionUsageGroupingKey = types.StringNull()
		}
	}
	if resp.Configuration.SourceOrbit != nil {
		r.Configuration.SourceOrbit = &SourceOrbit{}
		r.Configuration.SourceOrbit.APIToken = types.StringValue(resp.Configuration.SourceOrbit.APIToken)
		r.Configuration.SourceOrbit.SourceType = types.StringValue(string(resp.Configuration.SourceOrbit.SourceType))
		if resp.Configuration.SourceOrbit.StartDate != nil {
			r.Configuration.SourceOrbit.StartDate = types.StringValue(*resp.Configuration.SourceOrbit.StartDate)
		} else {
			r.Configuration.SourceOrbit.StartDate = types.StringNull()
		}
		r.Configuration.SourceOrbit.Workspace = types.StringValue(resp.Configuration.SourceOrbit.Workspace)
	}
	if resp.Configuration.SourceOutreach != nil {
		r.Configuration.SourceOutreach = &SourceOutreach{}
		r.Configuration.SourceOutreach.ClientID = types.StringValue(resp.Configuration.SourceOutreach.ClientID)
		r.Configuration.SourceOutreach.ClientSecret = types.StringValue(resp.Configuration.SourceOutreach.ClientSecret)
		r.Configuration.SourceOutreach.RedirectURI = types.StringValue(resp.Configuration.SourceOutreach.RedirectURI)
		r.Configuration.SourceOutreach.RefreshToken = types.StringValue(resp.Configuration.SourceOutreach.RefreshToken)
		r.Configuration.SourceOutreach.SourceType = types.StringValue(string(resp.Configuration.SourceOutreach.SourceType))
		r.Configuration.SourceOutreach.StartDate = types.StringValue(resp.Configuration.SourceOutreach.StartDate)
	}
	if resp.Configuration.SourcePaypalTransaction != nil {
		r.Configuration.SourcePaypalTransaction = &SourcePaypalTransaction{}
		if resp.Configuration.SourcePaypalTransaction.ClientID != nil {
			r.Configuration.SourcePaypalTransaction.ClientID = types.StringValue(*resp.Configuration.SourcePaypalTransaction.ClientID)
		} else {
			r.Configuration.SourcePaypalTransaction.ClientID = types.StringNull()
		}
		if resp.Configuration.SourcePaypalTransaction.ClientSecret != nil {
			r.Configuration.SourcePaypalTransaction.ClientSecret = types.StringValue(*resp.Configuration.SourcePaypalTransaction.ClientSecret)
		} else {
			r.Configuration.SourcePaypalTransaction.ClientSecret = types.StringNull()
		}
		r.Configuration.SourcePaypalTransaction.IsSandbox = types.BoolValue(resp.Configuration.SourcePaypalTransaction.IsSandbox)
		if resp.Configuration.SourcePaypalTransaction.RefreshToken != nil {
			r.Configuration.SourcePaypalTransaction.RefreshToken = types.StringValue(*resp.Configuration.SourcePaypalTransaction.RefreshToken)
		} else {
			r.Configuration.SourcePaypalTransaction.RefreshToken = types.StringNull()
		}
		r.Configuration.SourcePaypalTransaction.SourceType = types.StringValue(string(resp.Configuration.SourcePaypalTransaction.SourceType))
		r.Configuration.SourcePaypalTransaction.StartDate = types.StringValue(resp.Configuration.SourcePaypalTransaction.StartDate)
	}
	if resp.Configuration.SourcePaystack != nil {
		r.Configuration.SourcePaystack = &SourcePaystack{}
		if resp.Configuration.SourcePaystack.LookbackWindowDays != nil {
			r.Configuration.SourcePaystack.LookbackWindowDays = types.Int64Value(*resp.Configuration.SourcePaystack.LookbackWindowDays)
		} else {
			r.Configuration.SourcePaystack.LookbackWindowDays = types.Int64Null()
		}
		r.Configuration.SourcePaystack.SecretKey = types.StringValue(resp.Configuration.SourcePaystack.SecretKey)
		r.Configuration.SourcePaystack.SourceType = types.StringValue(string(resp.Configuration.SourcePaystack.SourceType))
		r.Configuration.SourcePaystack.StartDate = types.StringValue(resp.Configuration.SourcePaystack.StartDate.Format(time.RFC3339))
	}
	if resp.Configuration.SourcePendo != nil {
		r.Configuration.SourcePendo = &SourcePendo{}
		r.Configuration.SourcePendo.APIKey = types.StringValue(resp.Configuration.SourcePendo.APIKey)
		r.Configuration.SourcePendo.SourceType = types.StringValue(string(resp.Configuration.SourcePendo.SourceType))
	}
	if resp.Configuration.SourcePersistiq != nil {
		r.Configuration.SourcePersistiq = &SourcePersistiq{}
		r.Configuration.SourcePersistiq.APIKey = types.StringValue(resp.Configuration.SourcePersistiq.APIKey)
		r.Configuration.SourcePersistiq.SourceType = types.StringValue(string(resp.Configuration.SourcePersistiq.SourceType))
	}
	if resp.Configuration.SourcePexelsAPI != nil {
		r.Configuration.SourcePexelsAPI = &SourcePexelsAPI{}
		r.Configuration.SourcePexelsAPI.APIKey = types.StringValue(resp.Configuration.SourcePexelsAPI.APIKey)
		if resp.Configuration.SourcePexelsAPI.Color != nil {
			r.Configuration.SourcePexelsAPI.Color = types.StringValue(*resp.Configuration.SourcePexelsAPI.Color)
		} else {
			r.Configuration.SourcePexelsAPI.Color = types.StringNull()
		}
		if resp.Configuration.SourcePexelsAPI.Locale != nil {
			r.Configuration.SourcePexelsAPI.Locale = types.StringValue(*resp.Configuration.SourcePexelsAPI.Locale)
		} else {
			r.Configuration.SourcePexelsAPI.Locale = types.StringNull()
		}
		if resp.Configuration.SourcePexelsAPI.Orientation != nil {
			r.Configuration.SourcePexelsAPI.Orientation = types.StringValue(*resp.Configuration.SourcePexelsAPI.Orientation)
		} else {
			r.Configuration.SourcePexelsAPI.Orientation = types.StringNull()
		}
		r.Configuration.SourcePexelsAPI.Query = types.StringValue(resp.Configuration.SourcePexelsAPI.Query)
		if resp.Configuration.SourcePexelsAPI.Size != nil {
			r.Configuration.SourcePexelsAPI.Size = types.StringValue(*resp.Configuration.SourcePexelsAPI.Size)
		} else {
			r.Configuration.SourcePexelsAPI.Size = types.StringNull()
		}
		r.Configuration.SourcePexelsAPI.SourceType = types.StringValue(string(resp.Configuration.SourcePexelsAPI.SourceType))
	}
	if resp.Configuration.SourcePinterest != nil {
		r.Configuration.SourcePinterest = &SourcePinterest{}
		if resp.Configuration.SourcePinterest.Credentials == nil {
			r.Configuration.SourcePinterest.Credentials = nil
		} else {
			r.Configuration.SourcePinterest.Credentials = &SourcePinterestAuthorizationMethod{}
			if resp.Configuration.SourcePinterest.Credentials.SourcePinterestAuthorizationMethodOAuth20 != nil {
				r.Configuration.SourcePinterest.Credentials.SourcePinterestAuthorizationMethodOAuth20 = &SourcePinterestAuthorizationMethodOAuth20{}
				r.Configuration.SourcePinterest.Credentials.SourcePinterestAuthorizationMethodOAuth20.AuthMethod = types.StringValue(string(resp.Configuration.SourcePinterest.Credentials.SourcePinterestAuthorizationMethodOAuth20.AuthMethod))
				if resp.Configuration.SourcePinterest.Credentials.SourcePinterestAuthorizationMethodOAuth20.ClientID != nil {
					r.Configuration.SourcePinterest.Credentials.SourcePinterestAuthorizationMethodOAuth20.ClientID = types.StringValue(*resp.Configuration.SourcePinterest.Credentials.SourcePinterestAuthorizationMethodOAuth20.ClientID)
				} else {
					r.Configuration.SourcePinterest.Credentials.SourcePinterestAuthorizationMethodOAuth20.ClientID = types.StringNull()
				}
				if resp.Configuration.SourcePinterest.Credentials.SourcePinterestAuthorizationMethodOAuth20.ClientSecret != nil {
					r.Configuration.SourcePinterest.Credentials.SourcePinterestAuthorizationMethodOAuth20.ClientSecret = types.StringValue(*resp.Configuration.SourcePinterest.Credentials.SourcePinterestAuthorizationMethodOAuth20.ClientSecret)
				} else {
					r.Configuration.SourcePinterest.Credentials.SourcePinterestAuthorizationMethodOAuth20.ClientSecret = types.StringNull()
				}
				r.Configuration.SourcePinterest.Credentials.SourcePinterestAuthorizationMethodOAuth20.RefreshToken = types.StringValue(resp.Configuration.SourcePinterest.Credentials.SourcePinterestAuthorizationMethodOAuth20.RefreshToken)
			}
			if resp.Configuration.SourcePinterest.Credentials.SourcePinterestAuthorizationMethodAccessToken != nil {
				r.Configuration.SourcePinterest.Credentials.SourcePinterestAuthorizationMethodAccessToken = &SourceLinkedinAdsAuthenticationAccessToken{}
				r.Configuration.SourcePinterest.Credentials.SourcePinterestAuthorizationMethodAccessToken.AccessToken = types.StringValue(resp.Configuration.SourcePinterest.Credentials.SourcePinterestAuthorizationMethodAccessToken.AccessToken)
				r.Configuration.SourcePinterest.Credentials.SourcePinterestAuthorizationMethodAccessToken.AuthMethod = types.StringValue(string(resp.Configuration.SourcePinterest.Credentials.SourcePinterestAuthorizationMethodAccessToken.AuthMethod))
			}
		}
		r.Configuration.SourcePinterest.SourceType = types.StringValue(string(resp.Configuration.SourcePinterest.SourceType))
		r.Configuration.SourcePinterest.StartDate = types.StringValue(resp.Configuration.SourcePinterest.StartDate)
		r.Configuration.SourcePinterest.Status = nil
		for _, v := range resp.Configuration.SourcePinterest.Status {
			r.Configuration.SourcePinterest.Status = append(r.Configuration.SourcePinterest.Status, types.StringValue(string(v)))
		}
	}
	if resp.Configuration.SourcePipedrive != nil {
		r.Configuration.SourcePipedrive = &SourcePipedrive{}
		if resp.Configuration.SourcePipedrive.Authorization == nil {
			r.Configuration.SourcePipedrive.Authorization = nil
		} else {
			r.Configuration.SourcePipedrive.Authorization = &SourcePipedriveAPIKeyAuthentication{}
			r.Configuration.SourcePipedrive.Authorization.APIToken = types.StringValue(resp.Configuration.SourcePipedrive.Authorization.APIToken)
			r.Configuration.SourcePipedrive.Authorization.AuthType = types.StringValue(string(resp.Configuration.SourcePipedrive.Authorization.AuthType))
		}
		r.Configuration.SourcePipedrive.ReplicationStartDate = types.StringValue(resp.Configuration.SourcePipedrive.ReplicationStartDate.Format(time.RFC3339))
		r.Configuration.SourcePipedrive.SourceType = types.StringValue(string(resp.Configuration.SourcePipedrive.SourceType))
	}
	if resp.Configuration.SourcePocket != nil {
		r.Configuration.SourcePocket = &SourcePocket{}
		r.Configuration.SourcePocket.AccessToken = types.StringValue(resp.Configuration.SourcePocket.AccessToken)
		r.Configuration.SourcePocket.ConsumerKey = types.StringValue(resp.Configuration.SourcePocket.ConsumerKey)
		if resp.Configuration.SourcePocket.ContentType != nil {
			r.Configuration.SourcePocket.ContentType = types.StringValue(string(*resp.Configuration.SourcePocket.ContentType))
		} else {
			r.Configuration.SourcePocket.ContentType = types.StringNull()
		}
		if resp.Configuration.SourcePocket.DetailType != nil {
			r.Configuration.SourcePocket.DetailType = types.StringValue(string(*resp.Configuration.SourcePocket.DetailType))
		} else {
			r.Configuration.SourcePocket.DetailType = types.StringNull()
		}
		if resp.Configuration.SourcePocket.Domain != nil {
			r.Configuration.SourcePocket.Domain = types.StringValue(*resp.Configuration.SourcePocket.Domain)
		} else {
			r.Configuration.SourcePocket.Domain = types.StringNull()
		}
		if resp.Configuration.SourcePocket.Favorite != nil {
			r.Configuration.SourcePocket.Favorite = types.BoolValue(*resp.Configuration.SourcePocket.Favorite)
		} else {
			r.Configuration.SourcePocket.Favorite = types.BoolNull()
		}
		if resp.Configuration.SourcePocket.Search != nil {
			r.Configuration.SourcePocket.Search = types.StringValue(*resp.Configuration.SourcePocket.Search)
		} else {
			r.Configuration.SourcePocket.Search = types.StringNull()
		}
		if resp.Configuration.SourcePocket.Since != nil {
			r.Configuration.SourcePocket.Since = types.StringValue(*resp.Configuration.SourcePocket.Since)
		} else {
			r.Configuration.SourcePocket.Since = types.StringNull()
		}
		if resp.Configuration.SourcePocket.Sort != nil {
			r.Configuration.SourcePocket.Sort = types.StringValue(string(*resp.Configuration.SourcePocket.Sort))
		} else {
			r.Configuration.SourcePocket.Sort = types.StringNull()
		}
		r.Configuration.SourcePocket.SourceType = types.StringValue(string(resp.Configuration.SourcePocket.SourceType))
		if resp.Configuration.SourcePocket.State != nil {
			r.Configuration.SourcePocket.State = types.StringValue(string(*resp.Configuration.SourcePocket.State))
		} else {
			r.Configuration.SourcePocket.State = types.StringNull()
		}
		if resp.Configuration.SourcePocket.Tag != nil {
			r.Configuration.SourcePocket.Tag = types.StringValue(*resp.Configuration.SourcePocket.Tag)
		} else {
			r.Configuration.SourcePocket.Tag = types.StringNull()
		}
	}
	if resp.Configuration.SourcePolygonStockAPI != nil {
		r.Configuration.SourcePolygonStockAPI = &SourcePolygonStockAPI{}
		if resp.Configuration.SourcePolygonStockAPI.Adjusted != nil {
			r.Configuration.SourcePolygonStockAPI.Adjusted = types.StringValue(*resp.Configuration.SourcePolygonStockAPI.Adjusted)
		} else {
			r.Configuration.SourcePolygonStockAPI.Adjusted = types.StringNull()
		}
		r.Configuration.SourcePolygonStockAPI.APIKey = types.StringValue(resp.Configuration.SourcePolygonStockAPI.APIKey)
		r.Configuration.SourcePolygonStockAPI.EndDate = types.StringValue(resp.Configuration.SourcePolygonStockAPI.EndDate.String())
		if resp.Configuration.SourcePolygonStockAPI.Limit != nil {
			r.Configuration.SourcePolygonStockAPI.Limit = types.Int64Value(*resp.Configuration.SourcePolygonStockAPI.Limit)
		} else {
			r.Configuration.SourcePolygonStockAPI.Limit = types.Int64Null()
		}
		r.Configuration.SourcePolygonStockAPI.Multiplier = types.Int64Value(resp.Configuration.SourcePolygonStockAPI.Multiplier)
		if resp.Configuration.SourcePolygonStockAPI.Sort != nil {
			r.Configuration.SourcePolygonStockAPI.Sort = types.StringValue(*resp.Configuration.SourcePolygonStockAPI.Sort)
		} else {
			r.Configuration.SourcePolygonStockAPI.Sort = types.StringNull()
		}
		r.Configuration.SourcePolygonStockAPI.SourceType = types.StringValue(string(resp.Configuration.SourcePolygonStockAPI.SourceType))
		r.Configuration.SourcePolygonStockAPI.StartDate = types.StringValue(resp.Configuration.SourcePolygonStockAPI.StartDate.String())
		r.Configuration.SourcePolygonStockAPI.StocksTicker = types.StringValue(resp.Configuration.SourcePolygonStockAPI.StocksTicker)
		r.Configuration.SourcePolygonStockAPI.Timespan = types.StringValue(resp.Configuration.SourcePolygonStockAPI.Timespan)
	}
	if resp.Configuration.SourcePostgres != nil {
		r.Configuration.SourcePostgres = &SourcePostgres{}
		r.Configuration.SourcePostgres.Database = types.StringValue(resp.Configuration.SourcePostgres.Database)
		r.Configuration.SourcePostgres.Host = types.StringValue(resp.Configuration.SourcePostgres.Host)
		if resp.Configuration.SourcePostgres.JdbcURLParams != nil {
			r.Configuration.SourcePostgres.JdbcURLParams = types.StringValue(*resp.Configuration.SourcePostgres.JdbcURLParams)
		} else {
			r.Configuration.SourcePostgres.JdbcURLParams = types.StringNull()
		}
		if resp.Configuration.SourcePostgres.Password != nil {
			r.Configuration.SourcePostgres.Password = types.StringValue(*resp.Configuration.SourcePostgres.Password)
		} else {
			r.Configuration.SourcePostgres.Password = types.StringNull()
		}
		r.Configuration.SourcePostgres.Port = types.Int64Value(resp.Configuration.SourcePostgres.Port)
		if resp.Configuration.SourcePostgres.ReplicationMethod == nil {
			r.Configuration.SourcePostgres.ReplicationMethod = nil
		} else {
			r.Configuration.SourcePostgres.ReplicationMethod = &SourcePostgresReplicationMethod{}
			if resp.Configuration.SourcePostgres.ReplicationMethod.SourcePostgresReplicationMethodStandard != nil {
				r.Configuration.SourcePostgres.ReplicationMethod.SourcePostgresReplicationMethodStandard = &SourceAlloydbReplicationMethodStandard{}
				r.Configuration.SourcePostgres.ReplicationMethod.SourcePostgresReplicationMethodStandard.Method = types.StringValue(string(resp.Configuration.SourcePostgres.ReplicationMethod.SourcePostgresReplicationMethodStandard.Method))
			}
			if resp.Configuration.SourcePostgres.ReplicationMethod.SourcePostgresReplicationMethodLogicalReplicationCDC != nil {
				r.Configuration.SourcePostgres.ReplicationMethod.SourcePostgresReplicationMethodLogicalReplicationCDC = &SourceAlloydbReplicationMethodLogicalReplicationCDC{}
				if resp.Configuration.SourcePostgres.ReplicationMethod.SourcePostgresReplicationMethodLogicalReplicationCDC.InitialWaitingSeconds != nil {
					r.Configuration.SourcePostgres.ReplicationMethod.SourcePostgresReplicationMethodLogicalReplicationCDC.InitialWaitingSeconds = types.Int64Value(*resp.Configuration.SourcePostgres.ReplicationMethod.SourcePostgresReplicationMethodLogicalReplicationCDC.InitialWaitingSeconds)
				} else {
					r.Configuration.SourcePostgres.ReplicationMethod.SourcePostgresReplicationMethodLogicalReplicationCDC.InitialWaitingSeconds = types.Int64Null()
				}
				if resp.Configuration.SourcePostgres.ReplicationMethod.SourcePostgresReplicationMethodLogicalReplicationCDC.LsnCommitBehaviour != nil {
					r.Configuration.SourcePostgres.ReplicationMethod.SourcePostgresReplicationMethodLogicalReplicationCDC.LsnCommitBehaviour = types.StringValue(string(*resp.Configuration.SourcePostgres.ReplicationMethod.SourcePostgresReplicationMethodLogicalReplicationCDC.LsnCommitBehaviour))
				} else {
					r.Configuration.SourcePostgres.ReplicationMethod.SourcePostgresReplicationMethodLogicalReplicationCDC.LsnCommitBehaviour = types.StringNull()
				}
				r.Configuration.SourcePostgres.ReplicationMethod.SourcePostgresReplicationMethodLogicalReplicationCDC.Method = types.StringValue(string(resp.Configuration.SourcePostgres.ReplicationMethod.SourcePostgresReplicationMethodLogicalReplicationCDC.Method))
				if resp.Configuration.SourcePostgres.ReplicationMethod.SourcePostgresReplicationMethodLogicalReplicationCDC.Plugin != nil {
					r.Configuration.SourcePostgres.ReplicationMethod.SourcePostgresReplicationMethodLogicalReplicationCDC.Plugin = types.StringValue(string(*resp.Configuration.SourcePostgres.ReplicationMethod.SourcePostgresReplicationMethodLogicalReplicationCDC.Plugin))
				} else {
					r.Configuration.SourcePostgres.ReplicationMethod.SourcePostgresReplicationMethodLogicalReplicationCDC.Plugin = types.StringNull()
				}
				r.Configuration.SourcePostgres.ReplicationMethod.SourcePostgresReplicationMethodLogicalReplicationCDC.Publication = types.StringValue(resp.Configuration.SourcePostgres.ReplicationMethod.SourcePostgresReplicationMethodLogicalReplicationCDC.Publication)
				r.Configuration.SourcePostgres.ReplicationMethod.SourcePostgresReplicationMethodLogicalReplicationCDC.ReplicationSlot = types.StringValue(resp.Configuration.SourcePostgres.ReplicationMethod.SourcePostgresReplicationMethodLogicalReplicationCDC.ReplicationSlot)
			}
		}
		r.Configuration.SourcePostgres.Schemas = nil
		for _, v := range resp.Configuration.SourcePostgres.Schemas {
			r.Configuration.SourcePostgres.Schemas = append(r.Configuration.SourcePostgres.Schemas, types.StringValue(v))
		}
		r.Configuration.SourcePostgres.SourceType = types.StringValue(string(resp.Configuration.SourcePostgres.SourceType))
		if resp.Configuration.SourcePostgres.SslMode == nil {
			r.Configuration.SourcePostgres.SslMode = nil
		} else {
			r.Configuration.SourcePostgres.SslMode = &SourcePostgresSSLModes{}
			if resp.Configuration.SourcePostgres.SslMode.SourcePostgresSSLModesDisable != nil {
				r.Configuration.SourcePostgres.SslMode.SourcePostgresSSLModesDisable = &SourcePostgresSSLModesDisable{}
				r.Configuration.SourcePostgres.SslMode.SourcePostgresSSLModesDisable.Mode = types.StringValue(string(resp.Configuration.SourcePostgres.SslMode.SourcePostgresSSLModesDisable.Mode))
			}
			if resp.Configuration.SourcePostgres.SslMode.SourcePostgresSSLModesAllow != nil {
				r.Configuration.SourcePostgres.SslMode.SourcePostgresSSLModesAllow = &SourceAlloydbSSLModesAllow{}
				r.Configuration.SourcePostgres.SslMode.SourcePostgresSSLModesAllow.Mode = types.StringValue(string(resp.Configuration.SourcePostgres.SslMode.SourcePostgresSSLModesAllow.Mode))
			}
			if resp.Configuration.SourcePostgres.SslMode.SourcePostgresSSLModesPrefer != nil {
				r.Configuration.SourcePostgres.SslMode.SourcePostgresSSLModesPrefer = &SourceAlloydbSSLModesPrefer{}
				r.Configuration.SourcePostgres.SslMode.SourcePostgresSSLModesPrefer.Mode = types.StringValue(string(resp.Configuration.SourcePostgres.SslMode.SourcePostgresSSLModesPrefer.Mode))
			}
			if resp.Configuration.SourcePostgres.SslMode.SourcePostgresSSLModesRequire != nil {
				r.Configuration.SourcePostgres.SslMode.SourcePostgresSSLModesRequire = &SourceAlloydbSSLModesRequire{}
				r.Configuration.SourcePostgres.SslMode.SourcePostgresSSLModesRequire.Mode = types.StringValue(string(resp.Configuration.SourcePostgres.SslMode.SourcePostgresSSLModesRequire.Mode))
			}
			if resp.Configuration.SourcePostgres.SslMode.SourcePostgresSSLModesVerifyCa != nil {
				r.Configuration.SourcePostgres.SslMode.SourcePostgresSSLModesVerifyCa = &SourceAlloydbSSLModesVerifyCa{}
				r.Configuration.SourcePostgres.SslMode.SourcePostgresSSLModesVerifyCa.CaCertificate = types.StringValue(resp.Configuration.SourcePostgres.SslMode.SourcePostgresSSLModesVerifyCa.CaCertificate)
				if resp.Configuration.SourcePostgres.SslMode.SourcePostgresSSLModesVerifyCa.ClientCertificate != nil {
					r.Configuration.SourcePostgres.SslMode.SourcePostgresSSLModesVerifyCa.ClientCertificate = types.StringValue(*resp.Configuration.SourcePostgres.SslMode.SourcePostgresSSLModesVerifyCa.ClientCertificate)
				} else {
					r.Configuration.SourcePostgres.SslMode.SourcePostgresSSLModesVerifyCa.ClientCertificate = types.StringNull()
				}
				if resp.Configuration.SourcePostgres.SslMode.SourcePostgresSSLModesVerifyCa.ClientKey != nil {
					r.Configuration.SourcePostgres.SslMode.SourcePostgresSSLModesVerifyCa.ClientKey = types.StringValue(*resp.Configuration.SourcePostgres.SslMode.SourcePostgresSSLModesVerifyCa.ClientKey)
				} else {
					r.Configuration.SourcePostgres.SslMode.SourcePostgresSSLModesVerifyCa.ClientKey = types.StringNull()
				}
				if resp.Configuration.SourcePostgres.SslMode.SourcePostgresSSLModesVerifyCa.ClientKeyPassword != nil {
					r.Configuration.SourcePostgres.SslMode.SourcePostgresSSLModesVerifyCa.ClientKeyPassword = types.StringValue(*resp.Configuration.SourcePostgres.SslMode.SourcePostgresSSLModesVerifyCa.ClientKeyPassword)
				} else {
					r.Configuration.SourcePostgres.SslMode.SourcePostgresSSLModesVerifyCa.ClientKeyPassword = types.StringNull()
				}
				r.Configuration.SourcePostgres.SslMode.SourcePostgresSSLModesVerifyCa.Mode = types.StringValue(string(resp.Configuration.SourcePostgres.SslMode.SourcePostgresSSLModesVerifyCa.Mode))
			}
			if resp.Configuration.SourcePostgres.SslMode.SourcePostgresSSLModesVerifyFull != nil {
				r.Configuration.SourcePostgres.SslMode.SourcePostgresSSLModesVerifyFull = &SourceAlloydbSSLModesVerifyFull{}
				r.Configuration.SourcePostgres.SslMode.SourcePostgresSSLModesVerifyFull.CaCertificate = types.StringValue(resp.Configuration.SourcePostgres.SslMode.SourcePostgresSSLModesVerifyFull.CaCertificate)
				if resp.Configuration.SourcePostgres.SslMode.SourcePostgresSSLModesVerifyFull.ClientCertificate != nil {
					r.Configuration.SourcePostgres.SslMode.SourcePostgresSSLModesVerifyFull.ClientCertificate = types.StringValue(*resp.Configuration.SourcePostgres.SslMode.SourcePostgresSSLModesVerifyFull.ClientCertificate)
				} else {
					r.Configuration.SourcePostgres.SslMode.SourcePostgresSSLModesVerifyFull.ClientCertificate = types.StringNull()
				}
				if resp.Configuration.SourcePostgres.SslMode.SourcePostgresSSLModesVerifyFull.ClientKey != nil {
					r.Configuration.SourcePostgres.SslMode.SourcePostgresSSLModesVerifyFull.ClientKey = types.StringValue(*resp.Configuration.SourcePostgres.SslMode.SourcePostgresSSLModesVerifyFull.ClientKey)
				} else {
					r.Configuration.SourcePostgres.SslMode.SourcePostgresSSLModesVerifyFull.ClientKey = types.StringNull()
				}
				if resp.Configuration.SourcePostgres.SslMode.SourcePostgresSSLModesVerifyFull.ClientKeyPassword != nil {
					r.Configuration.SourcePostgres.SslMode.SourcePostgresSSLModesVerifyFull.ClientKeyPassword = types.StringValue(*resp.Configuration.SourcePostgres.SslMode.SourcePostgresSSLModesVerifyFull.ClientKeyPassword)
				} else {
					r.Configuration.SourcePostgres.SslMode.SourcePostgresSSLModesVerifyFull.ClientKeyPassword = types.StringNull()
				}
				r.Configuration.SourcePostgres.SslMode.SourcePostgresSSLModesVerifyFull.Mode = types.StringValue(string(resp.Configuration.SourcePostgres.SslMode.SourcePostgresSSLModesVerifyFull.Mode))
			}
		}
		if resp.Configuration.SourcePostgres.TunnelMethod == nil {
			r.Configuration.SourcePostgres.TunnelMethod = nil
		} else {
			r.Configuration.SourcePostgres.TunnelMethod = &SourcePostgresSSHTunnelMethod{}
			if resp.Configuration.SourcePostgres.TunnelMethod.SourcePostgresSSHTunnelMethodNoTunnel != nil {
				r.Configuration.SourcePostgres.TunnelMethod.SourcePostgresSSHTunnelMethodNoTunnel = &DestinationClickhouseSSHTunnelMethodNoTunnel{}
				r.Configuration.SourcePostgres.TunnelMethod.SourcePostgresSSHTunnelMethodNoTunnel.TunnelMethod = types.StringValue(string(resp.Configuration.SourcePostgres.TunnelMethod.SourcePostgresSSHTunnelMethodNoTunnel.TunnelMethod))
			}
			if resp.Configuration.SourcePostgres.TunnelMethod.SourcePostgresSSHTunnelMethodSSHKeyAuthentication != nil {
				r.Configuration.SourcePostgres.TunnelMethod.SourcePostgresSSHTunnelMethodSSHKeyAuthentication = &DestinationClickhouseSSHTunnelMethodSSHKeyAuthentication{}
				r.Configuration.SourcePostgres.TunnelMethod.SourcePostgresSSHTunnelMethodSSHKeyAuthentication.SSHKey = types.StringValue(resp.Configuration.SourcePostgres.TunnelMethod.SourcePostgresSSHTunnelMethodSSHKeyAuthentication.SSHKey)
				r.Configuration.SourcePostgres.TunnelMethod.SourcePostgresSSHTunnelMethodSSHKeyAuthentication.TunnelHost = types.StringValue(resp.Configuration.SourcePostgres.TunnelMethod.SourcePostgresSSHTunnelMethodSSHKeyAuthentication.TunnelHost)
				r.Configuration.SourcePostgres.TunnelMethod.SourcePostgresSSHTunnelMethodSSHKeyAuthentication.TunnelMethod = types.StringValue(string(resp.Configuration.SourcePostgres.TunnelMethod.SourcePostgresSSHTunnelMethodSSHKeyAuthentication.TunnelMethod))
				r.Configuration.SourcePostgres.TunnelMethod.SourcePostgresSSHTunnelMethodSSHKeyAuthentication.TunnelPort = types.Int64Value(resp.Configuration.SourcePostgres.TunnelMethod.SourcePostgresSSHTunnelMethodSSHKeyAuthentication.TunnelPort)
				r.Configuration.SourcePostgres.TunnelMethod.SourcePostgresSSHTunnelMethodSSHKeyAuthentication.TunnelUser = types.StringValue(resp.Configuration.SourcePostgres.TunnelMethod.SourcePostgresSSHTunnelMethodSSHKeyAuthentication.TunnelUser)
			}
			if resp.Configuration.SourcePostgres.TunnelMethod.SourcePostgresSSHTunnelMethodPasswordAuthentication != nil {
				r.Configuration.SourcePostgres.TunnelMethod.SourcePostgresSSHTunnelMethodPasswordAuthentication = &DestinationClickhouseSSHTunnelMethodPasswordAuthentication{}
				r.Configuration.SourcePostgres.TunnelMethod.SourcePostgresSSHTunnelMethodPasswordAuthentication.TunnelHost = types.StringValue(resp.Configuration.SourcePostgres.TunnelMethod.SourcePostgresSSHTunnelMethodPasswordAuthentication.TunnelHost)
				r.Configuration.SourcePostgres.TunnelMethod.SourcePostgresSSHTunnelMethodPasswordAuthentication.TunnelMethod = types.StringValue(string(resp.Configuration.SourcePostgres.TunnelMethod.SourcePostgresSSHTunnelMethodPasswordAuthentication.TunnelMethod))
				r.Configuration.SourcePostgres.TunnelMethod.SourcePostgresSSHTunnelMethodPasswordAuthentication.TunnelPort = types.Int64Value(resp.Configuration.SourcePostgres.TunnelMethod.SourcePostgresSSHTunnelMethodPasswordAuthentication.TunnelPort)
				r.Configuration.SourcePostgres.TunnelMethod.SourcePostgresSSHTunnelMethodPasswordAuthentication.TunnelUser = types.StringValue(resp.Configuration.SourcePostgres.TunnelMethod.SourcePostgresSSHTunnelMethodPasswordAuthentication.TunnelUser)
				r.Configuration.SourcePostgres.TunnelMethod.SourcePostgresSSHTunnelMethodPasswordAuthentication.TunnelUserPassword = types.StringValue(resp.Configuration.SourcePostgres.TunnelMethod.SourcePostgresSSHTunnelMethodPasswordAuthentication.TunnelUserPassword)
			}
		}
		r.Configuration.SourcePostgres.Username = types.StringValue(resp.Configuration.SourcePostgres.Username)
	}
	if resp.Configuration.SourcePosthog != nil {
		r.Configuration.SourcePosthog = &SourcePosthog{}
		r.Configuration.SourcePosthog.APIKey = types.StringValue(resp.Configuration.SourcePosthog.APIKey)
		if resp.Configuration.SourcePosthog.BaseURL != nil {
			r.Configuration.SourcePosthog.BaseURL = types.StringValue(*resp.Configuration.SourcePosthog.BaseURL)
		} else {
			r.Configuration.SourcePosthog.BaseURL = types.StringNull()
		}
		r.Configuration.SourcePosthog.SourceType = types.StringValue(string(resp.Configuration.SourcePosthog.SourceType))
		r.Configuration.SourcePosthog.StartDate = types.StringValue(resp.Configuration.SourcePosthog.StartDate.Format(time.RFC3339))
	}
	if resp.Configuration.SourcePostmarkapp != nil {
		r.Configuration.SourcePostmarkapp = &SourcePostmarkapp{}
		r.Configuration.SourcePostmarkapp.XPostmarkAccountToken = types.StringValue(resp.Configuration.SourcePostmarkapp.XPostmarkAccountToken)
		r.Configuration.SourcePostmarkapp.XPostmarkServerToken = types.StringValue(resp.Configuration.SourcePostmarkapp.XPostmarkServerToken)
		r.Configuration.SourcePostmarkapp.SourceType = types.StringValue(string(resp.Configuration.SourcePostmarkapp.SourceType))
	}
	if resp.Configuration.SourcePrestashop != nil {
		r.Configuration.SourcePrestashop = &SourcePrestashop{}
		r.Configuration.SourcePrestashop.AccessKey = types.StringValue(resp.Configuration.SourcePrestashop.AccessKey)
		r.Configuration.SourcePrestashop.SourceType = types.StringValue(string(resp.Configuration.SourcePrestashop.SourceType))
		r.Configuration.SourcePrestashop.StartDate = types.StringValue(resp.Configuration.SourcePrestashop.StartDate.String())
		r.Configuration.SourcePrestashop.URL = types.StringValue(resp.Configuration.SourcePrestashop.URL)
	}
	if resp.Configuration.SourcePublicApis != nil {
		r.Configuration.SourcePublicApis = &SourcePublicApis{}
		r.Configuration.SourcePublicApis.SourceType = types.StringValue(string(resp.Configuration.SourcePublicApis.SourceType))
	}
	if resp.Configuration.SourcePunkAPI != nil {
		r.Configuration.SourcePunkAPI = &SourcePunkAPI{}
		r.Configuration.SourcePunkAPI.BrewedAfter = types.StringValue(resp.Configuration.SourcePunkAPI.BrewedAfter)
		r.Configuration.SourcePunkAPI.BrewedBefore = types.StringValue(resp.Configuration.SourcePunkAPI.BrewedBefore)
		if resp.Configuration.SourcePunkAPI.ID != nil {
			r.Configuration.SourcePunkAPI.ID = types.StringValue(*resp.Configuration.SourcePunkAPI.ID)
		} else {
			r.Configuration.SourcePunkAPI.ID = types.StringNull()
		}
		r.Configuration.SourcePunkAPI.SourceType = types.StringValue(string(resp.Configuration.SourcePunkAPI.SourceType))
	}
	if resp.Configuration.SourcePypi != nil {
		r.Configuration.SourcePypi = &SourcePypi{}
		r.Configuration.SourcePypi.ProjectName = types.StringValue(resp.Configuration.SourcePypi.ProjectName)
		r.Configuration.SourcePypi.SourceType = types.StringValue(string(resp.Configuration.SourcePypi.SourceType))
		if resp.Configuration.SourcePypi.Version != nil {
			r.Configuration.SourcePypi.Version = types.StringValue(*resp.Configuration.SourcePypi.Version)
		} else {
			r.Configuration.SourcePypi.Version = types.StringNull()
		}
	}
	if resp.Configuration.SourceQualaroo != nil {
		r.Configuration.SourceQualaroo = &SourceQualaroo{}
		r.Configuration.SourceQualaroo.Key = types.StringValue(resp.Configuration.SourceQualaroo.Key)
		r.Configuration.SourceQualaroo.SourceType = types.StringValue(string(resp.Configuration.SourceQualaroo.SourceType))
		r.Configuration.SourceQualaroo.StartDate = types.StringValue(resp.Configuration.SourceQualaroo.StartDate)
		r.Configuration.SourceQualaroo.SurveyIds = nil
		for _, v := range resp.Configuration.SourceQualaroo.SurveyIds {
			r.Configuration.SourceQualaroo.SurveyIds = append(r.Configuration.SourceQualaroo.SurveyIds, types.StringValue(v))
		}
		r.Configuration.SourceQualaroo.Token = types.StringValue(resp.Configuration.SourceQualaroo.Token)
	}
	if resp.Configuration.SourceRailz != nil {
		r.Configuration.SourceRailz = &SourceRailz{}
		r.Configuration.SourceRailz.ClientID = types.StringValue(resp.Configuration.SourceRailz.ClientID)
		r.Configuration.SourceRailz.SecretKey = types.StringValue(resp.Configuration.SourceRailz.SecretKey)
		r.Configuration.SourceRailz.SourceType = types.StringValue(string(resp.Configuration.SourceRailz.SourceType))
		r.Configuration.SourceRailz.StartDate = types.StringValue(resp.Configuration.SourceRailz.StartDate)
	}
	if resp.Configuration.SourceRecharge != nil {
		r.Configuration.SourceRecharge = &SourceRecharge{}
		r.Configuration.SourceRecharge.AccessToken = types.StringValue(resp.Configuration.SourceRecharge.AccessToken)
		r.Configuration.SourceRecharge.SourceType = types.StringValue(string(resp.Configuration.SourceRecharge.SourceType))
		r.Configuration.SourceRecharge.StartDate = types.StringValue(resp.Configuration.SourceRecharge.StartDate.Format(time.RFC3339))
	}
	if resp.Configuration.SourceRecreation != nil {
		r.Configuration.SourceRecreation = &SourceRecreation{}
		r.Configuration.SourceRecreation.Apikey = types.StringValue(resp.Configuration.SourceRecreation.Apikey)
		if resp.Configuration.SourceRecreation.QueryCampsites != nil {
			r.Configuration.SourceRecreation.QueryCampsites = types.StringValue(*resp.Configuration.SourceRecreation.QueryCampsites)
		} else {
			r.Configuration.SourceRecreation.QueryCampsites = types.StringNull()
		}
		r.Configuration.SourceRecreation.SourceType = types.StringValue(string(resp.Configuration.SourceRecreation.SourceType))
	}
	if resp.Configuration.SourceRecruitee != nil {
		r.Configuration.SourceRecruitee = &SourceRecruitee{}
		r.Configuration.SourceRecruitee.APIKey = types.StringValue(resp.Configuration.SourceRecruitee.APIKey)
		r.Configuration.SourceRecruitee.CompanyID = types.Int64Value(resp.Configuration.SourceRecruitee.CompanyID)
		r.Configuration.SourceRecruitee.SourceType = types.StringValue(string(resp.Configuration.SourceRecruitee.SourceType))
	}
	if resp.Configuration.SourceRecurly != nil {
		r.Configuration.SourceRecurly = &SourceRecurly{}
		r.Configuration.SourceRecurly.APIKey = types.StringValue(resp.Configuration.SourceRecurly.APIKey)
		if resp.Configuration.SourceRecurly.BeginTime != nil {
			r.Configuration.SourceRecurly.BeginTime = types.StringValue(*resp.Configuration.SourceRecurly.BeginTime)
		} else {
			r.Configuration.SourceRecurly.BeginTime = types.StringNull()
		}
		if resp.Configuration.SourceRecurly.EndTime != nil {
			r.Configuration.SourceRecurly.EndTime = types.StringValue(*resp.Configuration.SourceRecurly.EndTime)
		} else {
			r.Configuration.SourceRecurly.EndTime = types.StringNull()
		}
		r.Configuration.SourceRecurly.SourceType = types.StringValue(string(resp.Configuration.SourceRecurly.SourceType))
	}
	if resp.Configuration.SourceRedshift != nil {
		r.Configuration.SourceRedshift = &SourceRedshift{}
		r.Configuration.SourceRedshift.Database = types.StringValue(resp.Configuration.SourceRedshift.Database)
		r.Configuration.SourceRedshift.Host = types.StringValue(resp.Configuration.SourceRedshift.Host)
		if resp.Configuration.SourceRedshift.JdbcURLParams != nil {
			r.Configuration.SourceRedshift.JdbcURLParams = types.StringValue(*resp.Configuration.SourceRedshift.JdbcURLParams)
		} else {
			r.Configuration.SourceRedshift.JdbcURLParams = types.StringNull()
		}
		r.Configuration.SourceRedshift.Password = types.StringValue(resp.Configuration.SourceRedshift.Password)
		r.Configuration.SourceRedshift.Port = types.Int64Value(resp.Configuration.SourceRedshift.Port)
		r.Configuration.SourceRedshift.Schemas = nil
		for _, v := range resp.Configuration.SourceRedshift.Schemas {
			r.Configuration.SourceRedshift.Schemas = append(r.Configuration.SourceRedshift.Schemas, types.StringValue(v))
		}
		r.Configuration.SourceRedshift.SourceType = types.StringValue(string(resp.Configuration.SourceRedshift.SourceType))
		r.Configuration.SourceRedshift.Username = types.StringValue(resp.Configuration.SourceRedshift.Username)
	}
	if resp.Configuration.SourceRetently != nil {
		r.Configuration.SourceRetently = &SourceRetently{}
		if resp.Configuration.SourceRetently.Credentials == nil {
			r.Configuration.SourceRetently.Credentials = nil
		} else {
			r.Configuration.SourceRetently.Credentials = &SourceRetentlyAuthenticationMechanism{}
			if resp.Configuration.SourceRetently.Credentials.SourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth != nil {
				r.Configuration.SourceRetently.Credentials.SourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth = &SourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth{}
				if resp.Configuration.SourceRetently.Credentials.SourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth.AuthType != nil {
					r.Configuration.SourceRetently.Credentials.SourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth.AuthType = types.StringValue(string(*resp.Configuration.SourceRetently.Credentials.SourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth.AuthType))
				} else {
					r.Configuration.SourceRetently.Credentials.SourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth.AuthType = types.StringNull()
				}
				r.Configuration.SourceRetently.Credentials.SourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth.ClientID = types.StringValue(resp.Configuration.SourceRetently.Credentials.SourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth.ClientID)
				r.Configuration.SourceRetently.Credentials.SourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth.ClientSecret = types.StringValue(resp.Configuration.SourceRetently.Credentials.SourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth.ClientSecret)
				r.Configuration.SourceRetently.Credentials.SourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth.RefreshToken = types.StringValue(resp.Configuration.SourceRetently.Credentials.SourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth.RefreshToken)
			}
			if resp.Configuration.SourceRetently.Credentials.SourceRetentlyAuthenticationMechanismAuthenticateWithAPIToken != nil {
				r.Configuration.SourceRetently.Credentials.SourceRetentlyAuthenticationMechanismAuthenticateWithAPIToken = &SourceRetentlyAuthenticationMechanismAuthenticateWithAPIToken{}
				r.Configuration.SourceRetently.Credentials.SourceRetentlyAuthenticationMechanismAuthenticateWithAPIToken.APIKey = types.StringValue(resp.Configuration.SourceRetently.Credentials.SourceRetentlyAuthenticationMechanismAuthenticateWithAPIToken.APIKey)
				if resp.Configuration.SourceRetently.Credentials.SourceRetentlyAuthenticationMechanismAuthenticateWithAPIToken.AuthType != nil {
					r.Configuration.SourceRetently.Credentials.SourceRetentlyAuthenticationMechanismAuthenticateWithAPIToken.AuthType = types.StringValue(string(*resp.Configuration.SourceRetently.Credentials.SourceRetentlyAuthenticationMechanismAuthenticateWithAPIToken.AuthType))
				} else {
					r.Configuration.SourceRetently.Credentials.SourceRetentlyAuthenticationMechanismAuthenticateWithAPIToken.AuthType = types.StringNull()
				}
			}
		}
		r.Configuration.SourceRetently.SourceType = types.StringValue(string(resp.Configuration.SourceRetently.SourceType))
	}
	if resp.Configuration.SourceRkiCovid != nil {
		r.Configuration.SourceRkiCovid = &SourceRkiCovid{}
		r.Configuration.SourceRkiCovid.SourceType = types.StringValue(string(resp.Configuration.SourceRkiCovid.SourceType))
		r.Configuration.SourceRkiCovid.StartDate = types.StringValue(resp.Configuration.SourceRkiCovid.StartDate)
	}
	if resp.Configuration.SourceRss != nil {
		r.Configuration.SourceRss = &SourceRss{}
		r.Configuration.SourceRss.SourceType = types.StringValue(string(resp.Configuration.SourceRss.SourceType))
		r.Configuration.SourceRss.URL = types.StringValue(resp.Configuration.SourceRss.URL)
	}
	if resp.Configuration.SourceS3 != nil {
		r.Configuration.SourceS3 = &SourceS3{}
		r.Configuration.SourceS3.Dataset = types.StringValue(resp.Configuration.SourceS3.Dataset)
		if resp.Configuration.SourceS3.Format == nil {
			r.Configuration.SourceS3.Format = nil
		} else {
			r.Configuration.SourceS3.Format = &SourceS3FileFormat{}
			if resp.Configuration.SourceS3.Format.SourceS3FileFormatCSV != nil {
				r.Configuration.SourceS3.Format.SourceS3FileFormatCSV = &SourceS3FileFormatCSV{}
				if resp.Configuration.SourceS3.Format.SourceS3FileFormatCSV.AdditionalReaderOptions != nil {
					r.Configuration.SourceS3.Format.SourceS3FileFormatCSV.AdditionalReaderOptions = types.StringValue(*resp.Configuration.SourceS3.Format.SourceS3FileFormatCSV.AdditionalReaderOptions)
				} else {
					r.Configuration.SourceS3.Format.SourceS3FileFormatCSV.AdditionalReaderOptions = types.StringNull()
				}
				if resp.Configuration.SourceS3.Format.SourceS3FileFormatCSV.AdvancedOptions != nil {
					r.Configuration.SourceS3.Format.SourceS3FileFormatCSV.AdvancedOptions = types.StringValue(*resp.Configuration.SourceS3.Format.SourceS3FileFormatCSV.AdvancedOptions)
				} else {
					r.Configuration.SourceS3.Format.SourceS3FileFormatCSV.AdvancedOptions = types.StringNull()
				}
				if resp.Configuration.SourceS3.Format.SourceS3FileFormatCSV.BlockSize != nil {
					r.Configuration.SourceS3.Format.SourceS3FileFormatCSV.BlockSize = types.Int64Value(*resp.Configuration.SourceS3.Format.SourceS3FileFormatCSV.BlockSize)
				} else {
					r.Configuration.SourceS3.Format.SourceS3FileFormatCSV.BlockSize = types.Int64Null()
				}
				if resp.Configuration.SourceS3.Format.SourceS3FileFormatCSV.Delimiter != nil {
					r.Configuration.SourceS3.Format.SourceS3FileFormatCSV.Delimiter = types.StringValue(*resp.Configuration.SourceS3.Format.SourceS3FileFormatCSV.Delimiter)
				} else {
					r.Configuration.SourceS3.Format.SourceS3FileFormatCSV.Delimiter = types.StringNull()
				}
				if resp.Configuration.SourceS3.Format.SourceS3FileFormatCSV.DoubleQuote != nil {
					r.Configuration.SourceS3.Format.SourceS3FileFormatCSV.DoubleQuote = types.BoolValue(*resp.Configuration.SourceS3.Format.SourceS3FileFormatCSV.DoubleQuote)
				} else {
					r.Configuration.SourceS3.Format.SourceS3FileFormatCSV.DoubleQuote = types.BoolNull()
				}
				if resp.Configuration.SourceS3.Format.SourceS3FileFormatCSV.Encoding != nil {
					r.Configuration.SourceS3.Format.SourceS3FileFormatCSV.Encoding = types.StringValue(*resp.Configuration.SourceS3.Format.SourceS3FileFormatCSV.Encoding)
				} else {
					r.Configuration.SourceS3.Format.SourceS3FileFormatCSV.Encoding = types.StringNull()
				}
				if resp.Configuration.SourceS3.Format.SourceS3FileFormatCSV.EscapeChar != nil {
					r.Configuration.SourceS3.Format.SourceS3FileFormatCSV.EscapeChar = types.StringValue(*resp.Configuration.SourceS3.Format.SourceS3FileFormatCSV.EscapeChar)
				} else {
					r.Configuration.SourceS3.Format.SourceS3FileFormatCSV.EscapeChar = types.StringNull()
				}
				if resp.Configuration.SourceS3.Format.SourceS3FileFormatCSV.Filetype != nil {
					r.Configuration.SourceS3.Format.SourceS3FileFormatCSV.Filetype = types.StringValue(string(*resp.Configuration.SourceS3.Format.SourceS3FileFormatCSV.Filetype))
				} else {
					r.Configuration.SourceS3.Format.SourceS3FileFormatCSV.Filetype = types.StringNull()
				}
				if resp.Configuration.SourceS3.Format.SourceS3FileFormatCSV.InferDatatypes != nil {
					r.Configuration.SourceS3.Format.SourceS3FileFormatCSV.InferDatatypes = types.BoolValue(*resp.Configuration.SourceS3.Format.SourceS3FileFormatCSV.InferDatatypes)
				} else {
					r.Configuration.SourceS3.Format.SourceS3FileFormatCSV.InferDatatypes = types.BoolNull()
				}
				if resp.Configuration.SourceS3.Format.SourceS3FileFormatCSV.NewlinesInValues != nil {
					r.Configuration.SourceS3.Format.SourceS3FileFormatCSV.NewlinesInValues = types.BoolValue(*resp.Configuration.SourceS3.Format.SourceS3FileFormatCSV.NewlinesInValues)
				} else {
					r.Configuration.SourceS3.Format.SourceS3FileFormatCSV.NewlinesInValues = types.BoolNull()
				}
				if resp.Configuration.SourceS3.Format.SourceS3FileFormatCSV.QuoteChar != nil {
					r.Configuration.SourceS3.Format.SourceS3FileFormatCSV.QuoteChar = types.StringValue(*resp.Configuration.SourceS3.Format.SourceS3FileFormatCSV.QuoteChar)
				} else {
					r.Configuration.SourceS3.Format.SourceS3FileFormatCSV.QuoteChar = types.StringNull()
				}
			}
			if resp.Configuration.SourceS3.Format.SourceS3FileFormatParquet != nil {
				r.Configuration.SourceS3.Format.SourceS3FileFormatParquet = &SourceS3FileFormatParquet{}
				if resp.Configuration.SourceS3.Format.SourceS3FileFormatParquet.BatchSize != nil {
					r.Configuration.SourceS3.Format.SourceS3FileFormatParquet.BatchSize = types.Int64Value(*resp.Configuration.SourceS3.Format.SourceS3FileFormatParquet.BatchSize)
				} else {
					r.Configuration.SourceS3.Format.SourceS3FileFormatParquet.BatchSize = types.Int64Null()
				}
				if resp.Configuration.SourceS3.Format.SourceS3FileFormatParquet.BufferSize != nil {
					r.Configuration.SourceS3.Format.SourceS3FileFormatParquet.BufferSize = types.Int64Value(*resp.Configuration.SourceS3.Format.SourceS3FileFormatParquet.BufferSize)
				} else {
					r.Configuration.SourceS3.Format.SourceS3FileFormatParquet.BufferSize = types.Int64Null()
				}
				r.Configuration.SourceS3.Format.SourceS3FileFormatParquet.Columns = nil
				for _, v := range resp.Configuration.SourceS3.Format.SourceS3FileFormatParquet.Columns {
					r.Configuration.SourceS3.Format.SourceS3FileFormatParquet.Columns = append(r.Configuration.SourceS3.Format.SourceS3FileFormatParquet.Columns, types.StringValue(v))
				}
				if resp.Configuration.SourceS3.Format.SourceS3FileFormatParquet.Filetype != nil {
					r.Configuration.SourceS3.Format.SourceS3FileFormatParquet.Filetype = types.StringValue(string(*resp.Configuration.SourceS3.Format.SourceS3FileFormatParquet.Filetype))
				} else {
					r.Configuration.SourceS3.Format.SourceS3FileFormatParquet.Filetype = types.StringNull()
				}
			}
			if resp.Configuration.SourceS3.Format.SourceS3FileFormatAvro != nil {
				r.Configuration.SourceS3.Format.SourceS3FileFormatAvro = &SourceS3FileFormatAvro{}
				if resp.Configuration.SourceS3.Format.SourceS3FileFormatAvro.Filetype != nil {
					r.Configuration.SourceS3.Format.SourceS3FileFormatAvro.Filetype = types.StringValue(string(*resp.Configuration.SourceS3.Format.SourceS3FileFormatAvro.Filetype))
				} else {
					r.Configuration.SourceS3.Format.SourceS3FileFormatAvro.Filetype = types.StringNull()
				}
			}
			if resp.Configuration.SourceS3.Format.SourceS3FileFormatJsonl != nil {
				r.Configuration.SourceS3.Format.SourceS3FileFormatJsonl = &SourceS3FileFormatJsonl{}
				if resp.Configuration.SourceS3.Format.SourceS3FileFormatJsonl.BlockSize != nil {
					r.Configuration.SourceS3.Format.SourceS3FileFormatJsonl.BlockSize = types.Int64Value(*resp.Configuration.SourceS3.Format.SourceS3FileFormatJsonl.BlockSize)
				} else {
					r.Configuration.SourceS3.Format.SourceS3FileFormatJsonl.BlockSize = types.Int64Null()
				}
				if resp.Configuration.SourceS3.Format.SourceS3FileFormatJsonl.Filetype != nil {
					r.Configuration.SourceS3.Format.SourceS3FileFormatJsonl.Filetype = types.StringValue(string(*resp.Configuration.SourceS3.Format.SourceS3FileFormatJsonl.Filetype))
				} else {
					r.Configuration.SourceS3.Format.SourceS3FileFormatJsonl.Filetype = types.StringNull()
				}
				if resp.Configuration.SourceS3.Format.SourceS3FileFormatJsonl.NewlinesInValues != nil {
					r.Configuration.SourceS3.Format.SourceS3FileFormatJsonl.NewlinesInValues = types.BoolValue(*resp.Configuration.SourceS3.Format.SourceS3FileFormatJsonl.NewlinesInValues)
				} else {
					r.Configuration.SourceS3.Format.SourceS3FileFormatJsonl.NewlinesInValues = types.BoolNull()
				}
				if resp.Configuration.SourceS3.Format.SourceS3FileFormatJsonl.UnexpectedFieldBehavior != nil {
					r.Configuration.SourceS3.Format.SourceS3FileFormatJsonl.UnexpectedFieldBehavior = types.StringValue(string(*resp.Configuration.SourceS3.Format.SourceS3FileFormatJsonl.UnexpectedFieldBehavior))
				} else {
					r.Configuration.SourceS3.Format.SourceS3FileFormatJsonl.UnexpectedFieldBehavior = types.StringNull()
				}
			}
		}
		r.Configuration.SourceS3.PathPattern = types.StringValue(resp.Configuration.SourceS3.PathPattern)
		if resp.Configuration.SourceS3.Provider.AwsAccessKeyID != nil {
			r.Configuration.SourceS3.Provider.AwsAccessKeyID = types.StringValue(*resp.Configuration.SourceS3.Provider.AwsAccessKeyID)
		} else {
			r.Configuration.SourceS3.Provider.AwsAccessKeyID = types.StringNull()
		}
		if resp.Configuration.SourceS3.Provider.AwsSecretAccessKey != nil {
			r.Configuration.SourceS3.Provider.AwsSecretAccessKey = types.StringValue(*resp.Configuration.SourceS3.Provider.AwsSecretAccessKey)
		} else {
			r.Configuration.SourceS3.Provider.AwsSecretAccessKey = types.StringNull()
		}
		r.Configuration.SourceS3.Provider.Bucket = types.StringValue(resp.Configuration.SourceS3.Provider.Bucket)
		if resp.Configuration.SourceS3.Provider.Endpoint != nil {
			r.Configuration.SourceS3.Provider.Endpoint = types.StringValue(*resp.Configuration.SourceS3.Provider.Endpoint)
		} else {
			r.Configuration.SourceS3.Provider.Endpoint = types.StringNull()
		}
		if resp.Configuration.SourceS3.Provider.PathPrefix != nil {
			r.Configuration.SourceS3.Provider.PathPrefix = types.StringValue(*resp.Configuration.SourceS3.Provider.PathPrefix)
		} else {
			r.Configuration.SourceS3.Provider.PathPrefix = types.StringNull()
		}
		if resp.Configuration.SourceS3.Schema != nil {
			r.Configuration.SourceS3.Schema = types.StringValue(*resp.Configuration.SourceS3.Schema)
		} else {
			r.Configuration.SourceS3.Schema = types.StringNull()
		}
		r.Configuration.SourceS3.SourceType = types.StringValue(string(resp.Configuration.SourceS3.SourceType))
	}
	if resp.Configuration.SourceSalesforce != nil {
		r.Configuration.SourceSalesforce = &SourceSalesforce{}
		if resp.Configuration.SourceSalesforce.AuthType != nil {
			r.Configuration.SourceSalesforce.AuthType = types.StringValue(string(*resp.Configuration.SourceSalesforce.AuthType))
		} else {
			r.Configuration.SourceSalesforce.AuthType = types.StringNull()
		}
		r.Configuration.SourceSalesforce.ClientID = types.StringValue(resp.Configuration.SourceSalesforce.ClientID)
		r.Configuration.SourceSalesforce.ClientSecret = types.StringValue(resp.Configuration.SourceSalesforce.ClientSecret)
		if resp.Configuration.SourceSalesforce.IsSandbox != nil {
			r.Configuration.SourceSalesforce.IsSandbox = types.BoolValue(*resp.Configuration.SourceSalesforce.IsSandbox)
		} else {
			r.Configuration.SourceSalesforce.IsSandbox = types.BoolNull()
		}
		r.Configuration.SourceSalesforce.RefreshToken = types.StringValue(resp.Configuration.SourceSalesforce.RefreshToken)
		r.Configuration.SourceSalesforce.SourceType = types.StringValue(string(resp.Configuration.SourceSalesforce.SourceType))
		if resp.Configuration.SourceSalesforce.StartDate != nil {
			r.Configuration.SourceSalesforce.StartDate = types.StringValue(resp.Configuration.SourceSalesforce.StartDate.Format(time.RFC3339))
		} else {
			r.Configuration.SourceSalesforce.StartDate = types.StringNull()
		}
		r.Configuration.SourceSalesforce.StreamsCriteria = nil
		for _, streamsCriteriaItem := range resp.Configuration.SourceSalesforce.StreamsCriteria {
			var streamsCriteria1 SourceSalesforceStreamsCriteria
			streamsCriteria1.Criteria = types.StringValue(string(streamsCriteriaItem.Criteria))
			streamsCriteria1.Value = types.StringValue(streamsCriteriaItem.Value)
			r.Configuration.SourceSalesforce.StreamsCriteria = append(r.Configuration.SourceSalesforce.StreamsCriteria, streamsCriteria1)
		}
	}
	if resp.Configuration.SourceSalesforceSinger != nil {
		r.Configuration.SourceSalesforceSinger = &SourceSalesforceSinger{}
		r.Configuration.SourceSalesforceSinger.APIType = types.StringValue(string(resp.Configuration.SourceSalesforceSinger.APIType))
		r.Configuration.SourceSalesforceSinger.ClientID = types.StringValue(resp.Configuration.SourceSalesforceSinger.ClientID)
		r.Configuration.SourceSalesforceSinger.ClientSecret = types.StringValue(resp.Configuration.SourceSalesforceSinger.ClientSecret)
		if resp.Configuration.SourceSalesforceSinger.IsSandbox != nil {
			r.Configuration.SourceSalesforceSinger.IsSandbox = types.BoolValue(*resp.Configuration.SourceSalesforceSinger.IsSandbox)
		} else {
			r.Configuration.SourceSalesforceSinger.IsSandbox = types.BoolNull()
		}
		if resp.Configuration.SourceSalesforceSinger.QuotaPercentPerRun != nil {
			r.Configuration.SourceSalesforceSinger.QuotaPercentPerRun = types.NumberValue(big.NewFloat(*resp.Configuration.SourceSalesforceSinger.QuotaPercentPerRun))
		} else {
			r.Configuration.SourceSalesforceSinger.QuotaPercentPerRun = types.NumberNull()
		}
		if resp.Configuration.SourceSalesforceSinger.QuotaPercentTotal != nil {
			r.Configuration.SourceSalesforceSinger.QuotaPercentTotal = types.NumberValue(big.NewFloat(*resp.Configuration.SourceSalesforceSinger.QuotaPercentTotal))
		} else {
			r.Configuration.SourceSalesforceSinger.QuotaPercentTotal = types.NumberNull()
		}
		r.Configuration.SourceSalesforceSinger.RefreshToken = types.StringValue(resp.Configuration.SourceSalesforceSinger.RefreshToken)
		r.Configuration.SourceSalesforceSinger.SourceType = types.StringValue(string(resp.Configuration.SourceSalesforceSinger.SourceType))
		r.Configuration.SourceSalesforceSinger.StartDate = types.StringValue(resp.Configuration.SourceSalesforceSinger.StartDate)
	}
	if resp.Configuration.SourceSalesloft != nil {
		r.Configuration.SourceSalesloft = &SourceSalesloft{}
		if resp.Configuration.SourceSalesloft.Credentials.SourceSalesloftCredentialsAuthenticateViaOAuth != nil {
			r.Configuration.SourceSalesloft.Credentials.SourceSalesloftCredentialsAuthenticateViaOAuth = &SourceGitlabAuthorizationMethodOAuth20{}
			r.Configuration.SourceSalesloft.Credentials.SourceSalesloftCredentialsAuthenticateViaOAuth.AccessToken = types.StringValue(resp.Configuration.SourceSalesloft.Credentials.SourceSalesloftCredentialsAuthenticateViaOAuth.AccessToken)
			r.Configuration.SourceSalesloft.Credentials.SourceSalesloftCredentialsAuthenticateViaOAuth.AuthType = types.StringValue(string(resp.Configuration.SourceSalesloft.Credentials.SourceSalesloftCredentialsAuthenticateViaOAuth.AuthType))
			r.Configuration.SourceSalesloft.Credentials.SourceSalesloftCredentialsAuthenticateViaOAuth.ClientID = types.StringValue(resp.Configuration.SourceSalesloft.Credentials.SourceSalesloftCredentialsAuthenticateViaOAuth.ClientID)
			r.Configuration.SourceSalesloft.Credentials.SourceSalesloftCredentialsAuthenticateViaOAuth.ClientSecret = types.StringValue(resp.Configuration.SourceSalesloft.Credentials.SourceSalesloftCredentialsAuthenticateViaOAuth.ClientSecret)
			r.Configuration.SourceSalesloft.Credentials.SourceSalesloftCredentialsAuthenticateViaOAuth.RefreshToken = types.StringValue(resp.Configuration.SourceSalesloft.Credentials.SourceSalesloftCredentialsAuthenticateViaOAuth.RefreshToken)
			r.Configuration.SourceSalesloft.Credentials.SourceSalesloftCredentialsAuthenticateViaOAuth.TokenExpiryDate = types.StringValue(resp.Configuration.SourceSalesloft.Credentials.SourceSalesloftCredentialsAuthenticateViaOAuth.TokenExpiryDate.Format(time.RFC3339))
		}
		if resp.Configuration.SourceSalesloft.Credentials.SourceSalesloftCredentialsAuthenticateViaAPIKey != nil {
			r.Configuration.SourceSalesloft.Credentials.SourceSalesloftCredentialsAuthenticateViaAPIKey = &SourceSalesloftCredentialsAuthenticateViaAPIKey{}
			r.Configuration.SourceSalesloft.Credentials.SourceSalesloftCredentialsAuthenticateViaAPIKey.APIKey = types.StringValue(resp.Configuration.SourceSalesloft.Credentials.SourceSalesloftCredentialsAuthenticateViaAPIKey.APIKey)
			r.Configuration.SourceSalesloft.Credentials.SourceSalesloftCredentialsAuthenticateViaAPIKey.AuthType = types.StringValue(string(resp.Configuration.SourceSalesloft.Credentials.SourceSalesloftCredentialsAuthenticateViaAPIKey.AuthType))
		}
		r.Configuration.SourceSalesloft.SourceType = types.StringValue(string(resp.Configuration.SourceSalesloft.SourceType))
		r.Configuration.SourceSalesloft.StartDate = types.StringValue(resp.Configuration.SourceSalesloft.StartDate.Format(time.RFC3339))
	}
	if resp.Configuration.SourceSapFieldglass != nil {
		r.Configuration.SourceSapFieldglass = &SourceSapFieldglass{}
		r.Configuration.SourceSapFieldglass.APIKey = types.StringValue(resp.Configuration.SourceSapFieldglass.APIKey)
		r.Configuration.SourceSapFieldglass.SourceType = types.StringValue(string(resp.Configuration.SourceSapFieldglass.SourceType))
	}
	if resp.Configuration.SourceSecoda != nil {
		r.Configuration.SourceSecoda = &SourceSecoda{}
		r.Configuration.SourceSecoda.APIKey = types.StringValue(resp.Configuration.SourceSecoda.APIKey)
		r.Configuration.SourceSecoda.SourceType = types.StringValue(string(resp.Configuration.SourceSecoda.SourceType))
	}
	if resp.Configuration.SourceSendgrid != nil {
		r.Configuration.SourceSendgrid = &SourceSendgrid{}
		r.Configuration.SourceSendgrid.Apikey = types.StringValue(resp.Configuration.SourceSendgrid.Apikey)
		r.Configuration.SourceSendgrid.SourceType = types.StringValue(string(resp.Configuration.SourceSendgrid.SourceType))
		if resp.Configuration.SourceSendgrid.StartTime != nil {
			r.Configuration.SourceSendgrid.StartTime = types.StringValue(resp.Configuration.SourceSendgrid.StartTime.Format(time.RFC3339))
		} else {
			r.Configuration.SourceSendgrid.StartTime = types.StringNull()
		}
	}
	if resp.Configuration.SourceSendinblue != nil {
		r.Configuration.SourceSendinblue = &SourceSendinblue{}
		r.Configuration.SourceSendinblue.APIKey = types.StringValue(resp.Configuration.SourceSendinblue.APIKey)
		r.Configuration.SourceSendinblue.SourceType = types.StringValue(string(resp.Configuration.SourceSendinblue.SourceType))
	}
	if resp.Configuration.SourceSenseforce != nil {
		r.Configuration.SourceSenseforce = &SourceSenseforce{}
		r.Configuration.SourceSenseforce.AccessToken = types.StringValue(resp.Configuration.SourceSenseforce.AccessToken)
		r.Configuration.SourceSenseforce.BackendURL = types.StringValue(resp.Configuration.SourceSenseforce.BackendURL)
		r.Configuration.SourceSenseforce.DatasetID = types.StringValue(resp.Configuration.SourceSenseforce.DatasetID)
		if resp.Configuration.SourceSenseforce.SliceRange != nil {
			r.Configuration.SourceSenseforce.SliceRange = types.Int64Value(*resp.Configuration.SourceSenseforce.SliceRange)
		} else {
			r.Configuration.SourceSenseforce.SliceRange = types.Int64Null()
		}
		r.Configuration.SourceSenseforce.SourceType = types.StringValue(string(resp.Configuration.SourceSenseforce.SourceType))
		r.Configuration.SourceSenseforce.StartDate = types.StringValue(resp.Configuration.SourceSenseforce.StartDate.String())
	}
	if resp.Configuration.SourceSentry != nil {
		r.Configuration.SourceSentry = &SourceSentry{}
		r.Configuration.SourceSentry.AuthToken = types.StringValue(resp.Configuration.SourceSentry.AuthToken)
		r.Configuration.SourceSentry.DiscoverFields = nil
		for _, discoverFieldsItem := range resp.Configuration.SourceSentry.DiscoverFields {
			var discoverFields1 types.String
			discoverFields1Result, _ := json.Marshal(discoverFieldsItem)
			discoverFields1 = types.StringValue(string(discoverFields1Result))
			r.Configuration.SourceSentry.DiscoverFields = append(r.Configuration.SourceSentry.DiscoverFields, discoverFields1)
		}
		if resp.Configuration.SourceSentry.Hostname != nil {
			r.Configuration.SourceSentry.Hostname = types.StringValue(*resp.Configuration.SourceSentry.Hostname)
		} else {
			r.Configuration.SourceSentry.Hostname = types.StringNull()
		}
		r.Configuration.SourceSentry.Organization = types.StringValue(resp.Configuration.SourceSentry.Organization)
		r.Configuration.SourceSentry.Project = types.StringValue(resp.Configuration.SourceSentry.Project)
		r.Configuration.SourceSentry.SourceType = types.StringValue(string(resp.Configuration.SourceSentry.SourceType))
	}
	if resp.Configuration.SourceSftp != nil {
		r.Configuration.SourceSftp = &SourceSftp{}
		if resp.Configuration.SourceSftp.Credentials == nil {
			r.Configuration.SourceSftp.Credentials = nil
		} else {
			r.Configuration.SourceSftp.Credentials = &SourceSftpAuthenticationWildcard{}
			if resp.Configuration.SourceSftp.Credentials.SourceSftpAuthenticationWildcardPasswordAuthentication != nil {
				r.Configuration.SourceSftp.Credentials.SourceSftpAuthenticationWildcardPasswordAuthentication = &SourceSftpAuthenticationWildcardPasswordAuthentication{}
				r.Configuration.SourceSftp.Credentials.SourceSftpAuthenticationWildcardPasswordAuthentication.AuthMethod = types.StringValue(string(resp.Configuration.SourceSftp.Credentials.SourceSftpAuthenticationWildcardPasswordAuthentication.AuthMethod))
				r.Configuration.SourceSftp.Credentials.SourceSftpAuthenticationWildcardPasswordAuthentication.AuthUserPassword = types.StringValue(resp.Configuration.SourceSftp.Credentials.SourceSftpAuthenticationWildcardPasswordAuthentication.AuthUserPassword)
			}
			if resp.Configuration.SourceSftp.Credentials.SourceSftpAuthenticationWildcardSSHKeyAuthentication != nil {
				r.Configuration.SourceSftp.Credentials.SourceSftpAuthenticationWildcardSSHKeyAuthentication = &SourceSftpAuthenticationWildcardSSHKeyAuthentication{}
				r.Configuration.SourceSftp.Credentials.SourceSftpAuthenticationWildcardSSHKeyAuthentication.AuthMethod = types.StringValue(string(resp.Configuration.SourceSftp.Credentials.SourceSftpAuthenticationWildcardSSHKeyAuthentication.AuthMethod))
				r.Configuration.SourceSftp.Credentials.SourceSftpAuthenticationWildcardSSHKeyAuthentication.AuthSSHKey = types.StringValue(resp.Configuration.SourceSftp.Credentials.SourceSftpAuthenticationWildcardSSHKeyAuthentication.AuthSSHKey)
			}
		}
		if resp.Configuration.SourceSftp.FilePattern != nil {
			r.Configuration.SourceSftp.FilePattern = types.StringValue(*resp.Configuration.SourceSftp.FilePattern)
		} else {
			r.Configuration.SourceSftp.FilePattern = types.StringNull()
		}
		if resp.Configuration.SourceSftp.FileTypes != nil {
			r.Configuration.SourceSftp.FileTypes = types.StringValue(*resp.Configuration.SourceSftp.FileTypes)
		} else {
			r.Configuration.SourceSftp.FileTypes = types.StringNull()
		}
		if resp.Configuration.SourceSftp.FolderPath != nil {
			r.Configuration.SourceSftp.FolderPath = types.StringValue(*resp.Configuration.SourceSftp.FolderPath)
		} else {
			r.Configuration.SourceSftp.FolderPath = types.StringNull()
		}
		r.Configuration.SourceSftp.Host = types.StringValue(resp.Configuration.SourceSftp.Host)
		r.Configuration.SourceSftp.Port = types.Int64Value(resp.Configuration.SourceSftp.Port)
		r.Configuration.SourceSftp.SourceType = types.StringValue(string(resp.Configuration.SourceSftp.SourceType))
		r.Configuration.SourceSftp.User = types.StringValue(resp.Configuration.SourceSftp.User)
	}
	if resp.Configuration.SourceSftpBulk != nil {
		r.Configuration.SourceSftpBulk = &SourceSftpBulk{}
		if resp.Configuration.SourceSftpBulk.FileMostRecent != nil {
			r.Configuration.SourceSftpBulk.FileMostRecent = types.BoolValue(*resp.Configuration.SourceSftpBulk.FileMostRecent)
		} else {
			r.Configuration.SourceSftpBulk.FileMostRecent = types.BoolNull()
		}
		if resp.Configuration.SourceSftpBulk.FilePattern != nil {
			r.Configuration.SourceSftpBulk.FilePattern = types.StringValue(*resp.Configuration.SourceSftpBulk.FilePattern)
		} else {
			r.Configuration.SourceSftpBulk.FilePattern = types.StringNull()
		}
		if resp.Configuration.SourceSftpBulk.FileType != nil {
			r.Configuration.SourceSftpBulk.FileType = types.StringValue(string(*resp.Configuration.SourceSftpBulk.FileType))
		} else {
			r.Configuration.SourceSftpBulk.FileType = types.StringNull()
		}
		r.Configuration.SourceSftpBulk.FolderPath = types.StringValue(resp.Configuration.SourceSftpBulk.FolderPath)
		r.Configuration.SourceSftpBulk.Host = types.StringValue(resp.Configuration.SourceSftpBulk.Host)
		if resp.Configuration.SourceSftpBulk.Password != nil {
			r.Configuration.SourceSftpBulk.Password = types.StringValue(*resp.Configuration.SourceSftpBulk.Password)
		} else {
			r.Configuration.SourceSftpBulk.Password = types.StringNull()
		}
		r.Configuration.SourceSftpBulk.Port = types.Int64Value(resp.Configuration.SourceSftpBulk.Port)
		if resp.Configuration.SourceSftpBulk.PrivateKey != nil {
			r.Configuration.SourceSftpBulk.PrivateKey = types.StringValue(*resp.Configuration.SourceSftpBulk.PrivateKey)
		} else {
			r.Configuration.SourceSftpBulk.PrivateKey = types.StringNull()
		}
		r.Configuration.SourceSftpBulk.SourceType = types.StringValue(string(resp.Configuration.SourceSftpBulk.SourceType))
		r.Configuration.SourceSftpBulk.StartDate = types.StringValue(resp.Configuration.SourceSftpBulk.StartDate.Format(time.RFC3339))
		r.Configuration.SourceSftpBulk.StreamName = types.StringValue(resp.Configuration.SourceSftpBulk.StreamName)
		r.Configuration.SourceSftpBulk.Username = types.StringValue(resp.Configuration.SourceSftpBulk.Username)
	}
	if resp.Configuration.SourceShopify != nil {
		r.Configuration.SourceShopify = &SourceShopify{}
		if resp.Configuration.SourceShopify.Credentials == nil {
			r.Configuration.SourceShopify.Credentials = nil
		} else {
			r.Configuration.SourceShopify.Credentials = &SourceShopifyShopifyAuthorizationMethod{}
			if resp.Configuration.SourceShopify.Credentials.SourceShopifyShopifyAuthorizationMethodAPIPassword != nil {
				r.Configuration.SourceShopify.Credentials.SourceShopifyShopifyAuthorizationMethodAPIPassword = &SourceShopifyShopifyAuthorizationMethodAPIPassword{}
				r.Configuration.SourceShopify.Credentials.SourceShopifyShopifyAuthorizationMethodAPIPassword.APIPassword = types.StringValue(resp.Configuration.SourceShopify.Credentials.SourceShopifyShopifyAuthorizationMethodAPIPassword.APIPassword)
				r.Configuration.SourceShopify.Credentials.SourceShopifyShopifyAuthorizationMethodAPIPassword.AuthMethod = types.StringValue(string(resp.Configuration.SourceShopify.Credentials.SourceShopifyShopifyAuthorizationMethodAPIPassword.AuthMethod))
			}
			if resp.Configuration.SourceShopify.Credentials.SourceShopifyShopifyAuthorizationMethodOAuth20 != nil {
				r.Configuration.SourceShopify.Credentials.SourceShopifyShopifyAuthorizationMethodOAuth20 = &SourceShopifyShopifyAuthorizationMethodOAuth20{}
				if resp.Configuration.SourceShopify.Credentials.SourceShopifyShopifyAuthorizationMethodOAuth20.AccessToken != nil {
					r.Configuration.SourceShopify.Credentials.SourceShopifyShopifyAuthorizationMethodOAuth20.AccessToken = types.StringValue(*resp.Configuration.SourceShopify.Credentials.SourceShopifyShopifyAuthorizationMethodOAuth20.AccessToken)
				} else {
					r.Configuration.SourceShopify.Credentials.SourceShopifyShopifyAuthorizationMethodOAuth20.AccessToken = types.StringNull()
				}
				r.Configuration.SourceShopify.Credentials.SourceShopifyShopifyAuthorizationMethodOAuth20.AuthMethod = types.StringValue(string(resp.Configuration.SourceShopify.Credentials.SourceShopifyShopifyAuthorizationMethodOAuth20.AuthMethod))
				if resp.Configuration.SourceShopify.Credentials.SourceShopifyShopifyAuthorizationMethodOAuth20.ClientID != nil {
					r.Configuration.SourceShopify.Credentials.SourceShopifyShopifyAuthorizationMethodOAuth20.ClientID = types.StringValue(*resp.Configuration.SourceShopify.Credentials.SourceShopifyShopifyAuthorizationMethodOAuth20.ClientID)
				} else {
					r.Configuration.SourceShopify.Credentials.SourceShopifyShopifyAuthorizationMethodOAuth20.ClientID = types.StringNull()
				}
				if resp.Configuration.SourceShopify.Credentials.SourceShopifyShopifyAuthorizationMethodOAuth20.ClientSecret != nil {
					r.Configuration.SourceShopify.Credentials.SourceShopifyShopifyAuthorizationMethodOAuth20.ClientSecret = types.StringValue(*resp.Configuration.SourceShopify.Credentials.SourceShopifyShopifyAuthorizationMethodOAuth20.ClientSecret)
				} else {
					r.Configuration.SourceShopify.Credentials.SourceShopifyShopifyAuthorizationMethodOAuth20.ClientSecret = types.StringNull()
				}
			}
		}
		r.Configuration.SourceShopify.Shop = types.StringValue(resp.Configuration.SourceShopify.Shop)
		r.Configuration.SourceShopify.SourceType = types.StringValue(string(resp.Configuration.SourceShopify.SourceType))
		r.Configuration.SourceShopify.StartDate = types.StringValue(resp.Configuration.SourceShopify.StartDate)
	}
	if resp.Configuration.SourceShortio != nil {
		r.Configuration.SourceShortio = &SourceShortio{}
		r.Configuration.SourceShortio.DomainID = types.StringValue(resp.Configuration.SourceShortio.DomainID)
		r.Configuration.SourceShortio.SecretKey = types.StringValue(resp.Configuration.SourceShortio.SecretKey)
		r.Configuration.SourceShortio.SourceType = types.StringValue(string(resp.Configuration.SourceShortio.SourceType))
		r.Configuration.SourceShortio.StartDate = types.StringValue(resp.Configuration.SourceShortio.StartDate)
	}
	if resp.Configuration.SourceSlack != nil {
		r.Configuration.SourceSlack = &SourceSlack{}
		r.Configuration.SourceSlack.ChannelFilter = nil
		for _, v := range resp.Configuration.SourceSlack.ChannelFilter {
			r.Configuration.SourceSlack.ChannelFilter = append(r.Configuration.SourceSlack.ChannelFilter, types.StringValue(v))
		}
		if resp.Configuration.SourceSlack.Credentials == nil {
			r.Configuration.SourceSlack.Credentials = nil
		} else {
			r.Configuration.SourceSlack.Credentials = &SourceSlackAuthenticationMechanism{}
			if resp.Configuration.SourceSlack.Credentials.SourceSlackAuthenticationMechanismSignInViaSlackOAuth != nil {
				r.Configuration.SourceSlack.Credentials.SourceSlackAuthenticationMechanismSignInViaSlackOAuth = &SourceSlackAuthenticationMechanismSignInViaSlackOAuth{}
				r.Configuration.SourceSlack.Credentials.SourceSlackAuthenticationMechanismSignInViaSlackOAuth.AccessToken = types.StringValue(resp.Configuration.SourceSlack.Credentials.SourceSlackAuthenticationMechanismSignInViaSlackOAuth.AccessToken)
				r.Configuration.SourceSlack.Credentials.SourceSlackAuthenticationMechanismSignInViaSlackOAuth.ClientID = types.StringValue(resp.Configuration.SourceSlack.Credentials.SourceSlackAuthenticationMechanismSignInViaSlackOAuth.ClientID)
				r.Configuration.SourceSlack.Credentials.SourceSlackAuthenticationMechanismSignInViaSlackOAuth.ClientSecret = types.StringValue(resp.Configuration.SourceSlack.Credentials.SourceSlackAuthenticationMechanismSignInViaSlackOAuth.ClientSecret)
				r.Configuration.SourceSlack.Credentials.SourceSlackAuthenticationMechanismSignInViaSlackOAuth.OptionTitle = types.StringValue(string(resp.Configuration.SourceSlack.Credentials.SourceSlackAuthenticationMechanismSignInViaSlackOAuth.OptionTitle))
			}
			if resp.Configuration.SourceSlack.Credentials.SourceSlackAuthenticationMechanismAPIToken != nil {
				r.Configuration.SourceSlack.Credentials.SourceSlackAuthenticationMechanismAPIToken = &SourceSlackAuthenticationMechanismAPIToken{}
				r.Configuration.SourceSlack.Credentials.SourceSlackAuthenticationMechanismAPIToken.APIToken = types.StringValue(resp.Configuration.SourceSlack.Credentials.SourceSlackAuthenticationMechanismAPIToken.APIToken)
				r.Configuration.SourceSlack.Credentials.SourceSlackAuthenticationMechanismAPIToken.OptionTitle = types.StringValue(string(resp.Configuration.SourceSlack.Credentials.SourceSlackAuthenticationMechanismAPIToken.OptionTitle))
			}
		}
		r.Configuration.SourceSlack.JoinChannels = types.BoolValue(resp.Configuration.SourceSlack.JoinChannels)
		r.Configuration.SourceSlack.LookbackWindow = types.Int64Value(resp.Configuration.SourceSlack.LookbackWindow)
		r.Configuration.SourceSlack.SourceType = types.StringValue(string(resp.Configuration.SourceSlack.SourceType))
		r.Configuration.SourceSlack.StartDate = types.StringValue(resp.Configuration.SourceSlack.StartDate.Format(time.RFC3339))
	}
	if resp.Configuration.SourceSmaily != nil {
		r.Configuration.SourceSmaily = &SourceSmaily{}
		r.Configuration.SourceSmaily.APIPassword = types.StringValue(resp.Configuration.SourceSmaily.APIPassword)
		r.Configuration.SourceSmaily.APISubdomain = types.StringValue(resp.Configuration.SourceSmaily.APISubdomain)
		r.Configuration.SourceSmaily.APIUsername = types.StringValue(resp.Configuration.SourceSmaily.APIUsername)
		r.Configuration.SourceSmaily.SourceType = types.StringValue(string(resp.Configuration.SourceSmaily.SourceType))
	}
	if resp.Configuration.SourceSmartengage != nil {
		r.Configuration.SourceSmartengage = &SourceSmartengage{}
		r.Configuration.SourceSmartengage.APIKey = types.StringValue(resp.Configuration.SourceSmartengage.APIKey)
		r.Configuration.SourceSmartengage.SourceType = types.StringValue(string(resp.Configuration.SourceSmartengage.SourceType))
	}
	if resp.Configuration.SourceSmartsheets != nil {
		r.Configuration.SourceSmartsheets = &SourceSmartsheets{}
		if resp.Configuration.SourceSmartsheets.Credentials.SourceSmartsheetsAuthorizationMethodOAuth20 != nil {
			r.Configuration.SourceSmartsheets.Credentials.SourceSmartsheetsAuthorizationMethodOAuth20 = &SourceGitlabAuthorizationMethodOAuth20{}
			r.Configuration.SourceSmartsheets.Credentials.SourceSmartsheetsAuthorizationMethodOAuth20.AccessToken = types.StringValue(resp.Configuration.SourceSmartsheets.Credentials.SourceSmartsheetsAuthorizationMethodOAuth20.AccessToken)
			if resp.Configuration.SourceSmartsheets.Credentials.SourceSmartsheetsAuthorizationMethodOAuth20.AuthType != nil {
				r.Configuration.SourceSmartsheets.Credentials.SourceSmartsheetsAuthorizationMethodOAuth20.AuthType = types.StringValue(string(*resp.Configuration.SourceSmartsheets.Credentials.SourceSmartsheetsAuthorizationMethodOAuth20.AuthType))
			} else {
				r.Configuration.SourceSmartsheets.Credentials.SourceSmartsheetsAuthorizationMethodOAuth20.AuthType = types.StringNull()
			}
			r.Configuration.SourceSmartsheets.Credentials.SourceSmartsheetsAuthorizationMethodOAuth20.ClientID = types.StringValue(resp.Configuration.SourceSmartsheets.Credentials.SourceSmartsheetsAuthorizationMethodOAuth20.ClientID)
			r.Configuration.SourceSmartsheets.Credentials.SourceSmartsheetsAuthorizationMethodOAuth20.ClientSecret = types.StringValue(resp.Configuration.SourceSmartsheets.Credentials.SourceSmartsheetsAuthorizationMethodOAuth20.ClientSecret)
			r.Configuration.SourceSmartsheets.Credentials.SourceSmartsheetsAuthorizationMethodOAuth20.RefreshToken = types.StringValue(resp.Configuration.SourceSmartsheets.Credentials.SourceSmartsheetsAuthorizationMethodOAuth20.RefreshToken)
			r.Configuration.SourceSmartsheets.Credentials.SourceSmartsheetsAuthorizationMethodOAuth20.TokenExpiryDate = types.StringValue(resp.Configuration.SourceSmartsheets.Credentials.SourceSmartsheetsAuthorizationMethodOAuth20.TokenExpiryDate.Format(time.RFC3339))
		}
		if resp.Configuration.SourceSmartsheets.Credentials.SourceSmartsheetsAuthorizationMethodAPIAccessToken != nil {
			r.Configuration.SourceSmartsheets.Credentials.SourceSmartsheetsAuthorizationMethodAPIAccessToken = &SourceGitlabAuthorizationMethodPrivateToken{}
			r.Configuration.SourceSmartsheets.Credentials.SourceSmartsheetsAuthorizationMethodAPIAccessToken.AccessToken = types.StringValue(resp.Configuration.SourceSmartsheets.Credentials.SourceSmartsheetsAuthorizationMethodAPIAccessToken.AccessToken)
			if resp.Configuration.SourceSmartsheets.Credentials.SourceSmartsheetsAuthorizationMethodAPIAccessToken.AuthType != nil {
				r.Configuration.SourceSmartsheets.Credentials.SourceSmartsheetsAuthorizationMethodAPIAccessToken.AuthType = types.StringValue(string(*resp.Configuration.SourceSmartsheets.Credentials.SourceSmartsheetsAuthorizationMethodAPIAccessToken.AuthType))
			} else {
				r.Configuration.SourceSmartsheets.Credentials.SourceSmartsheetsAuthorizationMethodAPIAccessToken.AuthType = types.StringNull()
			}
		}
		r.Configuration.SourceSmartsheets.SourceType = types.StringValue(string(resp.Configuration.SourceSmartsheets.SourceType))
		r.Configuration.SourceSmartsheets.SpreadsheetID = types.StringValue(resp.Configuration.SourceSmartsheets.SpreadsheetID)
		if resp.Configuration.SourceSmartsheets.StartDatetime != nil {
			r.Configuration.SourceSmartsheets.StartDatetime = types.StringValue(resp.Configuration.SourceSmartsheets.StartDatetime.Format(time.RFC3339))
		} else {
			r.Configuration.SourceSmartsheets.StartDatetime = types.StringNull()
		}
	}
	if resp.Configuration.SourceSnapchatMarketing != nil {
		r.Configuration.SourceSnapchatMarketing = &SourceSnapchatMarketing{}
		r.Configuration.SourceSnapchatMarketing.ClientID = types.StringValue(resp.Configuration.SourceSnapchatMarketing.ClientID)
		r.Configuration.SourceSnapchatMarketing.ClientSecret = types.StringValue(resp.Configuration.SourceSnapchatMarketing.ClientSecret)
		if resp.Configuration.SourceSnapchatMarketing.EndDate != nil {
			r.Configuration.SourceSnapchatMarketing.EndDate = types.StringValue(resp.Configuration.SourceSnapchatMarketing.EndDate.String())
		} else {
			r.Configuration.SourceSnapchatMarketing.EndDate = types.StringNull()
		}
		r.Configuration.SourceSnapchatMarketing.RefreshToken = types.StringValue(resp.Configuration.SourceSnapchatMarketing.RefreshToken)
		r.Configuration.SourceSnapchatMarketing.SourceType = types.StringValue(string(resp.Configuration.SourceSnapchatMarketing.SourceType))
		if resp.Configuration.SourceSnapchatMarketing.StartDate != nil {
			r.Configuration.SourceSnapchatMarketing.StartDate = types.StringValue(resp.Configuration.SourceSnapchatMarketing.StartDate.String())
		} else {
			r.Configuration.SourceSnapchatMarketing.StartDate = types.StringNull()
		}
	}
	if resp.Configuration.SourceSnowflake != nil {
		r.Configuration.SourceSnowflake = &SourceSnowflake{}
		if resp.Configuration.SourceSnowflake.Credentials == nil {
			r.Configuration.SourceSnowflake.Credentials = nil
		} else {
			r.Configuration.SourceSnowflake.Credentials = &SourceSnowflakeAuthorizationMethod{}
			if resp.Configuration.SourceSnowflake.Credentials.SourceSnowflakeAuthorizationMethodOAuth20 != nil {
				r.Configuration.SourceSnowflake.Credentials.SourceSnowflakeAuthorizationMethodOAuth20 = &SourceSnowflakeAuthorizationMethodOAuth20{}
				if resp.Configuration.SourceSnowflake.Credentials.SourceSnowflakeAuthorizationMethodOAuth20.AccessToken != nil {
					r.Configuration.SourceSnowflake.Credentials.SourceSnowflakeAuthorizationMethodOAuth20.AccessToken = types.StringValue(*resp.Configuration.SourceSnowflake.Credentials.SourceSnowflakeAuthorizationMethodOAuth20.AccessToken)
				} else {
					r.Configuration.SourceSnowflake.Credentials.SourceSnowflakeAuthorizationMethodOAuth20.AccessToken = types.StringNull()
				}
				r.Configuration.SourceSnowflake.Credentials.SourceSnowflakeAuthorizationMethodOAuth20.AuthType = types.StringValue(string(resp.Configuration.SourceSnowflake.Credentials.SourceSnowflakeAuthorizationMethodOAuth20.AuthType))
				r.Configuration.SourceSnowflake.Credentials.SourceSnowflakeAuthorizationMethodOAuth20.ClientID = types.StringValue(resp.Configuration.SourceSnowflake.Credentials.SourceSnowflakeAuthorizationMethodOAuth20.ClientID)
				r.Configuration.SourceSnowflake.Credentials.SourceSnowflakeAuthorizationMethodOAuth20.ClientSecret = types.StringValue(resp.Configuration.SourceSnowflake.Credentials.SourceSnowflakeAuthorizationMethodOAuth20.ClientSecret)
				if resp.Configuration.SourceSnowflake.Credentials.SourceSnowflakeAuthorizationMethodOAuth20.RefreshToken != nil {
					r.Configuration.SourceSnowflake.Credentials.SourceSnowflakeAuthorizationMethodOAuth20.RefreshToken = types.StringValue(*resp.Configuration.SourceSnowflake.Credentials.SourceSnowflakeAuthorizationMethodOAuth20.RefreshToken)
				} else {
					r.Configuration.SourceSnowflake.Credentials.SourceSnowflakeAuthorizationMethodOAuth20.RefreshToken = types.StringNull()
				}
			}
			if resp.Configuration.SourceSnowflake.Credentials.SourceSnowflakeAuthorizationMethodUsernameAndPassword != nil {
				r.Configuration.SourceSnowflake.Credentials.SourceSnowflakeAuthorizationMethodUsernameAndPassword = &SourceSnowflakeAuthorizationMethodUsernameAndPassword{}
				r.Configuration.SourceSnowflake.Credentials.SourceSnowflakeAuthorizationMethodUsernameAndPassword.AuthType = types.StringValue(string(resp.Configuration.SourceSnowflake.Credentials.SourceSnowflakeAuthorizationMethodUsernameAndPassword.AuthType))
				r.Configuration.SourceSnowflake.Credentials.SourceSnowflakeAuthorizationMethodUsernameAndPassword.Password = types.StringValue(resp.Configuration.SourceSnowflake.Credentials.SourceSnowflakeAuthorizationMethodUsernameAndPassword.Password)
				r.Configuration.SourceSnowflake.Credentials.SourceSnowflakeAuthorizationMethodUsernameAndPassword.Username = types.StringValue(resp.Configuration.SourceSnowflake.Credentials.SourceSnowflakeAuthorizationMethodUsernameAndPassword.Username)
			}
		}
		r.Configuration.SourceSnowflake.Database = types.StringValue(resp.Configuration.SourceSnowflake.Database)
		r.Configuration.SourceSnowflake.Host = types.StringValue(resp.Configuration.SourceSnowflake.Host)
		if resp.Configuration.SourceSnowflake.JdbcURLParams != nil {
			r.Configuration.SourceSnowflake.JdbcURLParams = types.StringValue(*resp.Configuration.SourceSnowflake.JdbcURLParams)
		} else {
			r.Configuration.SourceSnowflake.JdbcURLParams = types.StringNull()
		}
		r.Configuration.SourceSnowflake.Role = types.StringValue(resp.Configuration.SourceSnowflake.Role)
		if resp.Configuration.SourceSnowflake.Schema != nil {
			r.Configuration.SourceSnowflake.Schema = types.StringValue(*resp.Configuration.SourceSnowflake.Schema)
		} else {
			r.Configuration.SourceSnowflake.Schema = types.StringNull()
		}
		r.Configuration.SourceSnowflake.SourceType = types.StringValue(string(resp.Configuration.SourceSnowflake.SourceType))
		r.Configuration.SourceSnowflake.Warehouse = types.StringValue(resp.Configuration.SourceSnowflake.Warehouse)
	}
	if resp.Configuration.SourceSonarCloud != nil {
		r.Configuration.SourceSonarCloud = &SourceSonarCloud{}
		r.Configuration.SourceSonarCloud.ComponentKeys = nil
		for _, componentKeysItem := range resp.Configuration.SourceSonarCloud.ComponentKeys {
			var componentKeys1 types.String
			componentKeys1Result, _ := json.Marshal(componentKeysItem)
			componentKeys1 = types.StringValue(string(componentKeys1Result))
			r.Configuration.SourceSonarCloud.ComponentKeys = append(r.Configuration.SourceSonarCloud.ComponentKeys, componentKeys1)
		}
		if resp.Configuration.SourceSonarCloud.EndDate != nil {
			r.Configuration.SourceSonarCloud.EndDate = types.StringValue(resp.Configuration.SourceSonarCloud.EndDate.String())
		} else {
			r.Configuration.SourceSonarCloud.EndDate = types.StringNull()
		}
		r.Configuration.SourceSonarCloud.Organization = types.StringValue(resp.Configuration.SourceSonarCloud.Organization)
		r.Configuration.SourceSonarCloud.SourceType = types.StringValue(string(resp.Configuration.SourceSonarCloud.SourceType))
		if resp.Configuration.SourceSonarCloud.StartDate != nil {
			r.Configuration.SourceSonarCloud.StartDate = types.StringValue(resp.Configuration.SourceSonarCloud.StartDate.String())
		} else {
			r.Configuration.SourceSonarCloud.StartDate = types.StringNull()
		}
		r.Configuration.SourceSonarCloud.UserToken = types.StringValue(resp.Configuration.SourceSonarCloud.UserToken)
	}
	if resp.Configuration.SourceSpacexAPI != nil {
		r.Configuration.SourceSpacexAPI = &SourceSpacexAPI{}
		if resp.Configuration.SourceSpacexAPI.ID != nil {
			r.Configuration.SourceSpacexAPI.ID = types.StringValue(*resp.Configuration.SourceSpacexAPI.ID)
		} else {
			r.Configuration.SourceSpacexAPI.ID = types.StringNull()
		}
		if resp.Configuration.SourceSpacexAPI.Options != nil {
			r.Configuration.SourceSpacexAPI.Options = types.StringValue(*resp.Configuration.SourceSpacexAPI.Options)
		} else {
			r.Configuration.SourceSpacexAPI.Options = types.StringNull()
		}
		r.Configuration.SourceSpacexAPI.SourceType = types.StringValue(string(resp.Configuration.SourceSpacexAPI.SourceType))
	}
	if resp.Configuration.SourceSquare != nil {
		r.Configuration.SourceSquare = &SourceSquare{}
		if resp.Configuration.SourceSquare.Credentials == nil {
			r.Configuration.SourceSquare.Credentials = nil
		} else {
			r.Configuration.SourceSquare.Credentials = &SourceSquareAuthentication{}
			if resp.Configuration.SourceSquare.Credentials.SourceSquareAuthenticationOauthAuthentication != nil {
				r.Configuration.SourceSquare.Credentials.SourceSquareAuthenticationOauthAuthentication = &SourceSquareAuthenticationOauthAuthentication{}
				r.Configuration.SourceSquare.Credentials.SourceSquareAuthenticationOauthAuthentication.ClientID = types.StringValue(resp.Configuration.SourceSquare.Credentials.SourceSquareAuthenticationOauthAuthentication.ClientID)
				r.Configuration.SourceSquare.Credentials.SourceSquareAuthenticationOauthAuthentication.ClientSecret = types.StringValue(resp.Configuration.SourceSquare.Credentials.SourceSquareAuthenticationOauthAuthentication.ClientSecret)
				if resp.Configuration.SourceSquare.Credentials.SourceSquareAuthenticationOauthAuthentication.CredentialsTitle != nil {
					r.Configuration.SourceSquare.Credentials.SourceSquareAuthenticationOauthAuthentication.CredentialsTitle = types.StringValue(string(*resp.Configuration.SourceSquare.Credentials.SourceSquareAuthenticationOauthAuthentication.CredentialsTitle))
				} else {
					r.Configuration.SourceSquare.Credentials.SourceSquareAuthenticationOauthAuthentication.CredentialsTitle = types.StringNull()
				}
				r.Configuration.SourceSquare.Credentials.SourceSquareAuthenticationOauthAuthentication.RefreshToken = types.StringValue(resp.Configuration.SourceSquare.Credentials.SourceSquareAuthenticationOauthAuthentication.RefreshToken)
			}
			if resp.Configuration.SourceSquare.Credentials.SourceSquareAuthenticationAPIKey != nil {
				r.Configuration.SourceSquare.Credentials.SourceSquareAuthenticationAPIKey = &SourceSquareAuthenticationAPIKey{}
				r.Configuration.SourceSquare.Credentials.SourceSquareAuthenticationAPIKey.APIKey = types.StringValue(resp.Configuration.SourceSquare.Credentials.SourceSquareAuthenticationAPIKey.APIKey)
				if resp.Configuration.SourceSquare.Credentials.SourceSquareAuthenticationAPIKey.CredentialsTitle != nil {
					r.Configuration.SourceSquare.Credentials.SourceSquareAuthenticationAPIKey.CredentialsTitle = types.StringValue(string(*resp.Configuration.SourceSquare.Credentials.SourceSquareAuthenticationAPIKey.CredentialsTitle))
				} else {
					r.Configuration.SourceSquare.Credentials.SourceSquareAuthenticationAPIKey.CredentialsTitle = types.StringNull()
				}
			}
		}
		if resp.Configuration.SourceSquare.IncludeDeletedObjects != nil {
			r.Configuration.SourceSquare.IncludeDeletedObjects = types.BoolValue(*resp.Configuration.SourceSquare.IncludeDeletedObjects)
		} else {
			r.Configuration.SourceSquare.IncludeDeletedObjects = types.BoolNull()
		}
		r.Configuration.SourceSquare.IsSandbox = types.BoolValue(resp.Configuration.SourceSquare.IsSandbox)
		r.Configuration.SourceSquare.SourceType = types.StringValue(string(resp.Configuration.SourceSquare.SourceType))
		if resp.Configuration.SourceSquare.StartDate != nil {
			r.Configuration.SourceSquare.StartDate = types.StringValue(resp.Configuration.SourceSquare.StartDate.String())
		} else {
			r.Configuration.SourceSquare.StartDate = types.StringNull()
		}
	}
	if resp.Configuration.SourceStrava != nil {
		r.Configuration.SourceStrava = &SourceStrava{}
		r.Configuration.SourceStrava.AthleteID = types.Int64Value(resp.Configuration.SourceStrava.AthleteID)
		if resp.Configuration.SourceStrava.AuthType != nil {
			r.Configuration.SourceStrava.AuthType = types.StringValue(string(*resp.Configuration.SourceStrava.AuthType))
		} else {
			r.Configuration.SourceStrava.AuthType = types.StringNull()
		}
		r.Configuration.SourceStrava.ClientID = types.StringValue(resp.Configuration.SourceStrava.ClientID)
		r.Configuration.SourceStrava.ClientSecret = types.StringValue(resp.Configuration.SourceStrava.ClientSecret)
		r.Configuration.SourceStrava.RefreshToken = types.StringValue(resp.Configuration.SourceStrava.RefreshToken)
		r.Configuration.SourceStrava.SourceType = types.StringValue(string(resp.Configuration.SourceStrava.SourceType))
		r.Configuration.SourceStrava.StartDate = types.StringValue(resp.Configuration.SourceStrava.StartDate.Format(time.RFC3339))
	}
	if resp.Configuration.SourceStripe != nil {
		r.Configuration.SourceStripe = &SourceStripe{}
		r.Configuration.SourceStripe.AccountID = types.StringValue(resp.Configuration.SourceStripe.AccountID)
		r.Configuration.SourceStripe.ClientSecret = types.StringValue(resp.Configuration.SourceStripe.ClientSecret)
		if resp.Configuration.SourceStripe.LookbackWindowDays != nil {
			r.Configuration.SourceStripe.LookbackWindowDays = types.Int64Value(*resp.Configuration.SourceStripe.LookbackWindowDays)
		} else {
			r.Configuration.SourceStripe.LookbackWindowDays = types.Int64Null()
		}
		if resp.Configuration.SourceStripe.SliceRange != nil {
			r.Configuration.SourceStripe.SliceRange = types.Int64Value(*resp.Configuration.SourceStripe.SliceRange)
		} else {
			r.Configuration.SourceStripe.SliceRange = types.Int64Null()
		}
		r.Configuration.SourceStripe.SourceType = types.StringValue(string(resp.Configuration.SourceStripe.SourceType))
		r.Configuration.SourceStripe.StartDate = types.StringValue(resp.Configuration.SourceStripe.StartDate.Format(time.RFC3339))
	}
	if resp.Configuration.SourceSurveySparrow != nil {
		r.Configuration.SourceSurveySparrow = &SourceSurveySparrow{}
		r.Configuration.SourceSurveySparrow.AccessToken = types.StringValue(resp.Configuration.SourceSurveySparrow.AccessToken)
		if resp.Configuration.SourceSurveySparrow.Region == nil {
			r.Configuration.SourceSurveySparrow.Region = nil
		} else {
			r.Configuration.SourceSurveySparrow.Region = &SourceSurveySparrowBaseURL{}
			if resp.Configuration.SourceSurveySparrow.Region.SourceSurveySparrowBaseURLEUBasedAccount != nil {
				r.Configuration.SourceSurveySparrow.Region.SourceSurveySparrowBaseURLEUBasedAccount = &SourceSurveySparrowBaseURLEUBasedAccount{}
				if resp.Configuration.SourceSurveySparrow.Region.SourceSurveySparrowBaseURLEUBasedAccount.URLBase != nil {
					r.Configuration.SourceSurveySparrow.Region.SourceSurveySparrowBaseURLEUBasedAccount.URLBase = types.StringValue(string(*resp.Configuration.SourceSurveySparrow.Region.SourceSurveySparrowBaseURLEUBasedAccount.URLBase))
				} else {
					r.Configuration.SourceSurveySparrow.Region.SourceSurveySparrowBaseURLEUBasedAccount.URLBase = types.StringNull()
				}
			}
			if resp.Configuration.SourceSurveySparrow.Region.SourceSurveySparrowBaseURLGlobalAccount != nil {
				r.Configuration.SourceSurveySparrow.Region.SourceSurveySparrowBaseURLGlobalAccount = &SourceSurveySparrowBaseURLGlobalAccount{}
				if resp.Configuration.SourceSurveySparrow.Region.SourceSurveySparrowBaseURLGlobalAccount.URLBase != nil {
					r.Configuration.SourceSurveySparrow.Region.SourceSurveySparrowBaseURLGlobalAccount.URLBase = types.StringValue(string(*resp.Configuration.SourceSurveySparrow.Region.SourceSurveySparrowBaseURLGlobalAccount.URLBase))
				} else {
					r.Configuration.SourceSurveySparrow.Region.SourceSurveySparrowBaseURLGlobalAccount.URLBase = types.StringNull()
				}
			}
		}
		r.Configuration.SourceSurveySparrow.SourceType = types.StringValue(string(resp.Configuration.SourceSurveySparrow.SourceType))
		r.Configuration.SourceSurveySparrow.SurveyID = nil
		for _, surveyIDItem := range resp.Configuration.SourceSurveySparrow.SurveyID {
			var surveyId1 types.String
			surveyId1Result, _ := json.Marshal(surveyIDItem)
			surveyId1 = types.StringValue(string(surveyId1Result))
			r.Configuration.SourceSurveySparrow.SurveyID = append(r.Configuration.SourceSurveySparrow.SurveyID, surveyId1)
		}
	}
	if resp.Configuration.SourceSurveymonkey != nil {
		r.Configuration.SourceSurveymonkey = &SourceSurveymonkey{}
		if resp.Configuration.SourceSurveymonkey.Credentials == nil {
			r.Configuration.SourceSurveymonkey.Credentials = nil
		} else {
			r.Configuration.SourceSurveymonkey.Credentials = &SourceSurveymonkeySurveyMonkeyAuthorizationMethod{}
			r.Configuration.SourceSurveymonkey.Credentials.AccessToken = types.StringValue(resp.Configuration.SourceSurveymonkey.Credentials.AccessToken)
			r.Configuration.SourceSurveymonkey.Credentials.AuthMethod = types.StringValue(string(resp.Configuration.SourceSurveymonkey.Credentials.AuthMethod))
			if resp.Configuration.SourceSurveymonkey.Credentials.ClientID != nil {
				r.Configuration.SourceSurveymonkey.Credentials.ClientID = types.StringValue(*resp.Configuration.SourceSurveymonkey.Credentials.ClientID)
			} else {
				r.Configuration.SourceSurveymonkey.Credentials.ClientID = types.StringNull()
			}
			if resp.Configuration.SourceSurveymonkey.Credentials.ClientSecret != nil {
				r.Configuration.SourceSurveymonkey.Credentials.ClientSecret = types.StringValue(*resp.Configuration.SourceSurveymonkey.Credentials.ClientSecret)
			} else {
				r.Configuration.SourceSurveymonkey.Credentials.ClientSecret = types.StringNull()
			}
		}
		if resp.Configuration.SourceSurveymonkey.Origin != nil {
			r.Configuration.SourceSurveymonkey.Origin = types.StringValue(string(*resp.Configuration.SourceSurveymonkey.Origin))
		} else {
			r.Configuration.SourceSurveymonkey.Origin = types.StringNull()
		}
		r.Configuration.SourceSurveymonkey.SourceType = types.StringValue(string(resp.Configuration.SourceSurveymonkey.SourceType))
		r.Configuration.SourceSurveymonkey.StartDate = types.StringValue(resp.Configuration.SourceSurveymonkey.StartDate.Format(time.RFC3339))
		r.Configuration.SourceSurveymonkey.SurveyIds = nil
		for _, v := range resp.Configuration.SourceSurveymonkey.SurveyIds {
			r.Configuration.SourceSurveymonkey.SurveyIds = append(r.Configuration.SourceSurveymonkey.SurveyIds, types.StringValue(v))
		}
	}
	if resp.Configuration.SourceTempo != nil {
		r.Configuration.SourceTempo = &SourceTempo{}
		r.Configuration.SourceTempo.APIToken = types.StringValue(resp.Configuration.SourceTempo.APIToken)
		r.Configuration.SourceTempo.SourceType = types.StringValue(string(resp.Configuration.SourceTempo.SourceType))
	}
	if resp.Configuration.SourceTheGuardianAPI != nil {
		r.Configuration.SourceTheGuardianAPI = &SourceTheGuardianAPI{}
		r.Configuration.SourceTheGuardianAPI.APIKey = types.StringValue(resp.Configuration.SourceTheGuardianAPI.APIKey)
		if resp.Configuration.SourceTheGuardianAPI.EndDate != nil {
			r.Configuration.SourceTheGuardianAPI.EndDate = types.StringValue(*resp.Configuration.SourceTheGuardianAPI.EndDate)
		} else {
			r.Configuration.SourceTheGuardianAPI.EndDate = types.StringNull()
		}
		if resp.Configuration.SourceTheGuardianAPI.Query != nil {
			r.Configuration.SourceTheGuardianAPI.Query = types.StringValue(*resp.Configuration.SourceTheGuardianAPI.Query)
		} else {
			r.Configuration.SourceTheGuardianAPI.Query = types.StringNull()
		}
		if resp.Configuration.SourceTheGuardianAPI.Section != nil {
			r.Configuration.SourceTheGuardianAPI.Section = types.StringValue(*resp.Configuration.SourceTheGuardianAPI.Section)
		} else {
			r.Configuration.SourceTheGuardianAPI.Section = types.StringNull()
		}
		r.Configuration.SourceTheGuardianAPI.SourceType = types.StringValue(string(resp.Configuration.SourceTheGuardianAPI.SourceType))
		r.Configuration.SourceTheGuardianAPI.StartDate = types.StringValue(resp.Configuration.SourceTheGuardianAPI.StartDate)
		if resp.Configuration.SourceTheGuardianAPI.Tag != nil {
			r.Configuration.SourceTheGuardianAPI.Tag = types.StringValue(*resp.Configuration.SourceTheGuardianAPI.Tag)
		} else {
			r.Configuration.SourceTheGuardianAPI.Tag = types.StringNull()
		}
	}
	if resp.Configuration.SourceTiktokMarketing != nil {
		r.Configuration.SourceTiktokMarketing = &SourceTiktokMarketing{}
		if resp.Configuration.SourceTiktokMarketing.Credentials == nil {
			r.Configuration.SourceTiktokMarketing.Credentials = nil
		} else {
			r.Configuration.SourceTiktokMarketing.Credentials = &SourceTiktokMarketingAuthenticationMethod{}
			if resp.Configuration.SourceTiktokMarketing.Credentials.SourceTiktokMarketingAuthenticationMethodOAuth20 != nil {
				r.Configuration.SourceTiktokMarketing.Credentials.SourceTiktokMarketingAuthenticationMethodOAuth20 = &SourceTiktokMarketingAuthenticationMethodOAuth20{}
				r.Configuration.SourceTiktokMarketing.Credentials.SourceTiktokMarketingAuthenticationMethodOAuth20.AccessToken = types.StringValue(resp.Configuration.SourceTiktokMarketing.Credentials.SourceTiktokMarketingAuthenticationMethodOAuth20.AccessToken)
				if resp.Configuration.SourceTiktokMarketing.Credentials.SourceTiktokMarketingAuthenticationMethodOAuth20.AdvertiserID != nil {
					r.Configuration.SourceTiktokMarketing.Credentials.SourceTiktokMarketingAuthenticationMethodOAuth20.AdvertiserID = types.StringValue(*resp.Configuration.SourceTiktokMarketing.Credentials.SourceTiktokMarketingAuthenticationMethodOAuth20.AdvertiserID)
				} else {
					r.Configuration.SourceTiktokMarketing.Credentials.SourceTiktokMarketingAuthenticationMethodOAuth20.AdvertiserID = types.StringNull()
				}
				r.Configuration.SourceTiktokMarketing.Credentials.SourceTiktokMarketingAuthenticationMethodOAuth20.AppID = types.StringValue(resp.Configuration.SourceTiktokMarketing.Credentials.SourceTiktokMarketingAuthenticationMethodOAuth20.AppID)
				if resp.Configuration.SourceTiktokMarketing.Credentials.SourceTiktokMarketingAuthenticationMethodOAuth20.AuthType != nil {
					r.Configuration.SourceTiktokMarketing.Credentials.SourceTiktokMarketingAuthenticationMethodOAuth20.AuthType = types.StringValue(string(*resp.Configuration.SourceTiktokMarketing.Credentials.SourceTiktokMarketingAuthenticationMethodOAuth20.AuthType))
				} else {
					r.Configuration.SourceTiktokMarketing.Credentials.SourceTiktokMarketingAuthenticationMethodOAuth20.AuthType = types.StringNull()
				}
				r.Configuration.SourceTiktokMarketing.Credentials.SourceTiktokMarketingAuthenticationMethodOAuth20.Secret = types.StringValue(resp.Configuration.SourceTiktokMarketing.Credentials.SourceTiktokMarketingAuthenticationMethodOAuth20.Secret)
			}
			if resp.Configuration.SourceTiktokMarketing.Credentials.SourceTiktokMarketingAuthenticationMethodSandboxAccessToken != nil {
				r.Configuration.SourceTiktokMarketing.Credentials.SourceTiktokMarketingAuthenticationMethodSandboxAccessToken = &SourceTiktokMarketingAuthenticationMethodSandboxAccessToken{}
				r.Configuration.SourceTiktokMarketing.Credentials.SourceTiktokMarketingAuthenticationMethodSandboxAccessToken.AccessToken = types.StringValue(resp.Configuration.SourceTiktokMarketing.Credentials.SourceTiktokMarketingAuthenticationMethodSandboxAccessToken.AccessToken)
				r.Configuration.SourceTiktokMarketing.Credentials.SourceTiktokMarketingAuthenticationMethodSandboxAccessToken.AdvertiserID = types.StringValue(resp.Configuration.SourceTiktokMarketing.Credentials.SourceTiktokMarketingAuthenticationMethodSandboxAccessToken.AdvertiserID)
				if resp.Configuration.SourceTiktokMarketing.Credentials.SourceTiktokMarketingAuthenticationMethodSandboxAccessToken.AuthType != nil {
					r.Configuration.SourceTiktokMarketing.Credentials.SourceTiktokMarketingAuthenticationMethodSandboxAccessToken.AuthType = types.StringValue(string(*resp.Configuration.SourceTiktokMarketing.Credentials.SourceTiktokMarketingAuthenticationMethodSandboxAccessToken.AuthType))
				} else {
					r.Configuration.SourceTiktokMarketing.Credentials.SourceTiktokMarketingAuthenticationMethodSandboxAccessToken.AuthType = types.StringNull()
				}
			}
		}
		if resp.Configuration.SourceTiktokMarketing.EndDate != nil {
			r.Configuration.SourceTiktokMarketing.EndDate = types.StringValue(resp.Configuration.SourceTiktokMarketing.EndDate.String())
		} else {
			r.Configuration.SourceTiktokMarketing.EndDate = types.StringNull()
		}
		if resp.Configuration.SourceTiktokMarketing.ReportGranularity != nil {
			r.Configuration.SourceTiktokMarketing.ReportGranularity = types.StringValue(string(*resp.Configuration.SourceTiktokMarketing.ReportGranularity))
		} else {
			r.Configuration.SourceTiktokMarketing.ReportGranularity = types.StringNull()
		}
		r.Configuration.SourceTiktokMarketing.SourceType = types.StringValue(string(resp.Configuration.SourceTiktokMarketing.SourceType))
		if resp.Configuration.SourceTiktokMarketing.StartDate != nil {
			r.Configuration.SourceTiktokMarketing.StartDate = types.StringValue(resp.Configuration.SourceTiktokMarketing.StartDate.String())
		} else {
			r.Configuration.SourceTiktokMarketing.StartDate = types.StringNull()
		}
	}
	if resp.Configuration.SourceTodoist != nil {
		r.Configuration.SourceTodoist = &SourceTodoist{}
		r.Configuration.SourceTodoist.SourceType = types.StringValue(string(resp.Configuration.SourceTodoist.SourceType))
		r.Configuration.SourceTodoist.Token = types.StringValue(resp.Configuration.SourceTodoist.Token)
	}
	if resp.Configuration.SourceTrello != nil {
		r.Configuration.SourceTrello = &SourceTrello{}
		r.Configuration.SourceTrello.BoardIds = nil
		for _, v := range resp.Configuration.SourceTrello.BoardIds {
			r.Configuration.SourceTrello.BoardIds = append(r.Configuration.SourceTrello.BoardIds, types.StringValue(v))
		}
		r.Configuration.SourceTrello.Key = types.StringValue(resp.Configuration.SourceTrello.Key)
		r.Configuration.SourceTrello.SourceType = types.StringValue(string(resp.Configuration.SourceTrello.SourceType))
		r.Configuration.SourceTrello.StartDate = types.StringValue(resp.Configuration.SourceTrello.StartDate.Format(time.RFC3339))
		r.Configuration.SourceTrello.Token = types.StringValue(resp.Configuration.SourceTrello.Token)
	}
	if resp.Configuration.SourceTrustpilot != nil {
		r.Configuration.SourceTrustpilot = &SourceTrustpilot{}
		r.Configuration.SourceTrustpilot.BusinessUnits = nil
		for _, v := range resp.Configuration.SourceTrustpilot.BusinessUnits {
			r.Configuration.SourceTrustpilot.BusinessUnits = append(r.Configuration.SourceTrustpilot.BusinessUnits, types.StringValue(v))
		}
		if resp.Configuration.SourceTrustpilot.Credentials.SourceTrustpilotAuthorizationMethodOAuth20 != nil {
			r.Configuration.SourceTrustpilot.Credentials.SourceTrustpilotAuthorizationMethodOAuth20 = &SourceGitlabAuthorizationMethodOAuth20{}
			r.Configuration.SourceTrustpilot.Credentials.SourceTrustpilotAuthorizationMethodOAuth20.AccessToken = types.StringValue(resp.Configuration.SourceTrustpilot.Credentials.SourceTrustpilotAuthorizationMethodOAuth20.AccessToken)
			if resp.Configuration.SourceTrustpilot.Credentials.SourceTrustpilotAuthorizationMethodOAuth20.AuthType != nil {
				r.Configuration.SourceTrustpilot.Credentials.SourceTrustpilotAuthorizationMethodOAuth20.AuthType = types.StringValue(string(*resp.Configuration.SourceTrustpilot.Credentials.SourceTrustpilotAuthorizationMethodOAuth20.AuthType))
			} else {
				r.Configuration.SourceTrustpilot.Credentials.SourceTrustpilotAuthorizationMethodOAuth20.AuthType = types.StringNull()
			}
			r.Configuration.SourceTrustpilot.Credentials.SourceTrustpilotAuthorizationMethodOAuth20.ClientID = types.StringValue(resp.Configuration.SourceTrustpilot.Credentials.SourceTrustpilotAuthorizationMethodOAuth20.ClientID)
			r.Configuration.SourceTrustpilot.Credentials.SourceTrustpilotAuthorizationMethodOAuth20.ClientSecret = types.StringValue(resp.Configuration.SourceTrustpilot.Credentials.SourceTrustpilotAuthorizationMethodOAuth20.ClientSecret)
			r.Configuration.SourceTrustpilot.Credentials.SourceTrustpilotAuthorizationMethodOAuth20.RefreshToken = types.StringValue(resp.Configuration.SourceTrustpilot.Credentials.SourceTrustpilotAuthorizationMethodOAuth20.RefreshToken)
			r.Configuration.SourceTrustpilot.Credentials.SourceTrustpilotAuthorizationMethodOAuth20.TokenExpiryDate = types.StringValue(resp.Configuration.SourceTrustpilot.Credentials.SourceTrustpilotAuthorizationMethodOAuth20.TokenExpiryDate.Format(time.RFC3339))
		}
		if resp.Configuration.SourceTrustpilot.Credentials.SourceTrustpilotAuthorizationMethodAPIKey != nil {
			r.Configuration.SourceTrustpilot.Credentials.SourceTrustpilotAuthorizationMethodAPIKey = &SourceTrustpilotAuthorizationMethodAPIKey{}
			if resp.Configuration.SourceTrustpilot.Credentials.SourceTrustpilotAuthorizationMethodAPIKey.AuthType != nil {
				r.Configuration.SourceTrustpilot.Credentials.SourceTrustpilotAuthorizationMethodAPIKey.AuthType = types.StringValue(string(*resp.Configuration.SourceTrustpilot.Credentials.SourceTrustpilotAuthorizationMethodAPIKey.AuthType))
			} else {
				r.Configuration.SourceTrustpilot.Credentials.SourceTrustpilotAuthorizationMethodAPIKey.AuthType = types.StringNull()
			}
			r.Configuration.SourceTrustpilot.Credentials.SourceTrustpilotAuthorizationMethodAPIKey.ClientID = types.StringValue(resp.Configuration.SourceTrustpilot.Credentials.SourceTrustpilotAuthorizationMethodAPIKey.ClientID)
		}
		r.Configuration.SourceTrustpilot.SourceType = types.StringValue(string(resp.Configuration.SourceTrustpilot.SourceType))
		r.Configuration.SourceTrustpilot.StartDate = types.StringValue(resp.Configuration.SourceTrustpilot.StartDate)
	}
	if resp.Configuration.SourceTvmazeSchedule != nil {
		r.Configuration.SourceTvmazeSchedule = &SourceTvmazeSchedule{}
		r.Configuration.SourceTvmazeSchedule.DomesticScheduleCountryCode = types.StringValue(resp.Configuration.SourceTvmazeSchedule.DomesticScheduleCountryCode)
		if resp.Configuration.SourceTvmazeSchedule.EndDate != nil {
			r.Configuration.SourceTvmazeSchedule.EndDate = types.StringValue(*resp.Configuration.SourceTvmazeSchedule.EndDate)
		} else {
			r.Configuration.SourceTvmazeSchedule.EndDate = types.StringNull()
		}
		r.Configuration.SourceTvmazeSchedule.SourceType = types.StringValue(string(resp.Configuration.SourceTvmazeSchedule.SourceType))
		r.Configuration.SourceTvmazeSchedule.StartDate = types.StringValue(resp.Configuration.SourceTvmazeSchedule.StartDate)
		if resp.Configuration.SourceTvmazeSchedule.WebScheduleCountryCode != nil {
			r.Configuration.SourceTvmazeSchedule.WebScheduleCountryCode = types.StringValue(*resp.Configuration.SourceTvmazeSchedule.WebScheduleCountryCode)
		} else {
			r.Configuration.SourceTvmazeSchedule.WebScheduleCountryCode = types.StringNull()
		}
	}
	if resp.Configuration.SourceTwilio != nil {
		r.Configuration.SourceTwilio = &SourceTwilio{}
		r.Configuration.SourceTwilio.AccountSid = types.StringValue(resp.Configuration.SourceTwilio.AccountSid)
		r.Configuration.SourceTwilio.AuthToken = types.StringValue(resp.Configuration.SourceTwilio.AuthToken)
		if resp.Configuration.SourceTwilio.LookbackWindow != nil {
			r.Configuration.SourceTwilio.LookbackWindow = types.Int64Value(*resp.Configuration.SourceTwilio.LookbackWindow)
		} else {
			r.Configuration.SourceTwilio.LookbackWindow = types.Int64Null()
		}
		r.Configuration.SourceTwilio.SourceType = types.StringValue(string(resp.Configuration.SourceTwilio.SourceType))
		r.Configuration.SourceTwilio.StartDate = types.StringValue(resp.Configuration.SourceTwilio.StartDate.Format(time.RFC3339))
	}
	if resp.Configuration.SourceTwilioTaskrouter != nil {
		r.Configuration.SourceTwilioTaskrouter = &SourceTwilioTaskrouter{}
		r.Configuration.SourceTwilioTaskrouter.AccountSid = types.StringValue(resp.Configuration.SourceTwilioTaskrouter.AccountSid)
		r.Configuration.SourceTwilioTaskrouter.AuthToken = types.StringValue(resp.Configuration.SourceTwilioTaskrouter.AuthToken)
		r.Configuration.SourceTwilioTaskrouter.SourceType = types.StringValue(string(resp.Configuration.SourceTwilioTaskrouter.SourceType))
	}
	if resp.Configuration.SourceTwitter != nil {
		r.Configuration.SourceTwitter = &SourceTwitter{}
		r.Configuration.SourceTwitter.APIKey = types.StringValue(resp.Configuration.SourceTwitter.APIKey)
		if resp.Configuration.SourceTwitter.EndDate != nil {
			r.Configuration.SourceTwitter.EndDate = types.StringValue(resp.Configuration.SourceTwitter.EndDate.Format(time.RFC3339))
		} else {
			r.Configuration.SourceTwitter.EndDate = types.StringNull()
		}
		r.Configuration.SourceTwitter.Query = types.StringValue(resp.Configuration.SourceTwitter.Query)
		r.Configuration.SourceTwitter.SourceType = types.StringValue(string(resp.Configuration.SourceTwitter.SourceType))
		if resp.Configuration.SourceTwitter.StartDate != nil {
			r.Configuration.SourceTwitter.StartDate = types.StringValue(resp.Configuration.SourceTwitter.StartDate.Format(time.RFC3339))
		} else {
			r.Configuration.SourceTwitter.StartDate = types.StringNull()
		}
	}
	if resp.Configuration.SourceTypeform != nil {
		r.Configuration.SourceTypeform = &SourceTypeform{}
		r.Configuration.SourceTypeform.FormIds = nil
		for _, v := range resp.Configuration.SourceTypeform.FormIds {
			r.Configuration.SourceTypeform.FormIds = append(r.Configuration.SourceTypeform.FormIds, types.StringValue(v))
		}
		r.Configuration.SourceTypeform.SourceType = types.StringValue(string(resp.Configuration.SourceTypeform.SourceType))
		r.Configuration.SourceTypeform.StartDate = types.StringValue(resp.Configuration.SourceTypeform.StartDate.Format(time.RFC3339))
		r.Configuration.SourceTypeform.Token = types.StringValue(resp.Configuration.SourceTypeform.Token)
	}
	if resp.Configuration.SourceUsCensus != nil {
		r.Configuration.SourceUsCensus = &SourceUsCensus{}
		r.Configuration.SourceUsCensus.APIKey = types.StringValue(resp.Configuration.SourceUsCensus.APIKey)
		if resp.Configuration.SourceUsCensus.QueryParams != nil {
			r.Configuration.SourceUsCensus.QueryParams = types.StringValue(*resp.Configuration.SourceUsCensus.QueryParams)
		} else {
			r.Configuration.SourceUsCensus.QueryParams = types.StringNull()
		}
		r.Configuration.SourceUsCensus.QueryPath = types.StringValue(resp.Configuration.SourceUsCensus.QueryPath)
		r.Configuration.SourceUsCensus.SourceType = types.StringValue(string(resp.Configuration.SourceUsCensus.SourceType))
	}
	if resp.Configuration.SourceVantage != nil {
		r.Configuration.SourceVantage = &SourceVantage{}
		r.Configuration.SourceVantage.AccessToken = types.StringValue(resp.Configuration.SourceVantage.AccessToken)
		r.Configuration.SourceVantage.SourceType = types.StringValue(string(resp.Configuration.SourceVantage.SourceType))
	}
	if resp.Configuration.SourceWebflow != nil {
		r.Configuration.SourceWebflow = &SourceWebflow{}
		r.Configuration.SourceWebflow.APIKey = types.StringValue(resp.Configuration.SourceWebflow.APIKey)
		r.Configuration.SourceWebflow.SiteID = types.StringValue(resp.Configuration.SourceWebflow.SiteID)
		r.Configuration.SourceWebflow.SourceType = types.StringValue(string(resp.Configuration.SourceWebflow.SourceType))
	}
	if resp.Configuration.SourceWhiskyHunter != nil {
		r.Configuration.SourceWhiskyHunter = &SourceWhiskyHunter{}
		r.Configuration.SourceWhiskyHunter.SourceType = types.StringValue(string(resp.Configuration.SourceWhiskyHunter.SourceType))
	}
	if resp.Configuration.SourceWikipediaPageviews != nil {
		r.Configuration.SourceWikipediaPageviews = &SourceWikipediaPageviews{}
		r.Configuration.SourceWikipediaPageviews.Access = types.StringValue(resp.Configuration.SourceWikipediaPageviews.Access)
		r.Configuration.SourceWikipediaPageviews.Agent = types.StringValue(resp.Configuration.SourceWikipediaPageviews.Agent)
		r.Configuration.SourceWikipediaPageviews.Article = types.StringValue(resp.Configuration.SourceWikipediaPageviews.Article)
		r.Configuration.SourceWikipediaPageviews.Country = types.StringValue(resp.Configuration.SourceWikipediaPageviews.Country)
		r.Configuration.SourceWikipediaPageviews.End = types.StringValue(resp.Configuration.SourceWikipediaPageviews.End)
		r.Configuration.SourceWikipediaPageviews.Project = types.StringValue(resp.Configuration.SourceWikipediaPageviews.Project)
		r.Configuration.SourceWikipediaPageviews.SourceType = types.StringValue(string(resp.Configuration.SourceWikipediaPageviews.SourceType))
		r.Configuration.SourceWikipediaPageviews.Start = types.StringValue(resp.Configuration.SourceWikipediaPageviews.Start)
	}
	if resp.Configuration.SourceWoocommerce != nil {
		r.Configuration.SourceWoocommerce = &SourceWoocommerce{}
		r.Configuration.SourceWoocommerce.APIKey = types.StringValue(resp.Configuration.SourceWoocommerce.APIKey)
		r.Configuration.SourceWoocommerce.APISecret = types.StringValue(resp.Configuration.SourceWoocommerce.APISecret)
		r.Configuration.SourceWoocommerce.Shop = types.StringValue(resp.Configuration.SourceWoocommerce.Shop)
		r.Configuration.SourceWoocommerce.SourceType = types.StringValue(string(resp.Configuration.SourceWoocommerce.SourceType))
		r.Configuration.SourceWoocommerce.StartDate = types.StringValue(resp.Configuration.SourceWoocommerce.StartDate.String())
	}
	if resp.Configuration.SourceXero != nil {
		r.Configuration.SourceXero = &SourceXero{}
		r.Configuration.SourceXero.Authentication.AccessToken = types.StringValue(resp.Configuration.SourceXero.Authentication.AccessToken)
		r.Configuration.SourceXero.Authentication.ClientID = types.StringValue(resp.Configuration.SourceXero.Authentication.ClientID)
		r.Configuration.SourceXero.Authentication.ClientSecret = types.StringValue(resp.Configuration.SourceXero.Authentication.ClientSecret)
		r.Configuration.SourceXero.Authentication.RefreshToken = types.StringValue(resp.Configuration.SourceXero.Authentication.RefreshToken)
		r.Configuration.SourceXero.Authentication.TokenExpiryDate = types.StringValue(resp.Configuration.SourceXero.Authentication.TokenExpiryDate)
		r.Configuration.SourceXero.SourceType = types.StringValue(string(resp.Configuration.SourceXero.SourceType))
		r.Configuration.SourceXero.StartDate = types.StringValue(resp.Configuration.SourceXero.StartDate.Format(time.RFC3339))
		r.Configuration.SourceXero.TenantID = types.StringValue(resp.Configuration.SourceXero.TenantID)
	}
	if resp.Configuration.SourceXkcd != nil {
		r.Configuration.SourceXkcd = &SourceXkcd{}
		r.Configuration.SourceXkcd.SourceType = types.StringValue(string(resp.Configuration.SourceXkcd.SourceType))
	}
	if resp.Configuration.SourceYandexMetrica != nil {
		r.Configuration.SourceYandexMetrica = &SourceYandexMetrica{}
		r.Configuration.SourceYandexMetrica.AuthToken = types.StringValue(resp.Configuration.SourceYandexMetrica.AuthToken)
		r.Configuration.SourceYandexMetrica.CounterID = types.StringValue(resp.Configuration.SourceYandexMetrica.CounterID)
		if resp.Configuration.SourceYandexMetrica.EndDate != nil {
			r.Configuration.SourceYandexMetrica.EndDate = types.StringValue(resp.Configuration.SourceYandexMetrica.EndDate.String())
		} else {
			r.Configuration.SourceYandexMetrica.EndDate = types.StringNull()
		}
		r.Configuration.SourceYandexMetrica.SourceType = types.StringValue(string(resp.Configuration.SourceYandexMetrica.SourceType))
		r.Configuration.SourceYandexMetrica.StartDate = types.StringValue(resp.Configuration.SourceYandexMetrica.StartDate.String())
	}
	if resp.Configuration.SourceYounium != nil {
		r.Configuration.SourceYounium = &SourceYounium{}
		r.Configuration.SourceYounium.LegalEntity = types.StringValue(resp.Configuration.SourceYounium.LegalEntity)
		r.Configuration.SourceYounium.Password = types.StringValue(resp.Configuration.SourceYounium.Password)
		if resp.Configuration.SourceYounium.Playground != nil {
			r.Configuration.SourceYounium.Playground = types.BoolValue(*resp.Configuration.SourceYounium.Playground)
		} else {
			r.Configuration.SourceYounium.Playground = types.BoolNull()
		}
		r.Configuration.SourceYounium.SourceType = types.StringValue(string(resp.Configuration.SourceYounium.SourceType))
		r.Configuration.SourceYounium.Username = types.StringValue(resp.Configuration.SourceYounium.Username)
	}
	if resp.Configuration.SourceYoutubeAnalytics != nil {
		r.Configuration.SourceYoutubeAnalytics = &SourceYoutubeAnalytics{}
		r.Configuration.SourceYoutubeAnalytics.Credentials.ClientID = types.StringValue(resp.Configuration.SourceYoutubeAnalytics.Credentials.ClientID)
		r.Configuration.SourceYoutubeAnalytics.Credentials.ClientSecret = types.StringValue(resp.Configuration.SourceYoutubeAnalytics.Credentials.ClientSecret)
		r.Configuration.SourceYoutubeAnalytics.Credentials.RefreshToken = types.StringValue(resp.Configuration.SourceYoutubeAnalytics.Credentials.RefreshToken)
		r.Configuration.SourceYoutubeAnalytics.SourceType = types.StringValue(string(resp.Configuration.SourceYoutubeAnalytics.SourceType))
	}
	if resp.Configuration.SourceZendeskChat != nil {
		r.Configuration.SourceZendeskChat = &SourceZendeskChat{}
		if resp.Configuration.SourceZendeskChat.Credentials == nil {
			r.Configuration.SourceZendeskChat.Credentials = nil
		} else {
			r.Configuration.SourceZendeskChat.Credentials = &SourceZendeskChatAuthorizationMethod{}
			if resp.Configuration.SourceZendeskChat.Credentials.SourceZendeskChatAuthorizationMethodOAuth20 != nil {
				r.Configuration.SourceZendeskChat.Credentials.SourceZendeskChatAuthorizationMethodOAuth20 = &SourceZendeskChatAuthorizationMethodOAuth20{}
				if resp.Configuration.SourceZendeskChat.Credentials.SourceZendeskChatAuthorizationMethodOAuth20.AccessToken != nil {
					r.Configuration.SourceZendeskChat.Credentials.SourceZendeskChatAuthorizationMethodOAuth20.AccessToken = types.StringValue(*resp.Configuration.SourceZendeskChat.Credentials.SourceZendeskChatAuthorizationMethodOAuth20.AccessToken)
				} else {
					r.Configuration.SourceZendeskChat.Credentials.SourceZendeskChatAuthorizationMethodOAuth20.AccessToken = types.StringNull()
				}
				if resp.Configuration.SourceZendeskChat.Credentials.SourceZendeskChatAuthorizationMethodOAuth20.ClientID != nil {
					r.Configuration.SourceZendeskChat.Credentials.SourceZendeskChatAuthorizationMethodOAuth20.ClientID = types.StringValue(*resp.Configuration.SourceZendeskChat.Credentials.SourceZendeskChatAuthorizationMethodOAuth20.ClientID)
				} else {
					r.Configuration.SourceZendeskChat.Credentials.SourceZendeskChatAuthorizationMethodOAuth20.ClientID = types.StringNull()
				}
				if resp.Configuration.SourceZendeskChat.Credentials.SourceZendeskChatAuthorizationMethodOAuth20.ClientSecret != nil {
					r.Configuration.SourceZendeskChat.Credentials.SourceZendeskChatAuthorizationMethodOAuth20.ClientSecret = types.StringValue(*resp.Configuration.SourceZendeskChat.Credentials.SourceZendeskChatAuthorizationMethodOAuth20.ClientSecret)
				} else {
					r.Configuration.SourceZendeskChat.Credentials.SourceZendeskChatAuthorizationMethodOAuth20.ClientSecret = types.StringNull()
				}
				r.Configuration.SourceZendeskChat.Credentials.SourceZendeskChatAuthorizationMethodOAuth20.Credentials = types.StringValue(string(resp.Configuration.SourceZendeskChat.Credentials.SourceZendeskChatAuthorizationMethodOAuth20.Credentials))
				if resp.Configuration.SourceZendeskChat.Credentials.SourceZendeskChatAuthorizationMethodOAuth20.RefreshToken != nil {
					r.Configuration.SourceZendeskChat.Credentials.SourceZendeskChatAuthorizationMethodOAuth20.RefreshToken = types.StringValue(*resp.Configuration.SourceZendeskChat.Credentials.SourceZendeskChatAuthorizationMethodOAuth20.RefreshToken)
				} else {
					r.Configuration.SourceZendeskChat.Credentials.SourceZendeskChatAuthorizationMethodOAuth20.RefreshToken = types.StringNull()
				}
			}
			if resp.Configuration.SourceZendeskChat.Credentials.SourceZendeskChatAuthorizationMethodAccessToken != nil {
				r.Configuration.SourceZendeskChat.Credentials.SourceZendeskChatAuthorizationMethodAccessToken = &SourceZendeskChatAuthorizationMethodAccessToken{}
				r.Configuration.SourceZendeskChat.Credentials.SourceZendeskChatAuthorizationMethodAccessToken.AccessToken = types.StringValue(resp.Configuration.SourceZendeskChat.Credentials.SourceZendeskChatAuthorizationMethodAccessToken.AccessToken)
				r.Configuration.SourceZendeskChat.Credentials.SourceZendeskChatAuthorizationMethodAccessToken.Credentials = types.StringValue(string(resp.Configuration.SourceZendeskChat.Credentials.SourceZendeskChatAuthorizationMethodAccessToken.Credentials))
			}
		}
		r.Configuration.SourceZendeskChat.SourceType = types.StringValue(string(resp.Configuration.SourceZendeskChat.SourceType))
		r.Configuration.SourceZendeskChat.StartDate = types.StringValue(resp.Configuration.SourceZendeskChat.StartDate.Format(time.RFC3339))
		if resp.Configuration.SourceZendeskChat.Subdomain != nil {
			r.Configuration.SourceZendeskChat.Subdomain = types.StringValue(*resp.Configuration.SourceZendeskChat.Subdomain)
		} else {
			r.Configuration.SourceZendeskChat.Subdomain = types.StringNull()
		}
	}
	if resp.Configuration.SourceZendeskSunshine != nil {
		r.Configuration.SourceZendeskSunshine = &SourceZendeskSunshine{}
		if resp.Configuration.SourceZendeskSunshine.Credentials == nil {
			r.Configuration.SourceZendeskSunshine.Credentials = nil
		} else {
			r.Configuration.SourceZendeskSunshine.Credentials = &SourceZendeskSunshineAuthorizationMethod{}
			if resp.Configuration.SourceZendeskSunshine.Credentials.SourceZendeskSunshineAuthorizationMethodOAuth20 != nil {
				r.Configuration.SourceZendeskSunshine.Credentials.SourceZendeskSunshineAuthorizationMethodOAuth20 = &SourceZendeskSunshineAuthorizationMethodOAuth20{}
				r.Configuration.SourceZendeskSunshine.Credentials.SourceZendeskSunshineAuthorizationMethodOAuth20.AccessToken = types.StringValue(resp.Configuration.SourceZendeskSunshine.Credentials.SourceZendeskSunshineAuthorizationMethodOAuth20.AccessToken)
				r.Configuration.SourceZendeskSunshine.Credentials.SourceZendeskSunshineAuthorizationMethodOAuth20.AuthMethod = types.StringValue(string(resp.Configuration.SourceZendeskSunshine.Credentials.SourceZendeskSunshineAuthorizationMethodOAuth20.AuthMethod))
				r.Configuration.SourceZendeskSunshine.Credentials.SourceZendeskSunshineAuthorizationMethodOAuth20.ClientID = types.StringValue(resp.Configuration.SourceZendeskSunshine.Credentials.SourceZendeskSunshineAuthorizationMethodOAuth20.ClientID)
				r.Configuration.SourceZendeskSunshine.Credentials.SourceZendeskSunshineAuthorizationMethodOAuth20.ClientSecret = types.StringValue(resp.Configuration.SourceZendeskSunshine.Credentials.SourceZendeskSunshineAuthorizationMethodOAuth20.ClientSecret)
			}
			if resp.Configuration.SourceZendeskSunshine.Credentials.SourceZendeskSunshineAuthorizationMethodAPIToken != nil {
				r.Configuration.SourceZendeskSunshine.Credentials.SourceZendeskSunshineAuthorizationMethodAPIToken = &SourceZendeskSunshineAuthorizationMethodAPIToken{}
				r.Configuration.SourceZendeskSunshine.Credentials.SourceZendeskSunshineAuthorizationMethodAPIToken.APIToken = types.StringValue(resp.Configuration.SourceZendeskSunshine.Credentials.SourceZendeskSunshineAuthorizationMethodAPIToken.APIToken)
				r.Configuration.SourceZendeskSunshine.Credentials.SourceZendeskSunshineAuthorizationMethodAPIToken.AuthMethod = types.StringValue(string(resp.Configuration.SourceZendeskSunshine.Credentials.SourceZendeskSunshineAuthorizationMethodAPIToken.AuthMethod))
				r.Configuration.SourceZendeskSunshine.Credentials.SourceZendeskSunshineAuthorizationMethodAPIToken.Email = types.StringValue(resp.Configuration.SourceZendeskSunshine.Credentials.SourceZendeskSunshineAuthorizationMethodAPIToken.Email)
			}
		}
		r.Configuration.SourceZendeskSunshine.SourceType = types.StringValue(string(resp.Configuration.SourceZendeskSunshine.SourceType))
		r.Configuration.SourceZendeskSunshine.StartDate = types.StringValue(resp.Configuration.SourceZendeskSunshine.StartDate)
		r.Configuration.SourceZendeskSunshine.Subdomain = types.StringValue(resp.Configuration.SourceZendeskSunshine.Subdomain)
	}
	if resp.Configuration.SourceZendeskSupport != nil {
		r.Configuration.SourceZendeskSupport = &SourceZendeskSupport{}
		if resp.Configuration.SourceZendeskSupport.Credentials == nil {
			r.Configuration.SourceZendeskSupport.Credentials = nil
		} else {
			r.Configuration.SourceZendeskSupport.Credentials = &SourceZendeskSupportAuthentication{}
			if resp.Configuration.SourceZendeskSupport.Credentials.SourceZendeskSupportAuthenticationOAuth20 != nil {
				r.Configuration.SourceZendeskSupport.Credentials.SourceZendeskSupportAuthenticationOAuth20 = &SourceZendeskSupportAuthenticationOAuth20{}
				r.Configuration.SourceZendeskSupport.Credentials.SourceZendeskSupportAuthenticationOAuth20.AccessToken = types.StringValue(resp.Configuration.SourceZendeskSupport.Credentials.SourceZendeskSupportAuthenticationOAuth20.AccessToken)
				if resp.Configuration.SourceZendeskSupport.Credentials.SourceZendeskSupportAuthenticationOAuth20.Credentials != nil {
					r.Configuration.SourceZendeskSupport.Credentials.SourceZendeskSupportAuthenticationOAuth20.Credentials = types.StringValue(string(*resp.Configuration.SourceZendeskSupport.Credentials.SourceZendeskSupportAuthenticationOAuth20.Credentials))
				} else {
					r.Configuration.SourceZendeskSupport.Credentials.SourceZendeskSupportAuthenticationOAuth20.Credentials = types.StringNull()
				}
			}
			if resp.Configuration.SourceZendeskSupport.Credentials.SourceZendeskSupportAuthenticationAPIToken != nil {
				r.Configuration.SourceZendeskSupport.Credentials.SourceZendeskSupportAuthenticationAPIToken = &SourceZendeskSupportAuthenticationAPIToken{}
				r.Configuration.SourceZendeskSupport.Credentials.SourceZendeskSupportAuthenticationAPIToken.APIToken = types.StringValue(resp.Configuration.SourceZendeskSupport.Credentials.SourceZendeskSupportAuthenticationAPIToken.APIToken)
				if resp.Configuration.SourceZendeskSupport.Credentials.SourceZendeskSupportAuthenticationAPIToken.Credentials != nil {
					r.Configuration.SourceZendeskSupport.Credentials.SourceZendeskSupportAuthenticationAPIToken.Credentials = types.StringValue(string(*resp.Configuration.SourceZendeskSupport.Credentials.SourceZendeskSupportAuthenticationAPIToken.Credentials))
				} else {
					r.Configuration.SourceZendeskSupport.Credentials.SourceZendeskSupportAuthenticationAPIToken.Credentials = types.StringNull()
				}
				r.Configuration.SourceZendeskSupport.Credentials.SourceZendeskSupportAuthenticationAPIToken.Email = types.StringValue(resp.Configuration.SourceZendeskSupport.Credentials.SourceZendeskSupportAuthenticationAPIToken.Email)
			}
		}
		if resp.Configuration.SourceZendeskSupport.IgnorePagination != nil {
			r.Configuration.SourceZendeskSupport.IgnorePagination = types.BoolValue(*resp.Configuration.SourceZendeskSupport.IgnorePagination)
		} else {
			r.Configuration.SourceZendeskSupport.IgnorePagination = types.BoolNull()
		}
		r.Configuration.SourceZendeskSupport.SourceType = types.StringValue(string(resp.Configuration.SourceZendeskSupport.SourceType))
		r.Configuration.SourceZendeskSupport.StartDate = types.StringValue(resp.Configuration.SourceZendeskSupport.StartDate.Format(time.RFC3339))
		r.Configuration.SourceZendeskSupport.Subdomain = types.StringValue(resp.Configuration.SourceZendeskSupport.Subdomain)
	}
	if resp.Configuration.SourceZendeskTalk != nil {
		r.Configuration.SourceZendeskTalk = &SourceZendeskTalk{}
		if resp.Configuration.SourceZendeskTalk.Credentials == nil {
			r.Configuration.SourceZendeskTalk.Credentials = nil
		} else {
			r.Configuration.SourceZendeskTalk.Credentials = &SourceZendeskTalkAuthentication{}
			if resp.Configuration.SourceZendeskTalk.Credentials.SourceZendeskTalkAuthenticationAPIToken != nil {
				r.Configuration.SourceZendeskTalk.Credentials.SourceZendeskTalkAuthenticationAPIToken = &SourceZendeskTalkAuthenticationAPIToken{}
				r.Configuration.SourceZendeskTalk.Credentials.SourceZendeskTalkAuthenticationAPIToken.APIToken = types.StringValue(resp.Configuration.SourceZendeskTalk.Credentials.SourceZendeskTalkAuthenticationAPIToken.APIToken)
				if resp.Configuration.SourceZendeskTalk.Credentials.SourceZendeskTalkAuthenticationAPIToken.AuthType != nil {
					r.Configuration.SourceZendeskTalk.Credentials.SourceZendeskTalkAuthenticationAPIToken.AuthType = types.StringValue(string(*resp.Configuration.SourceZendeskTalk.Credentials.SourceZendeskTalkAuthenticationAPIToken.AuthType))
				} else {
					r.Configuration.SourceZendeskTalk.Credentials.SourceZendeskTalkAuthenticationAPIToken.AuthType = types.StringNull()
				}
				r.Configuration.SourceZendeskTalk.Credentials.SourceZendeskTalkAuthenticationAPIToken.Email = types.StringValue(resp.Configuration.SourceZendeskTalk.Credentials.SourceZendeskTalkAuthenticationAPIToken.Email)
			}
			if resp.Configuration.SourceZendeskTalk.Credentials.SourceZendeskTalkAuthenticationOAuth20 != nil {
				r.Configuration.SourceZendeskTalk.Credentials.SourceZendeskTalkAuthenticationOAuth20 = &SourceZendeskTalkAuthenticationOAuth20{}
				r.Configuration.SourceZendeskTalk.Credentials.SourceZendeskTalkAuthenticationOAuth20.AccessToken = types.StringValue(resp.Configuration.SourceZendeskTalk.Credentials.SourceZendeskTalkAuthenticationOAuth20.AccessToken)
				if resp.Configuration.SourceZendeskTalk.Credentials.SourceZendeskTalkAuthenticationOAuth20.AuthType != nil {
					r.Configuration.SourceZendeskTalk.Credentials.SourceZendeskTalkAuthenticationOAuth20.AuthType = types.StringValue(string(*resp.Configuration.SourceZendeskTalk.Credentials.SourceZendeskTalkAuthenticationOAuth20.AuthType))
				} else {
					r.Configuration.SourceZendeskTalk.Credentials.SourceZendeskTalkAuthenticationOAuth20.AuthType = types.StringNull()
				}
			}
		}
		r.Configuration.SourceZendeskTalk.SourceType = types.StringValue(string(resp.Configuration.SourceZendeskTalk.SourceType))
		r.Configuration.SourceZendeskTalk.StartDate = types.StringValue(resp.Configuration.SourceZendeskTalk.StartDate.Format(time.RFC3339))
		r.Configuration.SourceZendeskTalk.Subdomain = types.StringValue(resp.Configuration.SourceZendeskTalk.Subdomain)
	}
	if resp.Configuration.SourceZenloop != nil {
		r.Configuration.SourceZenloop = &SourceZenloop{}
		r.Configuration.SourceZenloop.APIToken = types.StringValue(resp.Configuration.SourceZenloop.APIToken)
		if resp.Configuration.SourceZenloop.DateFrom != nil {
			r.Configuration.SourceZenloop.DateFrom = types.StringValue(*resp.Configuration.SourceZenloop.DateFrom)
		} else {
			r.Configuration.SourceZenloop.DateFrom = types.StringNull()
		}
		r.Configuration.SourceZenloop.SourceType = types.StringValue(string(resp.Configuration.SourceZenloop.SourceType))
		if resp.Configuration.SourceZenloop.SurveyGroupID != nil {
			r.Configuration.SourceZenloop.SurveyGroupID = types.StringValue(*resp.Configuration.SourceZenloop.SurveyGroupID)
		} else {
			r.Configuration.SourceZenloop.SurveyGroupID = types.StringNull()
		}
		if resp.Configuration.SourceZenloop.SurveyID != nil {
			r.Configuration.SourceZenloop.SurveyID = types.StringValue(*resp.Configuration.SourceZenloop.SurveyID)
		} else {
			r.Configuration.SourceZenloop.SurveyID = types.StringNull()
		}
	}
	if resp.Configuration.SourceZohoCrm != nil {
		r.Configuration.SourceZohoCrm = &SourceZohoCrm{}
		r.Configuration.SourceZohoCrm.ClientID = types.StringValue(resp.Configuration.SourceZohoCrm.ClientID)
		r.Configuration.SourceZohoCrm.ClientSecret = types.StringValue(resp.Configuration.SourceZohoCrm.ClientSecret)
		r.Configuration.SourceZohoCrm.DcRegion = types.StringValue(string(resp.Configuration.SourceZohoCrm.DcRegion))
		r.Configuration.SourceZohoCrm.Edition = types.StringValue(string(resp.Configuration.SourceZohoCrm.Edition))
		r.Configuration.SourceZohoCrm.Environment = types.StringValue(string(resp.Configuration.SourceZohoCrm.Environment))
		r.Configuration.SourceZohoCrm.RefreshToken = types.StringValue(resp.Configuration.SourceZohoCrm.RefreshToken)
		r.Configuration.SourceZohoCrm.SourceType = types.StringValue(string(resp.Configuration.SourceZohoCrm.SourceType))
		if resp.Configuration.SourceZohoCrm.StartDatetime != nil {
			r.Configuration.SourceZohoCrm.StartDatetime = types.StringValue(resp.Configuration.SourceZohoCrm.StartDatetime.Format(time.RFC3339))
		} else {
			r.Configuration.SourceZohoCrm.StartDatetime = types.StringNull()
		}
	}
	if resp.Configuration.SourceZoom != nil {
		r.Configuration.SourceZoom = &SourceZoom{}
		r.Configuration.SourceZoom.JwtToken = types.StringValue(resp.Configuration.SourceZoom.JwtToken)
		r.Configuration.SourceZoom.SourceType = types.StringValue(string(resp.Configuration.SourceZoom.SourceType))
	}
	if resp.Configuration.SourceZuora != nil {
		r.Configuration.SourceZuora = &SourceZuora{}
		r.Configuration.SourceZuora.ClientID = types.StringValue(resp.Configuration.SourceZuora.ClientID)
		r.Configuration.SourceZuora.ClientSecret = types.StringValue(resp.Configuration.SourceZuora.ClientSecret)
		if resp.Configuration.SourceZuora.IsSandbox != nil {
			r.Configuration.SourceZuora.IsSandbox = types.BoolValue(*resp.Configuration.SourceZuora.IsSandbox)
		} else {
			r.Configuration.SourceZuora.IsSandbox = types.BoolNull()
		}
		r.Configuration.SourceZuora.SourceType = types.StringValue(string(resp.Configuration.SourceZuora.SourceType))
		r.Configuration.SourceZuora.StartDate = types.StringValue(resp.Configuration.SourceZuora.StartDate)
		if resp.Configuration.SourceZuora.WindowInDays != nil {
			r.Configuration.SourceZuora.WindowInDays = types.Int64Value(*resp.Configuration.SourceZuora.WindowInDays)
		} else {
			r.Configuration.SourceZuora.WindowInDays = types.Int64Null()
		}
	}
	r.Name = types.StringValue(resp.Name)
	if resp.SecretID != nil {
		r.SecretID = types.StringValue(*resp.SecretID)
	} else {
		r.SecretID = types.StringNull()
	}
	r.WorkspaceID = types.StringValue(resp.WorkspaceID)

}
