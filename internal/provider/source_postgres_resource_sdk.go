// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"airbyte/internal/sdk/pkg/models/shared"
	"encoding/json"
)

func (r *SourcePostgresResourceModel) ToCreateSDKType() *shared.SourcePostgresCreateRequest {
	database := r.Configuration.Database.ValueString()
	host := r.Configuration.Host.ValueString()
	jdbcURLParams := new(string)
	if !r.Configuration.JdbcURLParams.IsUnknown() && !r.Configuration.JdbcURLParams.IsNull() {
		*jdbcURLParams = r.Configuration.JdbcURLParams.ValueString()
	} else {
		jdbcURLParams = nil
	}
	password := new(string)
	if !r.Configuration.Password.IsUnknown() && !r.Configuration.Password.IsNull() {
		*password = r.Configuration.Password.ValueString()
	} else {
		password = nil
	}
	port := r.Configuration.Port.ValueInt64()
	var replicationMethod *shared.SourcePostgresReplicationMethod
	var sourcePostgresReplicationMethodStandard *shared.SourcePostgresReplicationMethodStandard
	if r.Configuration.ReplicationMethod.SourcePostgresReplicationMethodStandard != nil {
		method := shared.SourcePostgresReplicationMethodStandardMethodEnum(r.Configuration.ReplicationMethod.SourcePostgresReplicationMethodStandard.Method.ValueString())
		sourcePostgresReplicationMethodStandard = &shared.SourcePostgresReplicationMethodStandard{
			Method: method,
		}
	}
	if sourcePostgresReplicationMethodStandard != nil {
		replicationMethod = &shared.SourcePostgresReplicationMethod{
			SourcePostgresReplicationMethodStandard: sourcePostgresReplicationMethodStandard,
		}
	}
	var sourcePostgresReplicationMethodLogicalReplicationCDC *shared.SourcePostgresReplicationMethodLogicalReplicationCDC
	if r.Configuration.ReplicationMethod.SourcePostgresReplicationMethodLogicalReplicationCDC != nil {
		initialWaitingSeconds := new(int64)
		if !r.Configuration.ReplicationMethod.SourcePostgresReplicationMethodLogicalReplicationCDC.InitialWaitingSeconds.IsUnknown() && !r.Configuration.ReplicationMethod.SourcePostgresReplicationMethodLogicalReplicationCDC.InitialWaitingSeconds.IsNull() {
			*initialWaitingSeconds = r.Configuration.ReplicationMethod.SourcePostgresReplicationMethodLogicalReplicationCDC.InitialWaitingSeconds.ValueInt64()
		} else {
			initialWaitingSeconds = nil
		}
		lsnCommitBehaviour := new(shared.SourcePostgresReplicationMethodLogicalReplicationCDCLSNCommitBehaviourEnum)
		if !r.Configuration.ReplicationMethod.SourcePostgresReplicationMethodLogicalReplicationCDC.LsnCommitBehaviour.IsUnknown() && !r.Configuration.ReplicationMethod.SourcePostgresReplicationMethodLogicalReplicationCDC.LsnCommitBehaviour.IsNull() {
			*lsnCommitBehaviour = shared.SourcePostgresReplicationMethodLogicalReplicationCDCLSNCommitBehaviourEnum(r.Configuration.ReplicationMethod.SourcePostgresReplicationMethodLogicalReplicationCDC.LsnCommitBehaviour.ValueString())
		} else {
			lsnCommitBehaviour = nil
		}
		method1 := shared.SourcePostgresReplicationMethodLogicalReplicationCDCMethodEnum(r.Configuration.ReplicationMethod.SourcePostgresReplicationMethodLogicalReplicationCDC.Method.ValueString())
		plugin := new(shared.SourcePostgresReplicationMethodLogicalReplicationCDCPluginEnum)
		if !r.Configuration.ReplicationMethod.SourcePostgresReplicationMethodLogicalReplicationCDC.Plugin.IsUnknown() && !r.Configuration.ReplicationMethod.SourcePostgresReplicationMethodLogicalReplicationCDC.Plugin.IsNull() {
			*plugin = shared.SourcePostgresReplicationMethodLogicalReplicationCDCPluginEnum(r.Configuration.ReplicationMethod.SourcePostgresReplicationMethodLogicalReplicationCDC.Plugin.ValueString())
		} else {
			plugin = nil
		}
		publication := r.Configuration.ReplicationMethod.SourcePostgresReplicationMethodLogicalReplicationCDC.Publication.ValueString()
		replicationSlot := r.Configuration.ReplicationMethod.SourcePostgresReplicationMethodLogicalReplicationCDC.ReplicationSlot.ValueString()
		additionalProperties := make(map[string]interface{})
		for additionalPropertiesKey, additionalPropertiesValue := range r.Configuration.ReplicationMethod.SourcePostgresReplicationMethodLogicalReplicationCDC.AdditionalProperties {
			var additionalPropertiesInst interface{}
			_ = json.Unmarshal([]byte(additionalPropertiesValue.ValueString()), &additionalPropertiesInst)
			additionalProperties[additionalPropertiesKey] = additionalPropertiesInst
		}
		sourcePostgresReplicationMethodLogicalReplicationCDC = &shared.SourcePostgresReplicationMethodLogicalReplicationCDC{
			InitialWaitingSeconds: initialWaitingSeconds,
			LsnCommitBehaviour:    lsnCommitBehaviour,
			Method:                method1,
			Plugin:                plugin,
			Publication:           publication,
			ReplicationSlot:       replicationSlot,
			AdditionalProperties:  additionalProperties,
		}
	}
	if sourcePostgresReplicationMethodLogicalReplicationCDC != nil {
		replicationMethod = &shared.SourcePostgresReplicationMethod{
			SourcePostgresReplicationMethodLogicalReplicationCDC: sourcePostgresReplicationMethodLogicalReplicationCDC,
		}
	}
	schemas := make([]string, 0)
	for _, schemasItem := range r.Configuration.Schemas {
		schemas = append(schemas, schemasItem.ValueString())
	}
	sourceType := shared.SourcePostgresPostgresEnum(r.Configuration.SourceType.ValueString())
	var sslMode *shared.SourcePostgresSSLModes
	var sourcePostgresSSLModesDisable *shared.SourcePostgresSSLModesDisable
	if r.Configuration.SslMode.SourcePostgresSSLModesDisable != nil {
		mode := shared.SourcePostgresSSLModesDisableModeEnum(r.Configuration.SslMode.SourcePostgresSSLModesDisable.Mode.ValueString())
		additionalProperties1 := make(map[string]interface{})
		for additionalPropertiesKey1, additionalPropertiesValue1 := range r.Configuration.SslMode.SourcePostgresSSLModesDisable.AdditionalProperties {
			var additionalPropertiesInst1 interface{}
			_ = json.Unmarshal([]byte(additionalPropertiesValue1.ValueString()), &additionalPropertiesInst1)
			additionalProperties1[additionalPropertiesKey1] = additionalPropertiesInst1
		}
		sourcePostgresSSLModesDisable = &shared.SourcePostgresSSLModesDisable{
			Mode:                 mode,
			AdditionalProperties: additionalProperties1,
		}
	}
	if sourcePostgresSSLModesDisable != nil {
		sslMode = &shared.SourcePostgresSSLModes{
			SourcePostgresSSLModesDisable: sourcePostgresSSLModesDisable,
		}
	}
	var sourcePostgresSSLModesAllow *shared.SourcePostgresSSLModesAllow
	if r.Configuration.SslMode.SourcePostgresSSLModesAllow != nil {
		mode1 := shared.SourcePostgresSSLModesAllowModeEnum(r.Configuration.SslMode.SourcePostgresSSLModesAllow.Mode.ValueString())
		additionalProperties2 := make(map[string]interface{})
		for additionalPropertiesKey2, additionalPropertiesValue2 := range r.Configuration.SslMode.SourcePostgresSSLModesAllow.AdditionalProperties {
			var additionalPropertiesInst2 interface{}
			_ = json.Unmarshal([]byte(additionalPropertiesValue2.ValueString()), &additionalPropertiesInst2)
			additionalProperties2[additionalPropertiesKey2] = additionalPropertiesInst2
		}
		sourcePostgresSSLModesAllow = &shared.SourcePostgresSSLModesAllow{
			Mode:                 mode1,
			AdditionalProperties: additionalProperties2,
		}
	}
	if sourcePostgresSSLModesAllow != nil {
		sslMode = &shared.SourcePostgresSSLModes{
			SourcePostgresSSLModesAllow: sourcePostgresSSLModesAllow,
		}
	}
	var sourcePostgresSSLModesPrefer *shared.SourcePostgresSSLModesPrefer
	if r.Configuration.SslMode.SourcePostgresSSLModesPrefer != nil {
		mode2 := shared.SourcePostgresSSLModesPreferModeEnum(r.Configuration.SslMode.SourcePostgresSSLModesPrefer.Mode.ValueString())
		additionalProperties3 := make(map[string]interface{})
		for additionalPropertiesKey3, additionalPropertiesValue3 := range r.Configuration.SslMode.SourcePostgresSSLModesPrefer.AdditionalProperties {
			var additionalPropertiesInst3 interface{}
			_ = json.Unmarshal([]byte(additionalPropertiesValue3.ValueString()), &additionalPropertiesInst3)
			additionalProperties3[additionalPropertiesKey3] = additionalPropertiesInst3
		}
		sourcePostgresSSLModesPrefer = &shared.SourcePostgresSSLModesPrefer{
			Mode:                 mode2,
			AdditionalProperties: additionalProperties3,
		}
	}
	if sourcePostgresSSLModesPrefer != nil {
		sslMode = &shared.SourcePostgresSSLModes{
			SourcePostgresSSLModesPrefer: sourcePostgresSSLModesPrefer,
		}
	}
	var sourcePostgresSSLModesRequire *shared.SourcePostgresSSLModesRequire
	if r.Configuration.SslMode.SourcePostgresSSLModesRequire != nil {
		mode3 := shared.SourcePostgresSSLModesRequireModeEnum(r.Configuration.SslMode.SourcePostgresSSLModesRequire.Mode.ValueString())
		additionalProperties4 := make(map[string]interface{})
		for additionalPropertiesKey4, additionalPropertiesValue4 := range r.Configuration.SslMode.SourcePostgresSSLModesRequire.AdditionalProperties {
			var additionalPropertiesInst4 interface{}
			_ = json.Unmarshal([]byte(additionalPropertiesValue4.ValueString()), &additionalPropertiesInst4)
			additionalProperties4[additionalPropertiesKey4] = additionalPropertiesInst4
		}
		sourcePostgresSSLModesRequire = &shared.SourcePostgresSSLModesRequire{
			Mode:                 mode3,
			AdditionalProperties: additionalProperties4,
		}
	}
	if sourcePostgresSSLModesRequire != nil {
		sslMode = &shared.SourcePostgresSSLModes{
			SourcePostgresSSLModesRequire: sourcePostgresSSLModesRequire,
		}
	}
	var sourcePostgresSSLModesVerifyCa *shared.SourcePostgresSSLModesVerifyCa
	if r.Configuration.SslMode.SourcePostgresSSLModesVerifyCa != nil {
		caCertificate := r.Configuration.SslMode.SourcePostgresSSLModesVerifyCa.CaCertificate.ValueString()
		clientCertificate := new(string)
		if !r.Configuration.SslMode.SourcePostgresSSLModesVerifyCa.ClientCertificate.IsUnknown() && !r.Configuration.SslMode.SourcePostgresSSLModesVerifyCa.ClientCertificate.IsNull() {
			*clientCertificate = r.Configuration.SslMode.SourcePostgresSSLModesVerifyCa.ClientCertificate.ValueString()
		} else {
			clientCertificate = nil
		}
		clientKey := new(string)
		if !r.Configuration.SslMode.SourcePostgresSSLModesVerifyCa.ClientKey.IsUnknown() && !r.Configuration.SslMode.SourcePostgresSSLModesVerifyCa.ClientKey.IsNull() {
			*clientKey = r.Configuration.SslMode.SourcePostgresSSLModesVerifyCa.ClientKey.ValueString()
		} else {
			clientKey = nil
		}
		clientKeyPassword := new(string)
		if !r.Configuration.SslMode.SourcePostgresSSLModesVerifyCa.ClientKeyPassword.IsUnknown() && !r.Configuration.SslMode.SourcePostgresSSLModesVerifyCa.ClientKeyPassword.IsNull() {
			*clientKeyPassword = r.Configuration.SslMode.SourcePostgresSSLModesVerifyCa.ClientKeyPassword.ValueString()
		} else {
			clientKeyPassword = nil
		}
		mode4 := shared.SourcePostgresSSLModesVerifyCaModeEnum(r.Configuration.SslMode.SourcePostgresSSLModesVerifyCa.Mode.ValueString())
		additionalProperties5 := make(map[string]interface{})
		for additionalPropertiesKey5, additionalPropertiesValue5 := range r.Configuration.SslMode.SourcePostgresSSLModesVerifyCa.AdditionalProperties {
			var additionalPropertiesInst5 interface{}
			_ = json.Unmarshal([]byte(additionalPropertiesValue5.ValueString()), &additionalPropertiesInst5)
			additionalProperties5[additionalPropertiesKey5] = additionalPropertiesInst5
		}
		sourcePostgresSSLModesVerifyCa = &shared.SourcePostgresSSLModesVerifyCa{
			CaCertificate:        caCertificate,
			ClientCertificate:    clientCertificate,
			ClientKey:            clientKey,
			ClientKeyPassword:    clientKeyPassword,
			Mode:                 mode4,
			AdditionalProperties: additionalProperties5,
		}
	}
	if sourcePostgresSSLModesVerifyCa != nil {
		sslMode = &shared.SourcePostgresSSLModes{
			SourcePostgresSSLModesVerifyCa: sourcePostgresSSLModesVerifyCa,
		}
	}
	var sourcePostgresSSLModesVerifyFull *shared.SourcePostgresSSLModesVerifyFull
	if r.Configuration.SslMode.SourcePostgresSSLModesVerifyFull != nil {
		caCertificate1 := r.Configuration.SslMode.SourcePostgresSSLModesVerifyFull.CaCertificate.ValueString()
		clientCertificate1 := new(string)
		if !r.Configuration.SslMode.SourcePostgresSSLModesVerifyFull.ClientCertificate.IsUnknown() && !r.Configuration.SslMode.SourcePostgresSSLModesVerifyFull.ClientCertificate.IsNull() {
			*clientCertificate1 = r.Configuration.SslMode.SourcePostgresSSLModesVerifyFull.ClientCertificate.ValueString()
		} else {
			clientCertificate1 = nil
		}
		clientKey1 := new(string)
		if !r.Configuration.SslMode.SourcePostgresSSLModesVerifyFull.ClientKey.IsUnknown() && !r.Configuration.SslMode.SourcePostgresSSLModesVerifyFull.ClientKey.IsNull() {
			*clientKey1 = r.Configuration.SslMode.SourcePostgresSSLModesVerifyFull.ClientKey.ValueString()
		} else {
			clientKey1 = nil
		}
		clientKeyPassword1 := new(string)
		if !r.Configuration.SslMode.SourcePostgresSSLModesVerifyFull.ClientKeyPassword.IsUnknown() && !r.Configuration.SslMode.SourcePostgresSSLModesVerifyFull.ClientKeyPassword.IsNull() {
			*clientKeyPassword1 = r.Configuration.SslMode.SourcePostgresSSLModesVerifyFull.ClientKeyPassword.ValueString()
		} else {
			clientKeyPassword1 = nil
		}
		mode5 := shared.SourcePostgresSSLModesVerifyFullModeEnum(r.Configuration.SslMode.SourcePostgresSSLModesVerifyFull.Mode.ValueString())
		additionalProperties6 := make(map[string]interface{})
		for additionalPropertiesKey6, additionalPropertiesValue6 := range r.Configuration.SslMode.SourcePostgresSSLModesVerifyFull.AdditionalProperties {
			var additionalPropertiesInst6 interface{}
			_ = json.Unmarshal([]byte(additionalPropertiesValue6.ValueString()), &additionalPropertiesInst6)
			additionalProperties6[additionalPropertiesKey6] = additionalPropertiesInst6
		}
		sourcePostgresSSLModesVerifyFull = &shared.SourcePostgresSSLModesVerifyFull{
			CaCertificate:        caCertificate1,
			ClientCertificate:    clientCertificate1,
			ClientKey:            clientKey1,
			ClientKeyPassword:    clientKeyPassword1,
			Mode:                 mode5,
			AdditionalProperties: additionalProperties6,
		}
	}
	if sourcePostgresSSLModesVerifyFull != nil {
		sslMode = &shared.SourcePostgresSSLModes{
			SourcePostgresSSLModesVerifyFull: sourcePostgresSSLModesVerifyFull,
		}
	}
	var tunnelMethod *shared.SourcePostgresSSHTunnelMethod
	var sourcePostgresSSHTunnelMethodNoTunnel *shared.SourcePostgresSSHTunnelMethodNoTunnel
	if r.Configuration.TunnelMethod.SourcePostgresSSHTunnelMethodNoTunnel != nil {
		tunnelMethod1 := shared.SourcePostgresSSHTunnelMethodNoTunnelTunnelMethodEnum(r.Configuration.TunnelMethod.SourcePostgresSSHTunnelMethodNoTunnel.TunnelMethod.ValueString())
		sourcePostgresSSHTunnelMethodNoTunnel = &shared.SourcePostgresSSHTunnelMethodNoTunnel{
			TunnelMethod: tunnelMethod1,
		}
	}
	if sourcePostgresSSHTunnelMethodNoTunnel != nil {
		tunnelMethod = &shared.SourcePostgresSSHTunnelMethod{
			SourcePostgresSSHTunnelMethodNoTunnel: sourcePostgresSSHTunnelMethodNoTunnel,
		}
	}
	var sourcePostgresSSHTunnelMethodSSHKeyAuthentication *shared.SourcePostgresSSHTunnelMethodSSHKeyAuthentication
	if r.Configuration.TunnelMethod.SourcePostgresSSHTunnelMethodSSHKeyAuthentication != nil {
		sshKey := r.Configuration.TunnelMethod.SourcePostgresSSHTunnelMethodSSHKeyAuthentication.SSHKey.ValueString()
		tunnelHost := r.Configuration.TunnelMethod.SourcePostgresSSHTunnelMethodSSHKeyAuthentication.TunnelHost.ValueString()
		tunnelMethod2 := shared.SourcePostgresSSHTunnelMethodSSHKeyAuthenticationTunnelMethodEnum(r.Configuration.TunnelMethod.SourcePostgresSSHTunnelMethodSSHKeyAuthentication.TunnelMethod.ValueString())
		tunnelPort := r.Configuration.TunnelMethod.SourcePostgresSSHTunnelMethodSSHKeyAuthentication.TunnelPort.ValueInt64()
		tunnelUser := r.Configuration.TunnelMethod.SourcePostgresSSHTunnelMethodSSHKeyAuthentication.TunnelUser.ValueString()
		sourcePostgresSSHTunnelMethodSSHKeyAuthentication = &shared.SourcePostgresSSHTunnelMethodSSHKeyAuthentication{
			SSHKey:       sshKey,
			TunnelHost:   tunnelHost,
			TunnelMethod: tunnelMethod2,
			TunnelPort:   tunnelPort,
			TunnelUser:   tunnelUser,
		}
	}
	if sourcePostgresSSHTunnelMethodSSHKeyAuthentication != nil {
		tunnelMethod = &shared.SourcePostgresSSHTunnelMethod{
			SourcePostgresSSHTunnelMethodSSHKeyAuthentication: sourcePostgresSSHTunnelMethodSSHKeyAuthentication,
		}
	}
	var sourcePostgresSSHTunnelMethodPasswordAuthentication *shared.SourcePostgresSSHTunnelMethodPasswordAuthentication
	if r.Configuration.TunnelMethod.SourcePostgresSSHTunnelMethodPasswordAuthentication != nil {
		tunnelHost1 := r.Configuration.TunnelMethod.SourcePostgresSSHTunnelMethodPasswordAuthentication.TunnelHost.ValueString()
		tunnelMethod3 := shared.SourcePostgresSSHTunnelMethodPasswordAuthenticationTunnelMethodEnum(r.Configuration.TunnelMethod.SourcePostgresSSHTunnelMethodPasswordAuthentication.TunnelMethod.ValueString())
		tunnelPort1 := r.Configuration.TunnelMethod.SourcePostgresSSHTunnelMethodPasswordAuthentication.TunnelPort.ValueInt64()
		tunnelUser1 := r.Configuration.TunnelMethod.SourcePostgresSSHTunnelMethodPasswordAuthentication.TunnelUser.ValueString()
		tunnelUserPassword := r.Configuration.TunnelMethod.SourcePostgresSSHTunnelMethodPasswordAuthentication.TunnelUserPassword.ValueString()
		sourcePostgresSSHTunnelMethodPasswordAuthentication = &shared.SourcePostgresSSHTunnelMethodPasswordAuthentication{
			TunnelHost:         tunnelHost1,
			TunnelMethod:       tunnelMethod3,
			TunnelPort:         tunnelPort1,
			TunnelUser:         tunnelUser1,
			TunnelUserPassword: tunnelUserPassword,
		}
	}
	if sourcePostgresSSHTunnelMethodPasswordAuthentication != nil {
		tunnelMethod = &shared.SourcePostgresSSHTunnelMethod{
			SourcePostgresSSHTunnelMethodPasswordAuthentication: sourcePostgresSSHTunnelMethodPasswordAuthentication,
		}
	}
	username := r.Configuration.Username.ValueString()
	configuration := shared.SourcePostgres{
		Database:          database,
		Host:              host,
		JdbcURLParams:     jdbcURLParams,
		Password:          password,
		Port:              port,
		ReplicationMethod: replicationMethod,
		Schemas:           schemas,
		SourceType:        sourceType,
		SslMode:           sslMode,
		TunnelMethod:      tunnelMethod,
		Username:          username,
	}
	name := r.Name.ValueString()
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourcePostgresCreateRequest{
		Configuration: configuration,
		Name:          name,
		SecretID:      secretID,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourcePostgresResourceModel) ToDeleteSDKType() *shared.SourcePostgresCreateRequest {
	out := r.ToCreateSDKType()
	return out
}
