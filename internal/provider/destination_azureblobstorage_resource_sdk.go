// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"airbyte/internal/sdk/pkg/models/shared"
)

func (r *DestinationAzureBlobStorageResourceModel) ToCreateSDKType() *shared.DestinationAzureBlobStorageCreateRequest {
	azureBlobStorageAccountKey := r.Configuration.AzureBlobStorageAccountKey.ValueString()
	azureBlobStorageAccountName := r.Configuration.AzureBlobStorageAccountName.ValueString()
	azureBlobStorageContainerName := new(string)
	if !r.Configuration.AzureBlobStorageContainerName.IsUnknown() && !r.Configuration.AzureBlobStorageContainerName.IsNull() {
		*azureBlobStorageContainerName = r.Configuration.AzureBlobStorageContainerName.ValueString()
	} else {
		azureBlobStorageContainerName = nil
	}
	azureBlobStorageEndpointDomainName := new(string)
	if !r.Configuration.AzureBlobStorageEndpointDomainName.IsUnknown() && !r.Configuration.AzureBlobStorageEndpointDomainName.IsNull() {
		*azureBlobStorageEndpointDomainName = r.Configuration.AzureBlobStorageEndpointDomainName.ValueString()
	} else {
		azureBlobStorageEndpointDomainName = nil
	}
	azureBlobStorageOutputBufferSize := new(int64)
	if !r.Configuration.AzureBlobStorageOutputBufferSize.IsUnknown() && !r.Configuration.AzureBlobStorageOutputBufferSize.IsNull() {
		*azureBlobStorageOutputBufferSize = r.Configuration.AzureBlobStorageOutputBufferSize.ValueInt64()
	} else {
		azureBlobStorageOutputBufferSize = nil
	}
	azureBlobStorageSpillSize := new(int64)
	if !r.Configuration.AzureBlobStorageSpillSize.IsUnknown() && !r.Configuration.AzureBlobStorageSpillSize.IsNull() {
		*azureBlobStorageSpillSize = r.Configuration.AzureBlobStorageSpillSize.ValueInt64()
	} else {
		azureBlobStorageSpillSize = nil
	}
	destinationType := shared.DestinationAzureBlobStorageAzureBlobStorageEnum(r.Configuration.DestinationType.ValueString())
	var format shared.DestinationAzureBlobStorageOutputFormat
	var destinationAzureBlobStorageOutputFormatCSVCommaSeparatedValues *shared.DestinationAzureBlobStorageOutputFormatCSVCommaSeparatedValues
	if r.Configuration.Format.DestinationAzureBlobStorageOutputFormatCSVCommaSeparatedValues != nil {
		flattening := shared.DestinationAzureBlobStorageOutputFormatCSVCommaSeparatedValuesNormalizationFlatteningEnum(r.Configuration.Format.DestinationAzureBlobStorageOutputFormatCSVCommaSeparatedValues.Flattening.ValueString())
		formatType := shared.DestinationAzureBlobStorageOutputFormatCSVCommaSeparatedValuesFormatTypeEnum(r.Configuration.Format.DestinationAzureBlobStorageOutputFormatCSVCommaSeparatedValues.FormatType.ValueString())
		destinationAzureBlobStorageOutputFormatCSVCommaSeparatedValues = &shared.DestinationAzureBlobStorageOutputFormatCSVCommaSeparatedValues{
			Flattening: flattening,
			FormatType: formatType,
		}
	}
	if destinationAzureBlobStorageOutputFormatCSVCommaSeparatedValues != nil {
		format = shared.DestinationAzureBlobStorageOutputFormat{
			DestinationAzureBlobStorageOutputFormatCSVCommaSeparatedValues: destinationAzureBlobStorageOutputFormatCSVCommaSeparatedValues,
		}
	}
	var destinationAzureBlobStorageOutputFormatJSONLinesNewlineDelimitedJSON *shared.DestinationAzureBlobStorageOutputFormatJSONLinesNewlineDelimitedJSON
	if r.Configuration.Format.DestinationAzureBlobStorageOutputFormatJSONLinesNewlineDelimitedJSON != nil {
		formatType1 := shared.DestinationAzureBlobStorageOutputFormatJSONLinesNewlineDelimitedJSONFormatTypeEnum(r.Configuration.Format.DestinationAzureBlobStorageOutputFormatJSONLinesNewlineDelimitedJSON.FormatType.ValueString())
		destinationAzureBlobStorageOutputFormatJSONLinesNewlineDelimitedJSON = &shared.DestinationAzureBlobStorageOutputFormatJSONLinesNewlineDelimitedJSON{
			FormatType: formatType1,
		}
	}
	if destinationAzureBlobStorageOutputFormatJSONLinesNewlineDelimitedJSON != nil {
		format = shared.DestinationAzureBlobStorageOutputFormat{
			DestinationAzureBlobStorageOutputFormatJSONLinesNewlineDelimitedJSON: destinationAzureBlobStorageOutputFormatJSONLinesNewlineDelimitedJSON,
		}
	}
	configuration := shared.DestinationAzureBlobStorage{
		AzureBlobStorageAccountKey:         azureBlobStorageAccountKey,
		AzureBlobStorageAccountName:        azureBlobStorageAccountName,
		AzureBlobStorageContainerName:      azureBlobStorageContainerName,
		AzureBlobStorageEndpointDomainName: azureBlobStorageEndpointDomainName,
		AzureBlobStorageOutputBufferSize:   azureBlobStorageOutputBufferSize,
		AzureBlobStorageSpillSize:          azureBlobStorageSpillSize,
		DestinationType:                    destinationType,
		Format:                             format,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.DestinationAzureBlobStorageCreateRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *DestinationAzureBlobStorageResourceModel) ToDeleteSDKType() *shared.DestinationAzureBlobStorageCreateRequest {
	out := r.ToCreateSDKType()
	return out
}
