// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"airbyte/internal/sdk/pkg/models/shared"
	"encoding/json"
)

func (r *SourceAlloydbResourceModel) ToCreateSDKType() *shared.SourceAlloydbCreateRequest {
	database := r.Configuration.Database.ValueString()
	host := r.Configuration.Host.ValueString()
	jdbcURLParams := new(string)
	if !r.Configuration.JdbcURLParams.IsUnknown() && !r.Configuration.JdbcURLParams.IsNull() {
		*jdbcURLParams = r.Configuration.JdbcURLParams.ValueString()
	} else {
		jdbcURLParams = nil
	}
	password := new(string)
	if !r.Configuration.Password.IsUnknown() && !r.Configuration.Password.IsNull() {
		*password = r.Configuration.Password.ValueString()
	} else {
		password = nil
	}
	port := r.Configuration.Port.ValueInt64()
	var replicationMethod *shared.SourceAlloydbReplicationMethod
	var sourceAlloydbReplicationMethodStandard *shared.SourceAlloydbReplicationMethodStandard
	if r.Configuration.ReplicationMethod.SourceAlloydbReplicationMethodStandard != nil {
		method := shared.SourceAlloydbReplicationMethodStandardMethodEnum(r.Configuration.ReplicationMethod.SourceAlloydbReplicationMethodStandard.Method.ValueString())
		sourceAlloydbReplicationMethodStandard = &shared.SourceAlloydbReplicationMethodStandard{
			Method: method,
		}
	}
	if sourceAlloydbReplicationMethodStandard != nil {
		replicationMethod = &shared.SourceAlloydbReplicationMethod{
			SourceAlloydbReplicationMethodStandard: sourceAlloydbReplicationMethodStandard,
		}
	}
	var sourceAlloydbReplicationMethodLogicalReplicationCDC *shared.SourceAlloydbReplicationMethodLogicalReplicationCDC
	if r.Configuration.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC != nil {
		initialWaitingSeconds := new(int64)
		if !r.Configuration.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC.InitialWaitingSeconds.IsUnknown() && !r.Configuration.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC.InitialWaitingSeconds.IsNull() {
			*initialWaitingSeconds = r.Configuration.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC.InitialWaitingSeconds.ValueInt64()
		} else {
			initialWaitingSeconds = nil
		}
		lsnCommitBehaviour := new(shared.SourceAlloydbReplicationMethodLogicalReplicationCDCLSNCommitBehaviourEnum)
		if !r.Configuration.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC.LsnCommitBehaviour.IsUnknown() && !r.Configuration.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC.LsnCommitBehaviour.IsNull() {
			*lsnCommitBehaviour = shared.SourceAlloydbReplicationMethodLogicalReplicationCDCLSNCommitBehaviourEnum(r.Configuration.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC.LsnCommitBehaviour.ValueString())
		} else {
			lsnCommitBehaviour = nil
		}
		method1 := shared.SourceAlloydbReplicationMethodLogicalReplicationCDCMethodEnum(r.Configuration.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC.Method.ValueString())
		plugin := new(shared.SourceAlloydbReplicationMethodLogicalReplicationCDCPluginEnum)
		if !r.Configuration.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC.Plugin.IsUnknown() && !r.Configuration.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC.Plugin.IsNull() {
			*plugin = shared.SourceAlloydbReplicationMethodLogicalReplicationCDCPluginEnum(r.Configuration.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC.Plugin.ValueString())
		} else {
			plugin = nil
		}
		publication := r.Configuration.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC.Publication.ValueString()
		replicationSlot := r.Configuration.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC.ReplicationSlot.ValueString()
		additionalProperties := make(map[string]interface{})
		for additionalPropertiesKey, additionalPropertiesValue := range r.Configuration.ReplicationMethod.SourceAlloydbReplicationMethodLogicalReplicationCDC.AdditionalProperties {
			var additionalPropertiesInst interface{}
			_ = json.Unmarshal([]byte(additionalPropertiesValue.ValueString()), &additionalPropertiesInst)
			additionalProperties[additionalPropertiesKey] = additionalPropertiesInst
		}
		sourceAlloydbReplicationMethodLogicalReplicationCDC = &shared.SourceAlloydbReplicationMethodLogicalReplicationCDC{
			InitialWaitingSeconds: initialWaitingSeconds,
			LsnCommitBehaviour:    lsnCommitBehaviour,
			Method:                method1,
			Plugin:                plugin,
			Publication:           publication,
			ReplicationSlot:       replicationSlot,
			AdditionalProperties:  additionalProperties,
		}
	}
	if sourceAlloydbReplicationMethodLogicalReplicationCDC != nil {
		replicationMethod = &shared.SourceAlloydbReplicationMethod{
			SourceAlloydbReplicationMethodLogicalReplicationCDC: sourceAlloydbReplicationMethodLogicalReplicationCDC,
		}
	}
	schemas := make([]string, 0)
	for _, schemasItem := range r.Configuration.Schemas {
		schemas = append(schemas, schemasItem.ValueString())
	}
	sourceType := shared.SourceAlloydbAlloydbEnum(r.Configuration.SourceType.ValueString())
	var sslMode *shared.SourceAlloydbSSLModes
	var sourceAlloydbSSLModesDisable *shared.SourceAlloydbSSLModesDisable
	if r.Configuration.SslMode.SourceAlloydbSSLModesDisable != nil {
		mode := shared.SourceAlloydbSSLModesDisableModeEnum(r.Configuration.SslMode.SourceAlloydbSSLModesDisable.Mode.ValueString())
		additionalProperties1 := make(map[string]interface{})
		for additionalPropertiesKey1, additionalPropertiesValue1 := range r.Configuration.SslMode.SourceAlloydbSSLModesDisable.AdditionalProperties {
			var additionalPropertiesInst1 interface{}
			_ = json.Unmarshal([]byte(additionalPropertiesValue1.ValueString()), &additionalPropertiesInst1)
			additionalProperties1[additionalPropertiesKey1] = additionalPropertiesInst1
		}
		sourceAlloydbSSLModesDisable = &shared.SourceAlloydbSSLModesDisable{
			Mode:                 mode,
			AdditionalProperties: additionalProperties1,
		}
	}
	if sourceAlloydbSSLModesDisable != nil {
		sslMode = &shared.SourceAlloydbSSLModes{
			SourceAlloydbSSLModesDisable: sourceAlloydbSSLModesDisable,
		}
	}
	var sourceAlloydbSSLModesAllow *shared.SourceAlloydbSSLModesAllow
	if r.Configuration.SslMode.SourceAlloydbSSLModesAllow != nil {
		mode1 := shared.SourceAlloydbSSLModesAllowModeEnum(r.Configuration.SslMode.SourceAlloydbSSLModesAllow.Mode.ValueString())
		additionalProperties2 := make(map[string]interface{})
		for additionalPropertiesKey2, additionalPropertiesValue2 := range r.Configuration.SslMode.SourceAlloydbSSLModesAllow.AdditionalProperties {
			var additionalPropertiesInst2 interface{}
			_ = json.Unmarshal([]byte(additionalPropertiesValue2.ValueString()), &additionalPropertiesInst2)
			additionalProperties2[additionalPropertiesKey2] = additionalPropertiesInst2
		}
		sourceAlloydbSSLModesAllow = &shared.SourceAlloydbSSLModesAllow{
			Mode:                 mode1,
			AdditionalProperties: additionalProperties2,
		}
	}
	if sourceAlloydbSSLModesAllow != nil {
		sslMode = &shared.SourceAlloydbSSLModes{
			SourceAlloydbSSLModesAllow: sourceAlloydbSSLModesAllow,
		}
	}
	var sourceAlloydbSSLModesPrefer *shared.SourceAlloydbSSLModesPrefer
	if r.Configuration.SslMode.SourceAlloydbSSLModesPrefer != nil {
		mode2 := shared.SourceAlloydbSSLModesPreferModeEnum(r.Configuration.SslMode.SourceAlloydbSSLModesPrefer.Mode.ValueString())
		additionalProperties3 := make(map[string]interface{})
		for additionalPropertiesKey3, additionalPropertiesValue3 := range r.Configuration.SslMode.SourceAlloydbSSLModesPrefer.AdditionalProperties {
			var additionalPropertiesInst3 interface{}
			_ = json.Unmarshal([]byte(additionalPropertiesValue3.ValueString()), &additionalPropertiesInst3)
			additionalProperties3[additionalPropertiesKey3] = additionalPropertiesInst3
		}
		sourceAlloydbSSLModesPrefer = &shared.SourceAlloydbSSLModesPrefer{
			Mode:                 mode2,
			AdditionalProperties: additionalProperties3,
		}
	}
	if sourceAlloydbSSLModesPrefer != nil {
		sslMode = &shared.SourceAlloydbSSLModes{
			SourceAlloydbSSLModesPrefer: sourceAlloydbSSLModesPrefer,
		}
	}
	var sourceAlloydbSSLModesRequire *shared.SourceAlloydbSSLModesRequire
	if r.Configuration.SslMode.SourceAlloydbSSLModesRequire != nil {
		mode3 := shared.SourceAlloydbSSLModesRequireModeEnum(r.Configuration.SslMode.SourceAlloydbSSLModesRequire.Mode.ValueString())
		additionalProperties4 := make(map[string]interface{})
		for additionalPropertiesKey4, additionalPropertiesValue4 := range r.Configuration.SslMode.SourceAlloydbSSLModesRequire.AdditionalProperties {
			var additionalPropertiesInst4 interface{}
			_ = json.Unmarshal([]byte(additionalPropertiesValue4.ValueString()), &additionalPropertiesInst4)
			additionalProperties4[additionalPropertiesKey4] = additionalPropertiesInst4
		}
		sourceAlloydbSSLModesRequire = &shared.SourceAlloydbSSLModesRequire{
			Mode:                 mode3,
			AdditionalProperties: additionalProperties4,
		}
	}
	if sourceAlloydbSSLModesRequire != nil {
		sslMode = &shared.SourceAlloydbSSLModes{
			SourceAlloydbSSLModesRequire: sourceAlloydbSSLModesRequire,
		}
	}
	var sourceAlloydbSSLModesVerifyCa *shared.SourceAlloydbSSLModesVerifyCa
	if r.Configuration.SslMode.SourceAlloydbSSLModesVerifyCa != nil {
		caCertificate := r.Configuration.SslMode.SourceAlloydbSSLModesVerifyCa.CaCertificate.ValueString()
		clientCertificate := new(string)
		if !r.Configuration.SslMode.SourceAlloydbSSLModesVerifyCa.ClientCertificate.IsUnknown() && !r.Configuration.SslMode.SourceAlloydbSSLModesVerifyCa.ClientCertificate.IsNull() {
			*clientCertificate = r.Configuration.SslMode.SourceAlloydbSSLModesVerifyCa.ClientCertificate.ValueString()
		} else {
			clientCertificate = nil
		}
		clientKey := new(string)
		if !r.Configuration.SslMode.SourceAlloydbSSLModesVerifyCa.ClientKey.IsUnknown() && !r.Configuration.SslMode.SourceAlloydbSSLModesVerifyCa.ClientKey.IsNull() {
			*clientKey = r.Configuration.SslMode.SourceAlloydbSSLModesVerifyCa.ClientKey.ValueString()
		} else {
			clientKey = nil
		}
		clientKeyPassword := new(string)
		if !r.Configuration.SslMode.SourceAlloydbSSLModesVerifyCa.ClientKeyPassword.IsUnknown() && !r.Configuration.SslMode.SourceAlloydbSSLModesVerifyCa.ClientKeyPassword.IsNull() {
			*clientKeyPassword = r.Configuration.SslMode.SourceAlloydbSSLModesVerifyCa.ClientKeyPassword.ValueString()
		} else {
			clientKeyPassword = nil
		}
		mode4 := shared.SourceAlloydbSSLModesVerifyCaModeEnum(r.Configuration.SslMode.SourceAlloydbSSLModesVerifyCa.Mode.ValueString())
		additionalProperties5 := make(map[string]interface{})
		for additionalPropertiesKey5, additionalPropertiesValue5 := range r.Configuration.SslMode.SourceAlloydbSSLModesVerifyCa.AdditionalProperties {
			var additionalPropertiesInst5 interface{}
			_ = json.Unmarshal([]byte(additionalPropertiesValue5.ValueString()), &additionalPropertiesInst5)
			additionalProperties5[additionalPropertiesKey5] = additionalPropertiesInst5
		}
		sourceAlloydbSSLModesVerifyCa = &shared.SourceAlloydbSSLModesVerifyCa{
			CaCertificate:        caCertificate,
			ClientCertificate:    clientCertificate,
			ClientKey:            clientKey,
			ClientKeyPassword:    clientKeyPassword,
			Mode:                 mode4,
			AdditionalProperties: additionalProperties5,
		}
	}
	if sourceAlloydbSSLModesVerifyCa != nil {
		sslMode = &shared.SourceAlloydbSSLModes{
			SourceAlloydbSSLModesVerifyCa: sourceAlloydbSSLModesVerifyCa,
		}
	}
	var sourceAlloydbSSLModesVerifyFull *shared.SourceAlloydbSSLModesVerifyFull
	if r.Configuration.SslMode.SourceAlloydbSSLModesVerifyFull != nil {
		caCertificate1 := r.Configuration.SslMode.SourceAlloydbSSLModesVerifyFull.CaCertificate.ValueString()
		clientCertificate1 := new(string)
		if !r.Configuration.SslMode.SourceAlloydbSSLModesVerifyFull.ClientCertificate.IsUnknown() && !r.Configuration.SslMode.SourceAlloydbSSLModesVerifyFull.ClientCertificate.IsNull() {
			*clientCertificate1 = r.Configuration.SslMode.SourceAlloydbSSLModesVerifyFull.ClientCertificate.ValueString()
		} else {
			clientCertificate1 = nil
		}
		clientKey1 := new(string)
		if !r.Configuration.SslMode.SourceAlloydbSSLModesVerifyFull.ClientKey.IsUnknown() && !r.Configuration.SslMode.SourceAlloydbSSLModesVerifyFull.ClientKey.IsNull() {
			*clientKey1 = r.Configuration.SslMode.SourceAlloydbSSLModesVerifyFull.ClientKey.ValueString()
		} else {
			clientKey1 = nil
		}
		clientKeyPassword1 := new(string)
		if !r.Configuration.SslMode.SourceAlloydbSSLModesVerifyFull.ClientKeyPassword.IsUnknown() && !r.Configuration.SslMode.SourceAlloydbSSLModesVerifyFull.ClientKeyPassword.IsNull() {
			*clientKeyPassword1 = r.Configuration.SslMode.SourceAlloydbSSLModesVerifyFull.ClientKeyPassword.ValueString()
		} else {
			clientKeyPassword1 = nil
		}
		mode5 := shared.SourceAlloydbSSLModesVerifyFullModeEnum(r.Configuration.SslMode.SourceAlloydbSSLModesVerifyFull.Mode.ValueString())
		additionalProperties6 := make(map[string]interface{})
		for additionalPropertiesKey6, additionalPropertiesValue6 := range r.Configuration.SslMode.SourceAlloydbSSLModesVerifyFull.AdditionalProperties {
			var additionalPropertiesInst6 interface{}
			_ = json.Unmarshal([]byte(additionalPropertiesValue6.ValueString()), &additionalPropertiesInst6)
			additionalProperties6[additionalPropertiesKey6] = additionalPropertiesInst6
		}
		sourceAlloydbSSLModesVerifyFull = &shared.SourceAlloydbSSLModesVerifyFull{
			CaCertificate:        caCertificate1,
			ClientCertificate:    clientCertificate1,
			ClientKey:            clientKey1,
			ClientKeyPassword:    clientKeyPassword1,
			Mode:                 mode5,
			AdditionalProperties: additionalProperties6,
		}
	}
	if sourceAlloydbSSLModesVerifyFull != nil {
		sslMode = &shared.SourceAlloydbSSLModes{
			SourceAlloydbSSLModesVerifyFull: sourceAlloydbSSLModesVerifyFull,
		}
	}
	var tunnelMethod *shared.SourceAlloydbSSHTunnelMethod
	var sourceAlloydbSSHTunnelMethodNoTunnel *shared.SourceAlloydbSSHTunnelMethodNoTunnel
	if r.Configuration.TunnelMethod.SourceAlloydbSSHTunnelMethodNoTunnel != nil {
		tunnelMethod1 := shared.SourceAlloydbSSHTunnelMethodNoTunnelTunnelMethodEnum(r.Configuration.TunnelMethod.SourceAlloydbSSHTunnelMethodNoTunnel.TunnelMethod.ValueString())
		sourceAlloydbSSHTunnelMethodNoTunnel = &shared.SourceAlloydbSSHTunnelMethodNoTunnel{
			TunnelMethod: tunnelMethod1,
		}
	}
	if sourceAlloydbSSHTunnelMethodNoTunnel != nil {
		tunnelMethod = &shared.SourceAlloydbSSHTunnelMethod{
			SourceAlloydbSSHTunnelMethodNoTunnel: sourceAlloydbSSHTunnelMethodNoTunnel,
		}
	}
	var sourceAlloydbSSHTunnelMethodSSHKeyAuthentication *shared.SourceAlloydbSSHTunnelMethodSSHKeyAuthentication
	if r.Configuration.TunnelMethod.SourceAlloydbSSHTunnelMethodSSHKeyAuthentication != nil {
		sshKey := r.Configuration.TunnelMethod.SourceAlloydbSSHTunnelMethodSSHKeyAuthentication.SSHKey.ValueString()
		tunnelHost := r.Configuration.TunnelMethod.SourceAlloydbSSHTunnelMethodSSHKeyAuthentication.TunnelHost.ValueString()
		tunnelMethod2 := shared.SourceAlloydbSSHTunnelMethodSSHKeyAuthenticationTunnelMethodEnum(r.Configuration.TunnelMethod.SourceAlloydbSSHTunnelMethodSSHKeyAuthentication.TunnelMethod.ValueString())
		tunnelPort := r.Configuration.TunnelMethod.SourceAlloydbSSHTunnelMethodSSHKeyAuthentication.TunnelPort.ValueInt64()
		tunnelUser := r.Configuration.TunnelMethod.SourceAlloydbSSHTunnelMethodSSHKeyAuthentication.TunnelUser.ValueString()
		sourceAlloydbSSHTunnelMethodSSHKeyAuthentication = &shared.SourceAlloydbSSHTunnelMethodSSHKeyAuthentication{
			SSHKey:       sshKey,
			TunnelHost:   tunnelHost,
			TunnelMethod: tunnelMethod2,
			TunnelPort:   tunnelPort,
			TunnelUser:   tunnelUser,
		}
	}
	if sourceAlloydbSSHTunnelMethodSSHKeyAuthentication != nil {
		tunnelMethod = &shared.SourceAlloydbSSHTunnelMethod{
			SourceAlloydbSSHTunnelMethodSSHKeyAuthentication: sourceAlloydbSSHTunnelMethodSSHKeyAuthentication,
		}
	}
	var sourceAlloydbSSHTunnelMethodPasswordAuthentication *shared.SourceAlloydbSSHTunnelMethodPasswordAuthentication
	if r.Configuration.TunnelMethod.SourceAlloydbSSHTunnelMethodPasswordAuthentication != nil {
		tunnelHost1 := r.Configuration.TunnelMethod.SourceAlloydbSSHTunnelMethodPasswordAuthentication.TunnelHost.ValueString()
		tunnelMethod3 := shared.SourceAlloydbSSHTunnelMethodPasswordAuthenticationTunnelMethodEnum(r.Configuration.TunnelMethod.SourceAlloydbSSHTunnelMethodPasswordAuthentication.TunnelMethod.ValueString())
		tunnelPort1 := r.Configuration.TunnelMethod.SourceAlloydbSSHTunnelMethodPasswordAuthentication.TunnelPort.ValueInt64()
		tunnelUser1 := r.Configuration.TunnelMethod.SourceAlloydbSSHTunnelMethodPasswordAuthentication.TunnelUser.ValueString()
		tunnelUserPassword := r.Configuration.TunnelMethod.SourceAlloydbSSHTunnelMethodPasswordAuthentication.TunnelUserPassword.ValueString()
		sourceAlloydbSSHTunnelMethodPasswordAuthentication = &shared.SourceAlloydbSSHTunnelMethodPasswordAuthentication{
			TunnelHost:         tunnelHost1,
			TunnelMethod:       tunnelMethod3,
			TunnelPort:         tunnelPort1,
			TunnelUser:         tunnelUser1,
			TunnelUserPassword: tunnelUserPassword,
		}
	}
	if sourceAlloydbSSHTunnelMethodPasswordAuthentication != nil {
		tunnelMethod = &shared.SourceAlloydbSSHTunnelMethod{
			SourceAlloydbSSHTunnelMethodPasswordAuthentication: sourceAlloydbSSHTunnelMethodPasswordAuthentication,
		}
	}
	username := r.Configuration.Username.ValueString()
	configuration := shared.SourceAlloydb{
		Database:          database,
		Host:              host,
		JdbcURLParams:     jdbcURLParams,
		Password:          password,
		Port:              port,
		ReplicationMethod: replicationMethod,
		Schemas:           schemas,
		SourceType:        sourceType,
		SslMode:           sslMode,
		TunnelMethod:      tunnelMethod,
		Username:          username,
	}
	name := r.Name.ValueString()
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceAlloydbCreateRequest{
		Configuration: configuration,
		Name:          name,
		SecretID:      secretID,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceAlloydbResourceModel) ToDeleteSDKType() *shared.SourceAlloydbCreateRequest {
	out := r.ToCreateSDKType()
	return out
}
