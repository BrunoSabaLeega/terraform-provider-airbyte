// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"github.com/hashicorp/terraform-plugin-framework/types"
	"openapi/internal/sdk/pkg/models/shared"
)

func (r *DestinationResourceModel) ToSDKType() *shared.DestinationCreateRequest {
	var configuration shared.DestinationConfiguration
	var destinationAmazonSqs *shared.DestinationAmazonSqs
	if r.Configuration.DestinationAmazonSqs != nil {
		accessKey := new(string)
		if !r.Configuration.DestinationAmazonSqs.AccessKey.IsUnknown() && !r.Configuration.DestinationAmazonSqs.AccessKey.IsNull() {
			*accessKey = r.Configuration.DestinationAmazonSqs.AccessKey.ValueString()
		} else {
			accessKey = nil
		}
		destinationType := shared.DestinationAmazonSqsAmazonSqsEnum(r.Configuration.DestinationAmazonSqs.DestinationType.ValueString())
		messageBodyKey := new(string)
		if !r.Configuration.DestinationAmazonSqs.MessageBodyKey.IsUnknown() && !r.Configuration.DestinationAmazonSqs.MessageBodyKey.IsNull() {
			*messageBodyKey = r.Configuration.DestinationAmazonSqs.MessageBodyKey.ValueString()
		} else {
			messageBodyKey = nil
		}
		messageDelay := new(int64)
		if !r.Configuration.DestinationAmazonSqs.MessageDelay.IsUnknown() && !r.Configuration.DestinationAmazonSqs.MessageDelay.IsNull() {
			*messageDelay = r.Configuration.DestinationAmazonSqs.MessageDelay.ValueInt64()
		} else {
			messageDelay = nil
		}
		messageGroupID := new(string)
		if !r.Configuration.DestinationAmazonSqs.MessageGroupID.IsUnknown() && !r.Configuration.DestinationAmazonSqs.MessageGroupID.IsNull() {
			*messageGroupID = r.Configuration.DestinationAmazonSqs.MessageGroupID.ValueString()
		} else {
			messageGroupID = nil
		}
		queueURL := r.Configuration.DestinationAmazonSqs.QueueURL.ValueString()
		region := shared.DestinationAmazonSqsAWSRegionEnum(r.Configuration.DestinationAmazonSqs.Region.ValueString())
		secretKey := new(string)
		if !r.Configuration.DestinationAmazonSqs.SecretKey.IsUnknown() && !r.Configuration.DestinationAmazonSqs.SecretKey.IsNull() {
			*secretKey = r.Configuration.DestinationAmazonSqs.SecretKey.ValueString()
		} else {
			secretKey = nil
		}
		destinationAmazonSqs = &shared.DestinationAmazonSqs{
			AccessKey:       accessKey,
			DestinationType: destinationType,
			MessageBodyKey:  messageBodyKey,
			MessageDelay:    messageDelay,
			MessageGroupID:  messageGroupID,
			QueueURL:        queueURL,
			Region:          region,
			SecretKey:       secretKey,
		}
	}
	if destinationAmazonSqs != nil {
		configuration = shared.DestinationConfiguration{
			DestinationAmazonSqs: destinationAmazonSqs,
		}
	}
	var destinationAwsDatalake *shared.DestinationAwsDatalake
	if r.Configuration.DestinationAwsDatalake != nil {
		awsAccountID := new(string)
		if !r.Configuration.DestinationAwsDatalake.AwsAccountID.IsUnknown() && !r.Configuration.DestinationAwsDatalake.AwsAccountID.IsNull() {
			*awsAccountID = r.Configuration.DestinationAwsDatalake.AwsAccountID.ValueString()
		} else {
			awsAccountID = nil
		}
		bucketName := r.Configuration.DestinationAwsDatalake.BucketName.ValueString()
		bucketPrefix := new(string)
		if !r.Configuration.DestinationAwsDatalake.BucketPrefix.IsUnknown() && !r.Configuration.DestinationAwsDatalake.BucketPrefix.IsNull() {
			*bucketPrefix = r.Configuration.DestinationAwsDatalake.BucketPrefix.ValueString()
		} else {
			bucketPrefix = nil
		}
		var credentials shared.DestinationAwsDatalakeAuthenticationMode
		var destinationAwsDatalakeAuthenticationModeIAMRole *shared.DestinationAwsDatalakeAuthenticationModeIAMRole
		if r.Configuration.DestinationAwsDatalake.Credentials.DestinationAwsDatalakeAuthenticationModeIAMRole != nil {
			credentialsTitle := shared.DestinationAwsDatalakeAuthenticationModeIAMRoleCredentialsTitleEnum(r.Configuration.DestinationAwsDatalake.Credentials.DestinationAwsDatalakeAuthenticationModeIAMRole.CredentialsTitle.ValueString())
			roleArn := r.Configuration.DestinationAwsDatalake.Credentials.DestinationAwsDatalakeAuthenticationModeIAMRole.RoleArn.ValueString()
			destinationAwsDatalakeAuthenticationModeIAMRole = &shared.DestinationAwsDatalakeAuthenticationModeIAMRole{
				CredentialsTitle: credentialsTitle,
				RoleArn:          roleArn,
			}
		}
		if destinationAwsDatalakeAuthenticationModeIAMRole != nil {
			credentials = shared.DestinationAwsDatalakeAuthenticationMode{
				DestinationAwsDatalakeAuthenticationModeIAMRole: destinationAwsDatalakeAuthenticationModeIAMRole,
			}
		}
		var destinationAwsDatalakeAuthenticationModeIAMUser *shared.DestinationAwsDatalakeAuthenticationModeIAMUser
		if r.Configuration.DestinationAwsDatalake.Credentials.DestinationAwsDatalakeAuthenticationModeIAMUser != nil {
			awsAccessKeyID := r.Configuration.DestinationAwsDatalake.Credentials.DestinationAwsDatalakeAuthenticationModeIAMUser.AwsAccessKeyID.ValueString()
			awsSecretAccessKey := r.Configuration.DestinationAwsDatalake.Credentials.DestinationAwsDatalakeAuthenticationModeIAMUser.AwsSecretAccessKey.ValueString()
			credentialsTitle1 := shared.DestinationAwsDatalakeAuthenticationModeIAMUserCredentialsTitleEnum(r.Configuration.DestinationAwsDatalake.Credentials.DestinationAwsDatalakeAuthenticationModeIAMUser.CredentialsTitle.ValueString())
			destinationAwsDatalakeAuthenticationModeIAMUser = &shared.DestinationAwsDatalakeAuthenticationModeIAMUser{
				AwsAccessKeyID:     awsAccessKeyID,
				AwsSecretAccessKey: awsSecretAccessKey,
				CredentialsTitle:   credentialsTitle1,
			}
		}
		if destinationAwsDatalakeAuthenticationModeIAMUser != nil {
			credentials = shared.DestinationAwsDatalakeAuthenticationMode{
				DestinationAwsDatalakeAuthenticationModeIAMUser: destinationAwsDatalakeAuthenticationModeIAMUser,
			}
		}
		destinationType1 := shared.DestinationAwsDatalakeAwsDatalakeEnum(r.Configuration.DestinationAwsDatalake.DestinationType.ValueString())
		var format *shared.DestinationAwsDatalakeOutputFormatWildcard
		var destinationAwsDatalakeOutputFormatWildcardJSONLinesNewlineDelimitedJSON *shared.DestinationAwsDatalakeOutputFormatWildcardJSONLinesNewlineDelimitedJSON
		if r.Configuration.DestinationAwsDatalake.Format.DestinationAwsDatalakeOutputFormatWildcardJSONLinesNewlineDelimitedJSON != nil {
			compressionCodec := new(shared.DestinationAwsDatalakeOutputFormatWildcardJSONLinesNewlineDelimitedJSONCompressionCodecOptionalEnum)
			if !r.Configuration.DestinationAwsDatalake.Format.DestinationAwsDatalakeOutputFormatWildcardJSONLinesNewlineDelimitedJSON.CompressionCodec.IsUnknown() && !r.Configuration.DestinationAwsDatalake.Format.DestinationAwsDatalakeOutputFormatWildcardJSONLinesNewlineDelimitedJSON.CompressionCodec.IsNull() {
				*compressionCodec = shared.DestinationAwsDatalakeOutputFormatWildcardJSONLinesNewlineDelimitedJSONCompressionCodecOptionalEnum(r.Configuration.DestinationAwsDatalake.Format.DestinationAwsDatalakeOutputFormatWildcardJSONLinesNewlineDelimitedJSON.CompressionCodec.ValueString())
			} else {
				compressionCodec = nil
			}
			formatType := shared.DestinationAwsDatalakeOutputFormatWildcardJSONLinesNewlineDelimitedJSONFormatTypeWildcardEnum(r.Configuration.DestinationAwsDatalake.Format.DestinationAwsDatalakeOutputFormatWildcardJSONLinesNewlineDelimitedJSON.FormatType.ValueString())
			destinationAwsDatalakeOutputFormatWildcardJSONLinesNewlineDelimitedJSON = &shared.DestinationAwsDatalakeOutputFormatWildcardJSONLinesNewlineDelimitedJSON{
				CompressionCodec: compressionCodec,
				FormatType:       formatType,
			}
		}
		if destinationAwsDatalakeOutputFormatWildcardJSONLinesNewlineDelimitedJSON != nil {
			format = &shared.DestinationAwsDatalakeOutputFormatWildcard{
				DestinationAwsDatalakeOutputFormatWildcardJSONLinesNewlineDelimitedJSON: destinationAwsDatalakeOutputFormatWildcardJSONLinesNewlineDelimitedJSON,
			}
		}
		var destinationAwsDatalakeOutputFormatWildcardParquetColumnarStorage *shared.DestinationAwsDatalakeOutputFormatWildcardParquetColumnarStorage
		if r.Configuration.DestinationAwsDatalake.Format.DestinationAwsDatalakeOutputFormatWildcardParquetColumnarStorage != nil {
			compressionCodec1 := new(shared.DestinationAwsDatalakeOutputFormatWildcardParquetColumnarStorageCompressionCodecOptionalEnum)
			if !r.Configuration.DestinationAwsDatalake.Format.DestinationAwsDatalakeOutputFormatWildcardParquetColumnarStorage.CompressionCodec.IsUnknown() && !r.Configuration.DestinationAwsDatalake.Format.DestinationAwsDatalakeOutputFormatWildcardParquetColumnarStorage.CompressionCodec.IsNull() {
				*compressionCodec1 = shared.DestinationAwsDatalakeOutputFormatWildcardParquetColumnarStorageCompressionCodecOptionalEnum(r.Configuration.DestinationAwsDatalake.Format.DestinationAwsDatalakeOutputFormatWildcardParquetColumnarStorage.CompressionCodec.ValueString())
			} else {
				compressionCodec1 = nil
			}
			formatType1 := shared.DestinationAwsDatalakeOutputFormatWildcardParquetColumnarStorageFormatTypeWildcardEnum(r.Configuration.DestinationAwsDatalake.Format.DestinationAwsDatalakeOutputFormatWildcardParquetColumnarStorage.FormatType.ValueString())
			destinationAwsDatalakeOutputFormatWildcardParquetColumnarStorage = &shared.DestinationAwsDatalakeOutputFormatWildcardParquetColumnarStorage{
				CompressionCodec: compressionCodec1,
				FormatType:       formatType1,
			}
		}
		if destinationAwsDatalakeOutputFormatWildcardParquetColumnarStorage != nil {
			format = &shared.DestinationAwsDatalakeOutputFormatWildcard{
				DestinationAwsDatalakeOutputFormatWildcardParquetColumnarStorage: destinationAwsDatalakeOutputFormatWildcardParquetColumnarStorage,
			}
		}
		glueCatalogFloatAsDecimal := new(bool)
		if !r.Configuration.DestinationAwsDatalake.GlueCatalogFloatAsDecimal.IsUnknown() && !r.Configuration.DestinationAwsDatalake.GlueCatalogFloatAsDecimal.IsNull() {
			*glueCatalogFloatAsDecimal = r.Configuration.DestinationAwsDatalake.GlueCatalogFloatAsDecimal.ValueBool()
		} else {
			glueCatalogFloatAsDecimal = nil
		}
		lakeformationDatabaseDefaultTagKey := new(string)
		if !r.Configuration.DestinationAwsDatalake.LakeformationDatabaseDefaultTagKey.IsUnknown() && !r.Configuration.DestinationAwsDatalake.LakeformationDatabaseDefaultTagKey.IsNull() {
			*lakeformationDatabaseDefaultTagKey = r.Configuration.DestinationAwsDatalake.LakeformationDatabaseDefaultTagKey.ValueString()
		} else {
			lakeformationDatabaseDefaultTagKey = nil
		}
		lakeformationDatabaseDefaultTagValues := new(string)
		if !r.Configuration.DestinationAwsDatalake.LakeformationDatabaseDefaultTagValues.IsUnknown() && !r.Configuration.DestinationAwsDatalake.LakeformationDatabaseDefaultTagValues.IsNull() {
			*lakeformationDatabaseDefaultTagValues = r.Configuration.DestinationAwsDatalake.LakeformationDatabaseDefaultTagValues.ValueString()
		} else {
			lakeformationDatabaseDefaultTagValues = nil
		}
		lakeformationDatabaseName := r.Configuration.DestinationAwsDatalake.LakeformationDatabaseName.ValueString()
		lakeformationGovernedTables := new(bool)
		if !r.Configuration.DestinationAwsDatalake.LakeformationGovernedTables.IsUnknown() && !r.Configuration.DestinationAwsDatalake.LakeformationGovernedTables.IsNull() {
			*lakeformationGovernedTables = r.Configuration.DestinationAwsDatalake.LakeformationGovernedTables.ValueBool()
		} else {
			lakeformationGovernedTables = nil
		}
		partitioning := new(shared.DestinationAwsDatalakeChooseHowToPartitionDataEnum)
		if !r.Configuration.DestinationAwsDatalake.Partitioning.IsUnknown() && !r.Configuration.DestinationAwsDatalake.Partitioning.IsNull() {
			*partitioning = shared.DestinationAwsDatalakeChooseHowToPartitionDataEnum(r.Configuration.DestinationAwsDatalake.Partitioning.ValueString())
		} else {
			partitioning = nil
		}
		region1 := shared.DestinationAwsDatalakeS3BucketRegionEnum(r.Configuration.DestinationAwsDatalake.Region.ValueString())
		destinationAwsDatalake = &shared.DestinationAwsDatalake{
			AwsAccountID:                          awsAccountID,
			BucketName:                            bucketName,
			BucketPrefix:                          bucketPrefix,
			Credentials:                           credentials,
			DestinationType:                       destinationType1,
			Format:                                format,
			GlueCatalogFloatAsDecimal:             glueCatalogFloatAsDecimal,
			LakeformationDatabaseDefaultTagKey:    lakeformationDatabaseDefaultTagKey,
			LakeformationDatabaseDefaultTagValues: lakeformationDatabaseDefaultTagValues,
			LakeformationDatabaseName:             lakeformationDatabaseName,
			LakeformationGovernedTables:           lakeformationGovernedTables,
			Partitioning:                          partitioning,
			Region:                                region1,
		}
	}
	if destinationAwsDatalake != nil {
		configuration = shared.DestinationConfiguration{
			DestinationAwsDatalake: destinationAwsDatalake,
		}
	}
	var destinationAzureBlobStorage *shared.DestinationAzureBlobStorage
	if r.Configuration.DestinationAzureBlobStorage != nil {
		azureBlobStorageAccountKey := r.Configuration.DestinationAzureBlobStorage.AzureBlobStorageAccountKey.ValueString()
		azureBlobStorageAccountName := r.Configuration.DestinationAzureBlobStorage.AzureBlobStorageAccountName.ValueString()
		azureBlobStorageContainerName := new(string)
		if !r.Configuration.DestinationAzureBlobStorage.AzureBlobStorageContainerName.IsUnknown() && !r.Configuration.DestinationAzureBlobStorage.AzureBlobStorageContainerName.IsNull() {
			*azureBlobStorageContainerName = r.Configuration.DestinationAzureBlobStorage.AzureBlobStorageContainerName.ValueString()
		} else {
			azureBlobStorageContainerName = nil
		}
		azureBlobStorageEndpointDomainName := new(string)
		if !r.Configuration.DestinationAzureBlobStorage.AzureBlobStorageEndpointDomainName.IsUnknown() && !r.Configuration.DestinationAzureBlobStorage.AzureBlobStorageEndpointDomainName.IsNull() {
			*azureBlobStorageEndpointDomainName = r.Configuration.DestinationAzureBlobStorage.AzureBlobStorageEndpointDomainName.ValueString()
		} else {
			azureBlobStorageEndpointDomainName = nil
		}
		azureBlobStorageOutputBufferSize := new(int64)
		if !r.Configuration.DestinationAzureBlobStorage.AzureBlobStorageOutputBufferSize.IsUnknown() && !r.Configuration.DestinationAzureBlobStorage.AzureBlobStorageOutputBufferSize.IsNull() {
			*azureBlobStorageOutputBufferSize = r.Configuration.DestinationAzureBlobStorage.AzureBlobStorageOutputBufferSize.ValueInt64()
		} else {
			azureBlobStorageOutputBufferSize = nil
		}
		azureBlobStorageSpillSize := new(int64)
		if !r.Configuration.DestinationAzureBlobStorage.AzureBlobStorageSpillSize.IsUnknown() && !r.Configuration.DestinationAzureBlobStorage.AzureBlobStorageSpillSize.IsNull() {
			*azureBlobStorageSpillSize = r.Configuration.DestinationAzureBlobStorage.AzureBlobStorageSpillSize.ValueInt64()
		} else {
			azureBlobStorageSpillSize = nil
		}
		destinationType2 := shared.DestinationAzureBlobStorageAzureBlobStorageEnum(r.Configuration.DestinationAzureBlobStorage.DestinationType.ValueString())
		var format1 shared.DestinationAzureBlobStorageOutputFormat
		var destinationAzureBlobStorageOutputFormatCSVCommaSeparatedValues *shared.DestinationAzureBlobStorageOutputFormatCSVCommaSeparatedValues
		if r.Configuration.DestinationAzureBlobStorage.Format.DestinationAzureBlobStorageOutputFormatCSVCommaSeparatedValues != nil {
			flattening := shared.DestinationAzureBlobStorageOutputFormatCSVCommaSeparatedValuesNormalizationFlatteningEnum(r.Configuration.DestinationAzureBlobStorage.Format.DestinationAzureBlobStorageOutputFormatCSVCommaSeparatedValues.Flattening.ValueString())
			formatType2 := shared.DestinationAzureBlobStorageOutputFormatCSVCommaSeparatedValuesFormatTypeEnum(r.Configuration.DestinationAzureBlobStorage.Format.DestinationAzureBlobStorageOutputFormatCSVCommaSeparatedValues.FormatType.ValueString())
			destinationAzureBlobStorageOutputFormatCSVCommaSeparatedValues = &shared.DestinationAzureBlobStorageOutputFormatCSVCommaSeparatedValues{
				Flattening: flattening,
				FormatType: formatType2,
			}
		}
		if destinationAzureBlobStorageOutputFormatCSVCommaSeparatedValues != nil {
			format1 = shared.DestinationAzureBlobStorageOutputFormat{
				DestinationAzureBlobStorageOutputFormatCSVCommaSeparatedValues: destinationAzureBlobStorageOutputFormatCSVCommaSeparatedValues,
			}
		}
		var destinationAzureBlobStorageOutputFormatJSONLinesNewlineDelimitedJSON *shared.DestinationAzureBlobStorageOutputFormatJSONLinesNewlineDelimitedJSON
		if r.Configuration.DestinationAzureBlobStorage.Format.DestinationAzureBlobStorageOutputFormatJSONLinesNewlineDelimitedJSON != nil {
			formatType3 := shared.DestinationAzureBlobStorageOutputFormatJSONLinesNewlineDelimitedJSONFormatTypeEnum(r.Configuration.DestinationAzureBlobStorage.Format.DestinationAzureBlobStorageOutputFormatJSONLinesNewlineDelimitedJSON.FormatType.ValueString())
			destinationAzureBlobStorageOutputFormatJSONLinesNewlineDelimitedJSON = &shared.DestinationAzureBlobStorageOutputFormatJSONLinesNewlineDelimitedJSON{
				FormatType: formatType3,
			}
		}
		if destinationAzureBlobStorageOutputFormatJSONLinesNewlineDelimitedJSON != nil {
			format1 = shared.DestinationAzureBlobStorageOutputFormat{
				DestinationAzureBlobStorageOutputFormatJSONLinesNewlineDelimitedJSON: destinationAzureBlobStorageOutputFormatJSONLinesNewlineDelimitedJSON,
			}
		}
		destinationAzureBlobStorage = &shared.DestinationAzureBlobStorage{
			AzureBlobStorageAccountKey:         azureBlobStorageAccountKey,
			AzureBlobStorageAccountName:        azureBlobStorageAccountName,
			AzureBlobStorageContainerName:      azureBlobStorageContainerName,
			AzureBlobStorageEndpointDomainName: azureBlobStorageEndpointDomainName,
			AzureBlobStorageOutputBufferSize:   azureBlobStorageOutputBufferSize,
			AzureBlobStorageSpillSize:          azureBlobStorageSpillSize,
			DestinationType:                    destinationType2,
			Format:                             format1,
		}
	}
	if destinationAzureBlobStorage != nil {
		configuration = shared.DestinationConfiguration{
			DestinationAzureBlobStorage: destinationAzureBlobStorage,
		}
	}
	var destinationBigquery *shared.DestinationBigquery
	if r.Configuration.DestinationBigquery != nil {
		bigQueryClientBufferSizeMb := new(int64)
		if !r.Configuration.DestinationBigquery.BigQueryClientBufferSizeMb.IsUnknown() && !r.Configuration.DestinationBigquery.BigQueryClientBufferSizeMb.IsNull() {
			*bigQueryClientBufferSizeMb = r.Configuration.DestinationBigquery.BigQueryClientBufferSizeMb.ValueInt64()
		} else {
			bigQueryClientBufferSizeMb = nil
		}
		credentialsJSON := new(string)
		if !r.Configuration.DestinationBigquery.CredentialsJSON.IsUnknown() && !r.Configuration.DestinationBigquery.CredentialsJSON.IsNull() {
			*credentialsJSON = r.Configuration.DestinationBigquery.CredentialsJSON.ValueString()
		} else {
			credentialsJSON = nil
		}
		datasetID := r.Configuration.DestinationBigquery.DatasetID.ValueString()
		datasetLocation := shared.DestinationBigqueryDatasetLocationEnum(r.Configuration.DestinationBigquery.DatasetLocation.ValueString())
		destinationType3 := shared.DestinationBigqueryBigqueryEnum(r.Configuration.DestinationBigquery.DestinationType.ValueString())
		var loadingMethod *shared.DestinationBigqueryLoadingMethod
		var destinationBigqueryLoadingMethodStandardInserts *shared.DestinationBigqueryLoadingMethodStandardInserts
		if r.Configuration.DestinationBigquery.LoadingMethod.DestinationBigqueryLoadingMethodStandardInserts != nil {
			method := shared.DestinationBigqueryLoadingMethodStandardInsertsMethodEnum(r.Configuration.DestinationBigquery.LoadingMethod.DestinationBigqueryLoadingMethodStandardInserts.Method.ValueString())
			destinationBigqueryLoadingMethodStandardInserts = &shared.DestinationBigqueryLoadingMethodStandardInserts{
				Method: method,
			}
		}
		if destinationBigqueryLoadingMethodStandardInserts != nil {
			loadingMethod = &shared.DestinationBigqueryLoadingMethod{
				DestinationBigqueryLoadingMethodStandardInserts: destinationBigqueryLoadingMethodStandardInserts,
			}
		}
		var destinationBigqueryLoadingMethodGCSStaging *shared.DestinationBigqueryLoadingMethodGCSStaging
		if r.Configuration.DestinationBigquery.LoadingMethod.DestinationBigqueryLoadingMethodGCSStaging != nil {
			var credential shared.DestinationBigqueryLoadingMethodGCSStagingCredential
			var destinationBigqueryLoadingMethodGCSStagingCredentialHMACKey *shared.DestinationBigqueryLoadingMethodGCSStagingCredentialHMACKey
			if r.Configuration.DestinationBigquery.LoadingMethod.DestinationBigqueryLoadingMethodGCSStaging.Credential.DestinationBigqueryLoadingMethodGCSStagingCredentialHMACKey != nil {
				credentialType := shared.DestinationBigqueryLoadingMethodGCSStagingCredentialHMACKeyCredentialTypeEnum(r.Configuration.DestinationBigquery.LoadingMethod.DestinationBigqueryLoadingMethodGCSStaging.Credential.DestinationBigqueryLoadingMethodGCSStagingCredentialHMACKey.CredentialType.ValueString())
				hmacKeyAccessID := r.Configuration.DestinationBigquery.LoadingMethod.DestinationBigqueryLoadingMethodGCSStaging.Credential.DestinationBigqueryLoadingMethodGCSStagingCredentialHMACKey.HmacKeyAccessID.ValueString()
				hmacKeySecret := r.Configuration.DestinationBigquery.LoadingMethod.DestinationBigqueryLoadingMethodGCSStaging.Credential.DestinationBigqueryLoadingMethodGCSStagingCredentialHMACKey.HmacKeySecret.ValueString()
				destinationBigqueryLoadingMethodGCSStagingCredentialHMACKey = &shared.DestinationBigqueryLoadingMethodGCSStagingCredentialHMACKey{
					CredentialType:  credentialType,
					HmacKeyAccessID: hmacKeyAccessID,
					HmacKeySecret:   hmacKeySecret,
				}
			}
			if destinationBigqueryLoadingMethodGCSStagingCredentialHMACKey != nil {
				credential = shared.DestinationBigqueryLoadingMethodGCSStagingCredential{
					DestinationBigqueryLoadingMethodGCSStagingCredentialHMACKey: destinationBigqueryLoadingMethodGCSStagingCredentialHMACKey,
				}
			}
			gcsBucketName := r.Configuration.DestinationBigquery.LoadingMethod.DestinationBigqueryLoadingMethodGCSStaging.GcsBucketName.ValueString()
			gcsBucketPath := r.Configuration.DestinationBigquery.LoadingMethod.DestinationBigqueryLoadingMethodGCSStaging.GcsBucketPath.ValueString()
			keepFilesInGcsBucket := new(shared.DestinationBigqueryLoadingMethodGCSStagingGCSTmpFilesAfterwardProcessingEnum)
			if !r.Configuration.DestinationBigquery.LoadingMethod.DestinationBigqueryLoadingMethodGCSStaging.KeepFilesInGcsBucket.IsUnknown() && !r.Configuration.DestinationBigquery.LoadingMethod.DestinationBigqueryLoadingMethodGCSStaging.KeepFilesInGcsBucket.IsNull() {
				*keepFilesInGcsBucket = shared.DestinationBigqueryLoadingMethodGCSStagingGCSTmpFilesAfterwardProcessingEnum(r.Configuration.DestinationBigquery.LoadingMethod.DestinationBigqueryLoadingMethodGCSStaging.KeepFilesInGcsBucket.ValueString())
			} else {
				keepFilesInGcsBucket = nil
			}
			method1 := shared.DestinationBigqueryLoadingMethodGCSStagingMethodEnum(r.Configuration.DestinationBigquery.LoadingMethod.DestinationBigqueryLoadingMethodGCSStaging.Method.ValueString())
			destinationBigqueryLoadingMethodGCSStaging = &shared.DestinationBigqueryLoadingMethodGCSStaging{
				Credential:           credential,
				GcsBucketName:        gcsBucketName,
				GcsBucketPath:        gcsBucketPath,
				KeepFilesInGcsBucket: keepFilesInGcsBucket,
				Method:               method1,
			}
		}
		if destinationBigqueryLoadingMethodGCSStaging != nil {
			loadingMethod = &shared.DestinationBigqueryLoadingMethod{
				DestinationBigqueryLoadingMethodGCSStaging: destinationBigqueryLoadingMethodGCSStaging,
			}
		}
		projectID := r.Configuration.DestinationBigquery.ProjectID.ValueString()
		transformationPriority := new(shared.DestinationBigqueryTransformationQueryRunTypeEnum)
		if !r.Configuration.DestinationBigquery.TransformationPriority.IsUnknown() && !r.Configuration.DestinationBigquery.TransformationPriority.IsNull() {
			*transformationPriority = shared.DestinationBigqueryTransformationQueryRunTypeEnum(r.Configuration.DestinationBigquery.TransformationPriority.ValueString())
		} else {
			transformationPriority = nil
		}
		destinationBigquery = &shared.DestinationBigquery{
			BigQueryClientBufferSizeMb: bigQueryClientBufferSizeMb,
			CredentialsJSON:            credentialsJSON,
			DatasetID:                  datasetID,
			DatasetLocation:            datasetLocation,
			DestinationType:            destinationType3,
			LoadingMethod:              loadingMethod,
			ProjectID:                  projectID,
			TransformationPriority:     transformationPriority,
		}
	}
	if destinationBigquery != nil {
		configuration = shared.DestinationConfiguration{
			DestinationBigquery: destinationBigquery,
		}
	}
	var destinationBigqueryDenormalized *shared.DestinationBigqueryDenormalized
	if r.Configuration.DestinationBigqueryDenormalized != nil {
		bigQueryClientBufferSizeMb1 := new(int64)
		if !r.Configuration.DestinationBigqueryDenormalized.BigQueryClientBufferSizeMb.IsUnknown() && !r.Configuration.DestinationBigqueryDenormalized.BigQueryClientBufferSizeMb.IsNull() {
			*bigQueryClientBufferSizeMb1 = r.Configuration.DestinationBigqueryDenormalized.BigQueryClientBufferSizeMb.ValueInt64()
		} else {
			bigQueryClientBufferSizeMb1 = nil
		}
		credentialsJson1 := new(string)
		if !r.Configuration.DestinationBigqueryDenormalized.CredentialsJSON.IsUnknown() && !r.Configuration.DestinationBigqueryDenormalized.CredentialsJSON.IsNull() {
			*credentialsJson1 = r.Configuration.DestinationBigqueryDenormalized.CredentialsJSON.ValueString()
		} else {
			credentialsJson1 = nil
		}
		datasetId1 := r.Configuration.DestinationBigqueryDenormalized.DatasetID.ValueString()
		datasetLocation1 := new(shared.DestinationBigqueryDenormalizedDatasetLocationEnum)
		if !r.Configuration.DestinationBigqueryDenormalized.DatasetLocation.IsUnknown() && !r.Configuration.DestinationBigqueryDenormalized.DatasetLocation.IsNull() {
			*datasetLocation1 = shared.DestinationBigqueryDenormalizedDatasetLocationEnum(r.Configuration.DestinationBigqueryDenormalized.DatasetLocation.ValueString())
		} else {
			datasetLocation1 = nil
		}
		destinationType4 := shared.DestinationBigqueryDenormalizedBigqueryDenormalizedEnum(r.Configuration.DestinationBigqueryDenormalized.DestinationType.ValueString())
		var loadingMethod1 *shared.DestinationBigqueryDenormalizedLoadingMethod
		var destinationBigqueryDenormalizedLoadingMethodStandardInserts *shared.DestinationBigqueryDenormalizedLoadingMethodStandardInserts
		if r.Configuration.DestinationBigqueryDenormalized.LoadingMethod.DestinationBigqueryDenormalizedLoadingMethodStandardInserts != nil {
			method2 := shared.DestinationBigqueryDenormalizedLoadingMethodStandardInsertsMethodEnum(r.Configuration.DestinationBigqueryDenormalized.LoadingMethod.DestinationBigqueryDenormalizedLoadingMethodStandardInserts.Method.ValueString())
			destinationBigqueryDenormalizedLoadingMethodStandardInserts = &shared.DestinationBigqueryDenormalizedLoadingMethodStandardInserts{
				Method: method2,
			}
		}
		if destinationBigqueryDenormalizedLoadingMethodStandardInserts != nil {
			loadingMethod1 = &shared.DestinationBigqueryDenormalizedLoadingMethod{
				DestinationBigqueryDenormalizedLoadingMethodStandardInserts: destinationBigqueryDenormalizedLoadingMethodStandardInserts,
			}
		}
		var destinationBigqueryDenormalizedLoadingMethodGCSStaging *shared.DestinationBigqueryDenormalizedLoadingMethodGCSStaging
		if r.Configuration.DestinationBigqueryDenormalized.LoadingMethod.DestinationBigqueryDenormalizedLoadingMethodGCSStaging != nil {
			var credential1 shared.DestinationBigqueryDenormalizedLoadingMethodGCSStagingCredential
			var destinationBigqueryDenormalizedLoadingMethodGCSStagingCredentialHMACKey *shared.DestinationBigqueryDenormalizedLoadingMethodGCSStagingCredentialHMACKey
			if r.Configuration.DestinationBigqueryDenormalized.LoadingMethod.DestinationBigqueryDenormalizedLoadingMethodGCSStaging.Credential.DestinationBigqueryDenormalizedLoadingMethodGCSStagingCredentialHMACKey != nil {
				credentialType1 := shared.DestinationBigqueryDenormalizedLoadingMethodGCSStagingCredentialHMACKeyCredentialTypeEnum(r.Configuration.DestinationBigqueryDenormalized.LoadingMethod.DestinationBigqueryDenormalizedLoadingMethodGCSStaging.Credential.DestinationBigqueryDenormalizedLoadingMethodGCSStagingCredentialHMACKey.CredentialType.ValueString())
				hmacKeyAccessId1 := r.Configuration.DestinationBigqueryDenormalized.LoadingMethod.DestinationBigqueryDenormalizedLoadingMethodGCSStaging.Credential.DestinationBigqueryDenormalizedLoadingMethodGCSStagingCredentialHMACKey.HmacKeyAccessID.ValueString()
				hmacKeySecret1 := r.Configuration.DestinationBigqueryDenormalized.LoadingMethod.DestinationBigqueryDenormalizedLoadingMethodGCSStaging.Credential.DestinationBigqueryDenormalizedLoadingMethodGCSStagingCredentialHMACKey.HmacKeySecret.ValueString()
				destinationBigqueryDenormalizedLoadingMethodGCSStagingCredentialHMACKey = &shared.DestinationBigqueryDenormalizedLoadingMethodGCSStagingCredentialHMACKey{
					CredentialType:  credentialType1,
					HmacKeyAccessID: hmacKeyAccessId1,
					HmacKeySecret:   hmacKeySecret1,
				}
			}
			if destinationBigqueryDenormalizedLoadingMethodGCSStagingCredentialHMACKey != nil {
				credential1 = shared.DestinationBigqueryDenormalizedLoadingMethodGCSStagingCredential{
					DestinationBigqueryDenormalizedLoadingMethodGCSStagingCredentialHMACKey: destinationBigqueryDenormalizedLoadingMethodGCSStagingCredentialHMACKey,
				}
			}
			gcsBucketName1 := r.Configuration.DestinationBigqueryDenormalized.LoadingMethod.DestinationBigqueryDenormalizedLoadingMethodGCSStaging.GcsBucketName.ValueString()
			gcsBucketPath1 := r.Configuration.DestinationBigqueryDenormalized.LoadingMethod.DestinationBigqueryDenormalizedLoadingMethodGCSStaging.GcsBucketPath.ValueString()
			keepFilesInGcsBucket1 := new(shared.DestinationBigqueryDenormalizedLoadingMethodGCSStagingGCSTmpFilesAfterwardProcessingEnum)
			if !r.Configuration.DestinationBigqueryDenormalized.LoadingMethod.DestinationBigqueryDenormalizedLoadingMethodGCSStaging.KeepFilesInGcsBucket.IsUnknown() && !r.Configuration.DestinationBigqueryDenormalized.LoadingMethod.DestinationBigqueryDenormalizedLoadingMethodGCSStaging.KeepFilesInGcsBucket.IsNull() {
				*keepFilesInGcsBucket1 = shared.DestinationBigqueryDenormalizedLoadingMethodGCSStagingGCSTmpFilesAfterwardProcessingEnum(r.Configuration.DestinationBigqueryDenormalized.LoadingMethod.DestinationBigqueryDenormalizedLoadingMethodGCSStaging.KeepFilesInGcsBucket.ValueString())
			} else {
				keepFilesInGcsBucket1 = nil
			}
			method3 := shared.DestinationBigqueryDenormalizedLoadingMethodGCSStagingMethodEnum(r.Configuration.DestinationBigqueryDenormalized.LoadingMethod.DestinationBigqueryDenormalizedLoadingMethodGCSStaging.Method.ValueString())
			destinationBigqueryDenormalizedLoadingMethodGCSStaging = &shared.DestinationBigqueryDenormalizedLoadingMethodGCSStaging{
				Credential:           credential1,
				GcsBucketName:        gcsBucketName1,
				GcsBucketPath:        gcsBucketPath1,
				KeepFilesInGcsBucket: keepFilesInGcsBucket1,
				Method:               method3,
			}
		}
		if destinationBigqueryDenormalizedLoadingMethodGCSStaging != nil {
			loadingMethod1 = &shared.DestinationBigqueryDenormalizedLoadingMethod{
				DestinationBigqueryDenormalizedLoadingMethodGCSStaging: destinationBigqueryDenormalizedLoadingMethodGCSStaging,
			}
		}
		projectId1 := r.Configuration.DestinationBigqueryDenormalized.ProjectID.ValueString()
		destinationBigqueryDenormalized = &shared.DestinationBigqueryDenormalized{
			BigQueryClientBufferSizeMb: bigQueryClientBufferSizeMb1,
			CredentialsJSON:            credentialsJson1,
			DatasetID:                  datasetId1,
			DatasetLocation:            datasetLocation1,
			DestinationType:            destinationType4,
			LoadingMethod:              loadingMethod1,
			ProjectID:                  projectId1,
		}
	}
	if destinationBigqueryDenormalized != nil {
		configuration = shared.DestinationConfiguration{
			DestinationBigqueryDenormalized: destinationBigqueryDenormalized,
		}
	}
	var destinationCassandra *shared.DestinationCassandra
	if r.Configuration.DestinationCassandra != nil {
		address := r.Configuration.DestinationCassandra.Address.ValueString()
		datacenter := new(string)
		if !r.Configuration.DestinationCassandra.Datacenter.IsUnknown() && !r.Configuration.DestinationCassandra.Datacenter.IsNull() {
			*datacenter = r.Configuration.DestinationCassandra.Datacenter.ValueString()
		} else {
			datacenter = nil
		}
		destinationType5 := shared.DestinationCassandraCassandraEnum(r.Configuration.DestinationCassandra.DestinationType.ValueString())
		keyspace := r.Configuration.DestinationCassandra.Keyspace.ValueString()
		password := r.Configuration.DestinationCassandra.Password.ValueString()
		port := r.Configuration.DestinationCassandra.Port.ValueInt64()
		replication := new(int64)
		if !r.Configuration.DestinationCassandra.Replication.IsUnknown() && !r.Configuration.DestinationCassandra.Replication.IsNull() {
			*replication = r.Configuration.DestinationCassandra.Replication.ValueInt64()
		} else {
			replication = nil
		}
		username := r.Configuration.DestinationCassandra.Username.ValueString()
		destinationCassandra = &shared.DestinationCassandra{
			Address:         address,
			Datacenter:      datacenter,
			DestinationType: destinationType5,
			Keyspace:        keyspace,
			Password:        password,
			Port:            port,
			Replication:     replication,
			Username:        username,
		}
	}
	if destinationCassandra != nil {
		configuration = shared.DestinationConfiguration{
			DestinationCassandra: destinationCassandra,
		}
	}
	var destinationClickhouse *shared.DestinationClickhouse
	if r.Configuration.DestinationClickhouse != nil {
		database := r.Configuration.DestinationClickhouse.Database.ValueString()
		destinationType6 := shared.DestinationClickhouseClickhouseEnum(r.Configuration.DestinationClickhouse.DestinationType.ValueString())
		host := r.Configuration.DestinationClickhouse.Host.ValueString()
		jdbcURLParams := new(string)
		if !r.Configuration.DestinationClickhouse.JdbcURLParams.IsUnknown() && !r.Configuration.DestinationClickhouse.JdbcURLParams.IsNull() {
			*jdbcURLParams = r.Configuration.DestinationClickhouse.JdbcURLParams.ValueString()
		} else {
			jdbcURLParams = nil
		}
		password1 := new(string)
		if !r.Configuration.DestinationClickhouse.Password.IsUnknown() && !r.Configuration.DestinationClickhouse.Password.IsNull() {
			*password1 = r.Configuration.DestinationClickhouse.Password.ValueString()
		} else {
			password1 = nil
		}
		port1 := r.Configuration.DestinationClickhouse.Port.ValueInt64()
		var tunnelMethod *shared.DestinationClickhouseSSHTunnelMethod
		var destinationClickhouseSSHTunnelMethodNoTunnel *shared.DestinationClickhouseSSHTunnelMethodNoTunnel
		if r.Configuration.DestinationClickhouse.TunnelMethod.DestinationClickhouseSSHTunnelMethodNoTunnel != nil {
			tunnelMethod1 := shared.DestinationClickhouseSSHTunnelMethodNoTunnelTunnelMethodEnum(r.Configuration.DestinationClickhouse.TunnelMethod.DestinationClickhouseSSHTunnelMethodNoTunnel.TunnelMethod.ValueString())
			destinationClickhouseSSHTunnelMethodNoTunnel = &shared.DestinationClickhouseSSHTunnelMethodNoTunnel{
				TunnelMethod: tunnelMethod1,
			}
		}
		if destinationClickhouseSSHTunnelMethodNoTunnel != nil {
			tunnelMethod = &shared.DestinationClickhouseSSHTunnelMethod{
				DestinationClickhouseSSHTunnelMethodNoTunnel: destinationClickhouseSSHTunnelMethodNoTunnel,
			}
		}
		var destinationClickhouseSSHTunnelMethodSSHKeyAuthentication *shared.DestinationClickhouseSSHTunnelMethodSSHKeyAuthentication
		if r.Configuration.DestinationClickhouse.TunnelMethod.DestinationClickhouseSSHTunnelMethodSSHKeyAuthentication != nil {
			sshKey := r.Configuration.DestinationClickhouse.TunnelMethod.DestinationClickhouseSSHTunnelMethodSSHKeyAuthentication.SSHKey.ValueString()
			tunnelHost := r.Configuration.DestinationClickhouse.TunnelMethod.DestinationClickhouseSSHTunnelMethodSSHKeyAuthentication.TunnelHost.ValueString()
			tunnelMethod2 := shared.DestinationClickhouseSSHTunnelMethodSSHKeyAuthenticationTunnelMethodEnum(r.Configuration.DestinationClickhouse.TunnelMethod.DestinationClickhouseSSHTunnelMethodSSHKeyAuthentication.TunnelMethod.ValueString())
			tunnelPort := r.Configuration.DestinationClickhouse.TunnelMethod.DestinationClickhouseSSHTunnelMethodSSHKeyAuthentication.TunnelPort.ValueInt64()
			tunnelUser := r.Configuration.DestinationClickhouse.TunnelMethod.DestinationClickhouseSSHTunnelMethodSSHKeyAuthentication.TunnelUser.ValueString()
			destinationClickhouseSSHTunnelMethodSSHKeyAuthentication = &shared.DestinationClickhouseSSHTunnelMethodSSHKeyAuthentication{
				SSHKey:       sshKey,
				TunnelHost:   tunnelHost,
				TunnelMethod: tunnelMethod2,
				TunnelPort:   tunnelPort,
				TunnelUser:   tunnelUser,
			}
		}
		if destinationClickhouseSSHTunnelMethodSSHKeyAuthentication != nil {
			tunnelMethod = &shared.DestinationClickhouseSSHTunnelMethod{
				DestinationClickhouseSSHTunnelMethodSSHKeyAuthentication: destinationClickhouseSSHTunnelMethodSSHKeyAuthentication,
			}
		}
		var destinationClickhouseSSHTunnelMethodPasswordAuthentication *shared.DestinationClickhouseSSHTunnelMethodPasswordAuthentication
		if r.Configuration.DestinationClickhouse.TunnelMethod.DestinationClickhouseSSHTunnelMethodPasswordAuthentication != nil {
			tunnelHost1 := r.Configuration.DestinationClickhouse.TunnelMethod.DestinationClickhouseSSHTunnelMethodPasswordAuthentication.TunnelHost.ValueString()
			tunnelMethod3 := shared.DestinationClickhouseSSHTunnelMethodPasswordAuthenticationTunnelMethodEnum(r.Configuration.DestinationClickhouse.TunnelMethod.DestinationClickhouseSSHTunnelMethodPasswordAuthentication.TunnelMethod.ValueString())
			tunnelPort1 := r.Configuration.DestinationClickhouse.TunnelMethod.DestinationClickhouseSSHTunnelMethodPasswordAuthentication.TunnelPort.ValueInt64()
			tunnelUser1 := r.Configuration.DestinationClickhouse.TunnelMethod.DestinationClickhouseSSHTunnelMethodPasswordAuthentication.TunnelUser.ValueString()
			tunnelUserPassword := r.Configuration.DestinationClickhouse.TunnelMethod.DestinationClickhouseSSHTunnelMethodPasswordAuthentication.TunnelUserPassword.ValueString()
			destinationClickhouseSSHTunnelMethodPasswordAuthentication = &shared.DestinationClickhouseSSHTunnelMethodPasswordAuthentication{
				TunnelHost:         tunnelHost1,
				TunnelMethod:       tunnelMethod3,
				TunnelPort:         tunnelPort1,
				TunnelUser:         tunnelUser1,
				TunnelUserPassword: tunnelUserPassword,
			}
		}
		if destinationClickhouseSSHTunnelMethodPasswordAuthentication != nil {
			tunnelMethod = &shared.DestinationClickhouseSSHTunnelMethod{
				DestinationClickhouseSSHTunnelMethodPasswordAuthentication: destinationClickhouseSSHTunnelMethodPasswordAuthentication,
			}
		}
		username1 := r.Configuration.DestinationClickhouse.Username.ValueString()
		destinationClickhouse = &shared.DestinationClickhouse{
			Database:        database,
			DestinationType: destinationType6,
			Host:            host,
			JdbcURLParams:   jdbcURLParams,
			Password:        password1,
			Port:            port1,
			TunnelMethod:    tunnelMethod,
			Username:        username1,
		}
	}
	if destinationClickhouse != nil {
		configuration = shared.DestinationConfiguration{
			DestinationClickhouse: destinationClickhouse,
		}
	}
	var destinationConvex *shared.DestinationConvex
	if r.Configuration.DestinationConvex != nil {
		accessKey1 := r.Configuration.DestinationConvex.AccessKey.ValueString()
		deploymentURL := r.Configuration.DestinationConvex.DeploymentURL.ValueString()
		destinationType7 := shared.DestinationConvexConvexEnum(r.Configuration.DestinationConvex.DestinationType.ValueString())
		destinationConvex = &shared.DestinationConvex{
			AccessKey:       accessKey1,
			DeploymentURL:   deploymentURL,
			DestinationType: destinationType7,
		}
	}
	if destinationConvex != nil {
		configuration = shared.DestinationConfiguration{
			DestinationConvex: destinationConvex,
		}
	}
	var destinationDatabend *shared.DestinationDatabend
	if r.Configuration.DestinationDatabend != nil {
		database1 := r.Configuration.DestinationDatabend.Database.ValueString()
		destinationType8 := shared.DestinationDatabendDatabendEnum(r.Configuration.DestinationDatabend.DestinationType.ValueString())
		host1 := r.Configuration.DestinationDatabend.Host.ValueString()
		password2 := new(string)
		if !r.Configuration.DestinationDatabend.Password.IsUnknown() && !r.Configuration.DestinationDatabend.Password.IsNull() {
			*password2 = r.Configuration.DestinationDatabend.Password.ValueString()
		} else {
			password2 = nil
		}
		port2 := new(int64)
		if !r.Configuration.DestinationDatabend.Port.IsUnknown() && !r.Configuration.DestinationDatabend.Port.IsNull() {
			*port2 = r.Configuration.DestinationDatabend.Port.ValueInt64()
		} else {
			port2 = nil
		}
		table := new(string)
		if !r.Configuration.DestinationDatabend.Table.IsUnknown() && !r.Configuration.DestinationDatabend.Table.IsNull() {
			*table = r.Configuration.DestinationDatabend.Table.ValueString()
		} else {
			table = nil
		}
		username2 := r.Configuration.DestinationDatabend.Username.ValueString()
		destinationDatabend = &shared.DestinationDatabend{
			Database:        database1,
			DestinationType: destinationType8,
			Host:            host1,
			Password:        password2,
			Port:            port2,
			Table:           table,
			Username:        username2,
		}
	}
	if destinationDatabend != nil {
		configuration = shared.DestinationConfiguration{
			DestinationDatabend: destinationDatabend,
		}
	}
	var destinationDatabricks *shared.DestinationDatabricks
	if r.Configuration.DestinationDatabricks != nil {
		acceptTerms := r.Configuration.DestinationDatabricks.AcceptTerms.ValueBool()
		var dataSource shared.DestinationDatabricksDataSource
		var destinationDatabricksDataSourceRecommendedManagedTables *shared.DestinationDatabricksDataSourceRecommendedManagedTables
		if r.Configuration.DestinationDatabricks.DataSource.DestinationDatabricksDataSourceRecommendedManagedTables != nil {
			dataSourceType := shared.DestinationDatabricksDataSourceRecommendedManagedTablesDataSourceTypeEnum(r.Configuration.DestinationDatabricks.DataSource.DestinationDatabricksDataSourceRecommendedManagedTables.DataSourceType.ValueString())
			destinationDatabricksDataSourceRecommendedManagedTables = &shared.DestinationDatabricksDataSourceRecommendedManagedTables{
				DataSourceType: dataSourceType,
			}
		}
		if destinationDatabricksDataSourceRecommendedManagedTables != nil {
			dataSource = shared.DestinationDatabricksDataSource{
				DestinationDatabricksDataSourceRecommendedManagedTables: destinationDatabricksDataSourceRecommendedManagedTables,
			}
		}
		var destinationDatabricksDataSourceAmazonS3 *shared.DestinationDatabricksDataSourceAmazonS3
		if r.Configuration.DestinationDatabricks.DataSource.DestinationDatabricksDataSourceAmazonS3 != nil {
			dataSourceType1 := shared.DestinationDatabricksDataSourceAmazonS3DataSourceTypeEnum(r.Configuration.DestinationDatabricks.DataSource.DestinationDatabricksDataSourceAmazonS3.DataSourceType.ValueString())
			fileNamePattern := new(string)
			if !r.Configuration.DestinationDatabricks.DataSource.DestinationDatabricksDataSourceAmazonS3.FileNamePattern.IsUnknown() && !r.Configuration.DestinationDatabricks.DataSource.DestinationDatabricksDataSourceAmazonS3.FileNamePattern.IsNull() {
				*fileNamePattern = r.Configuration.DestinationDatabricks.DataSource.DestinationDatabricksDataSourceAmazonS3.FileNamePattern.ValueString()
			} else {
				fileNamePattern = nil
			}
			s3AccessKeyID := r.Configuration.DestinationDatabricks.DataSource.DestinationDatabricksDataSourceAmazonS3.S3AccessKeyID.ValueString()
			s3BucketName := r.Configuration.DestinationDatabricks.DataSource.DestinationDatabricksDataSourceAmazonS3.S3BucketName.ValueString()
			s3BucketPath := r.Configuration.DestinationDatabricks.DataSource.DestinationDatabricksDataSourceAmazonS3.S3BucketPath.ValueString()
			s3BucketRegion := shared.DestinationDatabricksDataSourceAmazonS3S3BucketRegionEnum(r.Configuration.DestinationDatabricks.DataSource.DestinationDatabricksDataSourceAmazonS3.S3BucketRegion.ValueString())
			s3SecretAccessKey := r.Configuration.DestinationDatabricks.DataSource.DestinationDatabricksDataSourceAmazonS3.S3SecretAccessKey.ValueString()
			destinationDatabricksDataSourceAmazonS3 = &shared.DestinationDatabricksDataSourceAmazonS3{
				DataSourceType:    dataSourceType1,
				FileNamePattern:   fileNamePattern,
				S3AccessKeyID:     s3AccessKeyID,
				S3BucketName:      s3BucketName,
				S3BucketPath:      s3BucketPath,
				S3BucketRegion:    s3BucketRegion,
				S3SecretAccessKey: s3SecretAccessKey,
			}
		}
		if destinationDatabricksDataSourceAmazonS3 != nil {
			dataSource = shared.DestinationDatabricksDataSource{
				DestinationDatabricksDataSourceAmazonS3: destinationDatabricksDataSourceAmazonS3,
			}
		}
		var destinationDatabricksDataSourceAzureBlobStorage *shared.DestinationDatabricksDataSourceAzureBlobStorage
		if r.Configuration.DestinationDatabricks.DataSource.DestinationDatabricksDataSourceAzureBlobStorage != nil {
			azureBlobStorageAccountName1 := r.Configuration.DestinationDatabricks.DataSource.DestinationDatabricksDataSourceAzureBlobStorage.AzureBlobStorageAccountName.ValueString()
			azureBlobStorageContainerName1 := r.Configuration.DestinationDatabricks.DataSource.DestinationDatabricksDataSourceAzureBlobStorage.AzureBlobStorageContainerName.ValueString()
			azureBlobStorageEndpointDomainName1 := new(string)
			if !r.Configuration.DestinationDatabricks.DataSource.DestinationDatabricksDataSourceAzureBlobStorage.AzureBlobStorageEndpointDomainName.IsUnknown() && !r.Configuration.DestinationDatabricks.DataSource.DestinationDatabricksDataSourceAzureBlobStorage.AzureBlobStorageEndpointDomainName.IsNull() {
				*azureBlobStorageEndpointDomainName1 = r.Configuration.DestinationDatabricks.DataSource.DestinationDatabricksDataSourceAzureBlobStorage.AzureBlobStorageEndpointDomainName.ValueString()
			} else {
				azureBlobStorageEndpointDomainName1 = nil
			}
			azureBlobStorageSasToken := r.Configuration.DestinationDatabricks.DataSource.DestinationDatabricksDataSourceAzureBlobStorage.AzureBlobStorageSasToken.ValueString()
			dataSourceType2 := shared.DestinationDatabricksDataSourceAzureBlobStorageDataSourceTypeEnum(r.Configuration.DestinationDatabricks.DataSource.DestinationDatabricksDataSourceAzureBlobStorage.DataSourceType.ValueString())
			destinationDatabricksDataSourceAzureBlobStorage = &shared.DestinationDatabricksDataSourceAzureBlobStorage{
				AzureBlobStorageAccountName:        azureBlobStorageAccountName1,
				AzureBlobStorageContainerName:      azureBlobStorageContainerName1,
				AzureBlobStorageEndpointDomainName: azureBlobStorageEndpointDomainName1,
				AzureBlobStorageSasToken:           azureBlobStorageSasToken,
				DataSourceType:                     dataSourceType2,
			}
		}
		if destinationDatabricksDataSourceAzureBlobStorage != nil {
			dataSource = shared.DestinationDatabricksDataSource{
				DestinationDatabricksDataSourceAzureBlobStorage: destinationDatabricksDataSourceAzureBlobStorage,
			}
		}
		database2 := new(string)
		if !r.Configuration.DestinationDatabricks.Database.IsUnknown() && !r.Configuration.DestinationDatabricks.Database.IsNull() {
			*database2 = r.Configuration.DestinationDatabricks.Database.ValueString()
		} else {
			database2 = nil
		}
		databricksHTTPPath := r.Configuration.DestinationDatabricks.DatabricksHTTPPath.ValueString()
		databricksPersonalAccessToken := r.Configuration.DestinationDatabricks.DatabricksPersonalAccessToken.ValueString()
		databricksPort := new(string)
		if !r.Configuration.DestinationDatabricks.DatabricksPort.IsUnknown() && !r.Configuration.DestinationDatabricks.DatabricksPort.IsNull() {
			*databricksPort = r.Configuration.DestinationDatabricks.DatabricksPort.ValueString()
		} else {
			databricksPort = nil
		}
		databricksServerHostname := r.Configuration.DestinationDatabricks.DatabricksServerHostname.ValueString()
		destinationType9 := shared.DestinationDatabricksDatabricksEnum(r.Configuration.DestinationDatabricks.DestinationType.ValueString())
		purgeStagingData := new(bool)
		if !r.Configuration.DestinationDatabricks.PurgeStagingData.IsUnknown() && !r.Configuration.DestinationDatabricks.PurgeStagingData.IsNull() {
			*purgeStagingData = r.Configuration.DestinationDatabricks.PurgeStagingData.ValueBool()
		} else {
			purgeStagingData = nil
		}
		schema := new(string)
		if !r.Configuration.DestinationDatabricks.Schema.IsUnknown() && !r.Configuration.DestinationDatabricks.Schema.IsNull() {
			*schema = r.Configuration.DestinationDatabricks.Schema.ValueString()
		} else {
			schema = nil
		}
		destinationDatabricks = &shared.DestinationDatabricks{
			AcceptTerms:                   acceptTerms,
			DataSource:                    dataSource,
			Database:                      database2,
			DatabricksHTTPPath:            databricksHTTPPath,
			DatabricksPersonalAccessToken: databricksPersonalAccessToken,
			DatabricksPort:                databricksPort,
			DatabricksServerHostname:      databricksServerHostname,
			DestinationType:               destinationType9,
			PurgeStagingData:              purgeStagingData,
			Schema:                        schema,
		}
	}
	if destinationDatabricks != nil {
		configuration = shared.DestinationConfiguration{
			DestinationDatabricks: destinationDatabricks,
		}
	}
	var destinationDynamodb *shared.DestinationDynamodb
	if r.Configuration.DestinationDynamodb != nil {
		accessKeyID := r.Configuration.DestinationDynamodb.AccessKeyID.ValueString()
		destinationType10 := shared.DestinationDynamodbDynamodbEnum(r.Configuration.DestinationDynamodb.DestinationType.ValueString())
		dynamodbEndpoint := new(string)
		if !r.Configuration.DestinationDynamodb.DynamodbEndpoint.IsUnknown() && !r.Configuration.DestinationDynamodb.DynamodbEndpoint.IsNull() {
			*dynamodbEndpoint = r.Configuration.DestinationDynamodb.DynamodbEndpoint.ValueString()
		} else {
			dynamodbEndpoint = nil
		}
		dynamodbRegion := shared.DestinationDynamodbDynamoDBRegionEnum(r.Configuration.DestinationDynamodb.DynamodbRegion.ValueString())
		dynamodbTableNamePrefix := r.Configuration.DestinationDynamodb.DynamodbTableNamePrefix.ValueString()
		secretAccessKey := r.Configuration.DestinationDynamodb.SecretAccessKey.ValueString()
		destinationDynamodb = &shared.DestinationDynamodb{
			AccessKeyID:             accessKeyID,
			DestinationType:         destinationType10,
			DynamodbEndpoint:        dynamodbEndpoint,
			DynamodbRegion:          dynamodbRegion,
			DynamodbTableNamePrefix: dynamodbTableNamePrefix,
			SecretAccessKey:         secretAccessKey,
		}
	}
	if destinationDynamodb != nil {
		configuration = shared.DestinationConfiguration{
			DestinationDynamodb: destinationDynamodb,
		}
	}
	var destinationElasticsearch *shared.DestinationElasticsearch
	if r.Configuration.DestinationElasticsearch != nil {
		var authenticationMethod *shared.DestinationElasticsearchAuthenticationMethod
		var destinationElasticsearchAuthenticationMethodAPIKeySecret *shared.DestinationElasticsearchAuthenticationMethodAPIKeySecret
		if r.Configuration.DestinationElasticsearch.AuthenticationMethod.DestinationElasticsearchAuthenticationMethodAPIKeySecret != nil {
			apiKeyID := r.Configuration.DestinationElasticsearch.AuthenticationMethod.DestinationElasticsearchAuthenticationMethodAPIKeySecret.APIKeyID.ValueString()
			apiKeySecret := r.Configuration.DestinationElasticsearch.AuthenticationMethod.DestinationElasticsearchAuthenticationMethodAPIKeySecret.APIKeySecret.ValueString()
			method4 := shared.DestinationElasticsearchAuthenticationMethodAPIKeySecretMethodEnum(r.Configuration.DestinationElasticsearch.AuthenticationMethod.DestinationElasticsearchAuthenticationMethodAPIKeySecret.Method.ValueString())
			destinationElasticsearchAuthenticationMethodAPIKeySecret = &shared.DestinationElasticsearchAuthenticationMethodAPIKeySecret{
				APIKeyID:     apiKeyID,
				APIKeySecret: apiKeySecret,
				Method:       method4,
			}
		}
		if destinationElasticsearchAuthenticationMethodAPIKeySecret != nil {
			authenticationMethod = &shared.DestinationElasticsearchAuthenticationMethod{
				DestinationElasticsearchAuthenticationMethodAPIKeySecret: destinationElasticsearchAuthenticationMethodAPIKeySecret,
			}
		}
		var destinationElasticsearchAuthenticationMethodUsernamePassword *shared.DestinationElasticsearchAuthenticationMethodUsernamePassword
		if r.Configuration.DestinationElasticsearch.AuthenticationMethod.DestinationElasticsearchAuthenticationMethodUsernamePassword != nil {
			method5 := shared.DestinationElasticsearchAuthenticationMethodUsernamePasswordMethodEnum(r.Configuration.DestinationElasticsearch.AuthenticationMethod.DestinationElasticsearchAuthenticationMethodUsernamePassword.Method.ValueString())
			password3 := r.Configuration.DestinationElasticsearch.AuthenticationMethod.DestinationElasticsearchAuthenticationMethodUsernamePassword.Password.ValueString()
			username3 := r.Configuration.DestinationElasticsearch.AuthenticationMethod.DestinationElasticsearchAuthenticationMethodUsernamePassword.Username.ValueString()
			destinationElasticsearchAuthenticationMethodUsernamePassword = &shared.DestinationElasticsearchAuthenticationMethodUsernamePassword{
				Method:   method5,
				Password: password3,
				Username: username3,
			}
		}
		if destinationElasticsearchAuthenticationMethodUsernamePassword != nil {
			authenticationMethod = &shared.DestinationElasticsearchAuthenticationMethod{
				DestinationElasticsearchAuthenticationMethodUsernamePassword: destinationElasticsearchAuthenticationMethodUsernamePassword,
			}
		}
		caCertificate := new(string)
		if !r.Configuration.DestinationElasticsearch.CaCertificate.IsUnknown() && !r.Configuration.DestinationElasticsearch.CaCertificate.IsNull() {
			*caCertificate = r.Configuration.DestinationElasticsearch.CaCertificate.ValueString()
		} else {
			caCertificate = nil
		}
		destinationType11 := shared.DestinationElasticsearchElasticsearchEnum(r.Configuration.DestinationElasticsearch.DestinationType.ValueString())
		endpoint := r.Configuration.DestinationElasticsearch.Endpoint.ValueString()
		upsert := new(bool)
		if !r.Configuration.DestinationElasticsearch.Upsert.IsUnknown() && !r.Configuration.DestinationElasticsearch.Upsert.IsNull() {
			*upsert = r.Configuration.DestinationElasticsearch.Upsert.ValueBool()
		} else {
			upsert = nil
		}
		destinationElasticsearch = &shared.DestinationElasticsearch{
			AuthenticationMethod: authenticationMethod,
			CaCertificate:        caCertificate,
			DestinationType:      destinationType11,
			Endpoint:             endpoint,
			Upsert:               upsert,
		}
	}
	if destinationElasticsearch != nil {
		configuration = shared.DestinationConfiguration{
			DestinationElasticsearch: destinationElasticsearch,
		}
	}
	var destinationFirebolt *shared.DestinationFirebolt
	if r.Configuration.DestinationFirebolt != nil {
		account := new(string)
		if !r.Configuration.DestinationFirebolt.Account.IsUnknown() && !r.Configuration.DestinationFirebolt.Account.IsNull() {
			*account = r.Configuration.DestinationFirebolt.Account.ValueString()
		} else {
			account = nil
		}
		database3 := r.Configuration.DestinationFirebolt.Database.ValueString()
		destinationType12 := shared.DestinationFireboltFireboltEnum(r.Configuration.DestinationFirebolt.DestinationType.ValueString())
		engine := new(string)
		if !r.Configuration.DestinationFirebolt.Engine.IsUnknown() && !r.Configuration.DestinationFirebolt.Engine.IsNull() {
			*engine = r.Configuration.DestinationFirebolt.Engine.ValueString()
		} else {
			engine = nil
		}
		host2 := new(string)
		if !r.Configuration.DestinationFirebolt.Host.IsUnknown() && !r.Configuration.DestinationFirebolt.Host.IsNull() {
			*host2 = r.Configuration.DestinationFirebolt.Host.ValueString()
		} else {
			host2 = nil
		}
		var loadingMethod2 *shared.DestinationFireboltLoadingMethod
		var destinationFireboltLoadingMethodSQLInserts *shared.DestinationFireboltLoadingMethodSQLInserts
		if r.Configuration.DestinationFirebolt.LoadingMethod.DestinationFireboltLoadingMethodSQLInserts != nil {
			method6 := shared.DestinationFireboltLoadingMethodSQLInsertsMethodEnum(r.Configuration.DestinationFirebolt.LoadingMethod.DestinationFireboltLoadingMethodSQLInserts.Method.ValueString())
			destinationFireboltLoadingMethodSQLInserts = &shared.DestinationFireboltLoadingMethodSQLInserts{
				Method: method6,
			}
		}
		if destinationFireboltLoadingMethodSQLInserts != nil {
			loadingMethod2 = &shared.DestinationFireboltLoadingMethod{
				DestinationFireboltLoadingMethodSQLInserts: destinationFireboltLoadingMethodSQLInserts,
			}
		}
		var destinationFireboltLoadingMethodExternalTableViaS3 *shared.DestinationFireboltLoadingMethodExternalTableViaS3
		if r.Configuration.DestinationFirebolt.LoadingMethod.DestinationFireboltLoadingMethodExternalTableViaS3 != nil {
			awsKeyID := r.Configuration.DestinationFirebolt.LoadingMethod.DestinationFireboltLoadingMethodExternalTableViaS3.AwsKeyID.ValueString()
			awsKeySecret := r.Configuration.DestinationFirebolt.LoadingMethod.DestinationFireboltLoadingMethodExternalTableViaS3.AwsKeySecret.ValueString()
			method7 := shared.DestinationFireboltLoadingMethodExternalTableViaS3MethodEnum(r.Configuration.DestinationFirebolt.LoadingMethod.DestinationFireboltLoadingMethodExternalTableViaS3.Method.ValueString())
			s3Bucket := r.Configuration.DestinationFirebolt.LoadingMethod.DestinationFireboltLoadingMethodExternalTableViaS3.S3Bucket.ValueString()
			s3Region := r.Configuration.DestinationFirebolt.LoadingMethod.DestinationFireboltLoadingMethodExternalTableViaS3.S3Region.ValueString()
			destinationFireboltLoadingMethodExternalTableViaS3 = &shared.DestinationFireboltLoadingMethodExternalTableViaS3{
				AwsKeyID:     awsKeyID,
				AwsKeySecret: awsKeySecret,
				Method:       method7,
				S3Bucket:     s3Bucket,
				S3Region:     s3Region,
			}
		}
		if destinationFireboltLoadingMethodExternalTableViaS3 != nil {
			loadingMethod2 = &shared.DestinationFireboltLoadingMethod{
				DestinationFireboltLoadingMethodExternalTableViaS3: destinationFireboltLoadingMethodExternalTableViaS3,
			}
		}
		password4 := r.Configuration.DestinationFirebolt.Password.ValueString()
		username4 := r.Configuration.DestinationFirebolt.Username.ValueString()
		destinationFirebolt = &shared.DestinationFirebolt{
			Account:         account,
			Database:        database3,
			DestinationType: destinationType12,
			Engine:          engine,
			Host:            host2,
			LoadingMethod:   loadingMethod2,
			Password:        password4,
			Username:        username4,
		}
	}
	if destinationFirebolt != nil {
		configuration = shared.DestinationConfiguration{
			DestinationFirebolt: destinationFirebolt,
		}
	}
	var destinationFirestore *shared.DestinationFirestore
	if r.Configuration.DestinationFirestore != nil {
		credentialsJson2 := new(string)
		if !r.Configuration.DestinationFirestore.CredentialsJSON.IsUnknown() && !r.Configuration.DestinationFirestore.CredentialsJSON.IsNull() {
			*credentialsJson2 = r.Configuration.DestinationFirestore.CredentialsJSON.ValueString()
		} else {
			credentialsJson2 = nil
		}
		destinationType13 := shared.DestinationFirestoreFirestoreEnum(r.Configuration.DestinationFirestore.DestinationType.ValueString())
		projectId2 := r.Configuration.DestinationFirestore.ProjectID.ValueString()
		destinationFirestore = &shared.DestinationFirestore{
			CredentialsJSON: credentialsJson2,
			DestinationType: destinationType13,
			ProjectID:       projectId2,
		}
	}
	if destinationFirestore != nil {
		configuration = shared.DestinationConfiguration{
			DestinationFirestore: destinationFirestore,
		}
	}
	var destinationGcs *shared.DestinationGcs
	if r.Configuration.DestinationGcs != nil {
		var credential2 shared.DestinationGcsAuthentication
		var destinationGcsAuthenticationHMACKey *shared.DestinationGcsAuthenticationHMACKey
		if r.Configuration.DestinationGcs.Credential.DestinationGcsAuthenticationHMACKey != nil {
			credentialType2 := shared.DestinationGcsAuthenticationHMACKeyCredentialTypeEnum(r.Configuration.DestinationGcs.Credential.DestinationGcsAuthenticationHMACKey.CredentialType.ValueString())
			hmacKeyAccessId2 := r.Configuration.DestinationGcs.Credential.DestinationGcsAuthenticationHMACKey.HmacKeyAccessID.ValueString()
			hmacKeySecret2 := r.Configuration.DestinationGcs.Credential.DestinationGcsAuthenticationHMACKey.HmacKeySecret.ValueString()
			destinationGcsAuthenticationHMACKey = &shared.DestinationGcsAuthenticationHMACKey{
				CredentialType:  credentialType2,
				HmacKeyAccessID: hmacKeyAccessId2,
				HmacKeySecret:   hmacKeySecret2,
			}
		}
		if destinationGcsAuthenticationHMACKey != nil {
			credential2 = shared.DestinationGcsAuthentication{
				DestinationGcsAuthenticationHMACKey: destinationGcsAuthenticationHMACKey,
			}
		}
		destinationType14 := shared.DestinationGcsGcsEnum(r.Configuration.DestinationGcs.DestinationType.ValueString())
		var format2 shared.DestinationGcsOutputFormat
		var destinationGcsOutputFormatAvroApacheAvro *shared.DestinationGcsOutputFormatAvroApacheAvro
		if r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatAvroApacheAvro != nil {
			var compressionCodec2 shared.DestinationGcsOutputFormatAvroApacheAvroCompressionCodec
			var destinationGcsOutputFormatAvroApacheAvroCompressionCodecNoCompression *shared.DestinationGcsOutputFormatAvroApacheAvroCompressionCodecNoCompression
			if r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatAvroApacheAvro.CompressionCodec.DestinationGcsOutputFormatAvroApacheAvroCompressionCodecNoCompression != nil {
				codec := shared.DestinationGcsOutputFormatAvroApacheAvroCompressionCodecNoCompressionCodecEnum(r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatAvroApacheAvro.CompressionCodec.DestinationGcsOutputFormatAvroApacheAvroCompressionCodecNoCompression.Codec.ValueString())
				destinationGcsOutputFormatAvroApacheAvroCompressionCodecNoCompression = &shared.DestinationGcsOutputFormatAvroApacheAvroCompressionCodecNoCompression{
					Codec: codec,
				}
			}
			if destinationGcsOutputFormatAvroApacheAvroCompressionCodecNoCompression != nil {
				compressionCodec2 = shared.DestinationGcsOutputFormatAvroApacheAvroCompressionCodec{
					DestinationGcsOutputFormatAvroApacheAvroCompressionCodecNoCompression: destinationGcsOutputFormatAvroApacheAvroCompressionCodecNoCompression,
				}
			}
			var destinationGcsOutputFormatAvroApacheAvroCompressionCodecDeflate *shared.DestinationGcsOutputFormatAvroApacheAvroCompressionCodecDeflate
			if r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatAvroApacheAvro.CompressionCodec.DestinationGcsOutputFormatAvroApacheAvroCompressionCodecDeflate != nil {
				codec1 := shared.DestinationGcsOutputFormatAvroApacheAvroCompressionCodecDeflateCodecEnum(r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatAvroApacheAvro.CompressionCodec.DestinationGcsOutputFormatAvroApacheAvroCompressionCodecDeflate.Codec.ValueString())
				compressionLevel := new(int64)
				if !r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatAvroApacheAvro.CompressionCodec.DestinationGcsOutputFormatAvroApacheAvroCompressionCodecDeflate.CompressionLevel.IsUnknown() && !r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatAvroApacheAvro.CompressionCodec.DestinationGcsOutputFormatAvroApacheAvroCompressionCodecDeflate.CompressionLevel.IsNull() {
					*compressionLevel = r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatAvroApacheAvro.CompressionCodec.DestinationGcsOutputFormatAvroApacheAvroCompressionCodecDeflate.CompressionLevel.ValueInt64()
				} else {
					compressionLevel = nil
				}
				destinationGcsOutputFormatAvroApacheAvroCompressionCodecDeflate = &shared.DestinationGcsOutputFormatAvroApacheAvroCompressionCodecDeflate{
					Codec:            codec1,
					CompressionLevel: compressionLevel,
				}
			}
			if destinationGcsOutputFormatAvroApacheAvroCompressionCodecDeflate != nil {
				compressionCodec2 = shared.DestinationGcsOutputFormatAvroApacheAvroCompressionCodec{
					DestinationGcsOutputFormatAvroApacheAvroCompressionCodecDeflate: destinationGcsOutputFormatAvroApacheAvroCompressionCodecDeflate,
				}
			}
			var destinationGcsOutputFormatAvroApacheAvroCompressionCodecBzip2 *shared.DestinationGcsOutputFormatAvroApacheAvroCompressionCodecBzip2
			if r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatAvroApacheAvro.CompressionCodec.DestinationGcsOutputFormatAvroApacheAvroCompressionCodecBzip2 != nil {
				codec2 := shared.DestinationGcsOutputFormatAvroApacheAvroCompressionCodecBzip2CodecEnum(r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatAvroApacheAvro.CompressionCodec.DestinationGcsOutputFormatAvroApacheAvroCompressionCodecBzip2.Codec.ValueString())
				destinationGcsOutputFormatAvroApacheAvroCompressionCodecBzip2 = &shared.DestinationGcsOutputFormatAvroApacheAvroCompressionCodecBzip2{
					Codec: codec2,
				}
			}
			if destinationGcsOutputFormatAvroApacheAvroCompressionCodecBzip2 != nil {
				compressionCodec2 = shared.DestinationGcsOutputFormatAvroApacheAvroCompressionCodec{
					DestinationGcsOutputFormatAvroApacheAvroCompressionCodecBzip2: destinationGcsOutputFormatAvroApacheAvroCompressionCodecBzip2,
				}
			}
			var destinationGcsOutputFormatAvroApacheAvroCompressionCodecXz *shared.DestinationGcsOutputFormatAvroApacheAvroCompressionCodecXz
			if r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatAvroApacheAvro.CompressionCodec.DestinationGcsOutputFormatAvroApacheAvroCompressionCodecXz != nil {
				codec3 := shared.DestinationGcsOutputFormatAvroApacheAvroCompressionCodecXzCodecEnum(r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatAvroApacheAvro.CompressionCodec.DestinationGcsOutputFormatAvroApacheAvroCompressionCodecXz.Codec.ValueString())
				compressionLevel1 := new(int64)
				if !r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatAvroApacheAvro.CompressionCodec.DestinationGcsOutputFormatAvroApacheAvroCompressionCodecXz.CompressionLevel.IsUnknown() && !r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatAvroApacheAvro.CompressionCodec.DestinationGcsOutputFormatAvroApacheAvroCompressionCodecXz.CompressionLevel.IsNull() {
					*compressionLevel1 = r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatAvroApacheAvro.CompressionCodec.DestinationGcsOutputFormatAvroApacheAvroCompressionCodecXz.CompressionLevel.ValueInt64()
				} else {
					compressionLevel1 = nil
				}
				destinationGcsOutputFormatAvroApacheAvroCompressionCodecXz = &shared.DestinationGcsOutputFormatAvroApacheAvroCompressionCodecXz{
					Codec:            codec3,
					CompressionLevel: compressionLevel1,
				}
			}
			if destinationGcsOutputFormatAvroApacheAvroCompressionCodecXz != nil {
				compressionCodec2 = shared.DestinationGcsOutputFormatAvroApacheAvroCompressionCodec{
					DestinationGcsOutputFormatAvroApacheAvroCompressionCodecXz: destinationGcsOutputFormatAvroApacheAvroCompressionCodecXz,
				}
			}
			var destinationGcsOutputFormatAvroApacheAvroCompressionCodecZstandard *shared.DestinationGcsOutputFormatAvroApacheAvroCompressionCodecZstandard
			if r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatAvroApacheAvro.CompressionCodec.DestinationGcsOutputFormatAvroApacheAvroCompressionCodecZstandard != nil {
				codec4 := shared.DestinationGcsOutputFormatAvroApacheAvroCompressionCodecZstandardCodecEnum(r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatAvroApacheAvro.CompressionCodec.DestinationGcsOutputFormatAvroApacheAvroCompressionCodecZstandard.Codec.ValueString())
				compressionLevel2 := new(int64)
				if !r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatAvroApacheAvro.CompressionCodec.DestinationGcsOutputFormatAvroApacheAvroCompressionCodecZstandard.CompressionLevel.IsUnknown() && !r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatAvroApacheAvro.CompressionCodec.DestinationGcsOutputFormatAvroApacheAvroCompressionCodecZstandard.CompressionLevel.IsNull() {
					*compressionLevel2 = r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatAvroApacheAvro.CompressionCodec.DestinationGcsOutputFormatAvroApacheAvroCompressionCodecZstandard.CompressionLevel.ValueInt64()
				} else {
					compressionLevel2 = nil
				}
				includeChecksum := new(bool)
				if !r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatAvroApacheAvro.CompressionCodec.DestinationGcsOutputFormatAvroApacheAvroCompressionCodecZstandard.IncludeChecksum.IsUnknown() && !r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatAvroApacheAvro.CompressionCodec.DestinationGcsOutputFormatAvroApacheAvroCompressionCodecZstandard.IncludeChecksum.IsNull() {
					*includeChecksum = r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatAvroApacheAvro.CompressionCodec.DestinationGcsOutputFormatAvroApacheAvroCompressionCodecZstandard.IncludeChecksum.ValueBool()
				} else {
					includeChecksum = nil
				}
				destinationGcsOutputFormatAvroApacheAvroCompressionCodecZstandard = &shared.DestinationGcsOutputFormatAvroApacheAvroCompressionCodecZstandard{
					Codec:            codec4,
					CompressionLevel: compressionLevel2,
					IncludeChecksum:  includeChecksum,
				}
			}
			if destinationGcsOutputFormatAvroApacheAvroCompressionCodecZstandard != nil {
				compressionCodec2 = shared.DestinationGcsOutputFormatAvroApacheAvroCompressionCodec{
					DestinationGcsOutputFormatAvroApacheAvroCompressionCodecZstandard: destinationGcsOutputFormatAvroApacheAvroCompressionCodecZstandard,
				}
			}
			var destinationGcsOutputFormatAvroApacheAvroCompressionCodecSnappy *shared.DestinationGcsOutputFormatAvroApacheAvroCompressionCodecSnappy
			if r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatAvroApacheAvro.CompressionCodec.DestinationGcsOutputFormatAvroApacheAvroCompressionCodecSnappy != nil {
				codec5 := shared.DestinationGcsOutputFormatAvroApacheAvroCompressionCodecSnappyCodecEnum(r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatAvroApacheAvro.CompressionCodec.DestinationGcsOutputFormatAvroApacheAvroCompressionCodecSnappy.Codec.ValueString())
				destinationGcsOutputFormatAvroApacheAvroCompressionCodecSnappy = &shared.DestinationGcsOutputFormatAvroApacheAvroCompressionCodecSnappy{
					Codec: codec5,
				}
			}
			if destinationGcsOutputFormatAvroApacheAvroCompressionCodecSnappy != nil {
				compressionCodec2 = shared.DestinationGcsOutputFormatAvroApacheAvroCompressionCodec{
					DestinationGcsOutputFormatAvroApacheAvroCompressionCodecSnappy: destinationGcsOutputFormatAvroApacheAvroCompressionCodecSnappy,
				}
			}
			formatType4 := shared.DestinationGcsOutputFormatAvroApacheAvroFormatTypeEnum(r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatAvroApacheAvro.FormatType.ValueString())
			destinationGcsOutputFormatAvroApacheAvro = &shared.DestinationGcsOutputFormatAvroApacheAvro{
				CompressionCodec: compressionCodec2,
				FormatType:       formatType4,
			}
		}
		if destinationGcsOutputFormatAvroApacheAvro != nil {
			format2 = shared.DestinationGcsOutputFormat{
				DestinationGcsOutputFormatAvroApacheAvro: destinationGcsOutputFormatAvroApacheAvro,
			}
		}
		var destinationGcsOutputFormatCSVCommaSeparatedValues *shared.DestinationGcsOutputFormatCSVCommaSeparatedValues
		if r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatCSVCommaSeparatedValues != nil {
			var compression *shared.DestinationGcsOutputFormatCSVCommaSeparatedValuesCompression
			var destinationGcsOutputFormatCSVCommaSeparatedValuesCompressionNoCompression *shared.DestinationGcsOutputFormatCSVCommaSeparatedValuesCompressionNoCompression
			if r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatCSVCommaSeparatedValues.Compression.DestinationGcsOutputFormatCSVCommaSeparatedValuesCompressionNoCompression != nil {
				compressionType := new(shared.DestinationGcsOutputFormatCSVCommaSeparatedValuesCompressionNoCompressionCompressionTypeEnum)
				if !r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatCSVCommaSeparatedValues.Compression.DestinationGcsOutputFormatCSVCommaSeparatedValuesCompressionNoCompression.CompressionType.IsUnknown() && !r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatCSVCommaSeparatedValues.Compression.DestinationGcsOutputFormatCSVCommaSeparatedValuesCompressionNoCompression.CompressionType.IsNull() {
					*compressionType = shared.DestinationGcsOutputFormatCSVCommaSeparatedValuesCompressionNoCompressionCompressionTypeEnum(r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatCSVCommaSeparatedValues.Compression.DestinationGcsOutputFormatCSVCommaSeparatedValuesCompressionNoCompression.CompressionType.ValueString())
				} else {
					compressionType = nil
				}
				destinationGcsOutputFormatCSVCommaSeparatedValuesCompressionNoCompression = &shared.DestinationGcsOutputFormatCSVCommaSeparatedValuesCompressionNoCompression{
					CompressionType: compressionType,
				}
			}
			if destinationGcsOutputFormatCSVCommaSeparatedValuesCompressionNoCompression != nil {
				compression = &shared.DestinationGcsOutputFormatCSVCommaSeparatedValuesCompression{
					DestinationGcsOutputFormatCSVCommaSeparatedValuesCompressionNoCompression: destinationGcsOutputFormatCSVCommaSeparatedValuesCompressionNoCompression,
				}
			}
			var destinationGcsOutputFormatCSVCommaSeparatedValuesCompressionGZIP *shared.DestinationGcsOutputFormatCSVCommaSeparatedValuesCompressionGZIP
			if r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatCSVCommaSeparatedValues.Compression.DestinationGcsOutputFormatCSVCommaSeparatedValuesCompressionGZIP != nil {
				compressionType1 := new(shared.DestinationGcsOutputFormatCSVCommaSeparatedValuesCompressionGZIPCompressionTypeEnum)
				if !r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatCSVCommaSeparatedValues.Compression.DestinationGcsOutputFormatCSVCommaSeparatedValuesCompressionGZIP.CompressionType.IsUnknown() && !r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatCSVCommaSeparatedValues.Compression.DestinationGcsOutputFormatCSVCommaSeparatedValuesCompressionGZIP.CompressionType.IsNull() {
					*compressionType1 = shared.DestinationGcsOutputFormatCSVCommaSeparatedValuesCompressionGZIPCompressionTypeEnum(r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatCSVCommaSeparatedValues.Compression.DestinationGcsOutputFormatCSVCommaSeparatedValuesCompressionGZIP.CompressionType.ValueString())
				} else {
					compressionType1 = nil
				}
				destinationGcsOutputFormatCSVCommaSeparatedValuesCompressionGZIP = &shared.DestinationGcsOutputFormatCSVCommaSeparatedValuesCompressionGZIP{
					CompressionType: compressionType1,
				}
			}
			if destinationGcsOutputFormatCSVCommaSeparatedValuesCompressionGZIP != nil {
				compression = &shared.DestinationGcsOutputFormatCSVCommaSeparatedValuesCompression{
					DestinationGcsOutputFormatCSVCommaSeparatedValuesCompressionGZIP: destinationGcsOutputFormatCSVCommaSeparatedValuesCompressionGZIP,
				}
			}
			flattening1 := new(shared.DestinationGcsOutputFormatCSVCommaSeparatedValuesNormalizationEnum)
			if !r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatCSVCommaSeparatedValues.Flattening.IsUnknown() && !r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatCSVCommaSeparatedValues.Flattening.IsNull() {
				*flattening1 = shared.DestinationGcsOutputFormatCSVCommaSeparatedValuesNormalizationEnum(r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatCSVCommaSeparatedValues.Flattening.ValueString())
			} else {
				flattening1 = nil
			}
			formatType5 := shared.DestinationGcsOutputFormatCSVCommaSeparatedValuesFormatTypeEnum(r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatCSVCommaSeparatedValues.FormatType.ValueString())
			destinationGcsOutputFormatCSVCommaSeparatedValues = &shared.DestinationGcsOutputFormatCSVCommaSeparatedValues{
				Compression: compression,
				Flattening:  flattening1,
				FormatType:  formatType5,
			}
		}
		if destinationGcsOutputFormatCSVCommaSeparatedValues != nil {
			format2 = shared.DestinationGcsOutputFormat{
				DestinationGcsOutputFormatCSVCommaSeparatedValues: destinationGcsOutputFormatCSVCommaSeparatedValues,
			}
		}
		var destinationGcsOutputFormatJSONLinesNewlineDelimitedJSON *shared.DestinationGcsOutputFormatJSONLinesNewlineDelimitedJSON
		if r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatJSONLinesNewlineDelimitedJSON != nil {
			var compression1 *shared.DestinationGcsOutputFormatJSONLinesNewlineDelimitedJSONCompression
			var destinationGcsOutputFormatJSONLinesNewlineDelimitedJSONCompressionNoCompression *shared.DestinationGcsOutputFormatJSONLinesNewlineDelimitedJSONCompressionNoCompression
			if r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatJSONLinesNewlineDelimitedJSON.Compression.DestinationGcsOutputFormatJSONLinesNewlineDelimitedJSONCompressionNoCompression != nil {
				compressionType2 := new(shared.DestinationGcsOutputFormatJSONLinesNewlineDelimitedJSONCompressionNoCompressionCompressionTypeEnum)
				if !r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatJSONLinesNewlineDelimitedJSON.Compression.DestinationGcsOutputFormatJSONLinesNewlineDelimitedJSONCompressionNoCompression.CompressionType.IsUnknown() && !r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatJSONLinesNewlineDelimitedJSON.Compression.DestinationGcsOutputFormatJSONLinesNewlineDelimitedJSONCompressionNoCompression.CompressionType.IsNull() {
					*compressionType2 = shared.DestinationGcsOutputFormatJSONLinesNewlineDelimitedJSONCompressionNoCompressionCompressionTypeEnum(r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatJSONLinesNewlineDelimitedJSON.Compression.DestinationGcsOutputFormatJSONLinesNewlineDelimitedJSONCompressionNoCompression.CompressionType.ValueString())
				} else {
					compressionType2 = nil
				}
				destinationGcsOutputFormatJSONLinesNewlineDelimitedJSONCompressionNoCompression = &shared.DestinationGcsOutputFormatJSONLinesNewlineDelimitedJSONCompressionNoCompression{
					CompressionType: compressionType2,
				}
			}
			if destinationGcsOutputFormatJSONLinesNewlineDelimitedJSONCompressionNoCompression != nil {
				compression1 = &shared.DestinationGcsOutputFormatJSONLinesNewlineDelimitedJSONCompression{
					DestinationGcsOutputFormatJSONLinesNewlineDelimitedJSONCompressionNoCompression: destinationGcsOutputFormatJSONLinesNewlineDelimitedJSONCompressionNoCompression,
				}
			}
			var destinationGcsOutputFormatJSONLinesNewlineDelimitedJSONCompressionGZIP *shared.DestinationGcsOutputFormatJSONLinesNewlineDelimitedJSONCompressionGZIP
			if r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatJSONLinesNewlineDelimitedJSON.Compression.DestinationGcsOutputFormatJSONLinesNewlineDelimitedJSONCompressionGZIP != nil {
				compressionType3 := new(shared.DestinationGcsOutputFormatJSONLinesNewlineDelimitedJSONCompressionGZIPCompressionTypeEnum)
				if !r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatJSONLinesNewlineDelimitedJSON.Compression.DestinationGcsOutputFormatJSONLinesNewlineDelimitedJSONCompressionGZIP.CompressionType.IsUnknown() && !r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatJSONLinesNewlineDelimitedJSON.Compression.DestinationGcsOutputFormatJSONLinesNewlineDelimitedJSONCompressionGZIP.CompressionType.IsNull() {
					*compressionType3 = shared.DestinationGcsOutputFormatJSONLinesNewlineDelimitedJSONCompressionGZIPCompressionTypeEnum(r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatJSONLinesNewlineDelimitedJSON.Compression.DestinationGcsOutputFormatJSONLinesNewlineDelimitedJSONCompressionGZIP.CompressionType.ValueString())
				} else {
					compressionType3 = nil
				}
				destinationGcsOutputFormatJSONLinesNewlineDelimitedJSONCompressionGZIP = &shared.DestinationGcsOutputFormatJSONLinesNewlineDelimitedJSONCompressionGZIP{
					CompressionType: compressionType3,
				}
			}
			if destinationGcsOutputFormatJSONLinesNewlineDelimitedJSONCompressionGZIP != nil {
				compression1 = &shared.DestinationGcsOutputFormatJSONLinesNewlineDelimitedJSONCompression{
					DestinationGcsOutputFormatJSONLinesNewlineDelimitedJSONCompressionGZIP: destinationGcsOutputFormatJSONLinesNewlineDelimitedJSONCompressionGZIP,
				}
			}
			formatType6 := shared.DestinationGcsOutputFormatJSONLinesNewlineDelimitedJSONFormatTypeEnum(r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatJSONLinesNewlineDelimitedJSON.FormatType.ValueString())
			destinationGcsOutputFormatJSONLinesNewlineDelimitedJSON = &shared.DestinationGcsOutputFormatJSONLinesNewlineDelimitedJSON{
				Compression: compression1,
				FormatType:  formatType6,
			}
		}
		if destinationGcsOutputFormatJSONLinesNewlineDelimitedJSON != nil {
			format2 = shared.DestinationGcsOutputFormat{
				DestinationGcsOutputFormatJSONLinesNewlineDelimitedJSON: destinationGcsOutputFormatJSONLinesNewlineDelimitedJSON,
			}
		}
		var destinationGcsOutputFormatParquetColumnarStorage *shared.DestinationGcsOutputFormatParquetColumnarStorage
		if r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatParquetColumnarStorage != nil {
			blockSizeMb := new(int64)
			if !r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatParquetColumnarStorage.BlockSizeMb.IsUnknown() && !r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatParquetColumnarStorage.BlockSizeMb.IsNull() {
				*blockSizeMb = r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatParquetColumnarStorage.BlockSizeMb.ValueInt64()
			} else {
				blockSizeMb = nil
			}
			compressionCodec3 := new(shared.DestinationGcsOutputFormatParquetColumnarStorageCompressionCodecEnum)
			if !r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatParquetColumnarStorage.CompressionCodec.IsUnknown() && !r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatParquetColumnarStorage.CompressionCodec.IsNull() {
				*compressionCodec3 = shared.DestinationGcsOutputFormatParquetColumnarStorageCompressionCodecEnum(r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatParquetColumnarStorage.CompressionCodec.ValueString())
			} else {
				compressionCodec3 = nil
			}
			dictionaryEncoding := new(bool)
			if !r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatParquetColumnarStorage.DictionaryEncoding.IsUnknown() && !r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatParquetColumnarStorage.DictionaryEncoding.IsNull() {
				*dictionaryEncoding = r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatParquetColumnarStorage.DictionaryEncoding.ValueBool()
			} else {
				dictionaryEncoding = nil
			}
			dictionaryPageSizeKb := new(int64)
			if !r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatParquetColumnarStorage.DictionaryPageSizeKb.IsUnknown() && !r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatParquetColumnarStorage.DictionaryPageSizeKb.IsNull() {
				*dictionaryPageSizeKb = r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatParquetColumnarStorage.DictionaryPageSizeKb.ValueInt64()
			} else {
				dictionaryPageSizeKb = nil
			}
			formatType7 := shared.DestinationGcsOutputFormatParquetColumnarStorageFormatTypeEnum(r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatParquetColumnarStorage.FormatType.ValueString())
			maxPaddingSizeMb := new(int64)
			if !r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatParquetColumnarStorage.MaxPaddingSizeMb.IsUnknown() && !r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatParquetColumnarStorage.MaxPaddingSizeMb.IsNull() {
				*maxPaddingSizeMb = r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatParquetColumnarStorage.MaxPaddingSizeMb.ValueInt64()
			} else {
				maxPaddingSizeMb = nil
			}
			pageSizeKb := new(int64)
			if !r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatParquetColumnarStorage.PageSizeKb.IsUnknown() && !r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatParquetColumnarStorage.PageSizeKb.IsNull() {
				*pageSizeKb = r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatParquetColumnarStorage.PageSizeKb.ValueInt64()
			} else {
				pageSizeKb = nil
			}
			destinationGcsOutputFormatParquetColumnarStorage = &shared.DestinationGcsOutputFormatParquetColumnarStorage{
				BlockSizeMb:          blockSizeMb,
				CompressionCodec:     compressionCodec3,
				DictionaryEncoding:   dictionaryEncoding,
				DictionaryPageSizeKb: dictionaryPageSizeKb,
				FormatType:           formatType7,
				MaxPaddingSizeMb:     maxPaddingSizeMb,
				PageSizeKb:           pageSizeKb,
			}
		}
		if destinationGcsOutputFormatParquetColumnarStorage != nil {
			format2 = shared.DestinationGcsOutputFormat{
				DestinationGcsOutputFormatParquetColumnarStorage: destinationGcsOutputFormatParquetColumnarStorage,
			}
		}
		gcsBucketName2 := r.Configuration.DestinationGcs.GcsBucketName.ValueString()
		gcsBucketPath2 := r.Configuration.DestinationGcs.GcsBucketPath.ValueString()
		gcsBucketRegion := new(shared.DestinationGCSGCSBucketRegionEnum)
		if !r.Configuration.DestinationGcs.GcsBucketRegion.IsUnknown() && !r.Configuration.DestinationGcs.GcsBucketRegion.IsNull() {
			*gcsBucketRegion = shared.DestinationGCSGCSBucketRegionEnum(r.Configuration.DestinationGcs.GcsBucketRegion.ValueString())
		} else {
			gcsBucketRegion = nil
		}
		destinationGcs = &shared.DestinationGcs{
			Credential:      credential2,
			DestinationType: destinationType14,
			Format:          format2,
			GcsBucketName:   gcsBucketName2,
			GcsBucketPath:   gcsBucketPath2,
			GcsBucketRegion: gcsBucketRegion,
		}
	}
	if destinationGcs != nil {
		configuration = shared.DestinationConfiguration{
			DestinationGcs: destinationGcs,
		}
	}
	var destinationGoogleSheets *shared.DestinationGoogleSheets
	if r.Configuration.DestinationGoogleSheets != nil {
		clientID := r.Configuration.DestinationGoogleSheets.Credentials.ClientID.ValueString()
		clientSecret := r.Configuration.DestinationGoogleSheets.Credentials.ClientSecret.ValueString()
		refreshToken := r.Configuration.DestinationGoogleSheets.Credentials.RefreshToken.ValueString()
		credentials1 := shared.DestinationGoogleSheetsAuthenticationViaGoogleOAuth{
			ClientID:     clientID,
			ClientSecret: clientSecret,
			RefreshToken: refreshToken,
		}
		destinationType15 := shared.DestinationGoogleSheetsGoogleSheetsEnum(r.Configuration.DestinationGoogleSheets.DestinationType.ValueString())
		spreadsheetID := r.Configuration.DestinationGoogleSheets.SpreadsheetID.ValueString()
		destinationGoogleSheets = &shared.DestinationGoogleSheets{
			Credentials:     credentials1,
			DestinationType: destinationType15,
			SpreadsheetID:   spreadsheetID,
		}
	}
	if destinationGoogleSheets != nil {
		configuration = shared.DestinationConfiguration{
			DestinationGoogleSheets: destinationGoogleSheets,
		}
	}
	var destinationKeen *shared.DestinationKeen
	if r.Configuration.DestinationKeen != nil {
		apiKey := r.Configuration.DestinationKeen.APIKey.ValueString()
		destinationType16 := shared.DestinationKeenKeenEnum(r.Configuration.DestinationKeen.DestinationType.ValueString())
		inferTimestamp := new(bool)
		if !r.Configuration.DestinationKeen.InferTimestamp.IsUnknown() && !r.Configuration.DestinationKeen.InferTimestamp.IsNull() {
			*inferTimestamp = r.Configuration.DestinationKeen.InferTimestamp.ValueBool()
		} else {
			inferTimestamp = nil
		}
		projectId3 := r.Configuration.DestinationKeen.ProjectID.ValueString()
		destinationKeen = &shared.DestinationKeen{
			APIKey:          apiKey,
			DestinationType: destinationType16,
			InferTimestamp:  inferTimestamp,
			ProjectID:       projectId3,
		}
	}
	if destinationKeen != nil {
		configuration = shared.DestinationConfiguration{
			DestinationKeen: destinationKeen,
		}
	}
	var destinationKinesis *shared.DestinationKinesis
	if r.Configuration.DestinationKinesis != nil {
		accessKey2 := r.Configuration.DestinationKinesis.AccessKey.ValueString()
		bufferSize := r.Configuration.DestinationKinesis.BufferSize.ValueInt64()
		destinationType17 := shared.DestinationKinesisKinesisEnum(r.Configuration.DestinationKinesis.DestinationType.ValueString())
		endpoint1 := r.Configuration.DestinationKinesis.Endpoint.ValueString()
		privateKey := r.Configuration.DestinationKinesis.PrivateKey.ValueString()
		region2 := r.Configuration.DestinationKinesis.Region.ValueString()
		shardCount := r.Configuration.DestinationKinesis.ShardCount.ValueInt64()
		destinationKinesis = &shared.DestinationKinesis{
			AccessKey:       accessKey2,
			BufferSize:      bufferSize,
			DestinationType: destinationType17,
			Endpoint:        endpoint1,
			PrivateKey:      privateKey,
			Region:          region2,
			ShardCount:      shardCount,
		}
	}
	if destinationKinesis != nil {
		configuration = shared.DestinationConfiguration{
			DestinationKinesis: destinationKinesis,
		}
	}
	var destinationMariadbColumnstore *shared.DestinationMariadbColumnstore
	if r.Configuration.DestinationMariadbColumnstore != nil {
		database4 := r.Configuration.DestinationMariadbColumnstore.Database.ValueString()
		destinationType18 := shared.DestinationMariadbColumnstoreMariadbColumnstoreEnum(r.Configuration.DestinationMariadbColumnstore.DestinationType.ValueString())
		host3 := r.Configuration.DestinationMariadbColumnstore.Host.ValueString()
		jdbcURLParams1 := new(string)
		if !r.Configuration.DestinationMariadbColumnstore.JdbcURLParams.IsUnknown() && !r.Configuration.DestinationMariadbColumnstore.JdbcURLParams.IsNull() {
			*jdbcURLParams1 = r.Configuration.DestinationMariadbColumnstore.JdbcURLParams.ValueString()
		} else {
			jdbcURLParams1 = nil
		}
		password5 := new(string)
		if !r.Configuration.DestinationMariadbColumnstore.Password.IsUnknown() && !r.Configuration.DestinationMariadbColumnstore.Password.IsNull() {
			*password5 = r.Configuration.DestinationMariadbColumnstore.Password.ValueString()
		} else {
			password5 = nil
		}
		port3 := r.Configuration.DestinationMariadbColumnstore.Port.ValueInt64()
		var tunnelMethod4 *shared.DestinationMariadbColumnstoreSSHTunnelMethod
		var destinationMariadbColumnstoreSSHTunnelMethodNoTunnel *shared.DestinationMariadbColumnstoreSSHTunnelMethodNoTunnel
		if r.Configuration.DestinationMariadbColumnstore.TunnelMethod.DestinationMariadbColumnstoreSSHTunnelMethodNoTunnel != nil {
			tunnelMethod5 := shared.DestinationMariadbColumnstoreSSHTunnelMethodNoTunnelTunnelMethodEnum(r.Configuration.DestinationMariadbColumnstore.TunnelMethod.DestinationMariadbColumnstoreSSHTunnelMethodNoTunnel.TunnelMethod.ValueString())
			destinationMariadbColumnstoreSSHTunnelMethodNoTunnel = &shared.DestinationMariadbColumnstoreSSHTunnelMethodNoTunnel{
				TunnelMethod: tunnelMethod5,
			}
		}
		if destinationMariadbColumnstoreSSHTunnelMethodNoTunnel != nil {
			tunnelMethod4 = &shared.DestinationMariadbColumnstoreSSHTunnelMethod{
				DestinationMariadbColumnstoreSSHTunnelMethodNoTunnel: destinationMariadbColumnstoreSSHTunnelMethodNoTunnel,
			}
		}
		var destinationMariadbColumnstoreSSHTunnelMethodSSHKeyAuthentication *shared.DestinationMariadbColumnstoreSSHTunnelMethodSSHKeyAuthentication
		if r.Configuration.DestinationMariadbColumnstore.TunnelMethod.DestinationMariadbColumnstoreSSHTunnelMethodSSHKeyAuthentication != nil {
			sshKey1 := r.Configuration.DestinationMariadbColumnstore.TunnelMethod.DestinationMariadbColumnstoreSSHTunnelMethodSSHKeyAuthentication.SSHKey.ValueString()
			tunnelHost2 := r.Configuration.DestinationMariadbColumnstore.TunnelMethod.DestinationMariadbColumnstoreSSHTunnelMethodSSHKeyAuthentication.TunnelHost.ValueString()
			tunnelMethod6 := shared.DestinationMariadbColumnstoreSSHTunnelMethodSSHKeyAuthenticationTunnelMethodEnum(r.Configuration.DestinationMariadbColumnstore.TunnelMethod.DestinationMariadbColumnstoreSSHTunnelMethodSSHKeyAuthentication.TunnelMethod.ValueString())
			tunnelPort2 := r.Configuration.DestinationMariadbColumnstore.TunnelMethod.DestinationMariadbColumnstoreSSHTunnelMethodSSHKeyAuthentication.TunnelPort.ValueInt64()
			tunnelUser2 := r.Configuration.DestinationMariadbColumnstore.TunnelMethod.DestinationMariadbColumnstoreSSHTunnelMethodSSHKeyAuthentication.TunnelUser.ValueString()
			destinationMariadbColumnstoreSSHTunnelMethodSSHKeyAuthentication = &shared.DestinationMariadbColumnstoreSSHTunnelMethodSSHKeyAuthentication{
				SSHKey:       sshKey1,
				TunnelHost:   tunnelHost2,
				TunnelMethod: tunnelMethod6,
				TunnelPort:   tunnelPort2,
				TunnelUser:   tunnelUser2,
			}
		}
		if destinationMariadbColumnstoreSSHTunnelMethodSSHKeyAuthentication != nil {
			tunnelMethod4 = &shared.DestinationMariadbColumnstoreSSHTunnelMethod{
				DestinationMariadbColumnstoreSSHTunnelMethodSSHKeyAuthentication: destinationMariadbColumnstoreSSHTunnelMethodSSHKeyAuthentication,
			}
		}
		var destinationMariadbColumnstoreSSHTunnelMethodPasswordAuthentication *shared.DestinationMariadbColumnstoreSSHTunnelMethodPasswordAuthentication
		if r.Configuration.DestinationMariadbColumnstore.TunnelMethod.DestinationMariadbColumnstoreSSHTunnelMethodPasswordAuthentication != nil {
			tunnelHost3 := r.Configuration.DestinationMariadbColumnstore.TunnelMethod.DestinationMariadbColumnstoreSSHTunnelMethodPasswordAuthentication.TunnelHost.ValueString()
			tunnelMethod7 := shared.DestinationMariadbColumnstoreSSHTunnelMethodPasswordAuthenticationTunnelMethodEnum(r.Configuration.DestinationMariadbColumnstore.TunnelMethod.DestinationMariadbColumnstoreSSHTunnelMethodPasswordAuthentication.TunnelMethod.ValueString())
			tunnelPort3 := r.Configuration.DestinationMariadbColumnstore.TunnelMethod.DestinationMariadbColumnstoreSSHTunnelMethodPasswordAuthentication.TunnelPort.ValueInt64()
			tunnelUser3 := r.Configuration.DestinationMariadbColumnstore.TunnelMethod.DestinationMariadbColumnstoreSSHTunnelMethodPasswordAuthentication.TunnelUser.ValueString()
			tunnelUserPassword1 := r.Configuration.DestinationMariadbColumnstore.TunnelMethod.DestinationMariadbColumnstoreSSHTunnelMethodPasswordAuthentication.TunnelUserPassword.ValueString()
			destinationMariadbColumnstoreSSHTunnelMethodPasswordAuthentication = &shared.DestinationMariadbColumnstoreSSHTunnelMethodPasswordAuthentication{
				TunnelHost:         tunnelHost3,
				TunnelMethod:       tunnelMethod7,
				TunnelPort:         tunnelPort3,
				TunnelUser:         tunnelUser3,
				TunnelUserPassword: tunnelUserPassword1,
			}
		}
		if destinationMariadbColumnstoreSSHTunnelMethodPasswordAuthentication != nil {
			tunnelMethod4 = &shared.DestinationMariadbColumnstoreSSHTunnelMethod{
				DestinationMariadbColumnstoreSSHTunnelMethodPasswordAuthentication: destinationMariadbColumnstoreSSHTunnelMethodPasswordAuthentication,
			}
		}
		username5 := r.Configuration.DestinationMariadbColumnstore.Username.ValueString()
		destinationMariadbColumnstore = &shared.DestinationMariadbColumnstore{
			Database:        database4,
			DestinationType: destinationType18,
			Host:            host3,
			JdbcURLParams:   jdbcURLParams1,
			Password:        password5,
			Port:            port3,
			TunnelMethod:    tunnelMethod4,
			Username:        username5,
		}
	}
	if destinationMariadbColumnstore != nil {
		configuration = shared.DestinationConfiguration{
			DestinationMariadbColumnstore: destinationMariadbColumnstore,
		}
	}
	var destinationMeilisearch *shared.DestinationMeilisearch
	if r.Configuration.DestinationMeilisearch != nil {
		apiKey1 := new(string)
		if !r.Configuration.DestinationMeilisearch.APIKey.IsUnknown() && !r.Configuration.DestinationMeilisearch.APIKey.IsNull() {
			*apiKey1 = r.Configuration.DestinationMeilisearch.APIKey.ValueString()
		} else {
			apiKey1 = nil
		}
		destinationType19 := shared.DestinationMeilisearchMeilisearchEnum(r.Configuration.DestinationMeilisearch.DestinationType.ValueString())
		host4 := r.Configuration.DestinationMeilisearch.Host.ValueString()
		destinationMeilisearch = &shared.DestinationMeilisearch{
			APIKey:          apiKey1,
			DestinationType: destinationType19,
			Host:            host4,
		}
	}
	if destinationMeilisearch != nil {
		configuration = shared.DestinationConfiguration{
			DestinationMeilisearch: destinationMeilisearch,
		}
	}
	var destinationMongodb *shared.DestinationMongodb
	if r.Configuration.DestinationMongodb != nil {
		var authType shared.DestinationMongodbAuthorizationType
		var destinationMongodbAuthorizationTypeNone *shared.DestinationMongodbAuthorizationTypeNone
		if r.Configuration.DestinationMongodb.AuthType.DestinationMongodbAuthorizationTypeNone != nil {
			authorization := shared.DestinationMongodbAuthorizationTypeNoneAuthorizationEnum(r.Configuration.DestinationMongodb.AuthType.DestinationMongodbAuthorizationTypeNone.Authorization.ValueString())
			destinationMongodbAuthorizationTypeNone = &shared.DestinationMongodbAuthorizationTypeNone{
				Authorization: authorization,
			}
		}
		if destinationMongodbAuthorizationTypeNone != nil {
			authType = shared.DestinationMongodbAuthorizationType{
				DestinationMongodbAuthorizationTypeNone: destinationMongodbAuthorizationTypeNone,
			}
		}
		var destinationMongodbAuthorizationTypeLoginPassword *shared.DestinationMongodbAuthorizationTypeLoginPassword
		if r.Configuration.DestinationMongodb.AuthType.DestinationMongodbAuthorizationTypeLoginPassword != nil {
			authorization1 := shared.DestinationMongodbAuthorizationTypeLoginPasswordAuthorizationEnum(r.Configuration.DestinationMongodb.AuthType.DestinationMongodbAuthorizationTypeLoginPassword.Authorization.ValueString())
			password6 := r.Configuration.DestinationMongodb.AuthType.DestinationMongodbAuthorizationTypeLoginPassword.Password.ValueString()
			username6 := r.Configuration.DestinationMongodb.AuthType.DestinationMongodbAuthorizationTypeLoginPassword.Username.ValueString()
			destinationMongodbAuthorizationTypeLoginPassword = &shared.DestinationMongodbAuthorizationTypeLoginPassword{
				Authorization: authorization1,
				Password:      password6,
				Username:      username6,
			}
		}
		if destinationMongodbAuthorizationTypeLoginPassword != nil {
			authType = shared.DestinationMongodbAuthorizationType{
				DestinationMongodbAuthorizationTypeLoginPassword: destinationMongodbAuthorizationTypeLoginPassword,
			}
		}
		database5 := r.Configuration.DestinationMongodb.Database.ValueString()
		destinationType20 := shared.DestinationMongodbMongodbEnum(r.Configuration.DestinationMongodb.DestinationType.ValueString())
		var instanceType *shared.DestinationMongodbMongoDbInstanceType
		var destinationMongodbMongoDbInstanceTypeStandaloneMongoDbInstance *shared.DestinationMongodbMongoDbInstanceTypeStandaloneMongoDbInstance
		if r.Configuration.DestinationMongodb.InstanceType.DestinationMongodbMongoDbInstanceTypeStandaloneMongoDbInstance != nil {
			host5 := r.Configuration.DestinationMongodb.InstanceType.DestinationMongodbMongoDbInstanceTypeStandaloneMongoDbInstance.Host.ValueString()
			instance := shared.DestinationMongodbMongoDbInstanceTypeStandaloneMongoDbInstanceInstanceEnum(r.Configuration.DestinationMongodb.InstanceType.DestinationMongodbMongoDbInstanceTypeStandaloneMongoDbInstance.Instance.ValueString())
			port4 := r.Configuration.DestinationMongodb.InstanceType.DestinationMongodbMongoDbInstanceTypeStandaloneMongoDbInstance.Port.ValueInt64()
			destinationMongodbMongoDbInstanceTypeStandaloneMongoDbInstance = &shared.DestinationMongodbMongoDbInstanceTypeStandaloneMongoDbInstance{
				Host:     host5,
				Instance: instance,
				Port:     port4,
			}
		}
		if destinationMongodbMongoDbInstanceTypeStandaloneMongoDbInstance != nil {
			instanceType = &shared.DestinationMongodbMongoDbInstanceType{
				DestinationMongodbMongoDbInstanceTypeStandaloneMongoDbInstance: destinationMongodbMongoDbInstanceTypeStandaloneMongoDbInstance,
			}
		}
		var destinationMongodbMongoDbInstanceTypeReplicaSet *shared.DestinationMongodbMongoDbInstanceTypeReplicaSet
		if r.Configuration.DestinationMongodb.InstanceType.DestinationMongodbMongoDbInstanceTypeReplicaSet != nil {
			instance1 := shared.DestinationMongodbMongoDbInstanceTypeReplicaSetInstanceEnum(r.Configuration.DestinationMongodb.InstanceType.DestinationMongodbMongoDbInstanceTypeReplicaSet.Instance.ValueString())
			replicaSet := new(string)
			if !r.Configuration.DestinationMongodb.InstanceType.DestinationMongodbMongoDbInstanceTypeReplicaSet.ReplicaSet.IsUnknown() && !r.Configuration.DestinationMongodb.InstanceType.DestinationMongodbMongoDbInstanceTypeReplicaSet.ReplicaSet.IsNull() {
				*replicaSet = r.Configuration.DestinationMongodb.InstanceType.DestinationMongodbMongoDbInstanceTypeReplicaSet.ReplicaSet.ValueString()
			} else {
				replicaSet = nil
			}
			serverAddresses := r.Configuration.DestinationMongodb.InstanceType.DestinationMongodbMongoDbInstanceTypeReplicaSet.ServerAddresses.ValueString()
			destinationMongodbMongoDbInstanceTypeReplicaSet = &shared.DestinationMongodbMongoDbInstanceTypeReplicaSet{
				Instance:        instance1,
				ReplicaSet:      replicaSet,
				ServerAddresses: serverAddresses,
			}
		}
		if destinationMongodbMongoDbInstanceTypeReplicaSet != nil {
			instanceType = &shared.DestinationMongodbMongoDbInstanceType{
				DestinationMongodbMongoDbInstanceTypeReplicaSet: destinationMongodbMongoDbInstanceTypeReplicaSet,
			}
		}
		var destinationMongodbMongoDBInstanceTypeMongoDBAtlas *shared.DestinationMongodbMongoDBInstanceTypeMongoDBAtlas
		if r.Configuration.DestinationMongodb.InstanceType.DestinationMongodbMongoDBInstanceTypeMongoDBAtlas != nil {
			clusterURL := r.Configuration.DestinationMongodb.InstanceType.DestinationMongodbMongoDBInstanceTypeMongoDBAtlas.ClusterURL.ValueString()
			instance2 := shared.DestinationMongodbMongoDBInstanceTypeMongoDBAtlasInstanceEnum(r.Configuration.DestinationMongodb.InstanceType.DestinationMongodbMongoDBInstanceTypeMongoDBAtlas.Instance.ValueString())
			destinationMongodbMongoDBInstanceTypeMongoDBAtlas = &shared.DestinationMongodbMongoDBInstanceTypeMongoDBAtlas{
				ClusterURL: clusterURL,
				Instance:   instance2,
			}
		}
		if destinationMongodbMongoDBInstanceTypeMongoDBAtlas != nil {
			instanceType = &shared.DestinationMongodbMongoDbInstanceType{
				DestinationMongodbMongoDBInstanceTypeMongoDBAtlas: destinationMongodbMongoDBInstanceTypeMongoDBAtlas,
			}
		}
		var tunnelMethod8 *shared.DestinationMongodbSSHTunnelMethod
		var destinationMongodbSSHTunnelMethodNoTunnel *shared.DestinationMongodbSSHTunnelMethodNoTunnel
		if r.Configuration.DestinationMongodb.TunnelMethod.DestinationMongodbSSHTunnelMethodNoTunnel != nil {
			tunnelMethod9 := shared.DestinationMongodbSSHTunnelMethodNoTunnelTunnelMethodEnum(r.Configuration.DestinationMongodb.TunnelMethod.DestinationMongodbSSHTunnelMethodNoTunnel.TunnelMethod.ValueString())
			destinationMongodbSSHTunnelMethodNoTunnel = &shared.DestinationMongodbSSHTunnelMethodNoTunnel{
				TunnelMethod: tunnelMethod9,
			}
		}
		if destinationMongodbSSHTunnelMethodNoTunnel != nil {
			tunnelMethod8 = &shared.DestinationMongodbSSHTunnelMethod{
				DestinationMongodbSSHTunnelMethodNoTunnel: destinationMongodbSSHTunnelMethodNoTunnel,
			}
		}
		var destinationMongodbSSHTunnelMethodSSHKeyAuthentication *shared.DestinationMongodbSSHTunnelMethodSSHKeyAuthentication
		if r.Configuration.DestinationMongodb.TunnelMethod.DestinationMongodbSSHTunnelMethodSSHKeyAuthentication != nil {
			sshKey2 := r.Configuration.DestinationMongodb.TunnelMethod.DestinationMongodbSSHTunnelMethodSSHKeyAuthentication.SSHKey.ValueString()
			tunnelHost4 := r.Configuration.DestinationMongodb.TunnelMethod.DestinationMongodbSSHTunnelMethodSSHKeyAuthentication.TunnelHost.ValueString()
			tunnelMethod10 := shared.DestinationMongodbSSHTunnelMethodSSHKeyAuthenticationTunnelMethodEnum(r.Configuration.DestinationMongodb.TunnelMethod.DestinationMongodbSSHTunnelMethodSSHKeyAuthentication.TunnelMethod.ValueString())
			tunnelPort4 := r.Configuration.DestinationMongodb.TunnelMethod.DestinationMongodbSSHTunnelMethodSSHKeyAuthentication.TunnelPort.ValueInt64()
			tunnelUser4 := r.Configuration.DestinationMongodb.TunnelMethod.DestinationMongodbSSHTunnelMethodSSHKeyAuthentication.TunnelUser.ValueString()
			destinationMongodbSSHTunnelMethodSSHKeyAuthentication = &shared.DestinationMongodbSSHTunnelMethodSSHKeyAuthentication{
				SSHKey:       sshKey2,
				TunnelHost:   tunnelHost4,
				TunnelMethod: tunnelMethod10,
				TunnelPort:   tunnelPort4,
				TunnelUser:   tunnelUser4,
			}
		}
		if destinationMongodbSSHTunnelMethodSSHKeyAuthentication != nil {
			tunnelMethod8 = &shared.DestinationMongodbSSHTunnelMethod{
				DestinationMongodbSSHTunnelMethodSSHKeyAuthentication: destinationMongodbSSHTunnelMethodSSHKeyAuthentication,
			}
		}
		var destinationMongodbSSHTunnelMethodPasswordAuthentication *shared.DestinationMongodbSSHTunnelMethodPasswordAuthentication
		if r.Configuration.DestinationMongodb.TunnelMethod.DestinationMongodbSSHTunnelMethodPasswordAuthentication != nil {
			tunnelHost5 := r.Configuration.DestinationMongodb.TunnelMethod.DestinationMongodbSSHTunnelMethodPasswordAuthentication.TunnelHost.ValueString()
			tunnelMethod11 := shared.DestinationMongodbSSHTunnelMethodPasswordAuthenticationTunnelMethodEnum(r.Configuration.DestinationMongodb.TunnelMethod.DestinationMongodbSSHTunnelMethodPasswordAuthentication.TunnelMethod.ValueString())
			tunnelPort5 := r.Configuration.DestinationMongodb.TunnelMethod.DestinationMongodbSSHTunnelMethodPasswordAuthentication.TunnelPort.ValueInt64()
			tunnelUser5 := r.Configuration.DestinationMongodb.TunnelMethod.DestinationMongodbSSHTunnelMethodPasswordAuthentication.TunnelUser.ValueString()
			tunnelUserPassword2 := r.Configuration.DestinationMongodb.TunnelMethod.DestinationMongodbSSHTunnelMethodPasswordAuthentication.TunnelUserPassword.ValueString()
			destinationMongodbSSHTunnelMethodPasswordAuthentication = &shared.DestinationMongodbSSHTunnelMethodPasswordAuthentication{
				TunnelHost:         tunnelHost5,
				TunnelMethod:       tunnelMethod11,
				TunnelPort:         tunnelPort5,
				TunnelUser:         tunnelUser5,
				TunnelUserPassword: tunnelUserPassword2,
			}
		}
		if destinationMongodbSSHTunnelMethodPasswordAuthentication != nil {
			tunnelMethod8 = &shared.DestinationMongodbSSHTunnelMethod{
				DestinationMongodbSSHTunnelMethodPasswordAuthentication: destinationMongodbSSHTunnelMethodPasswordAuthentication,
			}
		}
		destinationMongodb = &shared.DestinationMongodb{
			AuthType:        authType,
			Database:        database5,
			DestinationType: destinationType20,
			InstanceType:    instanceType,
			TunnelMethod:    tunnelMethod8,
		}
	}
	if destinationMongodb != nil {
		configuration = shared.DestinationConfiguration{
			DestinationMongodb: destinationMongodb,
		}
	}
	var destinationMssql *shared.DestinationMssql
	if r.Configuration.DestinationMssql != nil {
		database6 := r.Configuration.DestinationMssql.Database.ValueString()
		destinationType21 := shared.DestinationMssqlMssqlEnum(r.Configuration.DestinationMssql.DestinationType.ValueString())
		host6 := r.Configuration.DestinationMssql.Host.ValueString()
		jdbcURLParams2 := new(string)
		if !r.Configuration.DestinationMssql.JdbcURLParams.IsUnknown() && !r.Configuration.DestinationMssql.JdbcURLParams.IsNull() {
			*jdbcURLParams2 = r.Configuration.DestinationMssql.JdbcURLParams.ValueString()
		} else {
			jdbcURLParams2 = nil
		}
		password7 := new(string)
		if !r.Configuration.DestinationMssql.Password.IsUnknown() && !r.Configuration.DestinationMssql.Password.IsNull() {
			*password7 = r.Configuration.DestinationMssql.Password.ValueString()
		} else {
			password7 = nil
		}
		port5 := r.Configuration.DestinationMssql.Port.ValueInt64()
		schema1 := r.Configuration.DestinationMssql.Schema.ValueString()
		var sslMethod *shared.DestinationMssqlSSLMethod
		var destinationMssqlSSLMethodEncryptedTrustServerCertificate *shared.DestinationMssqlSSLMethodEncryptedTrustServerCertificate
		if r.Configuration.DestinationMssql.SslMethod.DestinationMssqlSSLMethodEncryptedTrustServerCertificate != nil {
			sslMethod1 := shared.DestinationMssqlSSLMethodEncryptedTrustServerCertificateSSLMethodEnum(r.Configuration.DestinationMssql.SslMethod.DestinationMssqlSSLMethodEncryptedTrustServerCertificate.SslMethod.ValueString())
			destinationMssqlSSLMethodEncryptedTrustServerCertificate = &shared.DestinationMssqlSSLMethodEncryptedTrustServerCertificate{
				SslMethod: sslMethod1,
			}
		}
		if destinationMssqlSSLMethodEncryptedTrustServerCertificate != nil {
			sslMethod = &shared.DestinationMssqlSSLMethod{
				DestinationMssqlSSLMethodEncryptedTrustServerCertificate: destinationMssqlSSLMethodEncryptedTrustServerCertificate,
			}
		}
		var destinationMssqlSSLMethodEncryptedVerifyCertificate *shared.DestinationMssqlSSLMethodEncryptedVerifyCertificate
		if r.Configuration.DestinationMssql.SslMethod.DestinationMssqlSSLMethodEncryptedVerifyCertificate != nil {
			hostNameInCertificate := new(string)
			if !r.Configuration.DestinationMssql.SslMethod.DestinationMssqlSSLMethodEncryptedVerifyCertificate.HostNameInCertificate.IsUnknown() && !r.Configuration.DestinationMssql.SslMethod.DestinationMssqlSSLMethodEncryptedVerifyCertificate.HostNameInCertificate.IsNull() {
				*hostNameInCertificate = r.Configuration.DestinationMssql.SslMethod.DestinationMssqlSSLMethodEncryptedVerifyCertificate.HostNameInCertificate.ValueString()
			} else {
				hostNameInCertificate = nil
			}
			sslMethod2 := shared.DestinationMssqlSSLMethodEncryptedVerifyCertificateSSLMethodEnum(r.Configuration.DestinationMssql.SslMethod.DestinationMssqlSSLMethodEncryptedVerifyCertificate.SslMethod.ValueString())
			destinationMssqlSSLMethodEncryptedVerifyCertificate = &shared.DestinationMssqlSSLMethodEncryptedVerifyCertificate{
				HostNameInCertificate: hostNameInCertificate,
				SslMethod:             sslMethod2,
			}
		}
		if destinationMssqlSSLMethodEncryptedVerifyCertificate != nil {
			sslMethod = &shared.DestinationMssqlSSLMethod{
				DestinationMssqlSSLMethodEncryptedVerifyCertificate: destinationMssqlSSLMethodEncryptedVerifyCertificate,
			}
		}
		var tunnelMethod12 *shared.DestinationMssqlSSHTunnelMethod
		var destinationMssqlSSHTunnelMethodNoTunnel *shared.DestinationMssqlSSHTunnelMethodNoTunnel
		if r.Configuration.DestinationMssql.TunnelMethod.DestinationMssqlSSHTunnelMethodNoTunnel != nil {
			tunnelMethod13 := shared.DestinationMssqlSSHTunnelMethodNoTunnelTunnelMethodEnum(r.Configuration.DestinationMssql.TunnelMethod.DestinationMssqlSSHTunnelMethodNoTunnel.TunnelMethod.ValueString())
			destinationMssqlSSHTunnelMethodNoTunnel = &shared.DestinationMssqlSSHTunnelMethodNoTunnel{
				TunnelMethod: tunnelMethod13,
			}
		}
		if destinationMssqlSSHTunnelMethodNoTunnel != nil {
			tunnelMethod12 = &shared.DestinationMssqlSSHTunnelMethod{
				DestinationMssqlSSHTunnelMethodNoTunnel: destinationMssqlSSHTunnelMethodNoTunnel,
			}
		}
		var destinationMssqlSSHTunnelMethodSSHKeyAuthentication *shared.DestinationMssqlSSHTunnelMethodSSHKeyAuthentication
		if r.Configuration.DestinationMssql.TunnelMethod.DestinationMssqlSSHTunnelMethodSSHKeyAuthentication != nil {
			sshKey3 := r.Configuration.DestinationMssql.TunnelMethod.DestinationMssqlSSHTunnelMethodSSHKeyAuthentication.SSHKey.ValueString()
			tunnelHost6 := r.Configuration.DestinationMssql.TunnelMethod.DestinationMssqlSSHTunnelMethodSSHKeyAuthentication.TunnelHost.ValueString()
			tunnelMethod14 := shared.DestinationMssqlSSHTunnelMethodSSHKeyAuthenticationTunnelMethodEnum(r.Configuration.DestinationMssql.TunnelMethod.DestinationMssqlSSHTunnelMethodSSHKeyAuthentication.TunnelMethod.ValueString())
			tunnelPort6 := r.Configuration.DestinationMssql.TunnelMethod.DestinationMssqlSSHTunnelMethodSSHKeyAuthentication.TunnelPort.ValueInt64()
			tunnelUser6 := r.Configuration.DestinationMssql.TunnelMethod.DestinationMssqlSSHTunnelMethodSSHKeyAuthentication.TunnelUser.ValueString()
			destinationMssqlSSHTunnelMethodSSHKeyAuthentication = &shared.DestinationMssqlSSHTunnelMethodSSHKeyAuthentication{
				SSHKey:       sshKey3,
				TunnelHost:   tunnelHost6,
				TunnelMethod: tunnelMethod14,
				TunnelPort:   tunnelPort6,
				TunnelUser:   tunnelUser6,
			}
		}
		if destinationMssqlSSHTunnelMethodSSHKeyAuthentication != nil {
			tunnelMethod12 = &shared.DestinationMssqlSSHTunnelMethod{
				DestinationMssqlSSHTunnelMethodSSHKeyAuthentication: destinationMssqlSSHTunnelMethodSSHKeyAuthentication,
			}
		}
		var destinationMssqlSSHTunnelMethodPasswordAuthentication *shared.DestinationMssqlSSHTunnelMethodPasswordAuthentication
		if r.Configuration.DestinationMssql.TunnelMethod.DestinationMssqlSSHTunnelMethodPasswordAuthentication != nil {
			tunnelHost7 := r.Configuration.DestinationMssql.TunnelMethod.DestinationMssqlSSHTunnelMethodPasswordAuthentication.TunnelHost.ValueString()
			tunnelMethod15 := shared.DestinationMssqlSSHTunnelMethodPasswordAuthenticationTunnelMethodEnum(r.Configuration.DestinationMssql.TunnelMethod.DestinationMssqlSSHTunnelMethodPasswordAuthentication.TunnelMethod.ValueString())
			tunnelPort7 := r.Configuration.DestinationMssql.TunnelMethod.DestinationMssqlSSHTunnelMethodPasswordAuthentication.TunnelPort.ValueInt64()
			tunnelUser7 := r.Configuration.DestinationMssql.TunnelMethod.DestinationMssqlSSHTunnelMethodPasswordAuthentication.TunnelUser.ValueString()
			tunnelUserPassword3 := r.Configuration.DestinationMssql.TunnelMethod.DestinationMssqlSSHTunnelMethodPasswordAuthentication.TunnelUserPassword.ValueString()
			destinationMssqlSSHTunnelMethodPasswordAuthentication = &shared.DestinationMssqlSSHTunnelMethodPasswordAuthentication{
				TunnelHost:         tunnelHost7,
				TunnelMethod:       tunnelMethod15,
				TunnelPort:         tunnelPort7,
				TunnelUser:         tunnelUser7,
				TunnelUserPassword: tunnelUserPassword3,
			}
		}
		if destinationMssqlSSHTunnelMethodPasswordAuthentication != nil {
			tunnelMethod12 = &shared.DestinationMssqlSSHTunnelMethod{
				DestinationMssqlSSHTunnelMethodPasswordAuthentication: destinationMssqlSSHTunnelMethodPasswordAuthentication,
			}
		}
		username7 := r.Configuration.DestinationMssql.Username.ValueString()
		destinationMssql = &shared.DestinationMssql{
			Database:        database6,
			DestinationType: destinationType21,
			Host:            host6,
			JdbcURLParams:   jdbcURLParams2,
			Password:        password7,
			Port:            port5,
			Schema:          schema1,
			SslMethod:       sslMethod,
			TunnelMethod:    tunnelMethod12,
			Username:        username7,
		}
	}
	if destinationMssql != nil {
		configuration = shared.DestinationConfiguration{
			DestinationMssql: destinationMssql,
		}
	}
	var destinationMysql *shared.DestinationMysql
	if r.Configuration.DestinationMysql != nil {
		database7 := r.Configuration.DestinationMysql.Database.ValueString()
		destinationType22 := shared.DestinationMysqlMysqlEnum(r.Configuration.DestinationMysql.DestinationType.ValueString())
		host7 := r.Configuration.DestinationMysql.Host.ValueString()
		jdbcURLParams3 := new(string)
		if !r.Configuration.DestinationMysql.JdbcURLParams.IsUnknown() && !r.Configuration.DestinationMysql.JdbcURLParams.IsNull() {
			*jdbcURLParams3 = r.Configuration.DestinationMysql.JdbcURLParams.ValueString()
		} else {
			jdbcURLParams3 = nil
		}
		password8 := new(string)
		if !r.Configuration.DestinationMysql.Password.IsUnknown() && !r.Configuration.DestinationMysql.Password.IsNull() {
			*password8 = r.Configuration.DestinationMysql.Password.ValueString()
		} else {
			password8 = nil
		}
		port6 := r.Configuration.DestinationMysql.Port.ValueInt64()
		var tunnelMethod16 *shared.DestinationMysqlSSHTunnelMethod
		var destinationMysqlSSHTunnelMethodNoTunnel *shared.DestinationMysqlSSHTunnelMethodNoTunnel
		if r.Configuration.DestinationMysql.TunnelMethod.DestinationMysqlSSHTunnelMethodNoTunnel != nil {
			tunnelMethod17 := shared.DestinationMysqlSSHTunnelMethodNoTunnelTunnelMethodEnum(r.Configuration.DestinationMysql.TunnelMethod.DestinationMysqlSSHTunnelMethodNoTunnel.TunnelMethod.ValueString())
			destinationMysqlSSHTunnelMethodNoTunnel = &shared.DestinationMysqlSSHTunnelMethodNoTunnel{
				TunnelMethod: tunnelMethod17,
			}
		}
		if destinationMysqlSSHTunnelMethodNoTunnel != nil {
			tunnelMethod16 = &shared.DestinationMysqlSSHTunnelMethod{
				DestinationMysqlSSHTunnelMethodNoTunnel: destinationMysqlSSHTunnelMethodNoTunnel,
			}
		}
		var destinationMysqlSSHTunnelMethodSSHKeyAuthentication *shared.DestinationMysqlSSHTunnelMethodSSHKeyAuthentication
		if r.Configuration.DestinationMysql.TunnelMethod.DestinationMysqlSSHTunnelMethodSSHKeyAuthentication != nil {
			sshKey4 := r.Configuration.DestinationMysql.TunnelMethod.DestinationMysqlSSHTunnelMethodSSHKeyAuthentication.SSHKey.ValueString()
			tunnelHost8 := r.Configuration.DestinationMysql.TunnelMethod.DestinationMysqlSSHTunnelMethodSSHKeyAuthentication.TunnelHost.ValueString()
			tunnelMethod18 := shared.DestinationMysqlSSHTunnelMethodSSHKeyAuthenticationTunnelMethodEnum(r.Configuration.DestinationMysql.TunnelMethod.DestinationMysqlSSHTunnelMethodSSHKeyAuthentication.TunnelMethod.ValueString())
			tunnelPort8 := r.Configuration.DestinationMysql.TunnelMethod.DestinationMysqlSSHTunnelMethodSSHKeyAuthentication.TunnelPort.ValueInt64()
			tunnelUser8 := r.Configuration.DestinationMysql.TunnelMethod.DestinationMysqlSSHTunnelMethodSSHKeyAuthentication.TunnelUser.ValueString()
			destinationMysqlSSHTunnelMethodSSHKeyAuthentication = &shared.DestinationMysqlSSHTunnelMethodSSHKeyAuthentication{
				SSHKey:       sshKey4,
				TunnelHost:   tunnelHost8,
				TunnelMethod: tunnelMethod18,
				TunnelPort:   tunnelPort8,
				TunnelUser:   tunnelUser8,
			}
		}
		if destinationMysqlSSHTunnelMethodSSHKeyAuthentication != nil {
			tunnelMethod16 = &shared.DestinationMysqlSSHTunnelMethod{
				DestinationMysqlSSHTunnelMethodSSHKeyAuthentication: destinationMysqlSSHTunnelMethodSSHKeyAuthentication,
			}
		}
		var destinationMysqlSSHTunnelMethodPasswordAuthentication *shared.DestinationMysqlSSHTunnelMethodPasswordAuthentication
		if r.Configuration.DestinationMysql.TunnelMethod.DestinationMysqlSSHTunnelMethodPasswordAuthentication != nil {
			tunnelHost9 := r.Configuration.DestinationMysql.TunnelMethod.DestinationMysqlSSHTunnelMethodPasswordAuthentication.TunnelHost.ValueString()
			tunnelMethod19 := shared.DestinationMysqlSSHTunnelMethodPasswordAuthenticationTunnelMethodEnum(r.Configuration.DestinationMysql.TunnelMethod.DestinationMysqlSSHTunnelMethodPasswordAuthentication.TunnelMethod.ValueString())
			tunnelPort9 := r.Configuration.DestinationMysql.TunnelMethod.DestinationMysqlSSHTunnelMethodPasswordAuthentication.TunnelPort.ValueInt64()
			tunnelUser9 := r.Configuration.DestinationMysql.TunnelMethod.DestinationMysqlSSHTunnelMethodPasswordAuthentication.TunnelUser.ValueString()
			tunnelUserPassword4 := r.Configuration.DestinationMysql.TunnelMethod.DestinationMysqlSSHTunnelMethodPasswordAuthentication.TunnelUserPassword.ValueString()
			destinationMysqlSSHTunnelMethodPasswordAuthentication = &shared.DestinationMysqlSSHTunnelMethodPasswordAuthentication{
				TunnelHost:         tunnelHost9,
				TunnelMethod:       tunnelMethod19,
				TunnelPort:         tunnelPort9,
				TunnelUser:         tunnelUser9,
				TunnelUserPassword: tunnelUserPassword4,
			}
		}
		if destinationMysqlSSHTunnelMethodPasswordAuthentication != nil {
			tunnelMethod16 = &shared.DestinationMysqlSSHTunnelMethod{
				DestinationMysqlSSHTunnelMethodPasswordAuthentication: destinationMysqlSSHTunnelMethodPasswordAuthentication,
			}
		}
		username8 := r.Configuration.DestinationMysql.Username.ValueString()
		destinationMysql = &shared.DestinationMysql{
			Database:        database7,
			DestinationType: destinationType22,
			Host:            host7,
			JdbcURLParams:   jdbcURLParams3,
			Password:        password8,
			Port:            port6,
			TunnelMethod:    tunnelMethod16,
			Username:        username8,
		}
	}
	if destinationMysql != nil {
		configuration = shared.DestinationConfiguration{
			DestinationMysql: destinationMysql,
		}
	}
	var destinationOracle *shared.DestinationOracle
	if r.Configuration.DestinationOracle != nil {
		destinationType23 := shared.DestinationOracleOracleEnum(r.Configuration.DestinationOracle.DestinationType.ValueString())
		host8 := r.Configuration.DestinationOracle.Host.ValueString()
		jdbcURLParams4 := new(string)
		if !r.Configuration.DestinationOracle.JdbcURLParams.IsUnknown() && !r.Configuration.DestinationOracle.JdbcURLParams.IsNull() {
			*jdbcURLParams4 = r.Configuration.DestinationOracle.JdbcURLParams.ValueString()
		} else {
			jdbcURLParams4 = nil
		}
		password9 := new(string)
		if !r.Configuration.DestinationOracle.Password.IsUnknown() && !r.Configuration.DestinationOracle.Password.IsNull() {
			*password9 = r.Configuration.DestinationOracle.Password.ValueString()
		} else {
			password9 = nil
		}
		port7 := r.Configuration.DestinationOracle.Port.ValueInt64()
		schema2 := new(string)
		if !r.Configuration.DestinationOracle.Schema.IsUnknown() && !r.Configuration.DestinationOracle.Schema.IsNull() {
			*schema2 = r.Configuration.DestinationOracle.Schema.ValueString()
		} else {
			schema2 = nil
		}
		sid := r.Configuration.DestinationOracle.Sid.ValueString()
		var tunnelMethod20 *shared.DestinationOracleSSHTunnelMethod
		var destinationOracleSSHTunnelMethodNoTunnel *shared.DestinationOracleSSHTunnelMethodNoTunnel
		if r.Configuration.DestinationOracle.TunnelMethod.DestinationOracleSSHTunnelMethodNoTunnel != nil {
			tunnelMethod21 := shared.DestinationOracleSSHTunnelMethodNoTunnelTunnelMethodEnum(r.Configuration.DestinationOracle.TunnelMethod.DestinationOracleSSHTunnelMethodNoTunnel.TunnelMethod.ValueString())
			destinationOracleSSHTunnelMethodNoTunnel = &shared.DestinationOracleSSHTunnelMethodNoTunnel{
				TunnelMethod: tunnelMethod21,
			}
		}
		if destinationOracleSSHTunnelMethodNoTunnel != nil {
			tunnelMethod20 = &shared.DestinationOracleSSHTunnelMethod{
				DestinationOracleSSHTunnelMethodNoTunnel: destinationOracleSSHTunnelMethodNoTunnel,
			}
		}
		var destinationOracleSSHTunnelMethodSSHKeyAuthentication *shared.DestinationOracleSSHTunnelMethodSSHKeyAuthentication
		if r.Configuration.DestinationOracle.TunnelMethod.DestinationOracleSSHTunnelMethodSSHKeyAuthentication != nil {
			sshKey5 := r.Configuration.DestinationOracle.TunnelMethod.DestinationOracleSSHTunnelMethodSSHKeyAuthentication.SSHKey.ValueString()
			tunnelHost10 := r.Configuration.DestinationOracle.TunnelMethod.DestinationOracleSSHTunnelMethodSSHKeyAuthentication.TunnelHost.ValueString()
			tunnelMethod22 := shared.DestinationOracleSSHTunnelMethodSSHKeyAuthenticationTunnelMethodEnum(r.Configuration.DestinationOracle.TunnelMethod.DestinationOracleSSHTunnelMethodSSHKeyAuthentication.TunnelMethod.ValueString())
			tunnelPort10 := r.Configuration.DestinationOracle.TunnelMethod.DestinationOracleSSHTunnelMethodSSHKeyAuthentication.TunnelPort.ValueInt64()
			tunnelUser10 := r.Configuration.DestinationOracle.TunnelMethod.DestinationOracleSSHTunnelMethodSSHKeyAuthentication.TunnelUser.ValueString()
			destinationOracleSSHTunnelMethodSSHKeyAuthentication = &shared.DestinationOracleSSHTunnelMethodSSHKeyAuthentication{
				SSHKey:       sshKey5,
				TunnelHost:   tunnelHost10,
				TunnelMethod: tunnelMethod22,
				TunnelPort:   tunnelPort10,
				TunnelUser:   tunnelUser10,
			}
		}
		if destinationOracleSSHTunnelMethodSSHKeyAuthentication != nil {
			tunnelMethod20 = &shared.DestinationOracleSSHTunnelMethod{
				DestinationOracleSSHTunnelMethodSSHKeyAuthentication: destinationOracleSSHTunnelMethodSSHKeyAuthentication,
			}
		}
		var destinationOracleSSHTunnelMethodPasswordAuthentication *shared.DestinationOracleSSHTunnelMethodPasswordAuthentication
		if r.Configuration.DestinationOracle.TunnelMethod.DestinationOracleSSHTunnelMethodPasswordAuthentication != nil {
			tunnelHost11 := r.Configuration.DestinationOracle.TunnelMethod.DestinationOracleSSHTunnelMethodPasswordAuthentication.TunnelHost.ValueString()
			tunnelMethod23 := shared.DestinationOracleSSHTunnelMethodPasswordAuthenticationTunnelMethodEnum(r.Configuration.DestinationOracle.TunnelMethod.DestinationOracleSSHTunnelMethodPasswordAuthentication.TunnelMethod.ValueString())
			tunnelPort11 := r.Configuration.DestinationOracle.TunnelMethod.DestinationOracleSSHTunnelMethodPasswordAuthentication.TunnelPort.ValueInt64()
			tunnelUser11 := r.Configuration.DestinationOracle.TunnelMethod.DestinationOracleSSHTunnelMethodPasswordAuthentication.TunnelUser.ValueString()
			tunnelUserPassword5 := r.Configuration.DestinationOracle.TunnelMethod.DestinationOracleSSHTunnelMethodPasswordAuthentication.TunnelUserPassword.ValueString()
			destinationOracleSSHTunnelMethodPasswordAuthentication = &shared.DestinationOracleSSHTunnelMethodPasswordAuthentication{
				TunnelHost:         tunnelHost11,
				TunnelMethod:       tunnelMethod23,
				TunnelPort:         tunnelPort11,
				TunnelUser:         tunnelUser11,
				TunnelUserPassword: tunnelUserPassword5,
			}
		}
		if destinationOracleSSHTunnelMethodPasswordAuthentication != nil {
			tunnelMethod20 = &shared.DestinationOracleSSHTunnelMethod{
				DestinationOracleSSHTunnelMethodPasswordAuthentication: destinationOracleSSHTunnelMethodPasswordAuthentication,
			}
		}
		username9 := r.Configuration.DestinationOracle.Username.ValueString()
		destinationOracle = &shared.DestinationOracle{
			DestinationType: destinationType23,
			Host:            host8,
			JdbcURLParams:   jdbcURLParams4,
			Password:        password9,
			Port:            port7,
			Schema:          schema2,
			Sid:             sid,
			TunnelMethod:    tunnelMethod20,
			Username:        username9,
		}
	}
	if destinationOracle != nil {
		configuration = shared.DestinationConfiguration{
			DestinationOracle: destinationOracle,
		}
	}
	var destinationPostgres *shared.DestinationPostgres
	if r.Configuration.DestinationPostgres != nil {
		database8 := r.Configuration.DestinationPostgres.Database.ValueString()
		destinationType24 := shared.DestinationPostgresPostgresEnum(r.Configuration.DestinationPostgres.DestinationType.ValueString())
		host9 := r.Configuration.DestinationPostgres.Host.ValueString()
		jdbcURLParams5 := new(string)
		if !r.Configuration.DestinationPostgres.JdbcURLParams.IsUnknown() && !r.Configuration.DestinationPostgres.JdbcURLParams.IsNull() {
			*jdbcURLParams5 = r.Configuration.DestinationPostgres.JdbcURLParams.ValueString()
		} else {
			jdbcURLParams5 = nil
		}
		password10 := new(string)
		if !r.Configuration.DestinationPostgres.Password.IsUnknown() && !r.Configuration.DestinationPostgres.Password.IsNull() {
			*password10 = r.Configuration.DestinationPostgres.Password.ValueString()
		} else {
			password10 = nil
		}
		port8 := r.Configuration.DestinationPostgres.Port.ValueInt64()
		schema3 := r.Configuration.DestinationPostgres.Schema.ValueString()
		var sslMode *shared.DestinationPostgresSSLModes
		var destinationPostgresSSLModesDisable *shared.DestinationPostgresSSLModesDisable
		if r.Configuration.DestinationPostgres.SslMode.DestinationPostgresSSLModesDisable != nil {
			mode := shared.DestinationPostgresSSLModesDisableModeEnum(r.Configuration.DestinationPostgres.SslMode.DestinationPostgresSSLModesDisable.Mode.ValueString())
			destinationPostgresSSLModesDisable = &shared.DestinationPostgresSSLModesDisable{
				Mode: mode,
			}
		}
		if destinationPostgresSSLModesDisable != nil {
			sslMode = &shared.DestinationPostgresSSLModes{
				DestinationPostgresSSLModesDisable: destinationPostgresSSLModesDisable,
			}
		}
		var destinationPostgresSSLModesAllow *shared.DestinationPostgresSSLModesAllow
		if r.Configuration.DestinationPostgres.SslMode.DestinationPostgresSSLModesAllow != nil {
			mode1 := shared.DestinationPostgresSSLModesAllowModeEnum(r.Configuration.DestinationPostgres.SslMode.DestinationPostgresSSLModesAllow.Mode.ValueString())
			destinationPostgresSSLModesAllow = &shared.DestinationPostgresSSLModesAllow{
				Mode: mode1,
			}
		}
		if destinationPostgresSSLModesAllow != nil {
			sslMode = &shared.DestinationPostgresSSLModes{
				DestinationPostgresSSLModesAllow: destinationPostgresSSLModesAllow,
			}
		}
		var destinationPostgresSSLModesPrefer *shared.DestinationPostgresSSLModesPrefer
		if r.Configuration.DestinationPostgres.SslMode.DestinationPostgresSSLModesPrefer != nil {
			mode2 := shared.DestinationPostgresSSLModesPreferModeEnum(r.Configuration.DestinationPostgres.SslMode.DestinationPostgresSSLModesPrefer.Mode.ValueString())
			destinationPostgresSSLModesPrefer = &shared.DestinationPostgresSSLModesPrefer{
				Mode: mode2,
			}
		}
		if destinationPostgresSSLModesPrefer != nil {
			sslMode = &shared.DestinationPostgresSSLModes{
				DestinationPostgresSSLModesPrefer: destinationPostgresSSLModesPrefer,
			}
		}
		var destinationPostgresSSLModesRequire *shared.DestinationPostgresSSLModesRequire
		if r.Configuration.DestinationPostgres.SslMode.DestinationPostgresSSLModesRequire != nil {
			mode3 := shared.DestinationPostgresSSLModesRequireModeEnum(r.Configuration.DestinationPostgres.SslMode.DestinationPostgresSSLModesRequire.Mode.ValueString())
			destinationPostgresSSLModesRequire = &shared.DestinationPostgresSSLModesRequire{
				Mode: mode3,
			}
		}
		if destinationPostgresSSLModesRequire != nil {
			sslMode = &shared.DestinationPostgresSSLModes{
				DestinationPostgresSSLModesRequire: destinationPostgresSSLModesRequire,
			}
		}
		var destinationPostgresSSLModesVerifyCa *shared.DestinationPostgresSSLModesVerifyCa
		if r.Configuration.DestinationPostgres.SslMode.DestinationPostgresSSLModesVerifyCa != nil {
			caCertificate1 := r.Configuration.DestinationPostgres.SslMode.DestinationPostgresSSLModesVerifyCa.CaCertificate.ValueString()
			clientKeyPassword := new(string)
			if !r.Configuration.DestinationPostgres.SslMode.DestinationPostgresSSLModesVerifyCa.ClientKeyPassword.IsUnknown() && !r.Configuration.DestinationPostgres.SslMode.DestinationPostgresSSLModesVerifyCa.ClientKeyPassword.IsNull() {
				*clientKeyPassword = r.Configuration.DestinationPostgres.SslMode.DestinationPostgresSSLModesVerifyCa.ClientKeyPassword.ValueString()
			} else {
				clientKeyPassword = nil
			}
			mode4 := shared.DestinationPostgresSSLModesVerifyCaModeEnum(r.Configuration.DestinationPostgres.SslMode.DestinationPostgresSSLModesVerifyCa.Mode.ValueString())
			destinationPostgresSSLModesVerifyCa = &shared.DestinationPostgresSSLModesVerifyCa{
				CaCertificate:     caCertificate1,
				ClientKeyPassword: clientKeyPassword,
				Mode:              mode4,
			}
		}
		if destinationPostgresSSLModesVerifyCa != nil {
			sslMode = &shared.DestinationPostgresSSLModes{
				DestinationPostgresSSLModesVerifyCa: destinationPostgresSSLModesVerifyCa,
			}
		}
		var destinationPostgresSSLModesVerifyFull *shared.DestinationPostgresSSLModesVerifyFull
		if r.Configuration.DestinationPostgres.SslMode.DestinationPostgresSSLModesVerifyFull != nil {
			caCertificate2 := r.Configuration.DestinationPostgres.SslMode.DestinationPostgresSSLModesVerifyFull.CaCertificate.ValueString()
			clientCertificate := r.Configuration.DestinationPostgres.SslMode.DestinationPostgresSSLModesVerifyFull.ClientCertificate.ValueString()
			clientKey := r.Configuration.DestinationPostgres.SslMode.DestinationPostgresSSLModesVerifyFull.ClientKey.ValueString()
			clientKeyPassword1 := new(string)
			if !r.Configuration.DestinationPostgres.SslMode.DestinationPostgresSSLModesVerifyFull.ClientKeyPassword.IsUnknown() && !r.Configuration.DestinationPostgres.SslMode.DestinationPostgresSSLModesVerifyFull.ClientKeyPassword.IsNull() {
				*clientKeyPassword1 = r.Configuration.DestinationPostgres.SslMode.DestinationPostgresSSLModesVerifyFull.ClientKeyPassword.ValueString()
			} else {
				clientKeyPassword1 = nil
			}
			mode5 := shared.DestinationPostgresSSLModesVerifyFullModeEnum(r.Configuration.DestinationPostgres.SslMode.DestinationPostgresSSLModesVerifyFull.Mode.ValueString())
			destinationPostgresSSLModesVerifyFull = &shared.DestinationPostgresSSLModesVerifyFull{
				CaCertificate:     caCertificate2,
				ClientCertificate: clientCertificate,
				ClientKey:         clientKey,
				ClientKeyPassword: clientKeyPassword1,
				Mode:              mode5,
			}
		}
		if destinationPostgresSSLModesVerifyFull != nil {
			sslMode = &shared.DestinationPostgresSSLModes{
				DestinationPostgresSSLModesVerifyFull: destinationPostgresSSLModesVerifyFull,
			}
		}
		var tunnelMethod24 *shared.DestinationPostgresSSHTunnelMethod
		var destinationPostgresSSHTunnelMethodNoTunnel *shared.DestinationPostgresSSHTunnelMethodNoTunnel
		if r.Configuration.DestinationPostgres.TunnelMethod.DestinationPostgresSSHTunnelMethodNoTunnel != nil {
			tunnelMethod25 := shared.DestinationPostgresSSHTunnelMethodNoTunnelTunnelMethodEnum(r.Configuration.DestinationPostgres.TunnelMethod.DestinationPostgresSSHTunnelMethodNoTunnel.TunnelMethod.ValueString())
			destinationPostgresSSHTunnelMethodNoTunnel = &shared.DestinationPostgresSSHTunnelMethodNoTunnel{
				TunnelMethod: tunnelMethod25,
			}
		}
		if destinationPostgresSSHTunnelMethodNoTunnel != nil {
			tunnelMethod24 = &shared.DestinationPostgresSSHTunnelMethod{
				DestinationPostgresSSHTunnelMethodNoTunnel: destinationPostgresSSHTunnelMethodNoTunnel,
			}
		}
		var destinationPostgresSSHTunnelMethodSSHKeyAuthentication *shared.DestinationPostgresSSHTunnelMethodSSHKeyAuthentication
		if r.Configuration.DestinationPostgres.TunnelMethod.DestinationPostgresSSHTunnelMethodSSHKeyAuthentication != nil {
			sshKey6 := r.Configuration.DestinationPostgres.TunnelMethod.DestinationPostgresSSHTunnelMethodSSHKeyAuthentication.SSHKey.ValueString()
			tunnelHost12 := r.Configuration.DestinationPostgres.TunnelMethod.DestinationPostgresSSHTunnelMethodSSHKeyAuthentication.TunnelHost.ValueString()
			tunnelMethod26 := shared.DestinationPostgresSSHTunnelMethodSSHKeyAuthenticationTunnelMethodEnum(r.Configuration.DestinationPostgres.TunnelMethod.DestinationPostgresSSHTunnelMethodSSHKeyAuthentication.TunnelMethod.ValueString())
			tunnelPort12 := r.Configuration.DestinationPostgres.TunnelMethod.DestinationPostgresSSHTunnelMethodSSHKeyAuthentication.TunnelPort.ValueInt64()
			tunnelUser12 := r.Configuration.DestinationPostgres.TunnelMethod.DestinationPostgresSSHTunnelMethodSSHKeyAuthentication.TunnelUser.ValueString()
			destinationPostgresSSHTunnelMethodSSHKeyAuthentication = &shared.DestinationPostgresSSHTunnelMethodSSHKeyAuthentication{
				SSHKey:       sshKey6,
				TunnelHost:   tunnelHost12,
				TunnelMethod: tunnelMethod26,
				TunnelPort:   tunnelPort12,
				TunnelUser:   tunnelUser12,
			}
		}
		if destinationPostgresSSHTunnelMethodSSHKeyAuthentication != nil {
			tunnelMethod24 = &shared.DestinationPostgresSSHTunnelMethod{
				DestinationPostgresSSHTunnelMethodSSHKeyAuthentication: destinationPostgresSSHTunnelMethodSSHKeyAuthentication,
			}
		}
		var destinationPostgresSSHTunnelMethodPasswordAuthentication *shared.DestinationPostgresSSHTunnelMethodPasswordAuthentication
		if r.Configuration.DestinationPostgres.TunnelMethod.DestinationPostgresSSHTunnelMethodPasswordAuthentication != nil {
			tunnelHost13 := r.Configuration.DestinationPostgres.TunnelMethod.DestinationPostgresSSHTunnelMethodPasswordAuthentication.TunnelHost.ValueString()
			tunnelMethod27 := shared.DestinationPostgresSSHTunnelMethodPasswordAuthenticationTunnelMethodEnum(r.Configuration.DestinationPostgres.TunnelMethod.DestinationPostgresSSHTunnelMethodPasswordAuthentication.TunnelMethod.ValueString())
			tunnelPort13 := r.Configuration.DestinationPostgres.TunnelMethod.DestinationPostgresSSHTunnelMethodPasswordAuthentication.TunnelPort.ValueInt64()
			tunnelUser13 := r.Configuration.DestinationPostgres.TunnelMethod.DestinationPostgresSSHTunnelMethodPasswordAuthentication.TunnelUser.ValueString()
			tunnelUserPassword6 := r.Configuration.DestinationPostgres.TunnelMethod.DestinationPostgresSSHTunnelMethodPasswordAuthentication.TunnelUserPassword.ValueString()
			destinationPostgresSSHTunnelMethodPasswordAuthentication = &shared.DestinationPostgresSSHTunnelMethodPasswordAuthentication{
				TunnelHost:         tunnelHost13,
				TunnelMethod:       tunnelMethod27,
				TunnelPort:         tunnelPort13,
				TunnelUser:         tunnelUser13,
				TunnelUserPassword: tunnelUserPassword6,
			}
		}
		if destinationPostgresSSHTunnelMethodPasswordAuthentication != nil {
			tunnelMethod24 = &shared.DestinationPostgresSSHTunnelMethod{
				DestinationPostgresSSHTunnelMethodPasswordAuthentication: destinationPostgresSSHTunnelMethodPasswordAuthentication,
			}
		}
		username10 := r.Configuration.DestinationPostgres.Username.ValueString()
		destinationPostgres = &shared.DestinationPostgres{
			Database:        database8,
			DestinationType: destinationType24,
			Host:            host9,
			JdbcURLParams:   jdbcURLParams5,
			Password:        password10,
			Port:            port8,
			Schema:          schema3,
			SslMode:         sslMode,
			TunnelMethod:    tunnelMethod24,
			Username:        username10,
		}
	}
	if destinationPostgres != nil {
		configuration = shared.DestinationConfiguration{
			DestinationPostgres: destinationPostgres,
		}
	}
	var destinationPubsub *shared.DestinationPubsub
	if r.Configuration.DestinationPubsub != nil {
		batchingDelayThreshold := new(int64)
		if !r.Configuration.DestinationPubsub.BatchingDelayThreshold.IsUnknown() && !r.Configuration.DestinationPubsub.BatchingDelayThreshold.IsNull() {
			*batchingDelayThreshold = r.Configuration.DestinationPubsub.BatchingDelayThreshold.ValueInt64()
		} else {
			batchingDelayThreshold = nil
		}
		batchingElementCountThreshold := new(int64)
		if !r.Configuration.DestinationPubsub.BatchingElementCountThreshold.IsUnknown() && !r.Configuration.DestinationPubsub.BatchingElementCountThreshold.IsNull() {
			*batchingElementCountThreshold = r.Configuration.DestinationPubsub.BatchingElementCountThreshold.ValueInt64()
		} else {
			batchingElementCountThreshold = nil
		}
		batchingEnabled := r.Configuration.DestinationPubsub.BatchingEnabled.ValueBool()
		batchingRequestBytesThreshold := new(int64)
		if !r.Configuration.DestinationPubsub.BatchingRequestBytesThreshold.IsUnknown() && !r.Configuration.DestinationPubsub.BatchingRequestBytesThreshold.IsNull() {
			*batchingRequestBytesThreshold = r.Configuration.DestinationPubsub.BatchingRequestBytesThreshold.ValueInt64()
		} else {
			batchingRequestBytesThreshold = nil
		}
		credentialsJson3 := r.Configuration.DestinationPubsub.CredentialsJSON.ValueString()
		destinationType25 := shared.DestinationPubsubPubsubEnum(r.Configuration.DestinationPubsub.DestinationType.ValueString())
		orderingEnabled := r.Configuration.DestinationPubsub.OrderingEnabled.ValueBool()
		projectId4 := r.Configuration.DestinationPubsub.ProjectID.ValueString()
		topicID := r.Configuration.DestinationPubsub.TopicID.ValueString()
		destinationPubsub = &shared.DestinationPubsub{
			BatchingDelayThreshold:        batchingDelayThreshold,
			BatchingElementCountThreshold: batchingElementCountThreshold,
			BatchingEnabled:               batchingEnabled,
			BatchingRequestBytesThreshold: batchingRequestBytesThreshold,
			CredentialsJSON:               credentialsJson3,
			DestinationType:               destinationType25,
			OrderingEnabled:               orderingEnabled,
			ProjectID:                     projectId4,
			TopicID:                       topicID,
		}
	}
	if destinationPubsub != nil {
		configuration = shared.DestinationConfiguration{
			DestinationPubsub: destinationPubsub,
		}
	}
	var destinationPulsar *shared.DestinationPulsar
	if r.Configuration.DestinationPulsar != nil {
		batchingEnabled1 := r.Configuration.DestinationPulsar.BatchingEnabled.ValueBool()
		batchingMaxMessages := r.Configuration.DestinationPulsar.BatchingMaxMessages.ValueInt64()
		batchingMaxPublishDelay := r.Configuration.DestinationPulsar.BatchingMaxPublishDelay.ValueInt64()
		blockIfQueueFull := r.Configuration.DestinationPulsar.BlockIfQueueFull.ValueBool()
		brokers := r.Configuration.DestinationPulsar.Brokers.ValueString()
		compressionType4 := shared.DestinationPulsarCompressionTypeEnum(r.Configuration.DestinationPulsar.CompressionType.ValueString())
		destinationType26 := shared.DestinationPulsarPulsarEnum(r.Configuration.DestinationPulsar.DestinationType.ValueString())
		maxPendingMessages := r.Configuration.DestinationPulsar.MaxPendingMessages.ValueInt64()
		maxPendingMessagesAcrossPartitions := r.Configuration.DestinationPulsar.MaxPendingMessagesAcrossPartitions.ValueInt64()
		producerName := new(string)
		if !r.Configuration.DestinationPulsar.ProducerName.IsUnknown() && !r.Configuration.DestinationPulsar.ProducerName.IsNull() {
			*producerName = r.Configuration.DestinationPulsar.ProducerName.ValueString()
		} else {
			producerName = nil
		}
		producerSync := new(bool)
		if !r.Configuration.DestinationPulsar.ProducerSync.IsUnknown() && !r.Configuration.DestinationPulsar.ProducerSync.IsNull() {
			*producerSync = r.Configuration.DestinationPulsar.ProducerSync.ValueBool()
		} else {
			producerSync = nil
		}
		sendTimeoutMs := r.Configuration.DestinationPulsar.SendTimeoutMs.ValueInt64()
		topicNamespace := r.Configuration.DestinationPulsar.TopicNamespace.ValueString()
		topicPattern := r.Configuration.DestinationPulsar.TopicPattern.ValueString()
		topicTenant := r.Configuration.DestinationPulsar.TopicTenant.ValueString()
		topicTest := new(string)
		if !r.Configuration.DestinationPulsar.TopicTest.IsUnknown() && !r.Configuration.DestinationPulsar.TopicTest.IsNull() {
			*topicTest = r.Configuration.DestinationPulsar.TopicTest.ValueString()
		} else {
			topicTest = nil
		}
		topicType := shared.DestinationPulsarTopicTypeEnum(r.Configuration.DestinationPulsar.TopicType.ValueString())
		useTLS := r.Configuration.DestinationPulsar.UseTLS.ValueBool()
		destinationPulsar = &shared.DestinationPulsar{
			BatchingEnabled:                    batchingEnabled1,
			BatchingMaxMessages:                batchingMaxMessages,
			BatchingMaxPublishDelay:            batchingMaxPublishDelay,
			BlockIfQueueFull:                   blockIfQueueFull,
			Brokers:                            brokers,
			CompressionType:                    compressionType4,
			DestinationType:                    destinationType26,
			MaxPendingMessages:                 maxPendingMessages,
			MaxPendingMessagesAcrossPartitions: maxPendingMessagesAcrossPartitions,
			ProducerName:                       producerName,
			ProducerSync:                       producerSync,
			SendTimeoutMs:                      sendTimeoutMs,
			TopicNamespace:                     topicNamespace,
			TopicPattern:                       topicPattern,
			TopicTenant:                        topicTenant,
			TopicTest:                          topicTest,
			TopicType:                          topicType,
			UseTLS:                             useTLS,
		}
	}
	if destinationPulsar != nil {
		configuration = shared.DestinationConfiguration{
			DestinationPulsar: destinationPulsar,
		}
	}
	var destinationRabbitmq *shared.DestinationRabbitmq
	if r.Configuration.DestinationRabbitmq != nil {
		destinationType27 := shared.DestinationRabbitmqRabbitmqEnum(r.Configuration.DestinationRabbitmq.DestinationType.ValueString())
		exchange := new(string)
		if !r.Configuration.DestinationRabbitmq.Exchange.IsUnknown() && !r.Configuration.DestinationRabbitmq.Exchange.IsNull() {
			*exchange = r.Configuration.DestinationRabbitmq.Exchange.ValueString()
		} else {
			exchange = nil
		}
		host10 := r.Configuration.DestinationRabbitmq.Host.ValueString()
		password11 := new(string)
		if !r.Configuration.DestinationRabbitmq.Password.IsUnknown() && !r.Configuration.DestinationRabbitmq.Password.IsNull() {
			*password11 = r.Configuration.DestinationRabbitmq.Password.ValueString()
		} else {
			password11 = nil
		}
		port9 := new(int64)
		if !r.Configuration.DestinationRabbitmq.Port.IsUnknown() && !r.Configuration.DestinationRabbitmq.Port.IsNull() {
			*port9 = r.Configuration.DestinationRabbitmq.Port.ValueInt64()
		} else {
			port9 = nil
		}
		routingKey := r.Configuration.DestinationRabbitmq.RoutingKey.ValueString()
		ssl := new(bool)
		if !r.Configuration.DestinationRabbitmq.Ssl.IsUnknown() && !r.Configuration.DestinationRabbitmq.Ssl.IsNull() {
			*ssl = r.Configuration.DestinationRabbitmq.Ssl.ValueBool()
		} else {
			ssl = nil
		}
		username11 := new(string)
		if !r.Configuration.DestinationRabbitmq.Username.IsUnknown() && !r.Configuration.DestinationRabbitmq.Username.IsNull() {
			*username11 = r.Configuration.DestinationRabbitmq.Username.ValueString()
		} else {
			username11 = nil
		}
		virtualHost := new(string)
		if !r.Configuration.DestinationRabbitmq.VirtualHost.IsUnknown() && !r.Configuration.DestinationRabbitmq.VirtualHost.IsNull() {
			*virtualHost = r.Configuration.DestinationRabbitmq.VirtualHost.ValueString()
		} else {
			virtualHost = nil
		}
		destinationRabbitmq = &shared.DestinationRabbitmq{
			DestinationType: destinationType27,
			Exchange:        exchange,
			Host:            host10,
			Password:        password11,
			Port:            port9,
			RoutingKey:      routingKey,
			Ssl:             ssl,
			Username:        username11,
			VirtualHost:     virtualHost,
		}
	}
	if destinationRabbitmq != nil {
		configuration = shared.DestinationConfiguration{
			DestinationRabbitmq: destinationRabbitmq,
		}
	}
	var destinationRedis *shared.DestinationRedis
	if r.Configuration.DestinationRedis != nil {
		cacheType := shared.DestinationRedisCacheTypeEnum(r.Configuration.DestinationRedis.CacheType.ValueString())
		destinationType28 := shared.DestinationRedisRedisEnum(r.Configuration.DestinationRedis.DestinationType.ValueString())
		host11 := r.Configuration.DestinationRedis.Host.ValueString()
		password12 := new(string)
		if !r.Configuration.DestinationRedis.Password.IsUnknown() && !r.Configuration.DestinationRedis.Password.IsNull() {
			*password12 = r.Configuration.DestinationRedis.Password.ValueString()
		} else {
			password12 = nil
		}
		port10 := r.Configuration.DestinationRedis.Port.ValueInt64()
		ssl1 := new(bool)
		if !r.Configuration.DestinationRedis.Ssl.IsUnknown() && !r.Configuration.DestinationRedis.Ssl.IsNull() {
			*ssl1 = r.Configuration.DestinationRedis.Ssl.ValueBool()
		} else {
			ssl1 = nil
		}
		var sslMode1 *shared.DestinationRedisSSLModes
		var destinationRedisSSLModesDisable *shared.DestinationRedisSSLModesDisable
		if r.Configuration.DestinationRedis.SslMode.DestinationRedisSSLModesDisable != nil {
			mode6 := shared.DestinationRedisSSLModesDisableModeEnum(r.Configuration.DestinationRedis.SslMode.DestinationRedisSSLModesDisable.Mode.ValueString())
			destinationRedisSSLModesDisable = &shared.DestinationRedisSSLModesDisable{
				Mode: mode6,
			}
		}
		if destinationRedisSSLModesDisable != nil {
			sslMode1 = &shared.DestinationRedisSSLModes{
				DestinationRedisSSLModesDisable: destinationRedisSSLModesDisable,
			}
		}
		var destinationRedisSSLModesVerifyFull *shared.DestinationRedisSSLModesVerifyFull
		if r.Configuration.DestinationRedis.SslMode.DestinationRedisSSLModesVerifyFull != nil {
			caCertificate3 := r.Configuration.DestinationRedis.SslMode.DestinationRedisSSLModesVerifyFull.CaCertificate.ValueString()
			clientCertificate1 := r.Configuration.DestinationRedis.SslMode.DestinationRedisSSLModesVerifyFull.ClientCertificate.ValueString()
			clientKey1 := r.Configuration.DestinationRedis.SslMode.DestinationRedisSSLModesVerifyFull.ClientKey.ValueString()
			clientKeyPassword2 := new(string)
			if !r.Configuration.DestinationRedis.SslMode.DestinationRedisSSLModesVerifyFull.ClientKeyPassword.IsUnknown() && !r.Configuration.DestinationRedis.SslMode.DestinationRedisSSLModesVerifyFull.ClientKeyPassword.IsNull() {
				*clientKeyPassword2 = r.Configuration.DestinationRedis.SslMode.DestinationRedisSSLModesVerifyFull.ClientKeyPassword.ValueString()
			} else {
				clientKeyPassword2 = nil
			}
			mode7 := shared.DestinationRedisSSLModesVerifyFullModeEnum(r.Configuration.DestinationRedis.SslMode.DestinationRedisSSLModesVerifyFull.Mode.ValueString())
			destinationRedisSSLModesVerifyFull = &shared.DestinationRedisSSLModesVerifyFull{
				CaCertificate:     caCertificate3,
				ClientCertificate: clientCertificate1,
				ClientKey:         clientKey1,
				ClientKeyPassword: clientKeyPassword2,
				Mode:              mode7,
			}
		}
		if destinationRedisSSLModesVerifyFull != nil {
			sslMode1 = &shared.DestinationRedisSSLModes{
				DestinationRedisSSLModesVerifyFull: destinationRedisSSLModesVerifyFull,
			}
		}
		var tunnelMethod28 *shared.DestinationRedisSSHTunnelMethod
		var destinationRedisSSHTunnelMethodNoTunnel *shared.DestinationRedisSSHTunnelMethodNoTunnel
		if r.Configuration.DestinationRedis.TunnelMethod.DestinationRedisSSHTunnelMethodNoTunnel != nil {
			tunnelMethod29 := shared.DestinationRedisSSHTunnelMethodNoTunnelTunnelMethodEnum(r.Configuration.DestinationRedis.TunnelMethod.DestinationRedisSSHTunnelMethodNoTunnel.TunnelMethod.ValueString())
			destinationRedisSSHTunnelMethodNoTunnel = &shared.DestinationRedisSSHTunnelMethodNoTunnel{
				TunnelMethod: tunnelMethod29,
			}
		}
		if destinationRedisSSHTunnelMethodNoTunnel != nil {
			tunnelMethod28 = &shared.DestinationRedisSSHTunnelMethod{
				DestinationRedisSSHTunnelMethodNoTunnel: destinationRedisSSHTunnelMethodNoTunnel,
			}
		}
		var destinationRedisSSHTunnelMethodSSHKeyAuthentication *shared.DestinationRedisSSHTunnelMethodSSHKeyAuthentication
		if r.Configuration.DestinationRedis.TunnelMethod.DestinationRedisSSHTunnelMethodSSHKeyAuthentication != nil {
			sshKey7 := r.Configuration.DestinationRedis.TunnelMethod.DestinationRedisSSHTunnelMethodSSHKeyAuthentication.SSHKey.ValueString()
			tunnelHost14 := r.Configuration.DestinationRedis.TunnelMethod.DestinationRedisSSHTunnelMethodSSHKeyAuthentication.TunnelHost.ValueString()
			tunnelMethod30 := shared.DestinationRedisSSHTunnelMethodSSHKeyAuthenticationTunnelMethodEnum(r.Configuration.DestinationRedis.TunnelMethod.DestinationRedisSSHTunnelMethodSSHKeyAuthentication.TunnelMethod.ValueString())
			tunnelPort14 := r.Configuration.DestinationRedis.TunnelMethod.DestinationRedisSSHTunnelMethodSSHKeyAuthentication.TunnelPort.ValueInt64()
			tunnelUser14 := r.Configuration.DestinationRedis.TunnelMethod.DestinationRedisSSHTunnelMethodSSHKeyAuthentication.TunnelUser.ValueString()
			destinationRedisSSHTunnelMethodSSHKeyAuthentication = &shared.DestinationRedisSSHTunnelMethodSSHKeyAuthentication{
				SSHKey:       sshKey7,
				TunnelHost:   tunnelHost14,
				TunnelMethod: tunnelMethod30,
				TunnelPort:   tunnelPort14,
				TunnelUser:   tunnelUser14,
			}
		}
		if destinationRedisSSHTunnelMethodSSHKeyAuthentication != nil {
			tunnelMethod28 = &shared.DestinationRedisSSHTunnelMethod{
				DestinationRedisSSHTunnelMethodSSHKeyAuthentication: destinationRedisSSHTunnelMethodSSHKeyAuthentication,
			}
		}
		var destinationRedisSSHTunnelMethodPasswordAuthentication *shared.DestinationRedisSSHTunnelMethodPasswordAuthentication
		if r.Configuration.DestinationRedis.TunnelMethod.DestinationRedisSSHTunnelMethodPasswordAuthentication != nil {
			tunnelHost15 := r.Configuration.DestinationRedis.TunnelMethod.DestinationRedisSSHTunnelMethodPasswordAuthentication.TunnelHost.ValueString()
			tunnelMethod31 := shared.DestinationRedisSSHTunnelMethodPasswordAuthenticationTunnelMethodEnum(r.Configuration.DestinationRedis.TunnelMethod.DestinationRedisSSHTunnelMethodPasswordAuthentication.TunnelMethod.ValueString())
			tunnelPort15 := r.Configuration.DestinationRedis.TunnelMethod.DestinationRedisSSHTunnelMethodPasswordAuthentication.TunnelPort.ValueInt64()
			tunnelUser15 := r.Configuration.DestinationRedis.TunnelMethod.DestinationRedisSSHTunnelMethodPasswordAuthentication.TunnelUser.ValueString()
			tunnelUserPassword7 := r.Configuration.DestinationRedis.TunnelMethod.DestinationRedisSSHTunnelMethodPasswordAuthentication.TunnelUserPassword.ValueString()
			destinationRedisSSHTunnelMethodPasswordAuthentication = &shared.DestinationRedisSSHTunnelMethodPasswordAuthentication{
				TunnelHost:         tunnelHost15,
				TunnelMethod:       tunnelMethod31,
				TunnelPort:         tunnelPort15,
				TunnelUser:         tunnelUser15,
				TunnelUserPassword: tunnelUserPassword7,
			}
		}
		if destinationRedisSSHTunnelMethodPasswordAuthentication != nil {
			tunnelMethod28 = &shared.DestinationRedisSSHTunnelMethod{
				DestinationRedisSSHTunnelMethodPasswordAuthentication: destinationRedisSSHTunnelMethodPasswordAuthentication,
			}
		}
		username12 := r.Configuration.DestinationRedis.Username.ValueString()
		destinationRedis = &shared.DestinationRedis{
			CacheType:       cacheType,
			DestinationType: destinationType28,
			Host:            host11,
			Password:        password12,
			Port:            port10,
			Ssl:             ssl1,
			SslMode:         sslMode1,
			TunnelMethod:    tunnelMethod28,
			Username:        username12,
		}
	}
	if destinationRedis != nil {
		configuration = shared.DestinationConfiguration{
			DestinationRedis: destinationRedis,
		}
	}
	var destinationRedshift *shared.DestinationRedshift
	if r.Configuration.DestinationRedshift != nil {
		database9 := r.Configuration.DestinationRedshift.Database.ValueString()
		destinationType29 := shared.DestinationRedshiftRedshiftEnum(r.Configuration.DestinationRedshift.DestinationType.ValueString())
		host12 := r.Configuration.DestinationRedshift.Host.ValueString()
		jdbcURLParams6 := new(string)
		if !r.Configuration.DestinationRedshift.JdbcURLParams.IsUnknown() && !r.Configuration.DestinationRedshift.JdbcURLParams.IsNull() {
			*jdbcURLParams6 = r.Configuration.DestinationRedshift.JdbcURLParams.ValueString()
		} else {
			jdbcURLParams6 = nil
		}
		password13 := r.Configuration.DestinationRedshift.Password.ValueString()
		port11 := r.Configuration.DestinationRedshift.Port.ValueInt64()
		schema4 := r.Configuration.DestinationRedshift.Schema.ValueString()
		var tunnelMethod32 *shared.DestinationRedshiftSSHTunnelMethod
		var destinationRedshiftSSHTunnelMethodNoTunnel *shared.DestinationRedshiftSSHTunnelMethodNoTunnel
		if r.Configuration.DestinationRedshift.TunnelMethod.DestinationRedshiftSSHTunnelMethodNoTunnel != nil {
			tunnelMethod33 := shared.DestinationRedshiftSSHTunnelMethodNoTunnelTunnelMethodEnum(r.Configuration.DestinationRedshift.TunnelMethod.DestinationRedshiftSSHTunnelMethodNoTunnel.TunnelMethod.ValueString())
			destinationRedshiftSSHTunnelMethodNoTunnel = &shared.DestinationRedshiftSSHTunnelMethodNoTunnel{
				TunnelMethod: tunnelMethod33,
			}
		}
		if destinationRedshiftSSHTunnelMethodNoTunnel != nil {
			tunnelMethod32 = &shared.DestinationRedshiftSSHTunnelMethod{
				DestinationRedshiftSSHTunnelMethodNoTunnel: destinationRedshiftSSHTunnelMethodNoTunnel,
			}
		}
		var destinationRedshiftSSHTunnelMethodSSHKeyAuthentication *shared.DestinationRedshiftSSHTunnelMethodSSHKeyAuthentication
		if r.Configuration.DestinationRedshift.TunnelMethod.DestinationRedshiftSSHTunnelMethodSSHKeyAuthentication != nil {
			sshKey8 := r.Configuration.DestinationRedshift.TunnelMethod.DestinationRedshiftSSHTunnelMethodSSHKeyAuthentication.SSHKey.ValueString()
			tunnelHost16 := r.Configuration.DestinationRedshift.TunnelMethod.DestinationRedshiftSSHTunnelMethodSSHKeyAuthentication.TunnelHost.ValueString()
			tunnelMethod34 := shared.DestinationRedshiftSSHTunnelMethodSSHKeyAuthenticationTunnelMethodEnum(r.Configuration.DestinationRedshift.TunnelMethod.DestinationRedshiftSSHTunnelMethodSSHKeyAuthentication.TunnelMethod.ValueString())
			tunnelPort16 := r.Configuration.DestinationRedshift.TunnelMethod.DestinationRedshiftSSHTunnelMethodSSHKeyAuthentication.TunnelPort.ValueInt64()
			tunnelUser16 := r.Configuration.DestinationRedshift.TunnelMethod.DestinationRedshiftSSHTunnelMethodSSHKeyAuthentication.TunnelUser.ValueString()
			destinationRedshiftSSHTunnelMethodSSHKeyAuthentication = &shared.DestinationRedshiftSSHTunnelMethodSSHKeyAuthentication{
				SSHKey:       sshKey8,
				TunnelHost:   tunnelHost16,
				TunnelMethod: tunnelMethod34,
				TunnelPort:   tunnelPort16,
				TunnelUser:   tunnelUser16,
			}
		}
		if destinationRedshiftSSHTunnelMethodSSHKeyAuthentication != nil {
			tunnelMethod32 = &shared.DestinationRedshiftSSHTunnelMethod{
				DestinationRedshiftSSHTunnelMethodSSHKeyAuthentication: destinationRedshiftSSHTunnelMethodSSHKeyAuthentication,
			}
		}
		var destinationRedshiftSSHTunnelMethodPasswordAuthentication *shared.DestinationRedshiftSSHTunnelMethodPasswordAuthentication
		if r.Configuration.DestinationRedshift.TunnelMethod.DestinationRedshiftSSHTunnelMethodPasswordAuthentication != nil {
			tunnelHost17 := r.Configuration.DestinationRedshift.TunnelMethod.DestinationRedshiftSSHTunnelMethodPasswordAuthentication.TunnelHost.ValueString()
			tunnelMethod35 := shared.DestinationRedshiftSSHTunnelMethodPasswordAuthenticationTunnelMethodEnum(r.Configuration.DestinationRedshift.TunnelMethod.DestinationRedshiftSSHTunnelMethodPasswordAuthentication.TunnelMethod.ValueString())
			tunnelPort17 := r.Configuration.DestinationRedshift.TunnelMethod.DestinationRedshiftSSHTunnelMethodPasswordAuthentication.TunnelPort.ValueInt64()
			tunnelUser17 := r.Configuration.DestinationRedshift.TunnelMethod.DestinationRedshiftSSHTunnelMethodPasswordAuthentication.TunnelUser.ValueString()
			tunnelUserPassword8 := r.Configuration.DestinationRedshift.TunnelMethod.DestinationRedshiftSSHTunnelMethodPasswordAuthentication.TunnelUserPassword.ValueString()
			destinationRedshiftSSHTunnelMethodPasswordAuthentication = &shared.DestinationRedshiftSSHTunnelMethodPasswordAuthentication{
				TunnelHost:         tunnelHost17,
				TunnelMethod:       tunnelMethod35,
				TunnelPort:         tunnelPort17,
				TunnelUser:         tunnelUser17,
				TunnelUserPassword: tunnelUserPassword8,
			}
		}
		if destinationRedshiftSSHTunnelMethodPasswordAuthentication != nil {
			tunnelMethod32 = &shared.DestinationRedshiftSSHTunnelMethod{
				DestinationRedshiftSSHTunnelMethodPasswordAuthentication: destinationRedshiftSSHTunnelMethodPasswordAuthentication,
			}
		}
		var uploadingMethod *shared.DestinationRedshiftUploadingMethod
		var destinationRedshiftUploadingMethodStandard *shared.DestinationRedshiftUploadingMethodStandard
		if r.Configuration.DestinationRedshift.UploadingMethod.DestinationRedshiftUploadingMethodStandard != nil {
			method8 := shared.DestinationRedshiftUploadingMethodStandardMethodEnum(r.Configuration.DestinationRedshift.UploadingMethod.DestinationRedshiftUploadingMethodStandard.Method.ValueString())
			destinationRedshiftUploadingMethodStandard = &shared.DestinationRedshiftUploadingMethodStandard{
				Method: method8,
			}
		}
		if destinationRedshiftUploadingMethodStandard != nil {
			uploadingMethod = &shared.DestinationRedshiftUploadingMethod{
				DestinationRedshiftUploadingMethodStandard: destinationRedshiftUploadingMethodStandard,
			}
		}
		var destinationRedshiftUploadingMethodS3Staging *shared.DestinationRedshiftUploadingMethodS3Staging
		if r.Configuration.DestinationRedshift.UploadingMethod.DestinationRedshiftUploadingMethodS3Staging != nil {
			accessKeyId1 := r.Configuration.DestinationRedshift.UploadingMethod.DestinationRedshiftUploadingMethodS3Staging.AccessKeyID.ValueString()
			var encryption *shared.DestinationRedshiftUploadingMethodS3StagingEncryption
			var destinationRedshiftUploadingMethodS3StagingEncryptionNoEncryption *shared.DestinationRedshiftUploadingMethodS3StagingEncryptionNoEncryption
			if r.Configuration.DestinationRedshift.UploadingMethod.DestinationRedshiftUploadingMethodS3Staging.Encryption.DestinationRedshiftUploadingMethodS3StagingEncryptionNoEncryption != nil {
				encryptionType := shared.DestinationRedshiftUploadingMethodS3StagingEncryptionNoEncryptionEncryptionTypeEnum(r.Configuration.DestinationRedshift.UploadingMethod.DestinationRedshiftUploadingMethodS3Staging.Encryption.DestinationRedshiftUploadingMethodS3StagingEncryptionNoEncryption.EncryptionType.ValueString())
				destinationRedshiftUploadingMethodS3StagingEncryptionNoEncryption = &shared.DestinationRedshiftUploadingMethodS3StagingEncryptionNoEncryption{
					EncryptionType: encryptionType,
				}
			}
			if destinationRedshiftUploadingMethodS3StagingEncryptionNoEncryption != nil {
				encryption = &shared.DestinationRedshiftUploadingMethodS3StagingEncryption{
					DestinationRedshiftUploadingMethodS3StagingEncryptionNoEncryption: destinationRedshiftUploadingMethodS3StagingEncryptionNoEncryption,
				}
			}
			var destinationRedshiftUploadingMethodS3StagingEncryptionAESCBCEnvelopeEncryption *shared.DestinationRedshiftUploadingMethodS3StagingEncryptionAESCBCEnvelopeEncryption
			if r.Configuration.DestinationRedshift.UploadingMethod.DestinationRedshiftUploadingMethodS3Staging.Encryption.DestinationRedshiftUploadingMethodS3StagingEncryptionAESCBCEnvelopeEncryption != nil {
				encryptionType1 := shared.DestinationRedshiftUploadingMethodS3StagingEncryptionAESCBCEnvelopeEncryptionEncryptionTypeEnum(r.Configuration.DestinationRedshift.UploadingMethod.DestinationRedshiftUploadingMethodS3Staging.Encryption.DestinationRedshiftUploadingMethodS3StagingEncryptionAESCBCEnvelopeEncryption.EncryptionType.ValueString())
				keyEncryptingKey := new(string)
				if !r.Configuration.DestinationRedshift.UploadingMethod.DestinationRedshiftUploadingMethodS3Staging.Encryption.DestinationRedshiftUploadingMethodS3StagingEncryptionAESCBCEnvelopeEncryption.KeyEncryptingKey.IsUnknown() && !r.Configuration.DestinationRedshift.UploadingMethod.DestinationRedshiftUploadingMethodS3Staging.Encryption.DestinationRedshiftUploadingMethodS3StagingEncryptionAESCBCEnvelopeEncryption.KeyEncryptingKey.IsNull() {
					*keyEncryptingKey = r.Configuration.DestinationRedshift.UploadingMethod.DestinationRedshiftUploadingMethodS3Staging.Encryption.DestinationRedshiftUploadingMethodS3StagingEncryptionAESCBCEnvelopeEncryption.KeyEncryptingKey.ValueString()
				} else {
					keyEncryptingKey = nil
				}
				destinationRedshiftUploadingMethodS3StagingEncryptionAESCBCEnvelopeEncryption = &shared.DestinationRedshiftUploadingMethodS3StagingEncryptionAESCBCEnvelopeEncryption{
					EncryptionType:   encryptionType1,
					KeyEncryptingKey: keyEncryptingKey,
				}
			}
			if destinationRedshiftUploadingMethodS3StagingEncryptionAESCBCEnvelopeEncryption != nil {
				encryption = &shared.DestinationRedshiftUploadingMethodS3StagingEncryption{
					DestinationRedshiftUploadingMethodS3StagingEncryptionAESCBCEnvelopeEncryption: destinationRedshiftUploadingMethodS3StagingEncryptionAESCBCEnvelopeEncryption,
				}
			}
			fileBufferCount := new(int64)
			if !r.Configuration.DestinationRedshift.UploadingMethod.DestinationRedshiftUploadingMethodS3Staging.FileBufferCount.IsUnknown() && !r.Configuration.DestinationRedshift.UploadingMethod.DestinationRedshiftUploadingMethodS3Staging.FileBufferCount.IsNull() {
				*fileBufferCount = r.Configuration.DestinationRedshift.UploadingMethod.DestinationRedshiftUploadingMethodS3Staging.FileBufferCount.ValueInt64()
			} else {
				fileBufferCount = nil
			}
			fileNamePattern1 := new(string)
			if !r.Configuration.DestinationRedshift.UploadingMethod.DestinationRedshiftUploadingMethodS3Staging.FileNamePattern.IsUnknown() && !r.Configuration.DestinationRedshift.UploadingMethod.DestinationRedshiftUploadingMethodS3Staging.FileNamePattern.IsNull() {
				*fileNamePattern1 = r.Configuration.DestinationRedshift.UploadingMethod.DestinationRedshiftUploadingMethodS3Staging.FileNamePattern.ValueString()
			} else {
				fileNamePattern1 = nil
			}
			method9 := shared.DestinationRedshiftUploadingMethodS3StagingMethodEnum(r.Configuration.DestinationRedshift.UploadingMethod.DestinationRedshiftUploadingMethodS3Staging.Method.ValueString())
			purgeStagingData1 := new(bool)
			if !r.Configuration.DestinationRedshift.UploadingMethod.DestinationRedshiftUploadingMethodS3Staging.PurgeStagingData.IsUnknown() && !r.Configuration.DestinationRedshift.UploadingMethod.DestinationRedshiftUploadingMethodS3Staging.PurgeStagingData.IsNull() {
				*purgeStagingData1 = r.Configuration.DestinationRedshift.UploadingMethod.DestinationRedshiftUploadingMethodS3Staging.PurgeStagingData.ValueBool()
			} else {
				purgeStagingData1 = nil
			}
			s3BucketName1 := r.Configuration.DestinationRedshift.UploadingMethod.DestinationRedshiftUploadingMethodS3Staging.S3BucketName.ValueString()
			s3BucketPath1 := new(string)
			if !r.Configuration.DestinationRedshift.UploadingMethod.DestinationRedshiftUploadingMethodS3Staging.S3BucketPath.IsUnknown() && !r.Configuration.DestinationRedshift.UploadingMethod.DestinationRedshiftUploadingMethodS3Staging.S3BucketPath.IsNull() {
				*s3BucketPath1 = r.Configuration.DestinationRedshift.UploadingMethod.DestinationRedshiftUploadingMethodS3Staging.S3BucketPath.ValueString()
			} else {
				s3BucketPath1 = nil
			}
			s3BucketRegion1 := shared.DestinationRedshiftUploadingMethodS3StagingS3BucketRegionEnum(r.Configuration.DestinationRedshift.UploadingMethod.DestinationRedshiftUploadingMethodS3Staging.S3BucketRegion.ValueString())
			secretAccessKey1 := r.Configuration.DestinationRedshift.UploadingMethod.DestinationRedshiftUploadingMethodS3Staging.SecretAccessKey.ValueString()
			destinationRedshiftUploadingMethodS3Staging = &shared.DestinationRedshiftUploadingMethodS3Staging{
				AccessKeyID:      accessKeyId1,
				Encryption:       encryption,
				FileBufferCount:  fileBufferCount,
				FileNamePattern:  fileNamePattern1,
				Method:           method9,
				PurgeStagingData: purgeStagingData1,
				S3BucketName:     s3BucketName1,
				S3BucketPath:     s3BucketPath1,
				S3BucketRegion:   s3BucketRegion1,
				SecretAccessKey:  secretAccessKey1,
			}
		}
		if destinationRedshiftUploadingMethodS3Staging != nil {
			uploadingMethod = &shared.DestinationRedshiftUploadingMethod{
				DestinationRedshiftUploadingMethodS3Staging: destinationRedshiftUploadingMethodS3Staging,
			}
		}
		username13 := r.Configuration.DestinationRedshift.Username.ValueString()
		destinationRedshift = &shared.DestinationRedshift{
			Database:        database9,
			DestinationType: destinationType29,
			Host:            host12,
			JdbcURLParams:   jdbcURLParams6,
			Password:        password13,
			Port:            port11,
			Schema:          schema4,
			TunnelMethod:    tunnelMethod32,
			UploadingMethod: uploadingMethod,
			Username:        username13,
		}
	}
	if destinationRedshift != nil {
		configuration = shared.DestinationConfiguration{
			DestinationRedshift: destinationRedshift,
		}
	}
	var destinationRockset *shared.DestinationRockset
	if r.Configuration.DestinationRockset != nil {
		apiKey2 := r.Configuration.DestinationRockset.APIKey.ValueString()
		apiServer := new(string)
		if !r.Configuration.DestinationRockset.APIServer.IsUnknown() && !r.Configuration.DestinationRockset.APIServer.IsNull() {
			*apiServer = r.Configuration.DestinationRockset.APIServer.ValueString()
		} else {
			apiServer = nil
		}
		destinationType30 := shared.DestinationRocksetRocksetEnum(r.Configuration.DestinationRockset.DestinationType.ValueString())
		workspace := r.Configuration.DestinationRockset.Workspace.ValueString()
		destinationRockset = &shared.DestinationRockset{
			APIKey:          apiKey2,
			APIServer:       apiServer,
			DestinationType: destinationType30,
			Workspace:       workspace,
		}
	}
	if destinationRockset != nil {
		configuration = shared.DestinationConfiguration{
			DestinationRockset: destinationRockset,
		}
	}
	var destinationS3 *shared.DestinationS3
	if r.Configuration.DestinationS3 != nil {
		accessKeyId2 := new(string)
		if !r.Configuration.DestinationS3.AccessKeyID.IsUnknown() && !r.Configuration.DestinationS3.AccessKeyID.IsNull() {
			*accessKeyId2 = r.Configuration.DestinationS3.AccessKeyID.ValueString()
		} else {
			accessKeyId2 = nil
		}
		destinationType31 := shared.DestinationS3S3Enum(r.Configuration.DestinationS3.DestinationType.ValueString())
		fileNamePattern2 := new(string)
		if !r.Configuration.DestinationS3.FileNamePattern.IsUnknown() && !r.Configuration.DestinationS3.FileNamePattern.IsNull() {
			*fileNamePattern2 = r.Configuration.DestinationS3.FileNamePattern.ValueString()
		} else {
			fileNamePattern2 = nil
		}
		var format3 shared.DestinationS3OutputFormat
		var destinationS3OutputFormatAvroApacheAvro *shared.DestinationS3OutputFormatAvroApacheAvro
		if r.Configuration.DestinationS3.Format.DestinationS3OutputFormatAvroApacheAvro != nil {
			var compressionCodec4 shared.DestinationS3OutputFormatAvroApacheAvroCompressionCodec
			var destinationS3OutputFormatAvroApacheAvroCompressionCodecNoCompression *shared.DestinationS3OutputFormatAvroApacheAvroCompressionCodecNoCompression
			if r.Configuration.DestinationS3.Format.DestinationS3OutputFormatAvroApacheAvro.CompressionCodec.DestinationS3OutputFormatAvroApacheAvroCompressionCodecNoCompression != nil {
				codec6 := shared.DestinationS3OutputFormatAvroApacheAvroCompressionCodecNoCompressionCodecEnum(r.Configuration.DestinationS3.Format.DestinationS3OutputFormatAvroApacheAvro.CompressionCodec.DestinationS3OutputFormatAvroApacheAvroCompressionCodecNoCompression.Codec.ValueString())
				destinationS3OutputFormatAvroApacheAvroCompressionCodecNoCompression = &shared.DestinationS3OutputFormatAvroApacheAvroCompressionCodecNoCompression{
					Codec: codec6,
				}
			}
			if destinationS3OutputFormatAvroApacheAvroCompressionCodecNoCompression != nil {
				compressionCodec4 = shared.DestinationS3OutputFormatAvroApacheAvroCompressionCodec{
					DestinationS3OutputFormatAvroApacheAvroCompressionCodecNoCompression: destinationS3OutputFormatAvroApacheAvroCompressionCodecNoCompression,
				}
			}
			var destinationS3OutputFormatAvroApacheAvroCompressionCodecDeflate *shared.DestinationS3OutputFormatAvroApacheAvroCompressionCodecDeflate
			if r.Configuration.DestinationS3.Format.DestinationS3OutputFormatAvroApacheAvro.CompressionCodec.DestinationS3OutputFormatAvroApacheAvroCompressionCodecDeflate != nil {
				codec7 := shared.DestinationS3OutputFormatAvroApacheAvroCompressionCodecDeflateCodecEnum(r.Configuration.DestinationS3.Format.DestinationS3OutputFormatAvroApacheAvro.CompressionCodec.DestinationS3OutputFormatAvroApacheAvroCompressionCodecDeflate.Codec.ValueString())
				compressionLevel3 := r.Configuration.DestinationS3.Format.DestinationS3OutputFormatAvroApacheAvro.CompressionCodec.DestinationS3OutputFormatAvroApacheAvroCompressionCodecDeflate.CompressionLevel.ValueInt64()
				destinationS3OutputFormatAvroApacheAvroCompressionCodecDeflate = &shared.DestinationS3OutputFormatAvroApacheAvroCompressionCodecDeflate{
					Codec:            codec7,
					CompressionLevel: compressionLevel3,
				}
			}
			if destinationS3OutputFormatAvroApacheAvroCompressionCodecDeflate != nil {
				compressionCodec4 = shared.DestinationS3OutputFormatAvroApacheAvroCompressionCodec{
					DestinationS3OutputFormatAvroApacheAvroCompressionCodecDeflate: destinationS3OutputFormatAvroApacheAvroCompressionCodecDeflate,
				}
			}
			var destinationS3OutputFormatAvroApacheAvroCompressionCodecBzip2 *shared.DestinationS3OutputFormatAvroApacheAvroCompressionCodecBzip2
			if r.Configuration.DestinationS3.Format.DestinationS3OutputFormatAvroApacheAvro.CompressionCodec.DestinationS3OutputFormatAvroApacheAvroCompressionCodecBzip2 != nil {
				codec8 := shared.DestinationS3OutputFormatAvroApacheAvroCompressionCodecBzip2CodecEnum(r.Configuration.DestinationS3.Format.DestinationS3OutputFormatAvroApacheAvro.CompressionCodec.DestinationS3OutputFormatAvroApacheAvroCompressionCodecBzip2.Codec.ValueString())
				destinationS3OutputFormatAvroApacheAvroCompressionCodecBzip2 = &shared.DestinationS3OutputFormatAvroApacheAvroCompressionCodecBzip2{
					Codec: codec8,
				}
			}
			if destinationS3OutputFormatAvroApacheAvroCompressionCodecBzip2 != nil {
				compressionCodec4 = shared.DestinationS3OutputFormatAvroApacheAvroCompressionCodec{
					DestinationS3OutputFormatAvroApacheAvroCompressionCodecBzip2: destinationS3OutputFormatAvroApacheAvroCompressionCodecBzip2,
				}
			}
			var destinationS3OutputFormatAvroApacheAvroCompressionCodecXz *shared.DestinationS3OutputFormatAvroApacheAvroCompressionCodecXz
			if r.Configuration.DestinationS3.Format.DestinationS3OutputFormatAvroApacheAvro.CompressionCodec.DestinationS3OutputFormatAvroApacheAvroCompressionCodecXz != nil {
				codec9 := shared.DestinationS3OutputFormatAvroApacheAvroCompressionCodecXzCodecEnum(r.Configuration.DestinationS3.Format.DestinationS3OutputFormatAvroApacheAvro.CompressionCodec.DestinationS3OutputFormatAvroApacheAvroCompressionCodecXz.Codec.ValueString())
				compressionLevel4 := r.Configuration.DestinationS3.Format.DestinationS3OutputFormatAvroApacheAvro.CompressionCodec.DestinationS3OutputFormatAvroApacheAvroCompressionCodecXz.CompressionLevel.ValueInt64()
				destinationS3OutputFormatAvroApacheAvroCompressionCodecXz = &shared.DestinationS3OutputFormatAvroApacheAvroCompressionCodecXz{
					Codec:            codec9,
					CompressionLevel: compressionLevel4,
				}
			}
			if destinationS3OutputFormatAvroApacheAvroCompressionCodecXz != nil {
				compressionCodec4 = shared.DestinationS3OutputFormatAvroApacheAvroCompressionCodec{
					DestinationS3OutputFormatAvroApacheAvroCompressionCodecXz: destinationS3OutputFormatAvroApacheAvroCompressionCodecXz,
				}
			}
			var destinationS3OutputFormatAvroApacheAvroCompressionCodecZstandard *shared.DestinationS3OutputFormatAvroApacheAvroCompressionCodecZstandard
			if r.Configuration.DestinationS3.Format.DestinationS3OutputFormatAvroApacheAvro.CompressionCodec.DestinationS3OutputFormatAvroApacheAvroCompressionCodecZstandard != nil {
				codec10 := shared.DestinationS3OutputFormatAvroApacheAvroCompressionCodecZstandardCodecEnum(r.Configuration.DestinationS3.Format.DestinationS3OutputFormatAvroApacheAvro.CompressionCodec.DestinationS3OutputFormatAvroApacheAvroCompressionCodecZstandard.Codec.ValueString())
				compressionLevel5 := r.Configuration.DestinationS3.Format.DestinationS3OutputFormatAvroApacheAvro.CompressionCodec.DestinationS3OutputFormatAvroApacheAvroCompressionCodecZstandard.CompressionLevel.ValueInt64()
				includeChecksum1 := new(bool)
				if !r.Configuration.DestinationS3.Format.DestinationS3OutputFormatAvroApacheAvro.CompressionCodec.DestinationS3OutputFormatAvroApacheAvroCompressionCodecZstandard.IncludeChecksum.IsUnknown() && !r.Configuration.DestinationS3.Format.DestinationS3OutputFormatAvroApacheAvro.CompressionCodec.DestinationS3OutputFormatAvroApacheAvroCompressionCodecZstandard.IncludeChecksum.IsNull() {
					*includeChecksum1 = r.Configuration.DestinationS3.Format.DestinationS3OutputFormatAvroApacheAvro.CompressionCodec.DestinationS3OutputFormatAvroApacheAvroCompressionCodecZstandard.IncludeChecksum.ValueBool()
				} else {
					includeChecksum1 = nil
				}
				destinationS3OutputFormatAvroApacheAvroCompressionCodecZstandard = &shared.DestinationS3OutputFormatAvroApacheAvroCompressionCodecZstandard{
					Codec:            codec10,
					CompressionLevel: compressionLevel5,
					IncludeChecksum:  includeChecksum1,
				}
			}
			if destinationS3OutputFormatAvroApacheAvroCompressionCodecZstandard != nil {
				compressionCodec4 = shared.DestinationS3OutputFormatAvroApacheAvroCompressionCodec{
					DestinationS3OutputFormatAvroApacheAvroCompressionCodecZstandard: destinationS3OutputFormatAvroApacheAvroCompressionCodecZstandard,
				}
			}
			var destinationS3OutputFormatAvroApacheAvroCompressionCodecSnappy *shared.DestinationS3OutputFormatAvroApacheAvroCompressionCodecSnappy
			if r.Configuration.DestinationS3.Format.DestinationS3OutputFormatAvroApacheAvro.CompressionCodec.DestinationS3OutputFormatAvroApacheAvroCompressionCodecSnappy != nil {
				codec11 := shared.DestinationS3OutputFormatAvroApacheAvroCompressionCodecSnappyCodecEnum(r.Configuration.DestinationS3.Format.DestinationS3OutputFormatAvroApacheAvro.CompressionCodec.DestinationS3OutputFormatAvroApacheAvroCompressionCodecSnappy.Codec.ValueString())
				destinationS3OutputFormatAvroApacheAvroCompressionCodecSnappy = &shared.DestinationS3OutputFormatAvroApacheAvroCompressionCodecSnappy{
					Codec: codec11,
				}
			}
			if destinationS3OutputFormatAvroApacheAvroCompressionCodecSnappy != nil {
				compressionCodec4 = shared.DestinationS3OutputFormatAvroApacheAvroCompressionCodec{
					DestinationS3OutputFormatAvroApacheAvroCompressionCodecSnappy: destinationS3OutputFormatAvroApacheAvroCompressionCodecSnappy,
				}
			}
			formatType8 := shared.DestinationS3OutputFormatAvroApacheAvroFormatTypeEnum(r.Configuration.DestinationS3.Format.DestinationS3OutputFormatAvroApacheAvro.FormatType.ValueString())
			destinationS3OutputFormatAvroApacheAvro = &shared.DestinationS3OutputFormatAvroApacheAvro{
				CompressionCodec: compressionCodec4,
				FormatType:       formatType8,
			}
		}
		if destinationS3OutputFormatAvroApacheAvro != nil {
			format3 = shared.DestinationS3OutputFormat{
				DestinationS3OutputFormatAvroApacheAvro: destinationS3OutputFormatAvroApacheAvro,
			}
		}
		var destinationS3OutputFormatCSVCommaSeparatedValues *shared.DestinationS3OutputFormatCSVCommaSeparatedValues
		if r.Configuration.DestinationS3.Format.DestinationS3OutputFormatCSVCommaSeparatedValues != nil {
			var compression2 *shared.DestinationS3OutputFormatCSVCommaSeparatedValuesCompression
			var destinationS3OutputFormatCSVCommaSeparatedValuesCompressionNoCompression *shared.DestinationS3OutputFormatCSVCommaSeparatedValuesCompressionNoCompression
			if r.Configuration.DestinationS3.Format.DestinationS3OutputFormatCSVCommaSeparatedValues.Compression.DestinationS3OutputFormatCSVCommaSeparatedValuesCompressionNoCompression != nil {
				compressionType5 := new(shared.DestinationS3OutputFormatCSVCommaSeparatedValuesCompressionNoCompressionCompressionTypeEnum)
				if !r.Configuration.DestinationS3.Format.DestinationS3OutputFormatCSVCommaSeparatedValues.Compression.DestinationS3OutputFormatCSVCommaSeparatedValuesCompressionNoCompression.CompressionType.IsUnknown() && !r.Configuration.DestinationS3.Format.DestinationS3OutputFormatCSVCommaSeparatedValues.Compression.DestinationS3OutputFormatCSVCommaSeparatedValuesCompressionNoCompression.CompressionType.IsNull() {
					*compressionType5 = shared.DestinationS3OutputFormatCSVCommaSeparatedValuesCompressionNoCompressionCompressionTypeEnum(r.Configuration.DestinationS3.Format.DestinationS3OutputFormatCSVCommaSeparatedValues.Compression.DestinationS3OutputFormatCSVCommaSeparatedValuesCompressionNoCompression.CompressionType.ValueString())
				} else {
					compressionType5 = nil
				}
				destinationS3OutputFormatCSVCommaSeparatedValuesCompressionNoCompression = &shared.DestinationS3OutputFormatCSVCommaSeparatedValuesCompressionNoCompression{
					CompressionType: compressionType5,
				}
			}
			if destinationS3OutputFormatCSVCommaSeparatedValuesCompressionNoCompression != nil {
				compression2 = &shared.DestinationS3OutputFormatCSVCommaSeparatedValuesCompression{
					DestinationS3OutputFormatCSVCommaSeparatedValuesCompressionNoCompression: destinationS3OutputFormatCSVCommaSeparatedValuesCompressionNoCompression,
				}
			}
			var destinationS3OutputFormatCSVCommaSeparatedValuesCompressionGZIP *shared.DestinationS3OutputFormatCSVCommaSeparatedValuesCompressionGZIP
			if r.Configuration.DestinationS3.Format.DestinationS3OutputFormatCSVCommaSeparatedValues.Compression.DestinationS3OutputFormatCSVCommaSeparatedValuesCompressionGZIP != nil {
				compressionType6 := new(shared.DestinationS3OutputFormatCSVCommaSeparatedValuesCompressionGZIPCompressionTypeEnum)
				if !r.Configuration.DestinationS3.Format.DestinationS3OutputFormatCSVCommaSeparatedValues.Compression.DestinationS3OutputFormatCSVCommaSeparatedValuesCompressionGZIP.CompressionType.IsUnknown() && !r.Configuration.DestinationS3.Format.DestinationS3OutputFormatCSVCommaSeparatedValues.Compression.DestinationS3OutputFormatCSVCommaSeparatedValuesCompressionGZIP.CompressionType.IsNull() {
					*compressionType6 = shared.DestinationS3OutputFormatCSVCommaSeparatedValuesCompressionGZIPCompressionTypeEnum(r.Configuration.DestinationS3.Format.DestinationS3OutputFormatCSVCommaSeparatedValues.Compression.DestinationS3OutputFormatCSVCommaSeparatedValuesCompressionGZIP.CompressionType.ValueString())
				} else {
					compressionType6 = nil
				}
				destinationS3OutputFormatCSVCommaSeparatedValuesCompressionGZIP = &shared.DestinationS3OutputFormatCSVCommaSeparatedValuesCompressionGZIP{
					CompressionType: compressionType6,
				}
			}
			if destinationS3OutputFormatCSVCommaSeparatedValuesCompressionGZIP != nil {
				compression2 = &shared.DestinationS3OutputFormatCSVCommaSeparatedValuesCompression{
					DestinationS3OutputFormatCSVCommaSeparatedValuesCompressionGZIP: destinationS3OutputFormatCSVCommaSeparatedValuesCompressionGZIP,
				}
			}
			flattening2 := shared.DestinationS3OutputFormatCSVCommaSeparatedValuesFlatteningEnum(r.Configuration.DestinationS3.Format.DestinationS3OutputFormatCSVCommaSeparatedValues.Flattening.ValueString())
			formatType9 := shared.DestinationS3OutputFormatCSVCommaSeparatedValuesFormatTypeEnum(r.Configuration.DestinationS3.Format.DestinationS3OutputFormatCSVCommaSeparatedValues.FormatType.ValueString())
			destinationS3OutputFormatCSVCommaSeparatedValues = &shared.DestinationS3OutputFormatCSVCommaSeparatedValues{
				Compression: compression2,
				Flattening:  flattening2,
				FormatType:  formatType9,
			}
		}
		if destinationS3OutputFormatCSVCommaSeparatedValues != nil {
			format3 = shared.DestinationS3OutputFormat{
				DestinationS3OutputFormatCSVCommaSeparatedValues: destinationS3OutputFormatCSVCommaSeparatedValues,
			}
		}
		var destinationS3OutputFormatJSONLinesNewlineDelimitedJSON *shared.DestinationS3OutputFormatJSONLinesNewlineDelimitedJSON
		if r.Configuration.DestinationS3.Format.DestinationS3OutputFormatJSONLinesNewlineDelimitedJSON != nil {
			var compression3 *shared.DestinationS3OutputFormatJSONLinesNewlineDelimitedJSONCompression
			var destinationS3OutputFormatJSONLinesNewlineDelimitedJSONCompressionNoCompression *shared.DestinationS3OutputFormatJSONLinesNewlineDelimitedJSONCompressionNoCompression
			if r.Configuration.DestinationS3.Format.DestinationS3OutputFormatJSONLinesNewlineDelimitedJSON.Compression.DestinationS3OutputFormatJSONLinesNewlineDelimitedJSONCompressionNoCompression != nil {
				compressionType7 := new(shared.DestinationS3OutputFormatJSONLinesNewlineDelimitedJSONCompressionNoCompressionCompressionTypeEnum)
				if !r.Configuration.DestinationS3.Format.DestinationS3OutputFormatJSONLinesNewlineDelimitedJSON.Compression.DestinationS3OutputFormatJSONLinesNewlineDelimitedJSONCompressionNoCompression.CompressionType.IsUnknown() && !r.Configuration.DestinationS3.Format.DestinationS3OutputFormatJSONLinesNewlineDelimitedJSON.Compression.DestinationS3OutputFormatJSONLinesNewlineDelimitedJSONCompressionNoCompression.CompressionType.IsNull() {
					*compressionType7 = shared.DestinationS3OutputFormatJSONLinesNewlineDelimitedJSONCompressionNoCompressionCompressionTypeEnum(r.Configuration.DestinationS3.Format.DestinationS3OutputFormatJSONLinesNewlineDelimitedJSON.Compression.DestinationS3OutputFormatJSONLinesNewlineDelimitedJSONCompressionNoCompression.CompressionType.ValueString())
				} else {
					compressionType7 = nil
				}
				destinationS3OutputFormatJSONLinesNewlineDelimitedJSONCompressionNoCompression = &shared.DestinationS3OutputFormatJSONLinesNewlineDelimitedJSONCompressionNoCompression{
					CompressionType: compressionType7,
				}
			}
			if destinationS3OutputFormatJSONLinesNewlineDelimitedJSONCompressionNoCompression != nil {
				compression3 = &shared.DestinationS3OutputFormatJSONLinesNewlineDelimitedJSONCompression{
					DestinationS3OutputFormatJSONLinesNewlineDelimitedJSONCompressionNoCompression: destinationS3OutputFormatJSONLinesNewlineDelimitedJSONCompressionNoCompression,
				}
			}
			var destinationS3OutputFormatJSONLinesNewlineDelimitedJSONCompressionGZIP *shared.DestinationS3OutputFormatJSONLinesNewlineDelimitedJSONCompressionGZIP
			if r.Configuration.DestinationS3.Format.DestinationS3OutputFormatJSONLinesNewlineDelimitedJSON.Compression.DestinationS3OutputFormatJSONLinesNewlineDelimitedJSONCompressionGZIP != nil {
				compressionType8 := new(shared.DestinationS3OutputFormatJSONLinesNewlineDelimitedJSONCompressionGZIPCompressionTypeEnum)
				if !r.Configuration.DestinationS3.Format.DestinationS3OutputFormatJSONLinesNewlineDelimitedJSON.Compression.DestinationS3OutputFormatJSONLinesNewlineDelimitedJSONCompressionGZIP.CompressionType.IsUnknown() && !r.Configuration.DestinationS3.Format.DestinationS3OutputFormatJSONLinesNewlineDelimitedJSON.Compression.DestinationS3OutputFormatJSONLinesNewlineDelimitedJSONCompressionGZIP.CompressionType.IsNull() {
					*compressionType8 = shared.DestinationS3OutputFormatJSONLinesNewlineDelimitedJSONCompressionGZIPCompressionTypeEnum(r.Configuration.DestinationS3.Format.DestinationS3OutputFormatJSONLinesNewlineDelimitedJSON.Compression.DestinationS3OutputFormatJSONLinesNewlineDelimitedJSONCompressionGZIP.CompressionType.ValueString())
				} else {
					compressionType8 = nil
				}
				destinationS3OutputFormatJSONLinesNewlineDelimitedJSONCompressionGZIP = &shared.DestinationS3OutputFormatJSONLinesNewlineDelimitedJSONCompressionGZIP{
					CompressionType: compressionType8,
				}
			}
			if destinationS3OutputFormatJSONLinesNewlineDelimitedJSONCompressionGZIP != nil {
				compression3 = &shared.DestinationS3OutputFormatJSONLinesNewlineDelimitedJSONCompression{
					DestinationS3OutputFormatJSONLinesNewlineDelimitedJSONCompressionGZIP: destinationS3OutputFormatJSONLinesNewlineDelimitedJSONCompressionGZIP,
				}
			}
			flattening3 := new(shared.DestinationS3OutputFormatJSONLinesNewlineDelimitedJSONFlatteningEnum)
			if !r.Configuration.DestinationS3.Format.DestinationS3OutputFormatJSONLinesNewlineDelimitedJSON.Flattening.IsUnknown() && !r.Configuration.DestinationS3.Format.DestinationS3OutputFormatJSONLinesNewlineDelimitedJSON.Flattening.IsNull() {
				*flattening3 = shared.DestinationS3OutputFormatJSONLinesNewlineDelimitedJSONFlatteningEnum(r.Configuration.DestinationS3.Format.DestinationS3OutputFormatJSONLinesNewlineDelimitedJSON.Flattening.ValueString())
			} else {
				flattening3 = nil
			}
			formatType10 := shared.DestinationS3OutputFormatJSONLinesNewlineDelimitedJSONFormatTypeEnum(r.Configuration.DestinationS3.Format.DestinationS3OutputFormatJSONLinesNewlineDelimitedJSON.FormatType.ValueString())
			destinationS3OutputFormatJSONLinesNewlineDelimitedJSON = &shared.DestinationS3OutputFormatJSONLinesNewlineDelimitedJSON{
				Compression: compression3,
				Flattening:  flattening3,
				FormatType:  formatType10,
			}
		}
		if destinationS3OutputFormatJSONLinesNewlineDelimitedJSON != nil {
			format3 = shared.DestinationS3OutputFormat{
				DestinationS3OutputFormatJSONLinesNewlineDelimitedJSON: destinationS3OutputFormatJSONLinesNewlineDelimitedJSON,
			}
		}
		var destinationS3OutputFormatParquetColumnarStorage *shared.DestinationS3OutputFormatParquetColumnarStorage
		if r.Configuration.DestinationS3.Format.DestinationS3OutputFormatParquetColumnarStorage != nil {
			blockSizeMb1 := new(int64)
			if !r.Configuration.DestinationS3.Format.DestinationS3OutputFormatParquetColumnarStorage.BlockSizeMb.IsUnknown() && !r.Configuration.DestinationS3.Format.DestinationS3OutputFormatParquetColumnarStorage.BlockSizeMb.IsNull() {
				*blockSizeMb1 = r.Configuration.DestinationS3.Format.DestinationS3OutputFormatParquetColumnarStorage.BlockSizeMb.ValueInt64()
			} else {
				blockSizeMb1 = nil
			}
			compressionCodec5 := new(shared.DestinationS3OutputFormatParquetColumnarStorageCompressionCodecEnum)
			if !r.Configuration.DestinationS3.Format.DestinationS3OutputFormatParquetColumnarStorage.CompressionCodec.IsUnknown() && !r.Configuration.DestinationS3.Format.DestinationS3OutputFormatParquetColumnarStorage.CompressionCodec.IsNull() {
				*compressionCodec5 = shared.DestinationS3OutputFormatParquetColumnarStorageCompressionCodecEnum(r.Configuration.DestinationS3.Format.DestinationS3OutputFormatParquetColumnarStorage.CompressionCodec.ValueString())
			} else {
				compressionCodec5 = nil
			}
			dictionaryEncoding1 := new(bool)
			if !r.Configuration.DestinationS3.Format.DestinationS3OutputFormatParquetColumnarStorage.DictionaryEncoding.IsUnknown() && !r.Configuration.DestinationS3.Format.DestinationS3OutputFormatParquetColumnarStorage.DictionaryEncoding.IsNull() {
				*dictionaryEncoding1 = r.Configuration.DestinationS3.Format.DestinationS3OutputFormatParquetColumnarStorage.DictionaryEncoding.ValueBool()
			} else {
				dictionaryEncoding1 = nil
			}
			dictionaryPageSizeKb1 := new(int64)
			if !r.Configuration.DestinationS3.Format.DestinationS3OutputFormatParquetColumnarStorage.DictionaryPageSizeKb.IsUnknown() && !r.Configuration.DestinationS3.Format.DestinationS3OutputFormatParquetColumnarStorage.DictionaryPageSizeKb.IsNull() {
				*dictionaryPageSizeKb1 = r.Configuration.DestinationS3.Format.DestinationS3OutputFormatParquetColumnarStorage.DictionaryPageSizeKb.ValueInt64()
			} else {
				dictionaryPageSizeKb1 = nil
			}
			formatType11 := shared.DestinationS3OutputFormatParquetColumnarStorageFormatTypeEnum(r.Configuration.DestinationS3.Format.DestinationS3OutputFormatParquetColumnarStorage.FormatType.ValueString())
			maxPaddingSizeMb1 := new(int64)
			if !r.Configuration.DestinationS3.Format.DestinationS3OutputFormatParquetColumnarStorage.MaxPaddingSizeMb.IsUnknown() && !r.Configuration.DestinationS3.Format.DestinationS3OutputFormatParquetColumnarStorage.MaxPaddingSizeMb.IsNull() {
				*maxPaddingSizeMb1 = r.Configuration.DestinationS3.Format.DestinationS3OutputFormatParquetColumnarStorage.MaxPaddingSizeMb.ValueInt64()
			} else {
				maxPaddingSizeMb1 = nil
			}
			pageSizeKb1 := new(int64)
			if !r.Configuration.DestinationS3.Format.DestinationS3OutputFormatParquetColumnarStorage.PageSizeKb.IsUnknown() && !r.Configuration.DestinationS3.Format.DestinationS3OutputFormatParquetColumnarStorage.PageSizeKb.IsNull() {
				*pageSizeKb1 = r.Configuration.DestinationS3.Format.DestinationS3OutputFormatParquetColumnarStorage.PageSizeKb.ValueInt64()
			} else {
				pageSizeKb1 = nil
			}
			destinationS3OutputFormatParquetColumnarStorage = &shared.DestinationS3OutputFormatParquetColumnarStorage{
				BlockSizeMb:          blockSizeMb1,
				CompressionCodec:     compressionCodec5,
				DictionaryEncoding:   dictionaryEncoding1,
				DictionaryPageSizeKb: dictionaryPageSizeKb1,
				FormatType:           formatType11,
				MaxPaddingSizeMb:     maxPaddingSizeMb1,
				PageSizeKb:           pageSizeKb1,
			}
		}
		if destinationS3OutputFormatParquetColumnarStorage != nil {
			format3 = shared.DestinationS3OutputFormat{
				DestinationS3OutputFormatParquetColumnarStorage: destinationS3OutputFormatParquetColumnarStorage,
			}
		}
		s3BucketName2 := r.Configuration.DestinationS3.S3BucketName.ValueString()
		s3BucketPath2 := r.Configuration.DestinationS3.S3BucketPath.ValueString()
		s3BucketRegion2 := shared.DestinationS3S3BucketRegionEnum(r.Configuration.DestinationS3.S3BucketRegion.ValueString())
		s3Endpoint := new(string)
		if !r.Configuration.DestinationS3.S3Endpoint.IsUnknown() && !r.Configuration.DestinationS3.S3Endpoint.IsNull() {
			*s3Endpoint = r.Configuration.DestinationS3.S3Endpoint.ValueString()
		} else {
			s3Endpoint = nil
		}
		s3PathFormat := new(string)
		if !r.Configuration.DestinationS3.S3PathFormat.IsUnknown() && !r.Configuration.DestinationS3.S3PathFormat.IsNull() {
			*s3PathFormat = r.Configuration.DestinationS3.S3PathFormat.ValueString()
		} else {
			s3PathFormat = nil
		}
		secretAccessKey2 := new(string)
		if !r.Configuration.DestinationS3.SecretAccessKey.IsUnknown() && !r.Configuration.DestinationS3.SecretAccessKey.IsNull() {
			*secretAccessKey2 = r.Configuration.DestinationS3.SecretAccessKey.ValueString()
		} else {
			secretAccessKey2 = nil
		}
		destinationS3 = &shared.DestinationS3{
			AccessKeyID:     accessKeyId2,
			DestinationType: destinationType31,
			FileNamePattern: fileNamePattern2,
			Format:          format3,
			S3BucketName:    s3BucketName2,
			S3BucketPath:    s3BucketPath2,
			S3BucketRegion:  s3BucketRegion2,
			S3Endpoint:      s3Endpoint,
			S3PathFormat:    s3PathFormat,
			SecretAccessKey: secretAccessKey2,
		}
	}
	if destinationS3 != nil {
		configuration = shared.DestinationConfiguration{
			DestinationS3: destinationS3,
		}
	}
	var destinationS3Glue *shared.DestinationS3Glue
	if r.Configuration.DestinationS3Glue != nil {
		accessKeyId3 := new(string)
		if !r.Configuration.DestinationS3Glue.AccessKeyID.IsUnknown() && !r.Configuration.DestinationS3Glue.AccessKeyID.IsNull() {
			*accessKeyId3 = r.Configuration.DestinationS3Glue.AccessKeyID.ValueString()
		} else {
			accessKeyId3 = nil
		}
		destinationType32 := shared.DestinationS3GlueS3GlueEnum(r.Configuration.DestinationS3Glue.DestinationType.ValueString())
		fileNamePattern3 := new(string)
		if !r.Configuration.DestinationS3Glue.FileNamePattern.IsUnknown() && !r.Configuration.DestinationS3Glue.FileNamePattern.IsNull() {
			*fileNamePattern3 = r.Configuration.DestinationS3Glue.FileNamePattern.ValueString()
		} else {
			fileNamePattern3 = nil
		}
		var format4 shared.DestinationS3GlueOutputFormat
		var destinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSON *shared.DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSON
		if r.Configuration.DestinationS3Glue.Format.DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSON != nil {
			var compression4 *shared.DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompression
			var destinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompressionNoCompression *shared.DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompressionNoCompression
			if r.Configuration.DestinationS3Glue.Format.DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSON.Compression.DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompressionNoCompression != nil {
				compressionType9 := new(shared.DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompressionNoCompressionCompressionTypeEnum)
				if !r.Configuration.DestinationS3Glue.Format.DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSON.Compression.DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompressionNoCompression.CompressionType.IsUnknown() && !r.Configuration.DestinationS3Glue.Format.DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSON.Compression.DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompressionNoCompression.CompressionType.IsNull() {
					*compressionType9 = shared.DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompressionNoCompressionCompressionTypeEnum(r.Configuration.DestinationS3Glue.Format.DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSON.Compression.DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompressionNoCompression.CompressionType.ValueString())
				} else {
					compressionType9 = nil
				}
				destinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompressionNoCompression = &shared.DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompressionNoCompression{
					CompressionType: compressionType9,
				}
			}
			if destinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompressionNoCompression != nil {
				compression4 = &shared.DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompression{
					DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompressionNoCompression: destinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompressionNoCompression,
				}
			}
			var destinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompressionGZIP *shared.DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompressionGZIP
			if r.Configuration.DestinationS3Glue.Format.DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSON.Compression.DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompressionGZIP != nil {
				compressionType10 := new(shared.DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompressionGZIPCompressionTypeEnum)
				if !r.Configuration.DestinationS3Glue.Format.DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSON.Compression.DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompressionGZIP.CompressionType.IsUnknown() && !r.Configuration.DestinationS3Glue.Format.DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSON.Compression.DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompressionGZIP.CompressionType.IsNull() {
					*compressionType10 = shared.DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompressionGZIPCompressionTypeEnum(r.Configuration.DestinationS3Glue.Format.DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSON.Compression.DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompressionGZIP.CompressionType.ValueString())
				} else {
					compressionType10 = nil
				}
				destinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompressionGZIP = &shared.DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompressionGZIP{
					CompressionType: compressionType10,
				}
			}
			if destinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompressionGZIP != nil {
				compression4 = &shared.DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompression{
					DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompressionGZIP: destinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompressionGZIP,
				}
			}
			flattenData := new(bool)
			if !r.Configuration.DestinationS3Glue.Format.DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSON.FlattenData.IsUnknown() && !r.Configuration.DestinationS3Glue.Format.DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSON.FlattenData.IsNull() {
				*flattenData = r.Configuration.DestinationS3Glue.Format.DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSON.FlattenData.ValueBool()
			} else {
				flattenData = nil
			}
			formatType12 := shared.DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONFormatTypeEnum(r.Configuration.DestinationS3Glue.Format.DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSON.FormatType.ValueString())
			destinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSON = &shared.DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSON{
				Compression: compression4,
				FlattenData: flattenData,
				FormatType:  formatType12,
			}
		}
		if destinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSON != nil {
			format4 = shared.DestinationS3GlueOutputFormat{
				DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSON: destinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSON,
			}
		}
		glueDatabase := r.Configuration.DestinationS3Glue.GlueDatabase.ValueString()
		glueSerializationLibrary := shared.DestinationS3GlueSerializationLibraryEnum(r.Configuration.DestinationS3Glue.GlueSerializationLibrary.ValueString())
		s3BucketName3 := r.Configuration.DestinationS3Glue.S3BucketName.ValueString()
		s3BucketPath3 := r.Configuration.DestinationS3Glue.S3BucketPath.ValueString()
		s3BucketRegion3 := shared.DestinationS3GlueS3BucketRegionEnum(r.Configuration.DestinationS3Glue.S3BucketRegion.ValueString())
		s3Endpoint1 := new(string)
		if !r.Configuration.DestinationS3Glue.S3Endpoint.IsUnknown() && !r.Configuration.DestinationS3Glue.S3Endpoint.IsNull() {
			*s3Endpoint1 = r.Configuration.DestinationS3Glue.S3Endpoint.ValueString()
		} else {
			s3Endpoint1 = nil
		}
		s3PathFormat1 := new(string)
		if !r.Configuration.DestinationS3Glue.S3PathFormat.IsUnknown() && !r.Configuration.DestinationS3Glue.S3PathFormat.IsNull() {
			*s3PathFormat1 = r.Configuration.DestinationS3Glue.S3PathFormat.ValueString()
		} else {
			s3PathFormat1 = nil
		}
		secretAccessKey3 := new(string)
		if !r.Configuration.DestinationS3Glue.SecretAccessKey.IsUnknown() && !r.Configuration.DestinationS3Glue.SecretAccessKey.IsNull() {
			*secretAccessKey3 = r.Configuration.DestinationS3Glue.SecretAccessKey.ValueString()
		} else {
			secretAccessKey3 = nil
		}
		destinationS3Glue = &shared.DestinationS3Glue{
			AccessKeyID:              accessKeyId3,
			DestinationType:          destinationType32,
			FileNamePattern:          fileNamePattern3,
			Format:                   format4,
			GlueDatabase:             glueDatabase,
			GlueSerializationLibrary: glueSerializationLibrary,
			S3BucketName:             s3BucketName3,
			S3BucketPath:             s3BucketPath3,
			S3BucketRegion:           s3BucketRegion3,
			S3Endpoint:               s3Endpoint1,
			S3PathFormat:             s3PathFormat1,
			SecretAccessKey:          secretAccessKey3,
		}
	}
	if destinationS3Glue != nil {
		configuration = shared.DestinationConfiguration{
			DestinationS3Glue: destinationS3Glue,
		}
	}
	var destinationScylla *shared.DestinationScylla
	if r.Configuration.DestinationScylla != nil {
		address1 := r.Configuration.DestinationScylla.Address.ValueString()
		destinationType33 := shared.DestinationScyllaScyllaEnum(r.Configuration.DestinationScylla.DestinationType.ValueString())
		keyspace1 := r.Configuration.DestinationScylla.Keyspace.ValueString()
		password14 := r.Configuration.DestinationScylla.Password.ValueString()
		port12 := r.Configuration.DestinationScylla.Port.ValueInt64()
		replication1 := new(int64)
		if !r.Configuration.DestinationScylla.Replication.IsUnknown() && !r.Configuration.DestinationScylla.Replication.IsNull() {
			*replication1 = r.Configuration.DestinationScylla.Replication.ValueInt64()
		} else {
			replication1 = nil
		}
		username14 := r.Configuration.DestinationScylla.Username.ValueString()
		destinationScylla = &shared.DestinationScylla{
			Address:         address1,
			DestinationType: destinationType33,
			Keyspace:        keyspace1,
			Password:        password14,
			Port:            port12,
			Replication:     replication1,
			Username:        username14,
		}
	}
	if destinationScylla != nil {
		configuration = shared.DestinationConfiguration{
			DestinationScylla: destinationScylla,
		}
	}
	var destinationSftpJSON *shared.DestinationSftpJSON
	if r.Configuration.DestinationSftpJSON != nil {
		destinationType34 := shared.DestinationSftpJSONSftpJSONEnum(r.Configuration.DestinationSftpJSON.DestinationType.ValueString())
		destinationPath := r.Configuration.DestinationSftpJSON.DestinationPath.ValueString()
		host13 := r.Configuration.DestinationSftpJSON.Host.ValueString()
		password15 := r.Configuration.DestinationSftpJSON.Password.ValueString()
		port13 := new(int64)
		if !r.Configuration.DestinationSftpJSON.Port.IsUnknown() && !r.Configuration.DestinationSftpJSON.Port.IsNull() {
			*port13 = r.Configuration.DestinationSftpJSON.Port.ValueInt64()
		} else {
			port13 = nil
		}
		username15 := r.Configuration.DestinationSftpJSON.Username.ValueString()
		destinationSftpJSON = &shared.DestinationSftpJSON{
			DestinationType: destinationType34,
			DestinationPath: destinationPath,
			Host:            host13,
			Password:        password15,
			Port:            port13,
			Username:        username15,
		}
	}
	if destinationSftpJSON != nil {
		configuration = shared.DestinationConfiguration{
			DestinationSftpJSON: destinationSftpJSON,
		}
	}
	var destinationSnowflake *shared.DestinationSnowflake
	if r.Configuration.DestinationSnowflake != nil {
		var credentials2 *shared.DestinationSnowflakeAuthorizationMethod
		var destinationSnowflakeAuthorizationMethodOAuth20 *shared.DestinationSnowflakeAuthorizationMethodOAuth20
		if r.Configuration.DestinationSnowflake.Credentials.DestinationSnowflakeAuthorizationMethodOAuth20 != nil {
			accessToken := r.Configuration.DestinationSnowflake.Credentials.DestinationSnowflakeAuthorizationMethodOAuth20.AccessToken.ValueString()
			authType1 := new(shared.DestinationSnowflakeAuthorizationMethodOAuth20AuthTypeEnum)
			if !r.Configuration.DestinationSnowflake.Credentials.DestinationSnowflakeAuthorizationMethodOAuth20.AuthType.IsUnknown() && !r.Configuration.DestinationSnowflake.Credentials.DestinationSnowflakeAuthorizationMethodOAuth20.AuthType.IsNull() {
				*authType1 = shared.DestinationSnowflakeAuthorizationMethodOAuth20AuthTypeEnum(r.Configuration.DestinationSnowflake.Credentials.DestinationSnowflakeAuthorizationMethodOAuth20.AuthType.ValueString())
			} else {
				authType1 = nil
			}
			clientId1 := new(string)
			if !r.Configuration.DestinationSnowflake.Credentials.DestinationSnowflakeAuthorizationMethodOAuth20.ClientID.IsUnknown() && !r.Configuration.DestinationSnowflake.Credentials.DestinationSnowflakeAuthorizationMethodOAuth20.ClientID.IsNull() {
				*clientId1 = r.Configuration.DestinationSnowflake.Credentials.DestinationSnowflakeAuthorizationMethodOAuth20.ClientID.ValueString()
			} else {
				clientId1 = nil
			}
			clientSecret1 := new(string)
			if !r.Configuration.DestinationSnowflake.Credentials.DestinationSnowflakeAuthorizationMethodOAuth20.ClientSecret.IsUnknown() && !r.Configuration.DestinationSnowflake.Credentials.DestinationSnowflakeAuthorizationMethodOAuth20.ClientSecret.IsNull() {
				*clientSecret1 = r.Configuration.DestinationSnowflake.Credentials.DestinationSnowflakeAuthorizationMethodOAuth20.ClientSecret.ValueString()
			} else {
				clientSecret1 = nil
			}
			refreshToken1 := r.Configuration.DestinationSnowflake.Credentials.DestinationSnowflakeAuthorizationMethodOAuth20.RefreshToken.ValueString()
			destinationSnowflakeAuthorizationMethodOAuth20 = &shared.DestinationSnowflakeAuthorizationMethodOAuth20{
				AccessToken:  accessToken,
				AuthType:     authType1,
				ClientID:     clientId1,
				ClientSecret: clientSecret1,
				RefreshToken: refreshToken1,
			}
		}
		if destinationSnowflakeAuthorizationMethodOAuth20 != nil {
			credentials2 = &shared.DestinationSnowflakeAuthorizationMethod{
				DestinationSnowflakeAuthorizationMethodOAuth20: destinationSnowflakeAuthorizationMethodOAuth20,
			}
		}
		var destinationSnowflakeAuthorizationMethodKeyPairAuthentication *shared.DestinationSnowflakeAuthorizationMethodKeyPairAuthentication
		if r.Configuration.DestinationSnowflake.Credentials.DestinationSnowflakeAuthorizationMethodKeyPairAuthentication != nil {
			authType2 := new(shared.DestinationSnowflakeAuthorizationMethodKeyPairAuthenticationAuthTypeEnum)
			if !r.Configuration.DestinationSnowflake.Credentials.DestinationSnowflakeAuthorizationMethodKeyPairAuthentication.AuthType.IsUnknown() && !r.Configuration.DestinationSnowflake.Credentials.DestinationSnowflakeAuthorizationMethodKeyPairAuthentication.AuthType.IsNull() {
				*authType2 = shared.DestinationSnowflakeAuthorizationMethodKeyPairAuthenticationAuthTypeEnum(r.Configuration.DestinationSnowflake.Credentials.DestinationSnowflakeAuthorizationMethodKeyPairAuthentication.AuthType.ValueString())
			} else {
				authType2 = nil
			}
			privateKey1 := r.Configuration.DestinationSnowflake.Credentials.DestinationSnowflakeAuthorizationMethodKeyPairAuthentication.PrivateKey.ValueString()
			privateKeyPassword := new(string)
			if !r.Configuration.DestinationSnowflake.Credentials.DestinationSnowflakeAuthorizationMethodKeyPairAuthentication.PrivateKeyPassword.IsUnknown() && !r.Configuration.DestinationSnowflake.Credentials.DestinationSnowflakeAuthorizationMethodKeyPairAuthentication.PrivateKeyPassword.IsNull() {
				*privateKeyPassword = r.Configuration.DestinationSnowflake.Credentials.DestinationSnowflakeAuthorizationMethodKeyPairAuthentication.PrivateKeyPassword.ValueString()
			} else {
				privateKeyPassword = nil
			}
			destinationSnowflakeAuthorizationMethodKeyPairAuthentication = &shared.DestinationSnowflakeAuthorizationMethodKeyPairAuthentication{
				AuthType:           authType2,
				PrivateKey:         privateKey1,
				PrivateKeyPassword: privateKeyPassword,
			}
		}
		if destinationSnowflakeAuthorizationMethodKeyPairAuthentication != nil {
			credentials2 = &shared.DestinationSnowflakeAuthorizationMethod{
				DestinationSnowflakeAuthorizationMethodKeyPairAuthentication: destinationSnowflakeAuthorizationMethodKeyPairAuthentication,
			}
		}
		var destinationSnowflakeAuthorizationMethodUsernameAndPassword *shared.DestinationSnowflakeAuthorizationMethodUsernameAndPassword
		if r.Configuration.DestinationSnowflake.Credentials.DestinationSnowflakeAuthorizationMethodUsernameAndPassword != nil {
			authType3 := new(shared.DestinationSnowflakeAuthorizationMethodUsernameAndPasswordAuthTypeEnum)
			if !r.Configuration.DestinationSnowflake.Credentials.DestinationSnowflakeAuthorizationMethodUsernameAndPassword.AuthType.IsUnknown() && !r.Configuration.DestinationSnowflake.Credentials.DestinationSnowflakeAuthorizationMethodUsernameAndPassword.AuthType.IsNull() {
				*authType3 = shared.DestinationSnowflakeAuthorizationMethodUsernameAndPasswordAuthTypeEnum(r.Configuration.DestinationSnowflake.Credentials.DestinationSnowflakeAuthorizationMethodUsernameAndPassword.AuthType.ValueString())
			} else {
				authType3 = nil
			}
			password16 := r.Configuration.DestinationSnowflake.Credentials.DestinationSnowflakeAuthorizationMethodUsernameAndPassword.Password.ValueString()
			destinationSnowflakeAuthorizationMethodUsernameAndPassword = &shared.DestinationSnowflakeAuthorizationMethodUsernameAndPassword{
				AuthType: authType3,
				Password: password16,
			}
		}
		if destinationSnowflakeAuthorizationMethodUsernameAndPassword != nil {
			credentials2 = &shared.DestinationSnowflakeAuthorizationMethod{
				DestinationSnowflakeAuthorizationMethodUsernameAndPassword: destinationSnowflakeAuthorizationMethodUsernameAndPassword,
			}
		}
		database10 := r.Configuration.DestinationSnowflake.Database.ValueString()
		destinationType35 := shared.DestinationSnowflakeSnowflakeEnum(r.Configuration.DestinationSnowflake.DestinationType.ValueString())
		fileBufferCount1 := new(int64)
		if !r.Configuration.DestinationSnowflake.FileBufferCount.IsUnknown() && !r.Configuration.DestinationSnowflake.FileBufferCount.IsNull() {
			*fileBufferCount1 = r.Configuration.DestinationSnowflake.FileBufferCount.ValueInt64()
		} else {
			fileBufferCount1 = nil
		}
		host14 := r.Configuration.DestinationSnowflake.Host.ValueString()
		jdbcURLParams7 := new(string)
		if !r.Configuration.DestinationSnowflake.JdbcURLParams.IsUnknown() && !r.Configuration.DestinationSnowflake.JdbcURLParams.IsNull() {
			*jdbcURLParams7 = r.Configuration.DestinationSnowflake.JdbcURLParams.ValueString()
		} else {
			jdbcURLParams7 = nil
		}
		var loadingMethod3 *shared.DestinationSnowflakeDataStagingMethod
		var destinationSnowflakeDataStagingMethodSelectAnotherOption *shared.DestinationSnowflakeDataStagingMethodSelectAnotherOption
		if r.Configuration.DestinationSnowflake.LoadingMethod.DestinationSnowflakeDataStagingMethodSelectAnotherOption != nil {
			method10 := shared.DestinationSnowflakeDataStagingMethodSelectAnotherOptionMethodEnum(r.Configuration.DestinationSnowflake.LoadingMethod.DestinationSnowflakeDataStagingMethodSelectAnotherOption.Method.ValueString())
			destinationSnowflakeDataStagingMethodSelectAnotherOption = &shared.DestinationSnowflakeDataStagingMethodSelectAnotherOption{
				Method: method10,
			}
		}
		if destinationSnowflakeDataStagingMethodSelectAnotherOption != nil {
			loadingMethod3 = &shared.DestinationSnowflakeDataStagingMethod{
				DestinationSnowflakeDataStagingMethodSelectAnotherOption: destinationSnowflakeDataStagingMethodSelectAnotherOption,
			}
		}
		var destinationSnowflakeDataStagingMethodRecommendedInternalStaging *shared.DestinationSnowflakeDataStagingMethodRecommendedInternalStaging
		if r.Configuration.DestinationSnowflake.LoadingMethod.DestinationSnowflakeDataStagingMethodRecommendedInternalStaging != nil {
			method11 := shared.DestinationSnowflakeDataStagingMethodRecommendedInternalStagingMethodEnum(r.Configuration.DestinationSnowflake.LoadingMethod.DestinationSnowflakeDataStagingMethodRecommendedInternalStaging.Method.ValueString())
			destinationSnowflakeDataStagingMethodRecommendedInternalStaging = &shared.DestinationSnowflakeDataStagingMethodRecommendedInternalStaging{
				Method: method11,
			}
		}
		if destinationSnowflakeDataStagingMethodRecommendedInternalStaging != nil {
			loadingMethod3 = &shared.DestinationSnowflakeDataStagingMethod{
				DestinationSnowflakeDataStagingMethodRecommendedInternalStaging: destinationSnowflakeDataStagingMethodRecommendedInternalStaging,
			}
		}
		var destinationSnowflakeDataStagingMethodAWSS3Staging *shared.DestinationSnowflakeDataStagingMethodAWSS3Staging
		if r.Configuration.DestinationSnowflake.LoadingMethod.DestinationSnowflakeDataStagingMethodAWSS3Staging != nil {
			accessKeyId4 := r.Configuration.DestinationSnowflake.LoadingMethod.DestinationSnowflakeDataStagingMethodAWSS3Staging.AccessKeyID.ValueString()
			var encryption1 *shared.DestinationSnowflakeDataStagingMethodAWSS3StagingEncryption
			var destinationSnowflakeDataStagingMethodAWSS3StagingEncryptionNoEncryption *shared.DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionNoEncryption
			if r.Configuration.DestinationSnowflake.LoadingMethod.DestinationSnowflakeDataStagingMethodAWSS3Staging.Encryption.DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionNoEncryption != nil {
				encryptionType2 := shared.DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionNoEncryptionEncryptionTypeEnum(r.Configuration.DestinationSnowflake.LoadingMethod.DestinationSnowflakeDataStagingMethodAWSS3Staging.Encryption.DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionNoEncryption.EncryptionType.ValueString())
				destinationSnowflakeDataStagingMethodAWSS3StagingEncryptionNoEncryption = &shared.DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionNoEncryption{
					EncryptionType: encryptionType2,
				}
			}
			if destinationSnowflakeDataStagingMethodAWSS3StagingEncryptionNoEncryption != nil {
				encryption1 = &shared.DestinationSnowflakeDataStagingMethodAWSS3StagingEncryption{
					DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionNoEncryption: destinationSnowflakeDataStagingMethodAWSS3StagingEncryptionNoEncryption,
				}
			}
			var destinationSnowflakeDataStagingMethodAWSS3StagingEncryptionAESCBCEnvelopeEncryption *shared.DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionAESCBCEnvelopeEncryption
			if r.Configuration.DestinationSnowflake.LoadingMethod.DestinationSnowflakeDataStagingMethodAWSS3Staging.Encryption.DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionAESCBCEnvelopeEncryption != nil {
				encryptionType3 := shared.DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionAESCBCEnvelopeEncryptionEncryptionTypeEnum(r.Configuration.DestinationSnowflake.LoadingMethod.DestinationSnowflakeDataStagingMethodAWSS3Staging.Encryption.DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionAESCBCEnvelopeEncryption.EncryptionType.ValueString())
				keyEncryptingKey1 := new(string)
				if !r.Configuration.DestinationSnowflake.LoadingMethod.DestinationSnowflakeDataStagingMethodAWSS3Staging.Encryption.DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionAESCBCEnvelopeEncryption.KeyEncryptingKey.IsUnknown() && !r.Configuration.DestinationSnowflake.LoadingMethod.DestinationSnowflakeDataStagingMethodAWSS3Staging.Encryption.DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionAESCBCEnvelopeEncryption.KeyEncryptingKey.IsNull() {
					*keyEncryptingKey1 = r.Configuration.DestinationSnowflake.LoadingMethod.DestinationSnowflakeDataStagingMethodAWSS3Staging.Encryption.DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionAESCBCEnvelopeEncryption.KeyEncryptingKey.ValueString()
				} else {
					keyEncryptingKey1 = nil
				}
				destinationSnowflakeDataStagingMethodAWSS3StagingEncryptionAESCBCEnvelopeEncryption = &shared.DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionAESCBCEnvelopeEncryption{
					EncryptionType:   encryptionType3,
					KeyEncryptingKey: keyEncryptingKey1,
				}
			}
			if destinationSnowflakeDataStagingMethodAWSS3StagingEncryptionAESCBCEnvelopeEncryption != nil {
				encryption1 = &shared.DestinationSnowflakeDataStagingMethodAWSS3StagingEncryption{
					DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionAESCBCEnvelopeEncryption: destinationSnowflakeDataStagingMethodAWSS3StagingEncryptionAESCBCEnvelopeEncryption,
				}
			}
			fileNamePattern4 := new(string)
			if !r.Configuration.DestinationSnowflake.LoadingMethod.DestinationSnowflakeDataStagingMethodAWSS3Staging.FileNamePattern.IsUnknown() && !r.Configuration.DestinationSnowflake.LoadingMethod.DestinationSnowflakeDataStagingMethodAWSS3Staging.FileNamePattern.IsNull() {
				*fileNamePattern4 = r.Configuration.DestinationSnowflake.LoadingMethod.DestinationSnowflakeDataStagingMethodAWSS3Staging.FileNamePattern.ValueString()
			} else {
				fileNamePattern4 = nil
			}
			method12 := shared.DestinationSnowflakeDataStagingMethodAWSS3StagingMethodEnum(r.Configuration.DestinationSnowflake.LoadingMethod.DestinationSnowflakeDataStagingMethodAWSS3Staging.Method.ValueString())
			purgeStagingData2 := new(bool)
			if !r.Configuration.DestinationSnowflake.LoadingMethod.DestinationSnowflakeDataStagingMethodAWSS3Staging.PurgeStagingData.IsUnknown() && !r.Configuration.DestinationSnowflake.LoadingMethod.DestinationSnowflakeDataStagingMethodAWSS3Staging.PurgeStagingData.IsNull() {
				*purgeStagingData2 = r.Configuration.DestinationSnowflake.LoadingMethod.DestinationSnowflakeDataStagingMethodAWSS3Staging.PurgeStagingData.ValueBool()
			} else {
				purgeStagingData2 = nil
			}
			s3BucketName4 := r.Configuration.DestinationSnowflake.LoadingMethod.DestinationSnowflakeDataStagingMethodAWSS3Staging.S3BucketName.ValueString()
			s3BucketRegion4 := new(shared.DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegionEnum)
			if !r.Configuration.DestinationSnowflake.LoadingMethod.DestinationSnowflakeDataStagingMethodAWSS3Staging.S3BucketRegion.IsUnknown() && !r.Configuration.DestinationSnowflake.LoadingMethod.DestinationSnowflakeDataStagingMethodAWSS3Staging.S3BucketRegion.IsNull() {
				*s3BucketRegion4 = shared.DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegionEnum(r.Configuration.DestinationSnowflake.LoadingMethod.DestinationSnowflakeDataStagingMethodAWSS3Staging.S3BucketRegion.ValueString())
			} else {
				s3BucketRegion4 = nil
			}
			secretAccessKey4 := r.Configuration.DestinationSnowflake.LoadingMethod.DestinationSnowflakeDataStagingMethodAWSS3Staging.SecretAccessKey.ValueString()
			destinationSnowflakeDataStagingMethodAWSS3Staging = &shared.DestinationSnowflakeDataStagingMethodAWSS3Staging{
				AccessKeyID:      accessKeyId4,
				Encryption:       encryption1,
				FileNamePattern:  fileNamePattern4,
				Method:           method12,
				PurgeStagingData: purgeStagingData2,
				S3BucketName:     s3BucketName4,
				S3BucketRegion:   s3BucketRegion4,
				SecretAccessKey:  secretAccessKey4,
			}
		}
		if destinationSnowflakeDataStagingMethodAWSS3Staging != nil {
			loadingMethod3 = &shared.DestinationSnowflakeDataStagingMethod{
				DestinationSnowflakeDataStagingMethodAWSS3Staging: destinationSnowflakeDataStagingMethodAWSS3Staging,
			}
		}
		var destinationSnowflakeDataStagingMethodGoogleCloudStorageStaging *shared.DestinationSnowflakeDataStagingMethodGoogleCloudStorageStaging
		if r.Configuration.DestinationSnowflake.LoadingMethod.DestinationSnowflakeDataStagingMethodGoogleCloudStorageStaging != nil {
			bucketName1 := r.Configuration.DestinationSnowflake.LoadingMethod.DestinationSnowflakeDataStagingMethodGoogleCloudStorageStaging.BucketName.ValueString()
			credentialsJson4 := r.Configuration.DestinationSnowflake.LoadingMethod.DestinationSnowflakeDataStagingMethodGoogleCloudStorageStaging.CredentialsJSON.ValueString()
			method13 := shared.DestinationSnowflakeDataStagingMethodGoogleCloudStorageStagingMethodEnum(r.Configuration.DestinationSnowflake.LoadingMethod.DestinationSnowflakeDataStagingMethodGoogleCloudStorageStaging.Method.ValueString())
			projectId5 := r.Configuration.DestinationSnowflake.LoadingMethod.DestinationSnowflakeDataStagingMethodGoogleCloudStorageStaging.ProjectID.ValueString()
			destinationSnowflakeDataStagingMethodGoogleCloudStorageStaging = &shared.DestinationSnowflakeDataStagingMethodGoogleCloudStorageStaging{
				BucketName:      bucketName1,
				CredentialsJSON: credentialsJson4,
				Method:          method13,
				ProjectID:       projectId5,
			}
		}
		if destinationSnowflakeDataStagingMethodGoogleCloudStorageStaging != nil {
			loadingMethod3 = &shared.DestinationSnowflakeDataStagingMethod{
				DestinationSnowflakeDataStagingMethodGoogleCloudStorageStaging: destinationSnowflakeDataStagingMethodGoogleCloudStorageStaging,
			}
		}
		var destinationSnowflakeDataStagingMethodAzureBlobStorageStaging *shared.DestinationSnowflakeDataStagingMethodAzureBlobStorageStaging
		if r.Configuration.DestinationSnowflake.LoadingMethod.DestinationSnowflakeDataStagingMethodAzureBlobStorageStaging != nil {
			azureBlobStorageAccountName2 := r.Configuration.DestinationSnowflake.LoadingMethod.DestinationSnowflakeDataStagingMethodAzureBlobStorageStaging.AzureBlobStorageAccountName.ValueString()
			azureBlobStorageContainerName2 := r.Configuration.DestinationSnowflake.LoadingMethod.DestinationSnowflakeDataStagingMethodAzureBlobStorageStaging.AzureBlobStorageContainerName.ValueString()
			azureBlobStorageEndpointDomainName2 := new(string)
			if !r.Configuration.DestinationSnowflake.LoadingMethod.DestinationSnowflakeDataStagingMethodAzureBlobStorageStaging.AzureBlobStorageEndpointDomainName.IsUnknown() && !r.Configuration.DestinationSnowflake.LoadingMethod.DestinationSnowflakeDataStagingMethodAzureBlobStorageStaging.AzureBlobStorageEndpointDomainName.IsNull() {
				*azureBlobStorageEndpointDomainName2 = r.Configuration.DestinationSnowflake.LoadingMethod.DestinationSnowflakeDataStagingMethodAzureBlobStorageStaging.AzureBlobStorageEndpointDomainName.ValueString()
			} else {
				azureBlobStorageEndpointDomainName2 = nil
			}
			azureBlobStorageSasToken1 := r.Configuration.DestinationSnowflake.LoadingMethod.DestinationSnowflakeDataStagingMethodAzureBlobStorageStaging.AzureBlobStorageSasToken.ValueString()
			method14 := shared.DestinationSnowflakeDataStagingMethodAzureBlobStorageStagingMethodEnum(r.Configuration.DestinationSnowflake.LoadingMethod.DestinationSnowflakeDataStagingMethodAzureBlobStorageStaging.Method.ValueString())
			destinationSnowflakeDataStagingMethodAzureBlobStorageStaging = &shared.DestinationSnowflakeDataStagingMethodAzureBlobStorageStaging{
				AzureBlobStorageAccountName:        azureBlobStorageAccountName2,
				AzureBlobStorageContainerName:      azureBlobStorageContainerName2,
				AzureBlobStorageEndpointDomainName: azureBlobStorageEndpointDomainName2,
				AzureBlobStorageSasToken:           azureBlobStorageSasToken1,
				Method:                             method14,
			}
		}
		if destinationSnowflakeDataStagingMethodAzureBlobStorageStaging != nil {
			loadingMethod3 = &shared.DestinationSnowflakeDataStagingMethod{
				DestinationSnowflakeDataStagingMethodAzureBlobStorageStaging: destinationSnowflakeDataStagingMethodAzureBlobStorageStaging,
			}
		}
		role := r.Configuration.DestinationSnowflake.Role.ValueString()
		schema5 := r.Configuration.DestinationSnowflake.Schema.ValueString()
		username16 := r.Configuration.DestinationSnowflake.Username.ValueString()
		warehouse := r.Configuration.DestinationSnowflake.Warehouse.ValueString()
		destinationSnowflake = &shared.DestinationSnowflake{
			Credentials:     credentials2,
			Database:        database10,
			DestinationType: destinationType35,
			FileBufferCount: fileBufferCount1,
			Host:            host14,
			JdbcURLParams:   jdbcURLParams7,
			LoadingMethod:   loadingMethod3,
			Role:            role,
			Schema:          schema5,
			Username:        username16,
			Warehouse:       warehouse,
		}
	}
	if destinationSnowflake != nil {
		configuration = shared.DestinationConfiguration{
			DestinationSnowflake: destinationSnowflake,
		}
	}
	var destinationTypesense *shared.DestinationTypesense
	if r.Configuration.DestinationTypesense != nil {
		apiKey3 := r.Configuration.DestinationTypesense.APIKey.ValueString()
		batchSize := new(string)
		if !r.Configuration.DestinationTypesense.BatchSize.IsUnknown() && !r.Configuration.DestinationTypesense.BatchSize.IsNull() {
			*batchSize = r.Configuration.DestinationTypesense.BatchSize.ValueString()
		} else {
			batchSize = nil
		}
		destinationType36 := shared.DestinationTypesenseTypesenseEnum(r.Configuration.DestinationTypesense.DestinationType.ValueString())
		host15 := r.Configuration.DestinationTypesense.Host.ValueString()
		port14 := new(string)
		if !r.Configuration.DestinationTypesense.Port.IsUnknown() && !r.Configuration.DestinationTypesense.Port.IsNull() {
			*port14 = r.Configuration.DestinationTypesense.Port.ValueString()
		} else {
			port14 = nil
		}
		protocol := new(string)
		if !r.Configuration.DestinationTypesense.Protocol.IsUnknown() && !r.Configuration.DestinationTypesense.Protocol.IsNull() {
			*protocol = r.Configuration.DestinationTypesense.Protocol.ValueString()
		} else {
			protocol = nil
		}
		destinationTypesense = &shared.DestinationTypesense{
			APIKey:          apiKey3,
			BatchSize:       batchSize,
			DestinationType: destinationType36,
			Host:            host15,
			Port:            port14,
			Protocol:        protocol,
		}
	}
	if destinationTypesense != nil {
		configuration = shared.DestinationConfiguration{
			DestinationTypesense: destinationTypesense,
		}
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.DestinationCreateRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out

}

func (r *DestinationResourceModel) RefreshFromSDKType(resp *shared.DestinationCreateRequest) {
	if resp.Configuration.DestinationAmazonSqs != nil {
		r.Configuration.DestinationAmazonSqs = &DestinationAmazonSqs{}
		if resp.Configuration.DestinationAmazonSqs.AccessKey != nil {
			r.Configuration.DestinationAmazonSqs.AccessKey = types.StringValue(*resp.Configuration.DestinationAmazonSqs.AccessKey)
		} else {
			r.Configuration.DestinationAmazonSqs.AccessKey = types.StringNull()
		}
		r.Configuration.DestinationAmazonSqs.DestinationType = types.StringValue(string(resp.Configuration.DestinationAmazonSqs.DestinationType))
		if resp.Configuration.DestinationAmazonSqs.MessageBodyKey != nil {
			r.Configuration.DestinationAmazonSqs.MessageBodyKey = types.StringValue(*resp.Configuration.DestinationAmazonSqs.MessageBodyKey)
		} else {
			r.Configuration.DestinationAmazonSqs.MessageBodyKey = types.StringNull()
		}
		if resp.Configuration.DestinationAmazonSqs.MessageDelay != nil {
			r.Configuration.DestinationAmazonSqs.MessageDelay = types.Int64Value(*resp.Configuration.DestinationAmazonSqs.MessageDelay)
		} else {
			r.Configuration.DestinationAmazonSqs.MessageDelay = types.Int64Null()
		}
		if resp.Configuration.DestinationAmazonSqs.MessageGroupID != nil {
			r.Configuration.DestinationAmazonSqs.MessageGroupID = types.StringValue(*resp.Configuration.DestinationAmazonSqs.MessageGroupID)
		} else {
			r.Configuration.DestinationAmazonSqs.MessageGroupID = types.StringNull()
		}
		r.Configuration.DestinationAmazonSqs.QueueURL = types.StringValue(resp.Configuration.DestinationAmazonSqs.QueueURL)
		r.Configuration.DestinationAmazonSqs.Region = types.StringValue(string(resp.Configuration.DestinationAmazonSqs.Region))
		if resp.Configuration.DestinationAmazonSqs.SecretKey != nil {
			r.Configuration.DestinationAmazonSqs.SecretKey = types.StringValue(*resp.Configuration.DestinationAmazonSqs.SecretKey)
		} else {
			r.Configuration.DestinationAmazonSqs.SecretKey = types.StringNull()
		}
	}
	if resp.Configuration.DestinationAwsDatalake != nil {
		r.Configuration.DestinationAwsDatalake = &DestinationAwsDatalake{}
		if resp.Configuration.DestinationAwsDatalake.AwsAccountID != nil {
			r.Configuration.DestinationAwsDatalake.AwsAccountID = types.StringValue(*resp.Configuration.DestinationAwsDatalake.AwsAccountID)
		} else {
			r.Configuration.DestinationAwsDatalake.AwsAccountID = types.StringNull()
		}
		r.Configuration.DestinationAwsDatalake.BucketName = types.StringValue(resp.Configuration.DestinationAwsDatalake.BucketName)
		if resp.Configuration.DestinationAwsDatalake.BucketPrefix != nil {
			r.Configuration.DestinationAwsDatalake.BucketPrefix = types.StringValue(*resp.Configuration.DestinationAwsDatalake.BucketPrefix)
		} else {
			r.Configuration.DestinationAwsDatalake.BucketPrefix = types.StringNull()
		}
		if resp.Configuration.DestinationAwsDatalake.Credentials.DestinationAwsDatalakeAuthenticationModeIAMRole != nil {
			r.Configuration.DestinationAwsDatalake.Credentials.DestinationAwsDatalakeAuthenticationModeIAMRole = &DestinationAwsDatalakeAuthenticationModeIAMRole{}
			r.Configuration.DestinationAwsDatalake.Credentials.DestinationAwsDatalakeAuthenticationModeIAMRole.CredentialsTitle = types.StringValue(string(resp.Configuration.DestinationAwsDatalake.Credentials.DestinationAwsDatalakeAuthenticationModeIAMRole.CredentialsTitle))
			r.Configuration.DestinationAwsDatalake.Credentials.DestinationAwsDatalakeAuthenticationModeIAMRole.RoleArn = types.StringValue(resp.Configuration.DestinationAwsDatalake.Credentials.DestinationAwsDatalakeAuthenticationModeIAMRole.RoleArn)
		}
		if resp.Configuration.DestinationAwsDatalake.Credentials.DestinationAwsDatalakeAuthenticationModeIAMUser != nil {
			r.Configuration.DestinationAwsDatalake.Credentials.DestinationAwsDatalakeAuthenticationModeIAMUser = &DestinationAwsDatalakeAuthenticationModeIAMUser{}
			r.Configuration.DestinationAwsDatalake.Credentials.DestinationAwsDatalakeAuthenticationModeIAMUser.AwsAccessKeyID = types.StringValue(resp.Configuration.DestinationAwsDatalake.Credentials.DestinationAwsDatalakeAuthenticationModeIAMUser.AwsAccessKeyID)
			r.Configuration.DestinationAwsDatalake.Credentials.DestinationAwsDatalakeAuthenticationModeIAMUser.AwsSecretAccessKey = types.StringValue(resp.Configuration.DestinationAwsDatalake.Credentials.DestinationAwsDatalakeAuthenticationModeIAMUser.AwsSecretAccessKey)
			r.Configuration.DestinationAwsDatalake.Credentials.DestinationAwsDatalakeAuthenticationModeIAMUser.CredentialsTitle = types.StringValue(string(resp.Configuration.DestinationAwsDatalake.Credentials.DestinationAwsDatalakeAuthenticationModeIAMUser.CredentialsTitle))
		}
		r.Configuration.DestinationAwsDatalake.DestinationType = types.StringValue(string(resp.Configuration.DestinationAwsDatalake.DestinationType))
		if resp.Configuration.DestinationAwsDatalake.Format == nil {
			r.Configuration.DestinationAwsDatalake.Format = nil
		} else {
			r.Configuration.DestinationAwsDatalake.Format = &DestinationAwsDatalakeOutputFormatWildcard{}
			if resp.Configuration.DestinationAwsDatalake.Format.DestinationAwsDatalakeOutputFormatWildcardJSONLinesNewlineDelimitedJSON != nil {
				r.Configuration.DestinationAwsDatalake.Format.DestinationAwsDatalakeOutputFormatWildcardJSONLinesNewlineDelimitedJSON = &DestinationAwsDatalakeOutputFormatWildcardJSONLinesNewlineDelimitedJSON{}
				if resp.Configuration.DestinationAwsDatalake.Format.DestinationAwsDatalakeOutputFormatWildcardJSONLinesNewlineDelimitedJSON.CompressionCodec != nil {
					r.Configuration.DestinationAwsDatalake.Format.DestinationAwsDatalakeOutputFormatWildcardJSONLinesNewlineDelimitedJSON.CompressionCodec = types.StringValue(string(*resp.Configuration.DestinationAwsDatalake.Format.DestinationAwsDatalakeOutputFormatWildcardJSONLinesNewlineDelimitedJSON.CompressionCodec))
				} else {
					r.Configuration.DestinationAwsDatalake.Format.DestinationAwsDatalakeOutputFormatWildcardJSONLinesNewlineDelimitedJSON.CompressionCodec = types.StringNull()
				}
				r.Configuration.DestinationAwsDatalake.Format.DestinationAwsDatalakeOutputFormatWildcardJSONLinesNewlineDelimitedJSON.FormatType = types.StringValue(string(resp.Configuration.DestinationAwsDatalake.Format.DestinationAwsDatalakeOutputFormatWildcardJSONLinesNewlineDelimitedJSON.FormatType))
			}
			if resp.Configuration.DestinationAwsDatalake.Format.DestinationAwsDatalakeOutputFormatWildcardParquetColumnarStorage != nil {
				r.Configuration.DestinationAwsDatalake.Format.DestinationAwsDatalakeOutputFormatWildcardParquetColumnarStorage = &DestinationAwsDatalakeOutputFormatWildcardParquetColumnarStorage{}
				if resp.Configuration.DestinationAwsDatalake.Format.DestinationAwsDatalakeOutputFormatWildcardParquetColumnarStorage.CompressionCodec != nil {
					r.Configuration.DestinationAwsDatalake.Format.DestinationAwsDatalakeOutputFormatWildcardParquetColumnarStorage.CompressionCodec = types.StringValue(string(*resp.Configuration.DestinationAwsDatalake.Format.DestinationAwsDatalakeOutputFormatWildcardParquetColumnarStorage.CompressionCodec))
				} else {
					r.Configuration.DestinationAwsDatalake.Format.DestinationAwsDatalakeOutputFormatWildcardParquetColumnarStorage.CompressionCodec = types.StringNull()
				}
				r.Configuration.DestinationAwsDatalake.Format.DestinationAwsDatalakeOutputFormatWildcardParquetColumnarStorage.FormatType = types.StringValue(string(resp.Configuration.DestinationAwsDatalake.Format.DestinationAwsDatalakeOutputFormatWildcardParquetColumnarStorage.FormatType))
			}
		}
		if resp.Configuration.DestinationAwsDatalake.GlueCatalogFloatAsDecimal != nil {
			r.Configuration.DestinationAwsDatalake.GlueCatalogFloatAsDecimal = types.BoolValue(*resp.Configuration.DestinationAwsDatalake.GlueCatalogFloatAsDecimal)
		} else {
			r.Configuration.DestinationAwsDatalake.GlueCatalogFloatAsDecimal = types.BoolNull()
		}
		if resp.Configuration.DestinationAwsDatalake.LakeformationDatabaseDefaultTagKey != nil {
			r.Configuration.DestinationAwsDatalake.LakeformationDatabaseDefaultTagKey = types.StringValue(*resp.Configuration.DestinationAwsDatalake.LakeformationDatabaseDefaultTagKey)
		} else {
			r.Configuration.DestinationAwsDatalake.LakeformationDatabaseDefaultTagKey = types.StringNull()
		}
		if resp.Configuration.DestinationAwsDatalake.LakeformationDatabaseDefaultTagValues != nil {
			r.Configuration.DestinationAwsDatalake.LakeformationDatabaseDefaultTagValues = types.StringValue(*resp.Configuration.DestinationAwsDatalake.LakeformationDatabaseDefaultTagValues)
		} else {
			r.Configuration.DestinationAwsDatalake.LakeformationDatabaseDefaultTagValues = types.StringNull()
		}
		r.Configuration.DestinationAwsDatalake.LakeformationDatabaseName = types.StringValue(resp.Configuration.DestinationAwsDatalake.LakeformationDatabaseName)
		if resp.Configuration.DestinationAwsDatalake.LakeformationGovernedTables != nil {
			r.Configuration.DestinationAwsDatalake.LakeformationGovernedTables = types.BoolValue(*resp.Configuration.DestinationAwsDatalake.LakeformationGovernedTables)
		} else {
			r.Configuration.DestinationAwsDatalake.LakeformationGovernedTables = types.BoolNull()
		}
		if resp.Configuration.DestinationAwsDatalake.Partitioning != nil {
			r.Configuration.DestinationAwsDatalake.Partitioning = types.StringValue(string(*resp.Configuration.DestinationAwsDatalake.Partitioning))
		} else {
			r.Configuration.DestinationAwsDatalake.Partitioning = types.StringNull()
		}
		r.Configuration.DestinationAwsDatalake.Region = types.StringValue(string(resp.Configuration.DestinationAwsDatalake.Region))
	}
	if resp.Configuration.DestinationAzureBlobStorage != nil {
		r.Configuration.DestinationAzureBlobStorage = &DestinationAzureBlobStorage{}
		r.Configuration.DestinationAzureBlobStorage.AzureBlobStorageAccountKey = types.StringValue(resp.Configuration.DestinationAzureBlobStorage.AzureBlobStorageAccountKey)
		r.Configuration.DestinationAzureBlobStorage.AzureBlobStorageAccountName = types.StringValue(resp.Configuration.DestinationAzureBlobStorage.AzureBlobStorageAccountName)
		if resp.Configuration.DestinationAzureBlobStorage.AzureBlobStorageContainerName != nil {
			r.Configuration.DestinationAzureBlobStorage.AzureBlobStorageContainerName = types.StringValue(*resp.Configuration.DestinationAzureBlobStorage.AzureBlobStorageContainerName)
		} else {
			r.Configuration.DestinationAzureBlobStorage.AzureBlobStorageContainerName = types.StringNull()
		}
		if resp.Configuration.DestinationAzureBlobStorage.AzureBlobStorageEndpointDomainName != nil {
			r.Configuration.DestinationAzureBlobStorage.AzureBlobStorageEndpointDomainName = types.StringValue(*resp.Configuration.DestinationAzureBlobStorage.AzureBlobStorageEndpointDomainName)
		} else {
			r.Configuration.DestinationAzureBlobStorage.AzureBlobStorageEndpointDomainName = types.StringNull()
		}
		if resp.Configuration.DestinationAzureBlobStorage.AzureBlobStorageOutputBufferSize != nil {
			r.Configuration.DestinationAzureBlobStorage.AzureBlobStorageOutputBufferSize = types.Int64Value(*resp.Configuration.DestinationAzureBlobStorage.AzureBlobStorageOutputBufferSize)
		} else {
			r.Configuration.DestinationAzureBlobStorage.AzureBlobStorageOutputBufferSize = types.Int64Null()
		}
		if resp.Configuration.DestinationAzureBlobStorage.AzureBlobStorageSpillSize != nil {
			r.Configuration.DestinationAzureBlobStorage.AzureBlobStorageSpillSize = types.Int64Value(*resp.Configuration.DestinationAzureBlobStorage.AzureBlobStorageSpillSize)
		} else {
			r.Configuration.DestinationAzureBlobStorage.AzureBlobStorageSpillSize = types.Int64Null()
		}
		r.Configuration.DestinationAzureBlobStorage.DestinationType = types.StringValue(string(resp.Configuration.DestinationAzureBlobStorage.DestinationType))
		if resp.Configuration.DestinationAzureBlobStorage.Format.DestinationAzureBlobStorageOutputFormatCSVCommaSeparatedValues != nil {
			r.Configuration.DestinationAzureBlobStorage.Format.DestinationAzureBlobStorageOutputFormatCSVCommaSeparatedValues = &DestinationAzureBlobStorageOutputFormatCSVCommaSeparatedValues{}
			r.Configuration.DestinationAzureBlobStorage.Format.DestinationAzureBlobStorageOutputFormatCSVCommaSeparatedValues.Flattening = types.StringValue(string(resp.Configuration.DestinationAzureBlobStorage.Format.DestinationAzureBlobStorageOutputFormatCSVCommaSeparatedValues.Flattening))
			r.Configuration.DestinationAzureBlobStorage.Format.DestinationAzureBlobStorageOutputFormatCSVCommaSeparatedValues.FormatType = types.StringValue(string(resp.Configuration.DestinationAzureBlobStorage.Format.DestinationAzureBlobStorageOutputFormatCSVCommaSeparatedValues.FormatType))
		}
		if resp.Configuration.DestinationAzureBlobStorage.Format.DestinationAzureBlobStorageOutputFormatJSONLinesNewlineDelimitedJSON != nil {
			r.Configuration.DestinationAzureBlobStorage.Format.DestinationAzureBlobStorageOutputFormatJSONLinesNewlineDelimitedJSON = &DestinationAzureBlobStorageOutputFormatJSONLinesNewlineDelimitedJSON{}
			r.Configuration.DestinationAzureBlobStorage.Format.DestinationAzureBlobStorageOutputFormatJSONLinesNewlineDelimitedJSON.FormatType = types.StringValue(string(resp.Configuration.DestinationAzureBlobStorage.Format.DestinationAzureBlobStorageOutputFormatJSONLinesNewlineDelimitedJSON.FormatType))
		}
	}
	if resp.Configuration.DestinationBigquery != nil {
		r.Configuration.DestinationBigquery = &DestinationBigquery{}
		if resp.Configuration.DestinationBigquery.BigQueryClientBufferSizeMb != nil {
			r.Configuration.DestinationBigquery.BigQueryClientBufferSizeMb = types.Int64Value(*resp.Configuration.DestinationBigquery.BigQueryClientBufferSizeMb)
		} else {
			r.Configuration.DestinationBigquery.BigQueryClientBufferSizeMb = types.Int64Null()
		}
		if resp.Configuration.DestinationBigquery.CredentialsJSON != nil {
			r.Configuration.DestinationBigquery.CredentialsJSON = types.StringValue(*resp.Configuration.DestinationBigquery.CredentialsJSON)
		} else {
			r.Configuration.DestinationBigquery.CredentialsJSON = types.StringNull()
		}
		r.Configuration.DestinationBigquery.DatasetID = types.StringValue(resp.Configuration.DestinationBigquery.DatasetID)
		r.Configuration.DestinationBigquery.DatasetLocation = types.StringValue(string(resp.Configuration.DestinationBigquery.DatasetLocation))
		r.Configuration.DestinationBigquery.DestinationType = types.StringValue(string(resp.Configuration.DestinationBigquery.DestinationType))
		if resp.Configuration.DestinationBigquery.LoadingMethod == nil {
			r.Configuration.DestinationBigquery.LoadingMethod = nil
		} else {
			r.Configuration.DestinationBigquery.LoadingMethod = &DestinationBigqueryLoadingMethod{}
			if resp.Configuration.DestinationBigquery.LoadingMethod.DestinationBigqueryLoadingMethodStandardInserts != nil {
				r.Configuration.DestinationBigquery.LoadingMethod.DestinationBigqueryLoadingMethodStandardInserts = &DestinationBigqueryLoadingMethodStandardInserts{}
				r.Configuration.DestinationBigquery.LoadingMethod.DestinationBigqueryLoadingMethodStandardInserts.Method = types.StringValue(string(resp.Configuration.DestinationBigquery.LoadingMethod.DestinationBigqueryLoadingMethodStandardInserts.Method))
			}
			if resp.Configuration.DestinationBigquery.LoadingMethod.DestinationBigqueryLoadingMethodGCSStaging != nil {
				r.Configuration.DestinationBigquery.LoadingMethod.DestinationBigqueryLoadingMethodGCSStaging = &DestinationBigqueryLoadingMethodGCSStaging{}
				if resp.Configuration.DestinationBigquery.LoadingMethod.DestinationBigqueryLoadingMethodGCSStaging.Credential.DestinationBigqueryLoadingMethodGCSStagingCredentialHMACKey != nil {
					r.Configuration.DestinationBigquery.LoadingMethod.DestinationBigqueryLoadingMethodGCSStaging.Credential.DestinationBigqueryLoadingMethodGCSStagingCredentialHMACKey = &DestinationBigqueryLoadingMethodGCSStagingCredentialHMACKey{}
					r.Configuration.DestinationBigquery.LoadingMethod.DestinationBigqueryLoadingMethodGCSStaging.Credential.DestinationBigqueryLoadingMethodGCSStagingCredentialHMACKey.CredentialType = types.StringValue(string(resp.Configuration.DestinationBigquery.LoadingMethod.DestinationBigqueryLoadingMethodGCSStaging.Credential.DestinationBigqueryLoadingMethodGCSStagingCredentialHMACKey.CredentialType))
					r.Configuration.DestinationBigquery.LoadingMethod.DestinationBigqueryLoadingMethodGCSStaging.Credential.DestinationBigqueryLoadingMethodGCSStagingCredentialHMACKey.HmacKeyAccessID = types.StringValue(resp.Configuration.DestinationBigquery.LoadingMethod.DestinationBigqueryLoadingMethodGCSStaging.Credential.DestinationBigqueryLoadingMethodGCSStagingCredentialHMACKey.HmacKeyAccessID)
					r.Configuration.DestinationBigquery.LoadingMethod.DestinationBigqueryLoadingMethodGCSStaging.Credential.DestinationBigqueryLoadingMethodGCSStagingCredentialHMACKey.HmacKeySecret = types.StringValue(resp.Configuration.DestinationBigquery.LoadingMethod.DestinationBigqueryLoadingMethodGCSStaging.Credential.DestinationBigqueryLoadingMethodGCSStagingCredentialHMACKey.HmacKeySecret)
				}
				r.Configuration.DestinationBigquery.LoadingMethod.DestinationBigqueryLoadingMethodGCSStaging.GcsBucketName = types.StringValue(resp.Configuration.DestinationBigquery.LoadingMethod.DestinationBigqueryLoadingMethodGCSStaging.GcsBucketName)
				r.Configuration.DestinationBigquery.LoadingMethod.DestinationBigqueryLoadingMethodGCSStaging.GcsBucketPath = types.StringValue(resp.Configuration.DestinationBigquery.LoadingMethod.DestinationBigqueryLoadingMethodGCSStaging.GcsBucketPath)
				if resp.Configuration.DestinationBigquery.LoadingMethod.DestinationBigqueryLoadingMethodGCSStaging.KeepFilesInGcsBucket != nil {
					r.Configuration.DestinationBigquery.LoadingMethod.DestinationBigqueryLoadingMethodGCSStaging.KeepFilesInGcsBucket = types.StringValue(string(*resp.Configuration.DestinationBigquery.LoadingMethod.DestinationBigqueryLoadingMethodGCSStaging.KeepFilesInGcsBucket))
				} else {
					r.Configuration.DestinationBigquery.LoadingMethod.DestinationBigqueryLoadingMethodGCSStaging.KeepFilesInGcsBucket = types.StringNull()
				}
				r.Configuration.DestinationBigquery.LoadingMethod.DestinationBigqueryLoadingMethodGCSStaging.Method = types.StringValue(string(resp.Configuration.DestinationBigquery.LoadingMethod.DestinationBigqueryLoadingMethodGCSStaging.Method))
			}
		}
		r.Configuration.DestinationBigquery.ProjectID = types.StringValue(resp.Configuration.DestinationBigquery.ProjectID)
		if resp.Configuration.DestinationBigquery.TransformationPriority != nil {
			r.Configuration.DestinationBigquery.TransformationPriority = types.StringValue(string(*resp.Configuration.DestinationBigquery.TransformationPriority))
		} else {
			r.Configuration.DestinationBigquery.TransformationPriority = types.StringNull()
		}
	}
	if resp.Configuration.DestinationBigqueryDenormalized != nil {
		r.Configuration.DestinationBigqueryDenormalized = &DestinationBigqueryDenormalized{}
		if resp.Configuration.DestinationBigqueryDenormalized.BigQueryClientBufferSizeMb != nil {
			r.Configuration.DestinationBigqueryDenormalized.BigQueryClientBufferSizeMb = types.Int64Value(*resp.Configuration.DestinationBigqueryDenormalized.BigQueryClientBufferSizeMb)
		} else {
			r.Configuration.DestinationBigqueryDenormalized.BigQueryClientBufferSizeMb = types.Int64Null()
		}
		if resp.Configuration.DestinationBigqueryDenormalized.CredentialsJSON != nil {
			r.Configuration.DestinationBigqueryDenormalized.CredentialsJSON = types.StringValue(*resp.Configuration.DestinationBigqueryDenormalized.CredentialsJSON)
		} else {
			r.Configuration.DestinationBigqueryDenormalized.CredentialsJSON = types.StringNull()
		}
		r.Configuration.DestinationBigqueryDenormalized.DatasetID = types.StringValue(resp.Configuration.DestinationBigqueryDenormalized.DatasetID)
		if resp.Configuration.DestinationBigqueryDenormalized.DatasetLocation != nil {
			r.Configuration.DestinationBigqueryDenormalized.DatasetLocation = types.StringValue(string(*resp.Configuration.DestinationBigqueryDenormalized.DatasetLocation))
		} else {
			r.Configuration.DestinationBigqueryDenormalized.DatasetLocation = types.StringNull()
		}
		r.Configuration.DestinationBigqueryDenormalized.DestinationType = types.StringValue(string(resp.Configuration.DestinationBigqueryDenormalized.DestinationType))
		if resp.Configuration.DestinationBigqueryDenormalized.LoadingMethod == nil {
			r.Configuration.DestinationBigqueryDenormalized.LoadingMethod = nil
		} else {
			r.Configuration.DestinationBigqueryDenormalized.LoadingMethod = &DestinationBigqueryDenormalizedLoadingMethod{}
			if resp.Configuration.DestinationBigqueryDenormalized.LoadingMethod.DestinationBigqueryDenormalizedLoadingMethodStandardInserts != nil {
				r.Configuration.DestinationBigqueryDenormalized.LoadingMethod.DestinationBigqueryDenormalizedLoadingMethodStandardInserts = &DestinationBigqueryLoadingMethodStandardInserts{}
				r.Configuration.DestinationBigqueryDenormalized.LoadingMethod.DestinationBigqueryDenormalizedLoadingMethodStandardInserts.Method = types.StringValue(string(resp.Configuration.DestinationBigqueryDenormalized.LoadingMethod.DestinationBigqueryDenormalizedLoadingMethodStandardInserts.Method))
			}
			if resp.Configuration.DestinationBigqueryDenormalized.LoadingMethod.DestinationBigqueryDenormalizedLoadingMethodGCSStaging != nil {
				r.Configuration.DestinationBigqueryDenormalized.LoadingMethod.DestinationBigqueryDenormalizedLoadingMethodGCSStaging = &DestinationBigqueryDenormalizedLoadingMethodGCSStaging{}
				if resp.Configuration.DestinationBigqueryDenormalized.LoadingMethod.DestinationBigqueryDenormalizedLoadingMethodGCSStaging.Credential.DestinationBigqueryDenormalizedLoadingMethodGCSStagingCredentialHMACKey != nil {
					r.Configuration.DestinationBigqueryDenormalized.LoadingMethod.DestinationBigqueryDenormalizedLoadingMethodGCSStaging.Credential.DestinationBigqueryDenormalizedLoadingMethodGCSStagingCredentialHMACKey = &DestinationBigqueryLoadingMethodGCSStagingCredentialHMACKey{}
					r.Configuration.DestinationBigqueryDenormalized.LoadingMethod.DestinationBigqueryDenormalizedLoadingMethodGCSStaging.Credential.DestinationBigqueryDenormalizedLoadingMethodGCSStagingCredentialHMACKey.CredentialType = types.StringValue(string(resp.Configuration.DestinationBigqueryDenormalized.LoadingMethod.DestinationBigqueryDenormalizedLoadingMethodGCSStaging.Credential.DestinationBigqueryDenormalizedLoadingMethodGCSStagingCredentialHMACKey.CredentialType))
					r.Configuration.DestinationBigqueryDenormalized.LoadingMethod.DestinationBigqueryDenormalizedLoadingMethodGCSStaging.Credential.DestinationBigqueryDenormalizedLoadingMethodGCSStagingCredentialHMACKey.HmacKeyAccessID = types.StringValue(resp.Configuration.DestinationBigqueryDenormalized.LoadingMethod.DestinationBigqueryDenormalizedLoadingMethodGCSStaging.Credential.DestinationBigqueryDenormalizedLoadingMethodGCSStagingCredentialHMACKey.HmacKeyAccessID)
					r.Configuration.DestinationBigqueryDenormalized.LoadingMethod.DestinationBigqueryDenormalizedLoadingMethodGCSStaging.Credential.DestinationBigqueryDenormalizedLoadingMethodGCSStagingCredentialHMACKey.HmacKeySecret = types.StringValue(resp.Configuration.DestinationBigqueryDenormalized.LoadingMethod.DestinationBigqueryDenormalizedLoadingMethodGCSStaging.Credential.DestinationBigqueryDenormalizedLoadingMethodGCSStagingCredentialHMACKey.HmacKeySecret)
				}
				r.Configuration.DestinationBigqueryDenormalized.LoadingMethod.DestinationBigqueryDenormalizedLoadingMethodGCSStaging.GcsBucketName = types.StringValue(resp.Configuration.DestinationBigqueryDenormalized.LoadingMethod.DestinationBigqueryDenormalizedLoadingMethodGCSStaging.GcsBucketName)
				r.Configuration.DestinationBigqueryDenormalized.LoadingMethod.DestinationBigqueryDenormalizedLoadingMethodGCSStaging.GcsBucketPath = types.StringValue(resp.Configuration.DestinationBigqueryDenormalized.LoadingMethod.DestinationBigqueryDenormalizedLoadingMethodGCSStaging.GcsBucketPath)
				if resp.Configuration.DestinationBigqueryDenormalized.LoadingMethod.DestinationBigqueryDenormalizedLoadingMethodGCSStaging.KeepFilesInGcsBucket != nil {
					r.Configuration.DestinationBigqueryDenormalized.LoadingMethod.DestinationBigqueryDenormalizedLoadingMethodGCSStaging.KeepFilesInGcsBucket = types.StringValue(string(*resp.Configuration.DestinationBigqueryDenormalized.LoadingMethod.DestinationBigqueryDenormalizedLoadingMethodGCSStaging.KeepFilesInGcsBucket))
				} else {
					r.Configuration.DestinationBigqueryDenormalized.LoadingMethod.DestinationBigqueryDenormalizedLoadingMethodGCSStaging.KeepFilesInGcsBucket = types.StringNull()
				}
				r.Configuration.DestinationBigqueryDenormalized.LoadingMethod.DestinationBigqueryDenormalizedLoadingMethodGCSStaging.Method = types.StringValue(string(resp.Configuration.DestinationBigqueryDenormalized.LoadingMethod.DestinationBigqueryDenormalizedLoadingMethodGCSStaging.Method))
			}
		}
		r.Configuration.DestinationBigqueryDenormalized.ProjectID = types.StringValue(resp.Configuration.DestinationBigqueryDenormalized.ProjectID)
	}
	if resp.Configuration.DestinationCassandra != nil {
		r.Configuration.DestinationCassandra = &DestinationCassandra{}
		r.Configuration.DestinationCassandra.Address = types.StringValue(resp.Configuration.DestinationCassandra.Address)
		if resp.Configuration.DestinationCassandra.Datacenter != nil {
			r.Configuration.DestinationCassandra.Datacenter = types.StringValue(*resp.Configuration.DestinationCassandra.Datacenter)
		} else {
			r.Configuration.DestinationCassandra.Datacenter = types.StringNull()
		}
		r.Configuration.DestinationCassandra.DestinationType = types.StringValue(string(resp.Configuration.DestinationCassandra.DestinationType))
		r.Configuration.DestinationCassandra.Keyspace = types.StringValue(resp.Configuration.DestinationCassandra.Keyspace)
		r.Configuration.DestinationCassandra.Password = types.StringValue(resp.Configuration.DestinationCassandra.Password)
		r.Configuration.DestinationCassandra.Port = types.Int64Value(resp.Configuration.DestinationCassandra.Port)
		if resp.Configuration.DestinationCassandra.Replication != nil {
			r.Configuration.DestinationCassandra.Replication = types.Int64Value(*resp.Configuration.DestinationCassandra.Replication)
		} else {
			r.Configuration.DestinationCassandra.Replication = types.Int64Null()
		}
		r.Configuration.DestinationCassandra.Username = types.StringValue(resp.Configuration.DestinationCassandra.Username)
	}
	if resp.Configuration.DestinationClickhouse != nil {
		r.Configuration.DestinationClickhouse = &DestinationClickhouse{}
		r.Configuration.DestinationClickhouse.Database = types.StringValue(resp.Configuration.DestinationClickhouse.Database)
		r.Configuration.DestinationClickhouse.DestinationType = types.StringValue(string(resp.Configuration.DestinationClickhouse.DestinationType))
		r.Configuration.DestinationClickhouse.Host = types.StringValue(resp.Configuration.DestinationClickhouse.Host)
		if resp.Configuration.DestinationClickhouse.JdbcURLParams != nil {
			r.Configuration.DestinationClickhouse.JdbcURLParams = types.StringValue(*resp.Configuration.DestinationClickhouse.JdbcURLParams)
		} else {
			r.Configuration.DestinationClickhouse.JdbcURLParams = types.StringNull()
		}
		if resp.Configuration.DestinationClickhouse.Password != nil {
			r.Configuration.DestinationClickhouse.Password = types.StringValue(*resp.Configuration.DestinationClickhouse.Password)
		} else {
			r.Configuration.DestinationClickhouse.Password = types.StringNull()
		}
		r.Configuration.DestinationClickhouse.Port = types.Int64Value(resp.Configuration.DestinationClickhouse.Port)
		if resp.Configuration.DestinationClickhouse.TunnelMethod == nil {
			r.Configuration.DestinationClickhouse.TunnelMethod = nil
		} else {
			r.Configuration.DestinationClickhouse.TunnelMethod = &DestinationClickhouseSSHTunnelMethod{}
			if resp.Configuration.DestinationClickhouse.TunnelMethod.DestinationClickhouseSSHTunnelMethodNoTunnel != nil {
				r.Configuration.DestinationClickhouse.TunnelMethod.DestinationClickhouseSSHTunnelMethodNoTunnel = &DestinationClickhouseSSHTunnelMethodNoTunnel{}
				r.Configuration.DestinationClickhouse.TunnelMethod.DestinationClickhouseSSHTunnelMethodNoTunnel.TunnelMethod = types.StringValue(string(resp.Configuration.DestinationClickhouse.TunnelMethod.DestinationClickhouseSSHTunnelMethodNoTunnel.TunnelMethod))
			}
			if resp.Configuration.DestinationClickhouse.TunnelMethod.DestinationClickhouseSSHTunnelMethodSSHKeyAuthentication != nil {
				r.Configuration.DestinationClickhouse.TunnelMethod.DestinationClickhouseSSHTunnelMethodSSHKeyAuthentication = &DestinationClickhouseSSHTunnelMethodSSHKeyAuthentication{}
				r.Configuration.DestinationClickhouse.TunnelMethod.DestinationClickhouseSSHTunnelMethodSSHKeyAuthentication.SSHKey = types.StringValue(resp.Configuration.DestinationClickhouse.TunnelMethod.DestinationClickhouseSSHTunnelMethodSSHKeyAuthentication.SSHKey)
				r.Configuration.DestinationClickhouse.TunnelMethod.DestinationClickhouseSSHTunnelMethodSSHKeyAuthentication.TunnelHost = types.StringValue(resp.Configuration.DestinationClickhouse.TunnelMethod.DestinationClickhouseSSHTunnelMethodSSHKeyAuthentication.TunnelHost)
				r.Configuration.DestinationClickhouse.TunnelMethod.DestinationClickhouseSSHTunnelMethodSSHKeyAuthentication.TunnelMethod = types.StringValue(string(resp.Configuration.DestinationClickhouse.TunnelMethod.DestinationClickhouseSSHTunnelMethodSSHKeyAuthentication.TunnelMethod))
				r.Configuration.DestinationClickhouse.TunnelMethod.DestinationClickhouseSSHTunnelMethodSSHKeyAuthentication.TunnelPort = types.Int64Value(resp.Configuration.DestinationClickhouse.TunnelMethod.DestinationClickhouseSSHTunnelMethodSSHKeyAuthentication.TunnelPort)
				r.Configuration.DestinationClickhouse.TunnelMethod.DestinationClickhouseSSHTunnelMethodSSHKeyAuthentication.TunnelUser = types.StringValue(resp.Configuration.DestinationClickhouse.TunnelMethod.DestinationClickhouseSSHTunnelMethodSSHKeyAuthentication.TunnelUser)
			}
			if resp.Configuration.DestinationClickhouse.TunnelMethod.DestinationClickhouseSSHTunnelMethodPasswordAuthentication != nil {
				r.Configuration.DestinationClickhouse.TunnelMethod.DestinationClickhouseSSHTunnelMethodPasswordAuthentication = &DestinationClickhouseSSHTunnelMethodPasswordAuthentication{}
				r.Configuration.DestinationClickhouse.TunnelMethod.DestinationClickhouseSSHTunnelMethodPasswordAuthentication.TunnelHost = types.StringValue(resp.Configuration.DestinationClickhouse.TunnelMethod.DestinationClickhouseSSHTunnelMethodPasswordAuthentication.TunnelHost)
				r.Configuration.DestinationClickhouse.TunnelMethod.DestinationClickhouseSSHTunnelMethodPasswordAuthentication.TunnelMethod = types.StringValue(string(resp.Configuration.DestinationClickhouse.TunnelMethod.DestinationClickhouseSSHTunnelMethodPasswordAuthentication.TunnelMethod))
				r.Configuration.DestinationClickhouse.TunnelMethod.DestinationClickhouseSSHTunnelMethodPasswordAuthentication.TunnelPort = types.Int64Value(resp.Configuration.DestinationClickhouse.TunnelMethod.DestinationClickhouseSSHTunnelMethodPasswordAuthentication.TunnelPort)
				r.Configuration.DestinationClickhouse.TunnelMethod.DestinationClickhouseSSHTunnelMethodPasswordAuthentication.TunnelUser = types.StringValue(resp.Configuration.DestinationClickhouse.TunnelMethod.DestinationClickhouseSSHTunnelMethodPasswordAuthentication.TunnelUser)
				r.Configuration.DestinationClickhouse.TunnelMethod.DestinationClickhouseSSHTunnelMethodPasswordAuthentication.TunnelUserPassword = types.StringValue(resp.Configuration.DestinationClickhouse.TunnelMethod.DestinationClickhouseSSHTunnelMethodPasswordAuthentication.TunnelUserPassword)
			}
		}
		r.Configuration.DestinationClickhouse.Username = types.StringValue(resp.Configuration.DestinationClickhouse.Username)
	}
	if resp.Configuration.DestinationConvex != nil {
		r.Configuration.DestinationConvex = &DestinationConvex{}
		r.Configuration.DestinationConvex.AccessKey = types.StringValue(resp.Configuration.DestinationConvex.AccessKey)
		r.Configuration.DestinationConvex.DeploymentURL = types.StringValue(resp.Configuration.DestinationConvex.DeploymentURL)
		r.Configuration.DestinationConvex.DestinationType = types.StringValue(string(resp.Configuration.DestinationConvex.DestinationType))
	}
	if resp.Configuration.DestinationDatabend != nil {
		r.Configuration.DestinationDatabend = &DestinationDatabend{}
		r.Configuration.DestinationDatabend.Database = types.StringValue(resp.Configuration.DestinationDatabend.Database)
		r.Configuration.DestinationDatabend.DestinationType = types.StringValue(string(resp.Configuration.DestinationDatabend.DestinationType))
		r.Configuration.DestinationDatabend.Host = types.StringValue(resp.Configuration.DestinationDatabend.Host)
		if resp.Configuration.DestinationDatabend.Password != nil {
			r.Configuration.DestinationDatabend.Password = types.StringValue(*resp.Configuration.DestinationDatabend.Password)
		} else {
			r.Configuration.DestinationDatabend.Password = types.StringNull()
		}
		if resp.Configuration.DestinationDatabend.Port != nil {
			r.Configuration.DestinationDatabend.Port = types.Int64Value(*resp.Configuration.DestinationDatabend.Port)
		} else {
			r.Configuration.DestinationDatabend.Port = types.Int64Null()
		}
		if resp.Configuration.DestinationDatabend.Table != nil {
			r.Configuration.DestinationDatabend.Table = types.StringValue(*resp.Configuration.DestinationDatabend.Table)
		} else {
			r.Configuration.DestinationDatabend.Table = types.StringNull()
		}
		r.Configuration.DestinationDatabend.Username = types.StringValue(resp.Configuration.DestinationDatabend.Username)
	}
	if resp.Configuration.DestinationDatabricks != nil {
		r.Configuration.DestinationDatabricks = &DestinationDatabricks{}
		r.Configuration.DestinationDatabricks.AcceptTerms = types.BoolValue(resp.Configuration.DestinationDatabricks.AcceptTerms)
		if resp.Configuration.DestinationDatabricks.DataSource.DestinationDatabricksDataSourceRecommendedManagedTables != nil {
			r.Configuration.DestinationDatabricks.DataSource.DestinationDatabricksDataSourceRecommendedManagedTables = &DestinationDatabricksDataSourceRecommendedManagedTables{}
			r.Configuration.DestinationDatabricks.DataSource.DestinationDatabricksDataSourceRecommendedManagedTables.DataSourceType = types.StringValue(string(resp.Configuration.DestinationDatabricks.DataSource.DestinationDatabricksDataSourceRecommendedManagedTables.DataSourceType))
		}
		if resp.Configuration.DestinationDatabricks.DataSource.DestinationDatabricksDataSourceAmazonS3 != nil {
			r.Configuration.DestinationDatabricks.DataSource.DestinationDatabricksDataSourceAmazonS3 = &DestinationDatabricksDataSourceAmazonS3{}
			r.Configuration.DestinationDatabricks.DataSource.DestinationDatabricksDataSourceAmazonS3.DataSourceType = types.StringValue(string(resp.Configuration.DestinationDatabricks.DataSource.DestinationDatabricksDataSourceAmazonS3.DataSourceType))
			if resp.Configuration.DestinationDatabricks.DataSource.DestinationDatabricksDataSourceAmazonS3.FileNamePattern != nil {
				r.Configuration.DestinationDatabricks.DataSource.DestinationDatabricksDataSourceAmazonS3.FileNamePattern = types.StringValue(*resp.Configuration.DestinationDatabricks.DataSource.DestinationDatabricksDataSourceAmazonS3.FileNamePattern)
			} else {
				r.Configuration.DestinationDatabricks.DataSource.DestinationDatabricksDataSourceAmazonS3.FileNamePattern = types.StringNull()
			}
			r.Configuration.DestinationDatabricks.DataSource.DestinationDatabricksDataSourceAmazonS3.S3AccessKeyID = types.StringValue(resp.Configuration.DestinationDatabricks.DataSource.DestinationDatabricksDataSourceAmazonS3.S3AccessKeyID)
			r.Configuration.DestinationDatabricks.DataSource.DestinationDatabricksDataSourceAmazonS3.S3BucketName = types.StringValue(resp.Configuration.DestinationDatabricks.DataSource.DestinationDatabricksDataSourceAmazonS3.S3BucketName)
			r.Configuration.DestinationDatabricks.DataSource.DestinationDatabricksDataSourceAmazonS3.S3BucketPath = types.StringValue(resp.Configuration.DestinationDatabricks.DataSource.DestinationDatabricksDataSourceAmazonS3.S3BucketPath)
			r.Configuration.DestinationDatabricks.DataSource.DestinationDatabricksDataSourceAmazonS3.S3BucketRegion = types.StringValue(string(resp.Configuration.DestinationDatabricks.DataSource.DestinationDatabricksDataSourceAmazonS3.S3BucketRegion))
			r.Configuration.DestinationDatabricks.DataSource.DestinationDatabricksDataSourceAmazonS3.S3SecretAccessKey = types.StringValue(resp.Configuration.DestinationDatabricks.DataSource.DestinationDatabricksDataSourceAmazonS3.S3SecretAccessKey)
		}
		if resp.Configuration.DestinationDatabricks.DataSource.DestinationDatabricksDataSourceAzureBlobStorage != nil {
			r.Configuration.DestinationDatabricks.DataSource.DestinationDatabricksDataSourceAzureBlobStorage = &DestinationDatabricksDataSourceAzureBlobStorage{}
			r.Configuration.DestinationDatabricks.DataSource.DestinationDatabricksDataSourceAzureBlobStorage.AzureBlobStorageAccountName = types.StringValue(resp.Configuration.DestinationDatabricks.DataSource.DestinationDatabricksDataSourceAzureBlobStorage.AzureBlobStorageAccountName)
			r.Configuration.DestinationDatabricks.DataSource.DestinationDatabricksDataSourceAzureBlobStorage.AzureBlobStorageContainerName = types.StringValue(resp.Configuration.DestinationDatabricks.DataSource.DestinationDatabricksDataSourceAzureBlobStorage.AzureBlobStorageContainerName)
			if resp.Configuration.DestinationDatabricks.DataSource.DestinationDatabricksDataSourceAzureBlobStorage.AzureBlobStorageEndpointDomainName != nil {
				r.Configuration.DestinationDatabricks.DataSource.DestinationDatabricksDataSourceAzureBlobStorage.AzureBlobStorageEndpointDomainName = types.StringValue(*resp.Configuration.DestinationDatabricks.DataSource.DestinationDatabricksDataSourceAzureBlobStorage.AzureBlobStorageEndpointDomainName)
			} else {
				r.Configuration.DestinationDatabricks.DataSource.DestinationDatabricksDataSourceAzureBlobStorage.AzureBlobStorageEndpointDomainName = types.StringNull()
			}
			r.Configuration.DestinationDatabricks.DataSource.DestinationDatabricksDataSourceAzureBlobStorage.AzureBlobStorageSasToken = types.StringValue(resp.Configuration.DestinationDatabricks.DataSource.DestinationDatabricksDataSourceAzureBlobStorage.AzureBlobStorageSasToken)
			r.Configuration.DestinationDatabricks.DataSource.DestinationDatabricksDataSourceAzureBlobStorage.DataSourceType = types.StringValue(string(resp.Configuration.DestinationDatabricks.DataSource.DestinationDatabricksDataSourceAzureBlobStorage.DataSourceType))
		}
		if resp.Configuration.DestinationDatabricks.Database != nil {
			r.Configuration.DestinationDatabricks.Database = types.StringValue(*resp.Configuration.DestinationDatabricks.Database)
		} else {
			r.Configuration.DestinationDatabricks.Database = types.StringNull()
		}
		r.Configuration.DestinationDatabricks.DatabricksHTTPPath = types.StringValue(resp.Configuration.DestinationDatabricks.DatabricksHTTPPath)
		r.Configuration.DestinationDatabricks.DatabricksPersonalAccessToken = types.StringValue(resp.Configuration.DestinationDatabricks.DatabricksPersonalAccessToken)
		if resp.Configuration.DestinationDatabricks.DatabricksPort != nil {
			r.Configuration.DestinationDatabricks.DatabricksPort = types.StringValue(*resp.Configuration.DestinationDatabricks.DatabricksPort)
		} else {
			r.Configuration.DestinationDatabricks.DatabricksPort = types.StringNull()
		}
		r.Configuration.DestinationDatabricks.DatabricksServerHostname = types.StringValue(resp.Configuration.DestinationDatabricks.DatabricksServerHostname)
		r.Configuration.DestinationDatabricks.DestinationType = types.StringValue(string(resp.Configuration.DestinationDatabricks.DestinationType))
		if resp.Configuration.DestinationDatabricks.PurgeStagingData != nil {
			r.Configuration.DestinationDatabricks.PurgeStagingData = types.BoolValue(*resp.Configuration.DestinationDatabricks.PurgeStagingData)
		} else {
			r.Configuration.DestinationDatabricks.PurgeStagingData = types.BoolNull()
		}
		if resp.Configuration.DestinationDatabricks.Schema != nil {
			r.Configuration.DestinationDatabricks.Schema = types.StringValue(*resp.Configuration.DestinationDatabricks.Schema)
		} else {
			r.Configuration.DestinationDatabricks.Schema = types.StringNull()
		}
	}
	if resp.Configuration.DestinationDynamodb != nil {
		r.Configuration.DestinationDynamodb = &DestinationDynamodb{}
		r.Configuration.DestinationDynamodb.AccessKeyID = types.StringValue(resp.Configuration.DestinationDynamodb.AccessKeyID)
		r.Configuration.DestinationDynamodb.DestinationType = types.StringValue(string(resp.Configuration.DestinationDynamodb.DestinationType))
		if resp.Configuration.DestinationDynamodb.DynamodbEndpoint != nil {
			r.Configuration.DestinationDynamodb.DynamodbEndpoint = types.StringValue(*resp.Configuration.DestinationDynamodb.DynamodbEndpoint)
		} else {
			r.Configuration.DestinationDynamodb.DynamodbEndpoint = types.StringNull()
		}
		r.Configuration.DestinationDynamodb.DynamodbRegion = types.StringValue(string(resp.Configuration.DestinationDynamodb.DynamodbRegion))
		r.Configuration.DestinationDynamodb.DynamodbTableNamePrefix = types.StringValue(resp.Configuration.DestinationDynamodb.DynamodbTableNamePrefix)
		r.Configuration.DestinationDynamodb.SecretAccessKey = types.StringValue(resp.Configuration.DestinationDynamodb.SecretAccessKey)
	}
	if resp.Configuration.DestinationElasticsearch != nil {
		r.Configuration.DestinationElasticsearch = &DestinationElasticsearch{}
		if resp.Configuration.DestinationElasticsearch.AuthenticationMethod == nil {
			r.Configuration.DestinationElasticsearch.AuthenticationMethod = nil
		} else {
			r.Configuration.DestinationElasticsearch.AuthenticationMethod = &DestinationElasticsearchAuthenticationMethod{}
			if resp.Configuration.DestinationElasticsearch.AuthenticationMethod.DestinationElasticsearchAuthenticationMethodAPIKeySecret != nil {
				r.Configuration.DestinationElasticsearch.AuthenticationMethod.DestinationElasticsearchAuthenticationMethodAPIKeySecret = &DestinationElasticsearchAuthenticationMethodAPIKeySecret{}
				r.Configuration.DestinationElasticsearch.AuthenticationMethod.DestinationElasticsearchAuthenticationMethodAPIKeySecret.APIKeyID = types.StringValue(resp.Configuration.DestinationElasticsearch.AuthenticationMethod.DestinationElasticsearchAuthenticationMethodAPIKeySecret.APIKeyID)
				r.Configuration.DestinationElasticsearch.AuthenticationMethod.DestinationElasticsearchAuthenticationMethodAPIKeySecret.APIKeySecret = types.StringValue(resp.Configuration.DestinationElasticsearch.AuthenticationMethod.DestinationElasticsearchAuthenticationMethodAPIKeySecret.APIKeySecret)
				r.Configuration.DestinationElasticsearch.AuthenticationMethod.DestinationElasticsearchAuthenticationMethodAPIKeySecret.Method = types.StringValue(string(resp.Configuration.DestinationElasticsearch.AuthenticationMethod.DestinationElasticsearchAuthenticationMethodAPIKeySecret.Method))
			}
			if resp.Configuration.DestinationElasticsearch.AuthenticationMethod.DestinationElasticsearchAuthenticationMethodUsernamePassword != nil {
				r.Configuration.DestinationElasticsearch.AuthenticationMethod.DestinationElasticsearchAuthenticationMethodUsernamePassword = &DestinationElasticsearchAuthenticationMethodUsernamePassword{}
				r.Configuration.DestinationElasticsearch.AuthenticationMethod.DestinationElasticsearchAuthenticationMethodUsernamePassword.Method = types.StringValue(string(resp.Configuration.DestinationElasticsearch.AuthenticationMethod.DestinationElasticsearchAuthenticationMethodUsernamePassword.Method))
				r.Configuration.DestinationElasticsearch.AuthenticationMethod.DestinationElasticsearchAuthenticationMethodUsernamePassword.Password = types.StringValue(resp.Configuration.DestinationElasticsearch.AuthenticationMethod.DestinationElasticsearchAuthenticationMethodUsernamePassword.Password)
				r.Configuration.DestinationElasticsearch.AuthenticationMethod.DestinationElasticsearchAuthenticationMethodUsernamePassword.Username = types.StringValue(resp.Configuration.DestinationElasticsearch.AuthenticationMethod.DestinationElasticsearchAuthenticationMethodUsernamePassword.Username)
			}
		}
		if resp.Configuration.DestinationElasticsearch.CaCertificate != nil {
			r.Configuration.DestinationElasticsearch.CaCertificate = types.StringValue(*resp.Configuration.DestinationElasticsearch.CaCertificate)
		} else {
			r.Configuration.DestinationElasticsearch.CaCertificate = types.StringNull()
		}
		r.Configuration.DestinationElasticsearch.DestinationType = types.StringValue(string(resp.Configuration.DestinationElasticsearch.DestinationType))
		r.Configuration.DestinationElasticsearch.Endpoint = types.StringValue(resp.Configuration.DestinationElasticsearch.Endpoint)
		if resp.Configuration.DestinationElasticsearch.Upsert != nil {
			r.Configuration.DestinationElasticsearch.Upsert = types.BoolValue(*resp.Configuration.DestinationElasticsearch.Upsert)
		} else {
			r.Configuration.DestinationElasticsearch.Upsert = types.BoolNull()
		}
	}
	if resp.Configuration.DestinationFirebolt != nil {
		r.Configuration.DestinationFirebolt = &DestinationFirebolt{}
		if resp.Configuration.DestinationFirebolt.Account != nil {
			r.Configuration.DestinationFirebolt.Account = types.StringValue(*resp.Configuration.DestinationFirebolt.Account)
		} else {
			r.Configuration.DestinationFirebolt.Account = types.StringNull()
		}
		r.Configuration.DestinationFirebolt.Database = types.StringValue(resp.Configuration.DestinationFirebolt.Database)
		r.Configuration.DestinationFirebolt.DestinationType = types.StringValue(string(resp.Configuration.DestinationFirebolt.DestinationType))
		if resp.Configuration.DestinationFirebolt.Engine != nil {
			r.Configuration.DestinationFirebolt.Engine = types.StringValue(*resp.Configuration.DestinationFirebolt.Engine)
		} else {
			r.Configuration.DestinationFirebolt.Engine = types.StringNull()
		}
		if resp.Configuration.DestinationFirebolt.Host != nil {
			r.Configuration.DestinationFirebolt.Host = types.StringValue(*resp.Configuration.DestinationFirebolt.Host)
		} else {
			r.Configuration.DestinationFirebolt.Host = types.StringNull()
		}
		if resp.Configuration.DestinationFirebolt.LoadingMethod == nil {
			r.Configuration.DestinationFirebolt.LoadingMethod = nil
		} else {
			r.Configuration.DestinationFirebolt.LoadingMethod = &DestinationFireboltLoadingMethod{}
			if resp.Configuration.DestinationFirebolt.LoadingMethod.DestinationFireboltLoadingMethodSQLInserts != nil {
				r.Configuration.DestinationFirebolt.LoadingMethod.DestinationFireboltLoadingMethodSQLInserts = &DestinationFireboltLoadingMethodSQLInserts{}
				r.Configuration.DestinationFirebolt.LoadingMethod.DestinationFireboltLoadingMethodSQLInserts.Method = types.StringValue(string(resp.Configuration.DestinationFirebolt.LoadingMethod.DestinationFireboltLoadingMethodSQLInserts.Method))
			}
			if resp.Configuration.DestinationFirebolt.LoadingMethod.DestinationFireboltLoadingMethodExternalTableViaS3 != nil {
				r.Configuration.DestinationFirebolt.LoadingMethod.DestinationFireboltLoadingMethodExternalTableViaS3 = &DestinationFireboltLoadingMethodExternalTableViaS3{}
				r.Configuration.DestinationFirebolt.LoadingMethod.DestinationFireboltLoadingMethodExternalTableViaS3.AwsKeyID = types.StringValue(resp.Configuration.DestinationFirebolt.LoadingMethod.DestinationFireboltLoadingMethodExternalTableViaS3.AwsKeyID)
				r.Configuration.DestinationFirebolt.LoadingMethod.DestinationFireboltLoadingMethodExternalTableViaS3.AwsKeySecret = types.StringValue(resp.Configuration.DestinationFirebolt.LoadingMethod.DestinationFireboltLoadingMethodExternalTableViaS3.AwsKeySecret)
				r.Configuration.DestinationFirebolt.LoadingMethod.DestinationFireboltLoadingMethodExternalTableViaS3.Method = types.StringValue(string(resp.Configuration.DestinationFirebolt.LoadingMethod.DestinationFireboltLoadingMethodExternalTableViaS3.Method))
				r.Configuration.DestinationFirebolt.LoadingMethod.DestinationFireboltLoadingMethodExternalTableViaS3.S3Bucket = types.StringValue(resp.Configuration.DestinationFirebolt.LoadingMethod.DestinationFireboltLoadingMethodExternalTableViaS3.S3Bucket)
				r.Configuration.DestinationFirebolt.LoadingMethod.DestinationFireboltLoadingMethodExternalTableViaS3.S3Region = types.StringValue(resp.Configuration.DestinationFirebolt.LoadingMethod.DestinationFireboltLoadingMethodExternalTableViaS3.S3Region)
			}
		}
		r.Configuration.DestinationFirebolt.Password = types.StringValue(resp.Configuration.DestinationFirebolt.Password)
		r.Configuration.DestinationFirebolt.Username = types.StringValue(resp.Configuration.DestinationFirebolt.Username)
	}
	if resp.Configuration.DestinationFirestore != nil {
		r.Configuration.DestinationFirestore = &DestinationFirestore{}
		if resp.Configuration.DestinationFirestore.CredentialsJSON != nil {
			r.Configuration.DestinationFirestore.CredentialsJSON = types.StringValue(*resp.Configuration.DestinationFirestore.CredentialsJSON)
		} else {
			r.Configuration.DestinationFirestore.CredentialsJSON = types.StringNull()
		}
		r.Configuration.DestinationFirestore.DestinationType = types.StringValue(string(resp.Configuration.DestinationFirestore.DestinationType))
		r.Configuration.DestinationFirestore.ProjectID = types.StringValue(resp.Configuration.DestinationFirestore.ProjectID)
	}
	if resp.Configuration.DestinationGcs != nil {
		r.Configuration.DestinationGcs = &DestinationGcs{}
		if resp.Configuration.DestinationGcs.Credential.DestinationGcsAuthenticationHMACKey != nil {
			r.Configuration.DestinationGcs.Credential.DestinationGcsAuthenticationHMACKey = &DestinationBigqueryLoadingMethodGCSStagingCredentialHMACKey{}
			r.Configuration.DestinationGcs.Credential.DestinationGcsAuthenticationHMACKey.CredentialType = types.StringValue(string(resp.Configuration.DestinationGcs.Credential.DestinationGcsAuthenticationHMACKey.CredentialType))
			r.Configuration.DestinationGcs.Credential.DestinationGcsAuthenticationHMACKey.HmacKeyAccessID = types.StringValue(resp.Configuration.DestinationGcs.Credential.DestinationGcsAuthenticationHMACKey.HmacKeyAccessID)
			r.Configuration.DestinationGcs.Credential.DestinationGcsAuthenticationHMACKey.HmacKeySecret = types.StringValue(resp.Configuration.DestinationGcs.Credential.DestinationGcsAuthenticationHMACKey.HmacKeySecret)
		}
		r.Configuration.DestinationGcs.DestinationType = types.StringValue(string(resp.Configuration.DestinationGcs.DestinationType))
		if resp.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatAvroApacheAvro != nil {
			r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatAvroApacheAvro = &DestinationGcsOutputFormatAvroApacheAvro{}
			if resp.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatAvroApacheAvro.CompressionCodec.DestinationGcsOutputFormatAvroApacheAvroCompressionCodecNoCompression != nil {
				r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatAvroApacheAvro.CompressionCodec.DestinationGcsOutputFormatAvroApacheAvroCompressionCodecNoCompression = &DestinationGcsOutputFormatAvroApacheAvroCompressionCodecNoCompression{}
				r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatAvroApacheAvro.CompressionCodec.DestinationGcsOutputFormatAvroApacheAvroCompressionCodecNoCompression.Codec = types.StringValue(string(resp.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatAvroApacheAvro.CompressionCodec.DestinationGcsOutputFormatAvroApacheAvroCompressionCodecNoCompression.Codec))
			}
			if resp.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatAvroApacheAvro.CompressionCodec.DestinationGcsOutputFormatAvroApacheAvroCompressionCodecDeflate != nil {
				r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatAvroApacheAvro.CompressionCodec.DestinationGcsOutputFormatAvroApacheAvroCompressionCodecDeflate = &DestinationGcsOutputFormatAvroApacheAvroCompressionCodecDeflate{}
				r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatAvroApacheAvro.CompressionCodec.DestinationGcsOutputFormatAvroApacheAvroCompressionCodecDeflate.Codec = types.StringValue(string(resp.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatAvroApacheAvro.CompressionCodec.DestinationGcsOutputFormatAvroApacheAvroCompressionCodecDeflate.Codec))
				if resp.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatAvroApacheAvro.CompressionCodec.DestinationGcsOutputFormatAvroApacheAvroCompressionCodecDeflate.CompressionLevel != nil {
					r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatAvroApacheAvro.CompressionCodec.DestinationGcsOutputFormatAvroApacheAvroCompressionCodecDeflate.CompressionLevel = types.Int64Value(*resp.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatAvroApacheAvro.CompressionCodec.DestinationGcsOutputFormatAvroApacheAvroCompressionCodecDeflate.CompressionLevel)
				} else {
					r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatAvroApacheAvro.CompressionCodec.DestinationGcsOutputFormatAvroApacheAvroCompressionCodecDeflate.CompressionLevel = types.Int64Null()
				}
			}
			if resp.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatAvroApacheAvro.CompressionCodec.DestinationGcsOutputFormatAvroApacheAvroCompressionCodecBzip2 != nil {
				r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatAvroApacheAvro.CompressionCodec.DestinationGcsOutputFormatAvroApacheAvroCompressionCodecBzip2 = &DestinationGcsOutputFormatAvroApacheAvroCompressionCodecBzip2{}
				r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatAvroApacheAvro.CompressionCodec.DestinationGcsOutputFormatAvroApacheAvroCompressionCodecBzip2.Codec = types.StringValue(string(resp.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatAvroApacheAvro.CompressionCodec.DestinationGcsOutputFormatAvroApacheAvroCompressionCodecBzip2.Codec))
			}
			if resp.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatAvroApacheAvro.CompressionCodec.DestinationGcsOutputFormatAvroApacheAvroCompressionCodecXz != nil {
				r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatAvroApacheAvro.CompressionCodec.DestinationGcsOutputFormatAvroApacheAvroCompressionCodecXz = &DestinationGcsOutputFormatAvroApacheAvroCompressionCodecXz{}
				r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatAvroApacheAvro.CompressionCodec.DestinationGcsOutputFormatAvroApacheAvroCompressionCodecXz.Codec = types.StringValue(string(resp.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatAvroApacheAvro.CompressionCodec.DestinationGcsOutputFormatAvroApacheAvroCompressionCodecXz.Codec))
				if resp.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatAvroApacheAvro.CompressionCodec.DestinationGcsOutputFormatAvroApacheAvroCompressionCodecXz.CompressionLevel != nil {
					r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatAvroApacheAvro.CompressionCodec.DestinationGcsOutputFormatAvroApacheAvroCompressionCodecXz.CompressionLevel = types.Int64Value(*resp.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatAvroApacheAvro.CompressionCodec.DestinationGcsOutputFormatAvroApacheAvroCompressionCodecXz.CompressionLevel)
				} else {
					r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatAvroApacheAvro.CompressionCodec.DestinationGcsOutputFormatAvroApacheAvroCompressionCodecXz.CompressionLevel = types.Int64Null()
				}
			}
			if resp.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatAvroApacheAvro.CompressionCodec.DestinationGcsOutputFormatAvroApacheAvroCompressionCodecZstandard != nil {
				r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatAvroApacheAvro.CompressionCodec.DestinationGcsOutputFormatAvroApacheAvroCompressionCodecZstandard = &DestinationGcsOutputFormatAvroApacheAvroCompressionCodecZstandard{}
				r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatAvroApacheAvro.CompressionCodec.DestinationGcsOutputFormatAvroApacheAvroCompressionCodecZstandard.Codec = types.StringValue(string(resp.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatAvroApacheAvro.CompressionCodec.DestinationGcsOutputFormatAvroApacheAvroCompressionCodecZstandard.Codec))
				if resp.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatAvroApacheAvro.CompressionCodec.DestinationGcsOutputFormatAvroApacheAvroCompressionCodecZstandard.CompressionLevel != nil {
					r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatAvroApacheAvro.CompressionCodec.DestinationGcsOutputFormatAvroApacheAvroCompressionCodecZstandard.CompressionLevel = types.Int64Value(*resp.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatAvroApacheAvro.CompressionCodec.DestinationGcsOutputFormatAvroApacheAvroCompressionCodecZstandard.CompressionLevel)
				} else {
					r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatAvroApacheAvro.CompressionCodec.DestinationGcsOutputFormatAvroApacheAvroCompressionCodecZstandard.CompressionLevel = types.Int64Null()
				}
				if resp.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatAvroApacheAvro.CompressionCodec.DestinationGcsOutputFormatAvroApacheAvroCompressionCodecZstandard.IncludeChecksum != nil {
					r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatAvroApacheAvro.CompressionCodec.DestinationGcsOutputFormatAvroApacheAvroCompressionCodecZstandard.IncludeChecksum = types.BoolValue(*resp.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatAvroApacheAvro.CompressionCodec.DestinationGcsOutputFormatAvroApacheAvroCompressionCodecZstandard.IncludeChecksum)
				} else {
					r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatAvroApacheAvro.CompressionCodec.DestinationGcsOutputFormatAvroApacheAvroCompressionCodecZstandard.IncludeChecksum = types.BoolNull()
				}
			}
			if resp.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatAvroApacheAvro.CompressionCodec.DestinationGcsOutputFormatAvroApacheAvroCompressionCodecSnappy != nil {
				r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatAvroApacheAvro.CompressionCodec.DestinationGcsOutputFormatAvroApacheAvroCompressionCodecSnappy = &DestinationGcsOutputFormatAvroApacheAvroCompressionCodecSnappy{}
				r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatAvroApacheAvro.CompressionCodec.DestinationGcsOutputFormatAvroApacheAvroCompressionCodecSnappy.Codec = types.StringValue(string(resp.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatAvroApacheAvro.CompressionCodec.DestinationGcsOutputFormatAvroApacheAvroCompressionCodecSnappy.Codec))
			}
			r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatAvroApacheAvro.FormatType = types.StringValue(string(resp.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatAvroApacheAvro.FormatType))
		}
		if resp.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatCSVCommaSeparatedValues != nil {
			r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatCSVCommaSeparatedValues = &DestinationGcsOutputFormatCSVCommaSeparatedValues{}
			if resp.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatCSVCommaSeparatedValues.Compression == nil {
				r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatCSVCommaSeparatedValues.Compression = nil
			} else {
				r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatCSVCommaSeparatedValues.Compression = &DestinationGcsOutputFormatCSVCommaSeparatedValuesCompression{}
				if resp.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatCSVCommaSeparatedValues.Compression.DestinationGcsOutputFormatCSVCommaSeparatedValuesCompressionNoCompression != nil {
					r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatCSVCommaSeparatedValues.Compression.DestinationGcsOutputFormatCSVCommaSeparatedValuesCompressionNoCompression = &DestinationGcsOutputFormatCSVCommaSeparatedValuesCompressionNoCompression{}
					if resp.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatCSVCommaSeparatedValues.Compression.DestinationGcsOutputFormatCSVCommaSeparatedValuesCompressionNoCompression.CompressionType != nil {
						r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatCSVCommaSeparatedValues.Compression.DestinationGcsOutputFormatCSVCommaSeparatedValuesCompressionNoCompression.CompressionType = types.StringValue(string(*resp.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatCSVCommaSeparatedValues.Compression.DestinationGcsOutputFormatCSVCommaSeparatedValuesCompressionNoCompression.CompressionType))
					} else {
						r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatCSVCommaSeparatedValues.Compression.DestinationGcsOutputFormatCSVCommaSeparatedValuesCompressionNoCompression.CompressionType = types.StringNull()
					}
				}
				if resp.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatCSVCommaSeparatedValues.Compression.DestinationGcsOutputFormatCSVCommaSeparatedValuesCompressionGZIP != nil {
					r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatCSVCommaSeparatedValues.Compression.DestinationGcsOutputFormatCSVCommaSeparatedValuesCompressionGZIP = &DestinationGcsOutputFormatCSVCommaSeparatedValuesCompressionGZIP{}
					if resp.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatCSVCommaSeparatedValues.Compression.DestinationGcsOutputFormatCSVCommaSeparatedValuesCompressionGZIP.CompressionType != nil {
						r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatCSVCommaSeparatedValues.Compression.DestinationGcsOutputFormatCSVCommaSeparatedValuesCompressionGZIP.CompressionType = types.StringValue(string(*resp.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatCSVCommaSeparatedValues.Compression.DestinationGcsOutputFormatCSVCommaSeparatedValuesCompressionGZIP.CompressionType))
					} else {
						r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatCSVCommaSeparatedValues.Compression.DestinationGcsOutputFormatCSVCommaSeparatedValuesCompressionGZIP.CompressionType = types.StringNull()
					}
				}
			}
			if resp.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatCSVCommaSeparatedValues.Flattening != nil {
				r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatCSVCommaSeparatedValues.Flattening = types.StringValue(string(*resp.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatCSVCommaSeparatedValues.Flattening))
			} else {
				r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatCSVCommaSeparatedValues.Flattening = types.StringNull()
			}
			r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatCSVCommaSeparatedValues.FormatType = types.StringValue(string(resp.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatCSVCommaSeparatedValues.FormatType))
		}
		if resp.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatJSONLinesNewlineDelimitedJSON != nil {
			r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatJSONLinesNewlineDelimitedJSON = &DestinationGcsOutputFormatJSONLinesNewlineDelimitedJSON{}
			if resp.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatJSONLinesNewlineDelimitedJSON.Compression == nil {
				r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatJSONLinesNewlineDelimitedJSON.Compression = nil
			} else {
				r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatJSONLinesNewlineDelimitedJSON.Compression = &DestinationGcsOutputFormatJSONLinesNewlineDelimitedJSONCompression{}
				if resp.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatJSONLinesNewlineDelimitedJSON.Compression.DestinationGcsOutputFormatJSONLinesNewlineDelimitedJSONCompressionNoCompression != nil {
					r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatJSONLinesNewlineDelimitedJSON.Compression.DestinationGcsOutputFormatJSONLinesNewlineDelimitedJSONCompressionNoCompression = &DestinationGcsOutputFormatJSONLinesNewlineDelimitedJSONCompressionNoCompression{}
					if resp.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatJSONLinesNewlineDelimitedJSON.Compression.DestinationGcsOutputFormatJSONLinesNewlineDelimitedJSONCompressionNoCompression.CompressionType != nil {
						r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatJSONLinesNewlineDelimitedJSON.Compression.DestinationGcsOutputFormatJSONLinesNewlineDelimitedJSONCompressionNoCompression.CompressionType = types.StringValue(string(*resp.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatJSONLinesNewlineDelimitedJSON.Compression.DestinationGcsOutputFormatJSONLinesNewlineDelimitedJSONCompressionNoCompression.CompressionType))
					} else {
						r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatJSONLinesNewlineDelimitedJSON.Compression.DestinationGcsOutputFormatJSONLinesNewlineDelimitedJSONCompressionNoCompression.CompressionType = types.StringNull()
					}
				}
				if resp.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatJSONLinesNewlineDelimitedJSON.Compression.DestinationGcsOutputFormatJSONLinesNewlineDelimitedJSONCompressionGZIP != nil {
					r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatJSONLinesNewlineDelimitedJSON.Compression.DestinationGcsOutputFormatJSONLinesNewlineDelimitedJSONCompressionGZIP = &DestinationGcsOutputFormatJSONLinesNewlineDelimitedJSONCompressionGZIP{}
					if resp.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatJSONLinesNewlineDelimitedJSON.Compression.DestinationGcsOutputFormatJSONLinesNewlineDelimitedJSONCompressionGZIP.CompressionType != nil {
						r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatJSONLinesNewlineDelimitedJSON.Compression.DestinationGcsOutputFormatJSONLinesNewlineDelimitedJSONCompressionGZIP.CompressionType = types.StringValue(string(*resp.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatJSONLinesNewlineDelimitedJSON.Compression.DestinationGcsOutputFormatJSONLinesNewlineDelimitedJSONCompressionGZIP.CompressionType))
					} else {
						r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatJSONLinesNewlineDelimitedJSON.Compression.DestinationGcsOutputFormatJSONLinesNewlineDelimitedJSONCompressionGZIP.CompressionType = types.StringNull()
					}
				}
			}
			r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatJSONLinesNewlineDelimitedJSON.FormatType = types.StringValue(string(resp.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatJSONLinesNewlineDelimitedJSON.FormatType))
		}
		if resp.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatParquetColumnarStorage != nil {
			r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatParquetColumnarStorage = &DestinationGcsOutputFormatParquetColumnarStorage{}
			if resp.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatParquetColumnarStorage.BlockSizeMb != nil {
				r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatParquetColumnarStorage.BlockSizeMb = types.Int64Value(*resp.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatParquetColumnarStorage.BlockSizeMb)
			} else {
				r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatParquetColumnarStorage.BlockSizeMb = types.Int64Null()
			}
			if resp.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatParquetColumnarStorage.CompressionCodec != nil {
				r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatParquetColumnarStorage.CompressionCodec = types.StringValue(string(*resp.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatParquetColumnarStorage.CompressionCodec))
			} else {
				r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatParquetColumnarStorage.CompressionCodec = types.StringNull()
			}
			if resp.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatParquetColumnarStorage.DictionaryEncoding != nil {
				r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatParquetColumnarStorage.DictionaryEncoding = types.BoolValue(*resp.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatParquetColumnarStorage.DictionaryEncoding)
			} else {
				r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatParquetColumnarStorage.DictionaryEncoding = types.BoolNull()
			}
			if resp.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatParquetColumnarStorage.DictionaryPageSizeKb != nil {
				r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatParquetColumnarStorage.DictionaryPageSizeKb = types.Int64Value(*resp.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatParquetColumnarStorage.DictionaryPageSizeKb)
			} else {
				r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatParquetColumnarStorage.DictionaryPageSizeKb = types.Int64Null()
			}
			r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatParquetColumnarStorage.FormatType = types.StringValue(string(resp.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatParquetColumnarStorage.FormatType))
			if resp.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatParquetColumnarStorage.MaxPaddingSizeMb != nil {
				r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatParquetColumnarStorage.MaxPaddingSizeMb = types.Int64Value(*resp.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatParquetColumnarStorage.MaxPaddingSizeMb)
			} else {
				r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatParquetColumnarStorage.MaxPaddingSizeMb = types.Int64Null()
			}
			if resp.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatParquetColumnarStorage.PageSizeKb != nil {
				r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatParquetColumnarStorage.PageSizeKb = types.Int64Value(*resp.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatParquetColumnarStorage.PageSizeKb)
			} else {
				r.Configuration.DestinationGcs.Format.DestinationGcsOutputFormatParquetColumnarStorage.PageSizeKb = types.Int64Null()
			}
		}
		r.Configuration.DestinationGcs.GcsBucketName = types.StringValue(resp.Configuration.DestinationGcs.GcsBucketName)
		r.Configuration.DestinationGcs.GcsBucketPath = types.StringValue(resp.Configuration.DestinationGcs.GcsBucketPath)
		if resp.Configuration.DestinationGcs.GcsBucketRegion != nil {
			r.Configuration.DestinationGcs.GcsBucketRegion = types.StringValue(string(*resp.Configuration.DestinationGcs.GcsBucketRegion))
		} else {
			r.Configuration.DestinationGcs.GcsBucketRegion = types.StringNull()
		}
	}
	if resp.Configuration.DestinationGoogleSheets != nil {
		r.Configuration.DestinationGoogleSheets = &DestinationGoogleSheets{}
		r.Configuration.DestinationGoogleSheets.Credentials.ClientID = types.StringValue(resp.Configuration.DestinationGoogleSheets.Credentials.ClientID)
		r.Configuration.DestinationGoogleSheets.Credentials.ClientSecret = types.StringValue(resp.Configuration.DestinationGoogleSheets.Credentials.ClientSecret)
		r.Configuration.DestinationGoogleSheets.Credentials.RefreshToken = types.StringValue(resp.Configuration.DestinationGoogleSheets.Credentials.RefreshToken)
		r.Configuration.DestinationGoogleSheets.DestinationType = types.StringValue(string(resp.Configuration.DestinationGoogleSheets.DestinationType))
		r.Configuration.DestinationGoogleSheets.SpreadsheetID = types.StringValue(resp.Configuration.DestinationGoogleSheets.SpreadsheetID)
	}
	if resp.Configuration.DestinationKeen != nil {
		r.Configuration.DestinationKeen = &DestinationKeen{}
		r.Configuration.DestinationKeen.APIKey = types.StringValue(resp.Configuration.DestinationKeen.APIKey)
		r.Configuration.DestinationKeen.DestinationType = types.StringValue(string(resp.Configuration.DestinationKeen.DestinationType))
		if resp.Configuration.DestinationKeen.InferTimestamp != nil {
			r.Configuration.DestinationKeen.InferTimestamp = types.BoolValue(*resp.Configuration.DestinationKeen.InferTimestamp)
		} else {
			r.Configuration.DestinationKeen.InferTimestamp = types.BoolNull()
		}
		r.Configuration.DestinationKeen.ProjectID = types.StringValue(resp.Configuration.DestinationKeen.ProjectID)
	}
	if resp.Configuration.DestinationKinesis != nil {
		r.Configuration.DestinationKinesis = &DestinationKinesis{}
		r.Configuration.DestinationKinesis.AccessKey = types.StringValue(resp.Configuration.DestinationKinesis.AccessKey)
		r.Configuration.DestinationKinesis.BufferSize = types.Int64Value(resp.Configuration.DestinationKinesis.BufferSize)
		r.Configuration.DestinationKinesis.DestinationType = types.StringValue(string(resp.Configuration.DestinationKinesis.DestinationType))
		r.Configuration.DestinationKinesis.Endpoint = types.StringValue(resp.Configuration.DestinationKinesis.Endpoint)
		r.Configuration.DestinationKinesis.PrivateKey = types.StringValue(resp.Configuration.DestinationKinesis.PrivateKey)
		r.Configuration.DestinationKinesis.Region = types.StringValue(resp.Configuration.DestinationKinesis.Region)
		r.Configuration.DestinationKinesis.ShardCount = types.Int64Value(resp.Configuration.DestinationKinesis.ShardCount)
	}
	if resp.Configuration.DestinationMariadbColumnstore != nil {
		r.Configuration.DestinationMariadbColumnstore = &DestinationMariadbColumnstore{}
		r.Configuration.DestinationMariadbColumnstore.Database = types.StringValue(resp.Configuration.DestinationMariadbColumnstore.Database)
		r.Configuration.DestinationMariadbColumnstore.DestinationType = types.StringValue(string(resp.Configuration.DestinationMariadbColumnstore.DestinationType))
		r.Configuration.DestinationMariadbColumnstore.Host = types.StringValue(resp.Configuration.DestinationMariadbColumnstore.Host)
		if resp.Configuration.DestinationMariadbColumnstore.JdbcURLParams != nil {
			r.Configuration.DestinationMariadbColumnstore.JdbcURLParams = types.StringValue(*resp.Configuration.DestinationMariadbColumnstore.JdbcURLParams)
		} else {
			r.Configuration.DestinationMariadbColumnstore.JdbcURLParams = types.StringNull()
		}
		if resp.Configuration.DestinationMariadbColumnstore.Password != nil {
			r.Configuration.DestinationMariadbColumnstore.Password = types.StringValue(*resp.Configuration.DestinationMariadbColumnstore.Password)
		} else {
			r.Configuration.DestinationMariadbColumnstore.Password = types.StringNull()
		}
		r.Configuration.DestinationMariadbColumnstore.Port = types.Int64Value(resp.Configuration.DestinationMariadbColumnstore.Port)
		if resp.Configuration.DestinationMariadbColumnstore.TunnelMethod == nil {
			r.Configuration.DestinationMariadbColumnstore.TunnelMethod = nil
		} else {
			r.Configuration.DestinationMariadbColumnstore.TunnelMethod = &DestinationMariadbColumnstoreSSHTunnelMethod{}
			if resp.Configuration.DestinationMariadbColumnstore.TunnelMethod.DestinationMariadbColumnstoreSSHTunnelMethodNoTunnel != nil {
				r.Configuration.DestinationMariadbColumnstore.TunnelMethod.DestinationMariadbColumnstoreSSHTunnelMethodNoTunnel = &DestinationClickhouseSSHTunnelMethodNoTunnel{}
				r.Configuration.DestinationMariadbColumnstore.TunnelMethod.DestinationMariadbColumnstoreSSHTunnelMethodNoTunnel.TunnelMethod = types.StringValue(string(resp.Configuration.DestinationMariadbColumnstore.TunnelMethod.DestinationMariadbColumnstoreSSHTunnelMethodNoTunnel.TunnelMethod))
			}
			if resp.Configuration.DestinationMariadbColumnstore.TunnelMethod.DestinationMariadbColumnstoreSSHTunnelMethodSSHKeyAuthentication != nil {
				r.Configuration.DestinationMariadbColumnstore.TunnelMethod.DestinationMariadbColumnstoreSSHTunnelMethodSSHKeyAuthentication = &DestinationClickhouseSSHTunnelMethodSSHKeyAuthentication{}
				r.Configuration.DestinationMariadbColumnstore.TunnelMethod.DestinationMariadbColumnstoreSSHTunnelMethodSSHKeyAuthentication.SSHKey = types.StringValue(resp.Configuration.DestinationMariadbColumnstore.TunnelMethod.DestinationMariadbColumnstoreSSHTunnelMethodSSHKeyAuthentication.SSHKey)
				r.Configuration.DestinationMariadbColumnstore.TunnelMethod.DestinationMariadbColumnstoreSSHTunnelMethodSSHKeyAuthentication.TunnelHost = types.StringValue(resp.Configuration.DestinationMariadbColumnstore.TunnelMethod.DestinationMariadbColumnstoreSSHTunnelMethodSSHKeyAuthentication.TunnelHost)
				r.Configuration.DestinationMariadbColumnstore.TunnelMethod.DestinationMariadbColumnstoreSSHTunnelMethodSSHKeyAuthentication.TunnelMethod = types.StringValue(string(resp.Configuration.DestinationMariadbColumnstore.TunnelMethod.DestinationMariadbColumnstoreSSHTunnelMethodSSHKeyAuthentication.TunnelMethod))
				r.Configuration.DestinationMariadbColumnstore.TunnelMethod.DestinationMariadbColumnstoreSSHTunnelMethodSSHKeyAuthentication.TunnelPort = types.Int64Value(resp.Configuration.DestinationMariadbColumnstore.TunnelMethod.DestinationMariadbColumnstoreSSHTunnelMethodSSHKeyAuthentication.TunnelPort)
				r.Configuration.DestinationMariadbColumnstore.TunnelMethod.DestinationMariadbColumnstoreSSHTunnelMethodSSHKeyAuthentication.TunnelUser = types.StringValue(resp.Configuration.DestinationMariadbColumnstore.TunnelMethod.DestinationMariadbColumnstoreSSHTunnelMethodSSHKeyAuthentication.TunnelUser)
			}
			if resp.Configuration.DestinationMariadbColumnstore.TunnelMethod.DestinationMariadbColumnstoreSSHTunnelMethodPasswordAuthentication != nil {
				r.Configuration.DestinationMariadbColumnstore.TunnelMethod.DestinationMariadbColumnstoreSSHTunnelMethodPasswordAuthentication = &DestinationClickhouseSSHTunnelMethodPasswordAuthentication{}
				r.Configuration.DestinationMariadbColumnstore.TunnelMethod.DestinationMariadbColumnstoreSSHTunnelMethodPasswordAuthentication.TunnelHost = types.StringValue(resp.Configuration.DestinationMariadbColumnstore.TunnelMethod.DestinationMariadbColumnstoreSSHTunnelMethodPasswordAuthentication.TunnelHost)
				r.Configuration.DestinationMariadbColumnstore.TunnelMethod.DestinationMariadbColumnstoreSSHTunnelMethodPasswordAuthentication.TunnelMethod = types.StringValue(string(resp.Configuration.DestinationMariadbColumnstore.TunnelMethod.DestinationMariadbColumnstoreSSHTunnelMethodPasswordAuthentication.TunnelMethod))
				r.Configuration.DestinationMariadbColumnstore.TunnelMethod.DestinationMariadbColumnstoreSSHTunnelMethodPasswordAuthentication.TunnelPort = types.Int64Value(resp.Configuration.DestinationMariadbColumnstore.TunnelMethod.DestinationMariadbColumnstoreSSHTunnelMethodPasswordAuthentication.TunnelPort)
				r.Configuration.DestinationMariadbColumnstore.TunnelMethod.DestinationMariadbColumnstoreSSHTunnelMethodPasswordAuthentication.TunnelUser = types.StringValue(resp.Configuration.DestinationMariadbColumnstore.TunnelMethod.DestinationMariadbColumnstoreSSHTunnelMethodPasswordAuthentication.TunnelUser)
				r.Configuration.DestinationMariadbColumnstore.TunnelMethod.DestinationMariadbColumnstoreSSHTunnelMethodPasswordAuthentication.TunnelUserPassword = types.StringValue(resp.Configuration.DestinationMariadbColumnstore.TunnelMethod.DestinationMariadbColumnstoreSSHTunnelMethodPasswordAuthentication.TunnelUserPassword)
			}
		}
		r.Configuration.DestinationMariadbColumnstore.Username = types.StringValue(resp.Configuration.DestinationMariadbColumnstore.Username)
	}
	if resp.Configuration.DestinationMeilisearch != nil {
		r.Configuration.DestinationMeilisearch = &DestinationMeilisearch{}
		if resp.Configuration.DestinationMeilisearch.APIKey != nil {
			r.Configuration.DestinationMeilisearch.APIKey = types.StringValue(*resp.Configuration.DestinationMeilisearch.APIKey)
		} else {
			r.Configuration.DestinationMeilisearch.APIKey = types.StringNull()
		}
		r.Configuration.DestinationMeilisearch.DestinationType = types.StringValue(string(resp.Configuration.DestinationMeilisearch.DestinationType))
		r.Configuration.DestinationMeilisearch.Host = types.StringValue(resp.Configuration.DestinationMeilisearch.Host)
	}
	if resp.Configuration.DestinationMongodb != nil {
		r.Configuration.DestinationMongodb = &DestinationMongodb{}
		if resp.Configuration.DestinationMongodb.AuthType.DestinationMongodbAuthorizationTypeNone != nil {
			r.Configuration.DestinationMongodb.AuthType.DestinationMongodbAuthorizationTypeNone = &DestinationMongodbAuthorizationTypeNone{}
			r.Configuration.DestinationMongodb.AuthType.DestinationMongodbAuthorizationTypeNone.Authorization = types.StringValue(string(resp.Configuration.DestinationMongodb.AuthType.DestinationMongodbAuthorizationTypeNone.Authorization))
		}
		if resp.Configuration.DestinationMongodb.AuthType.DestinationMongodbAuthorizationTypeLoginPassword != nil {
			r.Configuration.DestinationMongodb.AuthType.DestinationMongodbAuthorizationTypeLoginPassword = &DestinationMongodbAuthorizationTypeLoginPassword{}
			r.Configuration.DestinationMongodb.AuthType.DestinationMongodbAuthorizationTypeLoginPassword.Authorization = types.StringValue(string(resp.Configuration.DestinationMongodb.AuthType.DestinationMongodbAuthorizationTypeLoginPassword.Authorization))
			r.Configuration.DestinationMongodb.AuthType.DestinationMongodbAuthorizationTypeLoginPassword.Password = types.StringValue(resp.Configuration.DestinationMongodb.AuthType.DestinationMongodbAuthorizationTypeLoginPassword.Password)
			r.Configuration.DestinationMongodb.AuthType.DestinationMongodbAuthorizationTypeLoginPassword.Username = types.StringValue(resp.Configuration.DestinationMongodb.AuthType.DestinationMongodbAuthorizationTypeLoginPassword.Username)
		}
		r.Configuration.DestinationMongodb.Database = types.StringValue(resp.Configuration.DestinationMongodb.Database)
		r.Configuration.DestinationMongodb.DestinationType = types.StringValue(string(resp.Configuration.DestinationMongodb.DestinationType))
		if resp.Configuration.DestinationMongodb.InstanceType == nil {
			r.Configuration.DestinationMongodb.InstanceType = nil
		} else {
			r.Configuration.DestinationMongodb.InstanceType = &DestinationMongodbMongoDbInstanceType{}
			if resp.Configuration.DestinationMongodb.InstanceType.DestinationMongodbMongoDbInstanceTypeStandaloneMongoDbInstance != nil {
				r.Configuration.DestinationMongodb.InstanceType.DestinationMongodbMongoDbInstanceTypeStandaloneMongoDbInstance = &DestinationMongodbMongoDbInstanceTypeStandaloneMongoDbInstance{}
				r.Configuration.DestinationMongodb.InstanceType.DestinationMongodbMongoDbInstanceTypeStandaloneMongoDbInstance.Host = types.StringValue(resp.Configuration.DestinationMongodb.InstanceType.DestinationMongodbMongoDbInstanceTypeStandaloneMongoDbInstance.Host)
				r.Configuration.DestinationMongodb.InstanceType.DestinationMongodbMongoDbInstanceTypeStandaloneMongoDbInstance.Instance = types.StringValue(string(resp.Configuration.DestinationMongodb.InstanceType.DestinationMongodbMongoDbInstanceTypeStandaloneMongoDbInstance.Instance))
				r.Configuration.DestinationMongodb.InstanceType.DestinationMongodbMongoDbInstanceTypeStandaloneMongoDbInstance.Port = types.Int64Value(resp.Configuration.DestinationMongodb.InstanceType.DestinationMongodbMongoDbInstanceTypeStandaloneMongoDbInstance.Port)
			}
			if resp.Configuration.DestinationMongodb.InstanceType.DestinationMongodbMongoDbInstanceTypeReplicaSet != nil {
				r.Configuration.DestinationMongodb.InstanceType.DestinationMongodbMongoDbInstanceTypeReplicaSet = &DestinationMongodbMongoDbInstanceTypeReplicaSet{}
				r.Configuration.DestinationMongodb.InstanceType.DestinationMongodbMongoDbInstanceTypeReplicaSet.Instance = types.StringValue(string(resp.Configuration.DestinationMongodb.InstanceType.DestinationMongodbMongoDbInstanceTypeReplicaSet.Instance))
				if resp.Configuration.DestinationMongodb.InstanceType.DestinationMongodbMongoDbInstanceTypeReplicaSet.ReplicaSet != nil {
					r.Configuration.DestinationMongodb.InstanceType.DestinationMongodbMongoDbInstanceTypeReplicaSet.ReplicaSet = types.StringValue(*resp.Configuration.DestinationMongodb.InstanceType.DestinationMongodbMongoDbInstanceTypeReplicaSet.ReplicaSet)
				} else {
					r.Configuration.DestinationMongodb.InstanceType.DestinationMongodbMongoDbInstanceTypeReplicaSet.ReplicaSet = types.StringNull()
				}
				r.Configuration.DestinationMongodb.InstanceType.DestinationMongodbMongoDbInstanceTypeReplicaSet.ServerAddresses = types.StringValue(resp.Configuration.DestinationMongodb.InstanceType.DestinationMongodbMongoDbInstanceTypeReplicaSet.ServerAddresses)
			}
			if resp.Configuration.DestinationMongodb.InstanceType.DestinationMongodbMongoDBInstanceTypeMongoDBAtlas != nil {
				r.Configuration.DestinationMongodb.InstanceType.DestinationMongodbMongoDBInstanceTypeMongoDBAtlas = &DestinationMongodbMongoDBInstanceTypeMongoDBAtlas{}
				r.Configuration.DestinationMongodb.InstanceType.DestinationMongodbMongoDBInstanceTypeMongoDBAtlas.ClusterURL = types.StringValue(resp.Configuration.DestinationMongodb.InstanceType.DestinationMongodbMongoDBInstanceTypeMongoDBAtlas.ClusterURL)
				r.Configuration.DestinationMongodb.InstanceType.DestinationMongodbMongoDBInstanceTypeMongoDBAtlas.Instance = types.StringValue(string(resp.Configuration.DestinationMongodb.InstanceType.DestinationMongodbMongoDBInstanceTypeMongoDBAtlas.Instance))
			}
		}
		if resp.Configuration.DestinationMongodb.TunnelMethod == nil {
			r.Configuration.DestinationMongodb.TunnelMethod = nil
		} else {
			r.Configuration.DestinationMongodb.TunnelMethod = &DestinationMongodbSSHTunnelMethod{}
			if resp.Configuration.DestinationMongodb.TunnelMethod.DestinationMongodbSSHTunnelMethodNoTunnel != nil {
				r.Configuration.DestinationMongodb.TunnelMethod.DestinationMongodbSSHTunnelMethodNoTunnel = &DestinationClickhouseSSHTunnelMethodNoTunnel{}
				r.Configuration.DestinationMongodb.TunnelMethod.DestinationMongodbSSHTunnelMethodNoTunnel.TunnelMethod = types.StringValue(string(resp.Configuration.DestinationMongodb.TunnelMethod.DestinationMongodbSSHTunnelMethodNoTunnel.TunnelMethod))
			}
			if resp.Configuration.DestinationMongodb.TunnelMethod.DestinationMongodbSSHTunnelMethodSSHKeyAuthentication != nil {
				r.Configuration.DestinationMongodb.TunnelMethod.DestinationMongodbSSHTunnelMethodSSHKeyAuthentication = &DestinationClickhouseSSHTunnelMethodSSHKeyAuthentication{}
				r.Configuration.DestinationMongodb.TunnelMethod.DestinationMongodbSSHTunnelMethodSSHKeyAuthentication.SSHKey = types.StringValue(resp.Configuration.DestinationMongodb.TunnelMethod.DestinationMongodbSSHTunnelMethodSSHKeyAuthentication.SSHKey)
				r.Configuration.DestinationMongodb.TunnelMethod.DestinationMongodbSSHTunnelMethodSSHKeyAuthentication.TunnelHost = types.StringValue(resp.Configuration.DestinationMongodb.TunnelMethod.DestinationMongodbSSHTunnelMethodSSHKeyAuthentication.TunnelHost)
				r.Configuration.DestinationMongodb.TunnelMethod.DestinationMongodbSSHTunnelMethodSSHKeyAuthentication.TunnelMethod = types.StringValue(string(resp.Configuration.DestinationMongodb.TunnelMethod.DestinationMongodbSSHTunnelMethodSSHKeyAuthentication.TunnelMethod))
				r.Configuration.DestinationMongodb.TunnelMethod.DestinationMongodbSSHTunnelMethodSSHKeyAuthentication.TunnelPort = types.Int64Value(resp.Configuration.DestinationMongodb.TunnelMethod.DestinationMongodbSSHTunnelMethodSSHKeyAuthentication.TunnelPort)
				r.Configuration.DestinationMongodb.TunnelMethod.DestinationMongodbSSHTunnelMethodSSHKeyAuthentication.TunnelUser = types.StringValue(resp.Configuration.DestinationMongodb.TunnelMethod.DestinationMongodbSSHTunnelMethodSSHKeyAuthentication.TunnelUser)
			}
			if resp.Configuration.DestinationMongodb.TunnelMethod.DestinationMongodbSSHTunnelMethodPasswordAuthentication != nil {
				r.Configuration.DestinationMongodb.TunnelMethod.DestinationMongodbSSHTunnelMethodPasswordAuthentication = &DestinationClickhouseSSHTunnelMethodPasswordAuthentication{}
				r.Configuration.DestinationMongodb.TunnelMethod.DestinationMongodbSSHTunnelMethodPasswordAuthentication.TunnelHost = types.StringValue(resp.Configuration.DestinationMongodb.TunnelMethod.DestinationMongodbSSHTunnelMethodPasswordAuthentication.TunnelHost)
				r.Configuration.DestinationMongodb.TunnelMethod.DestinationMongodbSSHTunnelMethodPasswordAuthentication.TunnelMethod = types.StringValue(string(resp.Configuration.DestinationMongodb.TunnelMethod.DestinationMongodbSSHTunnelMethodPasswordAuthentication.TunnelMethod))
				r.Configuration.DestinationMongodb.TunnelMethod.DestinationMongodbSSHTunnelMethodPasswordAuthentication.TunnelPort = types.Int64Value(resp.Configuration.DestinationMongodb.TunnelMethod.DestinationMongodbSSHTunnelMethodPasswordAuthentication.TunnelPort)
				r.Configuration.DestinationMongodb.TunnelMethod.DestinationMongodbSSHTunnelMethodPasswordAuthentication.TunnelUser = types.StringValue(resp.Configuration.DestinationMongodb.TunnelMethod.DestinationMongodbSSHTunnelMethodPasswordAuthentication.TunnelUser)
				r.Configuration.DestinationMongodb.TunnelMethod.DestinationMongodbSSHTunnelMethodPasswordAuthentication.TunnelUserPassword = types.StringValue(resp.Configuration.DestinationMongodb.TunnelMethod.DestinationMongodbSSHTunnelMethodPasswordAuthentication.TunnelUserPassword)
			}
		}
	}
	if resp.Configuration.DestinationMssql != nil {
		r.Configuration.DestinationMssql = &DestinationMssql{}
		r.Configuration.DestinationMssql.Database = types.StringValue(resp.Configuration.DestinationMssql.Database)
		r.Configuration.DestinationMssql.DestinationType = types.StringValue(string(resp.Configuration.DestinationMssql.DestinationType))
		r.Configuration.DestinationMssql.Host = types.StringValue(resp.Configuration.DestinationMssql.Host)
		if resp.Configuration.DestinationMssql.JdbcURLParams != nil {
			r.Configuration.DestinationMssql.JdbcURLParams = types.StringValue(*resp.Configuration.DestinationMssql.JdbcURLParams)
		} else {
			r.Configuration.DestinationMssql.JdbcURLParams = types.StringNull()
		}
		if resp.Configuration.DestinationMssql.Password != nil {
			r.Configuration.DestinationMssql.Password = types.StringValue(*resp.Configuration.DestinationMssql.Password)
		} else {
			r.Configuration.DestinationMssql.Password = types.StringNull()
		}
		r.Configuration.DestinationMssql.Port = types.Int64Value(resp.Configuration.DestinationMssql.Port)
		r.Configuration.DestinationMssql.Schema = types.StringValue(resp.Configuration.DestinationMssql.Schema)
		if resp.Configuration.DestinationMssql.SslMethod == nil {
			r.Configuration.DestinationMssql.SslMethod = nil
		} else {
			r.Configuration.DestinationMssql.SslMethod = &DestinationMssqlSSLMethod{}
			if resp.Configuration.DestinationMssql.SslMethod.DestinationMssqlSSLMethodEncryptedTrustServerCertificate != nil {
				r.Configuration.DestinationMssql.SslMethod.DestinationMssqlSSLMethodEncryptedTrustServerCertificate = &DestinationMssqlSSLMethodEncryptedTrustServerCertificate{}
				r.Configuration.DestinationMssql.SslMethod.DestinationMssqlSSLMethodEncryptedTrustServerCertificate.SslMethod = types.StringValue(string(resp.Configuration.DestinationMssql.SslMethod.DestinationMssqlSSLMethodEncryptedTrustServerCertificate.SslMethod))
			}
			if resp.Configuration.DestinationMssql.SslMethod.DestinationMssqlSSLMethodEncryptedVerifyCertificate != nil {
				r.Configuration.DestinationMssql.SslMethod.DestinationMssqlSSLMethodEncryptedVerifyCertificate = &DestinationMssqlSSLMethodEncryptedVerifyCertificate{}
				if resp.Configuration.DestinationMssql.SslMethod.DestinationMssqlSSLMethodEncryptedVerifyCertificate.HostNameInCertificate != nil {
					r.Configuration.DestinationMssql.SslMethod.DestinationMssqlSSLMethodEncryptedVerifyCertificate.HostNameInCertificate = types.StringValue(*resp.Configuration.DestinationMssql.SslMethod.DestinationMssqlSSLMethodEncryptedVerifyCertificate.HostNameInCertificate)
				} else {
					r.Configuration.DestinationMssql.SslMethod.DestinationMssqlSSLMethodEncryptedVerifyCertificate.HostNameInCertificate = types.StringNull()
				}
				r.Configuration.DestinationMssql.SslMethod.DestinationMssqlSSLMethodEncryptedVerifyCertificate.SslMethod = types.StringValue(string(resp.Configuration.DestinationMssql.SslMethod.DestinationMssqlSSLMethodEncryptedVerifyCertificate.SslMethod))
			}
		}
		if resp.Configuration.DestinationMssql.TunnelMethod == nil {
			r.Configuration.DestinationMssql.TunnelMethod = nil
		} else {
			r.Configuration.DestinationMssql.TunnelMethod = &DestinationMssqlSSHTunnelMethod{}
			if resp.Configuration.DestinationMssql.TunnelMethod.DestinationMssqlSSHTunnelMethodNoTunnel != nil {
				r.Configuration.DestinationMssql.TunnelMethod.DestinationMssqlSSHTunnelMethodNoTunnel = &DestinationClickhouseSSHTunnelMethodNoTunnel{}
				r.Configuration.DestinationMssql.TunnelMethod.DestinationMssqlSSHTunnelMethodNoTunnel.TunnelMethod = types.StringValue(string(resp.Configuration.DestinationMssql.TunnelMethod.DestinationMssqlSSHTunnelMethodNoTunnel.TunnelMethod))
			}
			if resp.Configuration.DestinationMssql.TunnelMethod.DestinationMssqlSSHTunnelMethodSSHKeyAuthentication != nil {
				r.Configuration.DestinationMssql.TunnelMethod.DestinationMssqlSSHTunnelMethodSSHKeyAuthentication = &DestinationClickhouseSSHTunnelMethodSSHKeyAuthentication{}
				r.Configuration.DestinationMssql.TunnelMethod.DestinationMssqlSSHTunnelMethodSSHKeyAuthentication.SSHKey = types.StringValue(resp.Configuration.DestinationMssql.TunnelMethod.DestinationMssqlSSHTunnelMethodSSHKeyAuthentication.SSHKey)
				r.Configuration.DestinationMssql.TunnelMethod.DestinationMssqlSSHTunnelMethodSSHKeyAuthentication.TunnelHost = types.StringValue(resp.Configuration.DestinationMssql.TunnelMethod.DestinationMssqlSSHTunnelMethodSSHKeyAuthentication.TunnelHost)
				r.Configuration.DestinationMssql.TunnelMethod.DestinationMssqlSSHTunnelMethodSSHKeyAuthentication.TunnelMethod = types.StringValue(string(resp.Configuration.DestinationMssql.TunnelMethod.DestinationMssqlSSHTunnelMethodSSHKeyAuthentication.TunnelMethod))
				r.Configuration.DestinationMssql.TunnelMethod.DestinationMssqlSSHTunnelMethodSSHKeyAuthentication.TunnelPort = types.Int64Value(resp.Configuration.DestinationMssql.TunnelMethod.DestinationMssqlSSHTunnelMethodSSHKeyAuthentication.TunnelPort)
				r.Configuration.DestinationMssql.TunnelMethod.DestinationMssqlSSHTunnelMethodSSHKeyAuthentication.TunnelUser = types.StringValue(resp.Configuration.DestinationMssql.TunnelMethod.DestinationMssqlSSHTunnelMethodSSHKeyAuthentication.TunnelUser)
			}
			if resp.Configuration.DestinationMssql.TunnelMethod.DestinationMssqlSSHTunnelMethodPasswordAuthentication != nil {
				r.Configuration.DestinationMssql.TunnelMethod.DestinationMssqlSSHTunnelMethodPasswordAuthentication = &DestinationClickhouseSSHTunnelMethodPasswordAuthentication{}
				r.Configuration.DestinationMssql.TunnelMethod.DestinationMssqlSSHTunnelMethodPasswordAuthentication.TunnelHost = types.StringValue(resp.Configuration.DestinationMssql.TunnelMethod.DestinationMssqlSSHTunnelMethodPasswordAuthentication.TunnelHost)
				r.Configuration.DestinationMssql.TunnelMethod.DestinationMssqlSSHTunnelMethodPasswordAuthentication.TunnelMethod = types.StringValue(string(resp.Configuration.DestinationMssql.TunnelMethod.DestinationMssqlSSHTunnelMethodPasswordAuthentication.TunnelMethod))
				r.Configuration.DestinationMssql.TunnelMethod.DestinationMssqlSSHTunnelMethodPasswordAuthentication.TunnelPort = types.Int64Value(resp.Configuration.DestinationMssql.TunnelMethod.DestinationMssqlSSHTunnelMethodPasswordAuthentication.TunnelPort)
				r.Configuration.DestinationMssql.TunnelMethod.DestinationMssqlSSHTunnelMethodPasswordAuthentication.TunnelUser = types.StringValue(resp.Configuration.DestinationMssql.TunnelMethod.DestinationMssqlSSHTunnelMethodPasswordAuthentication.TunnelUser)
				r.Configuration.DestinationMssql.TunnelMethod.DestinationMssqlSSHTunnelMethodPasswordAuthentication.TunnelUserPassword = types.StringValue(resp.Configuration.DestinationMssql.TunnelMethod.DestinationMssqlSSHTunnelMethodPasswordAuthentication.TunnelUserPassword)
			}
		}
		r.Configuration.DestinationMssql.Username = types.StringValue(resp.Configuration.DestinationMssql.Username)
	}
	if resp.Configuration.DestinationMysql != nil {
		r.Configuration.DestinationMysql = &DestinationMysql{}
		r.Configuration.DestinationMysql.Database = types.StringValue(resp.Configuration.DestinationMysql.Database)
		r.Configuration.DestinationMysql.DestinationType = types.StringValue(string(resp.Configuration.DestinationMysql.DestinationType))
		r.Configuration.DestinationMysql.Host = types.StringValue(resp.Configuration.DestinationMysql.Host)
		if resp.Configuration.DestinationMysql.JdbcURLParams != nil {
			r.Configuration.DestinationMysql.JdbcURLParams = types.StringValue(*resp.Configuration.DestinationMysql.JdbcURLParams)
		} else {
			r.Configuration.DestinationMysql.JdbcURLParams = types.StringNull()
		}
		if resp.Configuration.DestinationMysql.Password != nil {
			r.Configuration.DestinationMysql.Password = types.StringValue(*resp.Configuration.DestinationMysql.Password)
		} else {
			r.Configuration.DestinationMysql.Password = types.StringNull()
		}
		r.Configuration.DestinationMysql.Port = types.Int64Value(resp.Configuration.DestinationMysql.Port)
		if resp.Configuration.DestinationMysql.TunnelMethod == nil {
			r.Configuration.DestinationMysql.TunnelMethod = nil
		} else {
			r.Configuration.DestinationMysql.TunnelMethod = &DestinationMysqlSSHTunnelMethod{}
			if resp.Configuration.DestinationMysql.TunnelMethod.DestinationMysqlSSHTunnelMethodNoTunnel != nil {
				r.Configuration.DestinationMysql.TunnelMethod.DestinationMysqlSSHTunnelMethodNoTunnel = &DestinationClickhouseSSHTunnelMethodNoTunnel{}
				r.Configuration.DestinationMysql.TunnelMethod.DestinationMysqlSSHTunnelMethodNoTunnel.TunnelMethod = types.StringValue(string(resp.Configuration.DestinationMysql.TunnelMethod.DestinationMysqlSSHTunnelMethodNoTunnel.TunnelMethod))
			}
			if resp.Configuration.DestinationMysql.TunnelMethod.DestinationMysqlSSHTunnelMethodSSHKeyAuthentication != nil {
				r.Configuration.DestinationMysql.TunnelMethod.DestinationMysqlSSHTunnelMethodSSHKeyAuthentication = &DestinationClickhouseSSHTunnelMethodSSHKeyAuthentication{}
				r.Configuration.DestinationMysql.TunnelMethod.DestinationMysqlSSHTunnelMethodSSHKeyAuthentication.SSHKey = types.StringValue(resp.Configuration.DestinationMysql.TunnelMethod.DestinationMysqlSSHTunnelMethodSSHKeyAuthentication.SSHKey)
				r.Configuration.DestinationMysql.TunnelMethod.DestinationMysqlSSHTunnelMethodSSHKeyAuthentication.TunnelHost = types.StringValue(resp.Configuration.DestinationMysql.TunnelMethod.DestinationMysqlSSHTunnelMethodSSHKeyAuthentication.TunnelHost)
				r.Configuration.DestinationMysql.TunnelMethod.DestinationMysqlSSHTunnelMethodSSHKeyAuthentication.TunnelMethod = types.StringValue(string(resp.Configuration.DestinationMysql.TunnelMethod.DestinationMysqlSSHTunnelMethodSSHKeyAuthentication.TunnelMethod))
				r.Configuration.DestinationMysql.TunnelMethod.DestinationMysqlSSHTunnelMethodSSHKeyAuthentication.TunnelPort = types.Int64Value(resp.Configuration.DestinationMysql.TunnelMethod.DestinationMysqlSSHTunnelMethodSSHKeyAuthentication.TunnelPort)
				r.Configuration.DestinationMysql.TunnelMethod.DestinationMysqlSSHTunnelMethodSSHKeyAuthentication.TunnelUser = types.StringValue(resp.Configuration.DestinationMysql.TunnelMethod.DestinationMysqlSSHTunnelMethodSSHKeyAuthentication.TunnelUser)
			}
			if resp.Configuration.DestinationMysql.TunnelMethod.DestinationMysqlSSHTunnelMethodPasswordAuthentication != nil {
				r.Configuration.DestinationMysql.TunnelMethod.DestinationMysqlSSHTunnelMethodPasswordAuthentication = &DestinationClickhouseSSHTunnelMethodPasswordAuthentication{}
				r.Configuration.DestinationMysql.TunnelMethod.DestinationMysqlSSHTunnelMethodPasswordAuthentication.TunnelHost = types.StringValue(resp.Configuration.DestinationMysql.TunnelMethod.DestinationMysqlSSHTunnelMethodPasswordAuthentication.TunnelHost)
				r.Configuration.DestinationMysql.TunnelMethod.DestinationMysqlSSHTunnelMethodPasswordAuthentication.TunnelMethod = types.StringValue(string(resp.Configuration.DestinationMysql.TunnelMethod.DestinationMysqlSSHTunnelMethodPasswordAuthentication.TunnelMethod))
				r.Configuration.DestinationMysql.TunnelMethod.DestinationMysqlSSHTunnelMethodPasswordAuthentication.TunnelPort = types.Int64Value(resp.Configuration.DestinationMysql.TunnelMethod.DestinationMysqlSSHTunnelMethodPasswordAuthentication.TunnelPort)
				r.Configuration.DestinationMysql.TunnelMethod.DestinationMysqlSSHTunnelMethodPasswordAuthentication.TunnelUser = types.StringValue(resp.Configuration.DestinationMysql.TunnelMethod.DestinationMysqlSSHTunnelMethodPasswordAuthentication.TunnelUser)
				r.Configuration.DestinationMysql.TunnelMethod.DestinationMysqlSSHTunnelMethodPasswordAuthentication.TunnelUserPassword = types.StringValue(resp.Configuration.DestinationMysql.TunnelMethod.DestinationMysqlSSHTunnelMethodPasswordAuthentication.TunnelUserPassword)
			}
		}
		r.Configuration.DestinationMysql.Username = types.StringValue(resp.Configuration.DestinationMysql.Username)
	}
	if resp.Configuration.DestinationOracle != nil {
		r.Configuration.DestinationOracle = &DestinationOracle{}
		r.Configuration.DestinationOracle.DestinationType = types.StringValue(string(resp.Configuration.DestinationOracle.DestinationType))
		r.Configuration.DestinationOracle.Host = types.StringValue(resp.Configuration.DestinationOracle.Host)
		if resp.Configuration.DestinationOracle.JdbcURLParams != nil {
			r.Configuration.DestinationOracle.JdbcURLParams = types.StringValue(*resp.Configuration.DestinationOracle.JdbcURLParams)
		} else {
			r.Configuration.DestinationOracle.JdbcURLParams = types.StringNull()
		}
		if resp.Configuration.DestinationOracle.Password != nil {
			r.Configuration.DestinationOracle.Password = types.StringValue(*resp.Configuration.DestinationOracle.Password)
		} else {
			r.Configuration.DestinationOracle.Password = types.StringNull()
		}
		r.Configuration.DestinationOracle.Port = types.Int64Value(resp.Configuration.DestinationOracle.Port)
		if resp.Configuration.DestinationOracle.Schema != nil {
			r.Configuration.DestinationOracle.Schema = types.StringValue(*resp.Configuration.DestinationOracle.Schema)
		} else {
			r.Configuration.DestinationOracle.Schema = types.StringNull()
		}
		r.Configuration.DestinationOracle.Sid = types.StringValue(resp.Configuration.DestinationOracle.Sid)
		if resp.Configuration.DestinationOracle.TunnelMethod == nil {
			r.Configuration.DestinationOracle.TunnelMethod = nil
		} else {
			r.Configuration.DestinationOracle.TunnelMethod = &DestinationOracleSSHTunnelMethod{}
			if resp.Configuration.DestinationOracle.TunnelMethod.DestinationOracleSSHTunnelMethodNoTunnel != nil {
				r.Configuration.DestinationOracle.TunnelMethod.DestinationOracleSSHTunnelMethodNoTunnel = &DestinationClickhouseSSHTunnelMethodNoTunnel{}
				r.Configuration.DestinationOracle.TunnelMethod.DestinationOracleSSHTunnelMethodNoTunnel.TunnelMethod = types.StringValue(string(resp.Configuration.DestinationOracle.TunnelMethod.DestinationOracleSSHTunnelMethodNoTunnel.TunnelMethod))
			}
			if resp.Configuration.DestinationOracle.TunnelMethod.DestinationOracleSSHTunnelMethodSSHKeyAuthentication != nil {
				r.Configuration.DestinationOracle.TunnelMethod.DestinationOracleSSHTunnelMethodSSHKeyAuthentication = &DestinationClickhouseSSHTunnelMethodSSHKeyAuthentication{}
				r.Configuration.DestinationOracle.TunnelMethod.DestinationOracleSSHTunnelMethodSSHKeyAuthentication.SSHKey = types.StringValue(resp.Configuration.DestinationOracle.TunnelMethod.DestinationOracleSSHTunnelMethodSSHKeyAuthentication.SSHKey)
				r.Configuration.DestinationOracle.TunnelMethod.DestinationOracleSSHTunnelMethodSSHKeyAuthentication.TunnelHost = types.StringValue(resp.Configuration.DestinationOracle.TunnelMethod.DestinationOracleSSHTunnelMethodSSHKeyAuthentication.TunnelHost)
				r.Configuration.DestinationOracle.TunnelMethod.DestinationOracleSSHTunnelMethodSSHKeyAuthentication.TunnelMethod = types.StringValue(string(resp.Configuration.DestinationOracle.TunnelMethod.DestinationOracleSSHTunnelMethodSSHKeyAuthentication.TunnelMethod))
				r.Configuration.DestinationOracle.TunnelMethod.DestinationOracleSSHTunnelMethodSSHKeyAuthentication.TunnelPort = types.Int64Value(resp.Configuration.DestinationOracle.TunnelMethod.DestinationOracleSSHTunnelMethodSSHKeyAuthentication.TunnelPort)
				r.Configuration.DestinationOracle.TunnelMethod.DestinationOracleSSHTunnelMethodSSHKeyAuthentication.TunnelUser = types.StringValue(resp.Configuration.DestinationOracle.TunnelMethod.DestinationOracleSSHTunnelMethodSSHKeyAuthentication.TunnelUser)
			}
			if resp.Configuration.DestinationOracle.TunnelMethod.DestinationOracleSSHTunnelMethodPasswordAuthentication != nil {
				r.Configuration.DestinationOracle.TunnelMethod.DestinationOracleSSHTunnelMethodPasswordAuthentication = &DestinationClickhouseSSHTunnelMethodPasswordAuthentication{}
				r.Configuration.DestinationOracle.TunnelMethod.DestinationOracleSSHTunnelMethodPasswordAuthentication.TunnelHost = types.StringValue(resp.Configuration.DestinationOracle.TunnelMethod.DestinationOracleSSHTunnelMethodPasswordAuthentication.TunnelHost)
				r.Configuration.DestinationOracle.TunnelMethod.DestinationOracleSSHTunnelMethodPasswordAuthentication.TunnelMethod = types.StringValue(string(resp.Configuration.DestinationOracle.TunnelMethod.DestinationOracleSSHTunnelMethodPasswordAuthentication.TunnelMethod))
				r.Configuration.DestinationOracle.TunnelMethod.DestinationOracleSSHTunnelMethodPasswordAuthentication.TunnelPort = types.Int64Value(resp.Configuration.DestinationOracle.TunnelMethod.DestinationOracleSSHTunnelMethodPasswordAuthentication.TunnelPort)
				r.Configuration.DestinationOracle.TunnelMethod.DestinationOracleSSHTunnelMethodPasswordAuthentication.TunnelUser = types.StringValue(resp.Configuration.DestinationOracle.TunnelMethod.DestinationOracleSSHTunnelMethodPasswordAuthentication.TunnelUser)
				r.Configuration.DestinationOracle.TunnelMethod.DestinationOracleSSHTunnelMethodPasswordAuthentication.TunnelUserPassword = types.StringValue(resp.Configuration.DestinationOracle.TunnelMethod.DestinationOracleSSHTunnelMethodPasswordAuthentication.TunnelUserPassword)
			}
		}
		r.Configuration.DestinationOracle.Username = types.StringValue(resp.Configuration.DestinationOracle.Username)
	}
	if resp.Configuration.DestinationPostgres != nil {
		r.Configuration.DestinationPostgres = &DestinationPostgres{}
		r.Configuration.DestinationPostgres.Database = types.StringValue(resp.Configuration.DestinationPostgres.Database)
		r.Configuration.DestinationPostgres.DestinationType = types.StringValue(string(resp.Configuration.DestinationPostgres.DestinationType))
		r.Configuration.DestinationPostgres.Host = types.StringValue(resp.Configuration.DestinationPostgres.Host)
		if resp.Configuration.DestinationPostgres.JdbcURLParams != nil {
			r.Configuration.DestinationPostgres.JdbcURLParams = types.StringValue(*resp.Configuration.DestinationPostgres.JdbcURLParams)
		} else {
			r.Configuration.DestinationPostgres.JdbcURLParams = types.StringNull()
		}
		if resp.Configuration.DestinationPostgres.Password != nil {
			r.Configuration.DestinationPostgres.Password = types.StringValue(*resp.Configuration.DestinationPostgres.Password)
		} else {
			r.Configuration.DestinationPostgres.Password = types.StringNull()
		}
		r.Configuration.DestinationPostgres.Port = types.Int64Value(resp.Configuration.DestinationPostgres.Port)
		r.Configuration.DestinationPostgres.Schema = types.StringValue(resp.Configuration.DestinationPostgres.Schema)
		if resp.Configuration.DestinationPostgres.SslMode == nil {
			r.Configuration.DestinationPostgres.SslMode = nil
		} else {
			r.Configuration.DestinationPostgres.SslMode = &DestinationPostgresSSLModes{}
			if resp.Configuration.DestinationPostgres.SslMode.DestinationPostgresSSLModesDisable != nil {
				r.Configuration.DestinationPostgres.SslMode.DestinationPostgresSSLModesDisable = &DestinationPostgresSSLModesDisable{}
				r.Configuration.DestinationPostgres.SslMode.DestinationPostgresSSLModesDisable.Mode = types.StringValue(string(resp.Configuration.DestinationPostgres.SslMode.DestinationPostgresSSLModesDisable.Mode))
			}
			if resp.Configuration.DestinationPostgres.SslMode.DestinationPostgresSSLModesAllow != nil {
				r.Configuration.DestinationPostgres.SslMode.DestinationPostgresSSLModesAllow = &DestinationPostgresSSLModesAllow{}
				r.Configuration.DestinationPostgres.SslMode.DestinationPostgresSSLModesAllow.Mode = types.StringValue(string(resp.Configuration.DestinationPostgres.SslMode.DestinationPostgresSSLModesAllow.Mode))
			}
			if resp.Configuration.DestinationPostgres.SslMode.DestinationPostgresSSLModesPrefer != nil {
				r.Configuration.DestinationPostgres.SslMode.DestinationPostgresSSLModesPrefer = &DestinationPostgresSSLModesPrefer{}
				r.Configuration.DestinationPostgres.SslMode.DestinationPostgresSSLModesPrefer.Mode = types.StringValue(string(resp.Configuration.DestinationPostgres.SslMode.DestinationPostgresSSLModesPrefer.Mode))
			}
			if resp.Configuration.DestinationPostgres.SslMode.DestinationPostgresSSLModesRequire != nil {
				r.Configuration.DestinationPostgres.SslMode.DestinationPostgresSSLModesRequire = &DestinationPostgresSSLModesRequire{}
				r.Configuration.DestinationPostgres.SslMode.DestinationPostgresSSLModesRequire.Mode = types.StringValue(string(resp.Configuration.DestinationPostgres.SslMode.DestinationPostgresSSLModesRequire.Mode))
			}
			if resp.Configuration.DestinationPostgres.SslMode.DestinationPostgresSSLModesVerifyCa != nil {
				r.Configuration.DestinationPostgres.SslMode.DestinationPostgresSSLModesVerifyCa = &DestinationPostgresSSLModesVerifyCa{}
				r.Configuration.DestinationPostgres.SslMode.DestinationPostgresSSLModesVerifyCa.CaCertificate = types.StringValue(resp.Configuration.DestinationPostgres.SslMode.DestinationPostgresSSLModesVerifyCa.CaCertificate)
				if resp.Configuration.DestinationPostgres.SslMode.DestinationPostgresSSLModesVerifyCa.ClientKeyPassword != nil {
					r.Configuration.DestinationPostgres.SslMode.DestinationPostgresSSLModesVerifyCa.ClientKeyPassword = types.StringValue(*resp.Configuration.DestinationPostgres.SslMode.DestinationPostgresSSLModesVerifyCa.ClientKeyPassword)
				} else {
					r.Configuration.DestinationPostgres.SslMode.DestinationPostgresSSLModesVerifyCa.ClientKeyPassword = types.StringNull()
				}
				r.Configuration.DestinationPostgres.SslMode.DestinationPostgresSSLModesVerifyCa.Mode = types.StringValue(string(resp.Configuration.DestinationPostgres.SslMode.DestinationPostgresSSLModesVerifyCa.Mode))
			}
			if resp.Configuration.DestinationPostgres.SslMode.DestinationPostgresSSLModesVerifyFull != nil {
				r.Configuration.DestinationPostgres.SslMode.DestinationPostgresSSLModesVerifyFull = &DestinationPostgresSSLModesVerifyFull{}
				r.Configuration.DestinationPostgres.SslMode.DestinationPostgresSSLModesVerifyFull.CaCertificate = types.StringValue(resp.Configuration.DestinationPostgres.SslMode.DestinationPostgresSSLModesVerifyFull.CaCertificate)
				r.Configuration.DestinationPostgres.SslMode.DestinationPostgresSSLModesVerifyFull.ClientCertificate = types.StringValue(resp.Configuration.DestinationPostgres.SslMode.DestinationPostgresSSLModesVerifyFull.ClientCertificate)
				r.Configuration.DestinationPostgres.SslMode.DestinationPostgresSSLModesVerifyFull.ClientKey = types.StringValue(resp.Configuration.DestinationPostgres.SslMode.DestinationPostgresSSLModesVerifyFull.ClientKey)
				if resp.Configuration.DestinationPostgres.SslMode.DestinationPostgresSSLModesVerifyFull.ClientKeyPassword != nil {
					r.Configuration.DestinationPostgres.SslMode.DestinationPostgresSSLModesVerifyFull.ClientKeyPassword = types.StringValue(*resp.Configuration.DestinationPostgres.SslMode.DestinationPostgresSSLModesVerifyFull.ClientKeyPassword)
				} else {
					r.Configuration.DestinationPostgres.SslMode.DestinationPostgresSSLModesVerifyFull.ClientKeyPassword = types.StringNull()
				}
				r.Configuration.DestinationPostgres.SslMode.DestinationPostgresSSLModesVerifyFull.Mode = types.StringValue(string(resp.Configuration.DestinationPostgres.SslMode.DestinationPostgresSSLModesVerifyFull.Mode))
			}
		}
		if resp.Configuration.DestinationPostgres.TunnelMethod == nil {
			r.Configuration.DestinationPostgres.TunnelMethod = nil
		} else {
			r.Configuration.DestinationPostgres.TunnelMethod = &DestinationPostgresSSHTunnelMethod{}
			if resp.Configuration.DestinationPostgres.TunnelMethod.DestinationPostgresSSHTunnelMethodNoTunnel != nil {
				r.Configuration.DestinationPostgres.TunnelMethod.DestinationPostgresSSHTunnelMethodNoTunnel = &DestinationClickhouseSSHTunnelMethodNoTunnel{}
				r.Configuration.DestinationPostgres.TunnelMethod.DestinationPostgresSSHTunnelMethodNoTunnel.TunnelMethod = types.StringValue(string(resp.Configuration.DestinationPostgres.TunnelMethod.DestinationPostgresSSHTunnelMethodNoTunnel.TunnelMethod))
			}
			if resp.Configuration.DestinationPostgres.TunnelMethod.DestinationPostgresSSHTunnelMethodSSHKeyAuthentication != nil {
				r.Configuration.DestinationPostgres.TunnelMethod.DestinationPostgresSSHTunnelMethodSSHKeyAuthentication = &DestinationClickhouseSSHTunnelMethodSSHKeyAuthentication{}
				r.Configuration.DestinationPostgres.TunnelMethod.DestinationPostgresSSHTunnelMethodSSHKeyAuthentication.SSHKey = types.StringValue(resp.Configuration.DestinationPostgres.TunnelMethod.DestinationPostgresSSHTunnelMethodSSHKeyAuthentication.SSHKey)
				r.Configuration.DestinationPostgres.TunnelMethod.DestinationPostgresSSHTunnelMethodSSHKeyAuthentication.TunnelHost = types.StringValue(resp.Configuration.DestinationPostgres.TunnelMethod.DestinationPostgresSSHTunnelMethodSSHKeyAuthentication.TunnelHost)
				r.Configuration.DestinationPostgres.TunnelMethod.DestinationPostgresSSHTunnelMethodSSHKeyAuthentication.TunnelMethod = types.StringValue(string(resp.Configuration.DestinationPostgres.TunnelMethod.DestinationPostgresSSHTunnelMethodSSHKeyAuthentication.TunnelMethod))
				r.Configuration.DestinationPostgres.TunnelMethod.DestinationPostgresSSHTunnelMethodSSHKeyAuthentication.TunnelPort = types.Int64Value(resp.Configuration.DestinationPostgres.TunnelMethod.DestinationPostgresSSHTunnelMethodSSHKeyAuthentication.TunnelPort)
				r.Configuration.DestinationPostgres.TunnelMethod.DestinationPostgresSSHTunnelMethodSSHKeyAuthentication.TunnelUser = types.StringValue(resp.Configuration.DestinationPostgres.TunnelMethod.DestinationPostgresSSHTunnelMethodSSHKeyAuthentication.TunnelUser)
			}
			if resp.Configuration.DestinationPostgres.TunnelMethod.DestinationPostgresSSHTunnelMethodPasswordAuthentication != nil {
				r.Configuration.DestinationPostgres.TunnelMethod.DestinationPostgresSSHTunnelMethodPasswordAuthentication = &DestinationClickhouseSSHTunnelMethodPasswordAuthentication{}
				r.Configuration.DestinationPostgres.TunnelMethod.DestinationPostgresSSHTunnelMethodPasswordAuthentication.TunnelHost = types.StringValue(resp.Configuration.DestinationPostgres.TunnelMethod.DestinationPostgresSSHTunnelMethodPasswordAuthentication.TunnelHost)
				r.Configuration.DestinationPostgres.TunnelMethod.DestinationPostgresSSHTunnelMethodPasswordAuthentication.TunnelMethod = types.StringValue(string(resp.Configuration.DestinationPostgres.TunnelMethod.DestinationPostgresSSHTunnelMethodPasswordAuthentication.TunnelMethod))
				r.Configuration.DestinationPostgres.TunnelMethod.DestinationPostgresSSHTunnelMethodPasswordAuthentication.TunnelPort = types.Int64Value(resp.Configuration.DestinationPostgres.TunnelMethod.DestinationPostgresSSHTunnelMethodPasswordAuthentication.TunnelPort)
				r.Configuration.DestinationPostgres.TunnelMethod.DestinationPostgresSSHTunnelMethodPasswordAuthentication.TunnelUser = types.StringValue(resp.Configuration.DestinationPostgres.TunnelMethod.DestinationPostgresSSHTunnelMethodPasswordAuthentication.TunnelUser)
				r.Configuration.DestinationPostgres.TunnelMethod.DestinationPostgresSSHTunnelMethodPasswordAuthentication.TunnelUserPassword = types.StringValue(resp.Configuration.DestinationPostgres.TunnelMethod.DestinationPostgresSSHTunnelMethodPasswordAuthentication.TunnelUserPassword)
			}
		}
		r.Configuration.DestinationPostgres.Username = types.StringValue(resp.Configuration.DestinationPostgres.Username)
	}
	if resp.Configuration.DestinationPubsub != nil {
		r.Configuration.DestinationPubsub = &DestinationPubsub{}
		if resp.Configuration.DestinationPubsub.BatchingDelayThreshold != nil {
			r.Configuration.DestinationPubsub.BatchingDelayThreshold = types.Int64Value(*resp.Configuration.DestinationPubsub.BatchingDelayThreshold)
		} else {
			r.Configuration.DestinationPubsub.BatchingDelayThreshold = types.Int64Null()
		}
		if resp.Configuration.DestinationPubsub.BatchingElementCountThreshold != nil {
			r.Configuration.DestinationPubsub.BatchingElementCountThreshold = types.Int64Value(*resp.Configuration.DestinationPubsub.BatchingElementCountThreshold)
		} else {
			r.Configuration.DestinationPubsub.BatchingElementCountThreshold = types.Int64Null()
		}
		r.Configuration.DestinationPubsub.BatchingEnabled = types.BoolValue(resp.Configuration.DestinationPubsub.BatchingEnabled)
		if resp.Configuration.DestinationPubsub.BatchingRequestBytesThreshold != nil {
			r.Configuration.DestinationPubsub.BatchingRequestBytesThreshold = types.Int64Value(*resp.Configuration.DestinationPubsub.BatchingRequestBytesThreshold)
		} else {
			r.Configuration.DestinationPubsub.BatchingRequestBytesThreshold = types.Int64Null()
		}
		r.Configuration.DestinationPubsub.CredentialsJSON = types.StringValue(resp.Configuration.DestinationPubsub.CredentialsJSON)
		r.Configuration.DestinationPubsub.DestinationType = types.StringValue(string(resp.Configuration.DestinationPubsub.DestinationType))
		r.Configuration.DestinationPubsub.OrderingEnabled = types.BoolValue(resp.Configuration.DestinationPubsub.OrderingEnabled)
		r.Configuration.DestinationPubsub.ProjectID = types.StringValue(resp.Configuration.DestinationPubsub.ProjectID)
		r.Configuration.DestinationPubsub.TopicID = types.StringValue(resp.Configuration.DestinationPubsub.TopicID)
	}
	if resp.Configuration.DestinationPulsar != nil {
		r.Configuration.DestinationPulsar = &DestinationPulsar{}
		r.Configuration.DestinationPulsar.BatchingEnabled = types.BoolValue(resp.Configuration.DestinationPulsar.BatchingEnabled)
		r.Configuration.DestinationPulsar.BatchingMaxMessages = types.Int64Value(resp.Configuration.DestinationPulsar.BatchingMaxMessages)
		r.Configuration.DestinationPulsar.BatchingMaxPublishDelay = types.Int64Value(resp.Configuration.DestinationPulsar.BatchingMaxPublishDelay)
		r.Configuration.DestinationPulsar.BlockIfQueueFull = types.BoolValue(resp.Configuration.DestinationPulsar.BlockIfQueueFull)
		r.Configuration.DestinationPulsar.Brokers = types.StringValue(resp.Configuration.DestinationPulsar.Brokers)
		r.Configuration.DestinationPulsar.CompressionType = types.StringValue(string(resp.Configuration.DestinationPulsar.CompressionType))
		r.Configuration.DestinationPulsar.DestinationType = types.StringValue(string(resp.Configuration.DestinationPulsar.DestinationType))
		r.Configuration.DestinationPulsar.MaxPendingMessages = types.Int64Value(resp.Configuration.DestinationPulsar.MaxPendingMessages)
		r.Configuration.DestinationPulsar.MaxPendingMessagesAcrossPartitions = types.Int64Value(resp.Configuration.DestinationPulsar.MaxPendingMessagesAcrossPartitions)
		if resp.Configuration.DestinationPulsar.ProducerName != nil {
			r.Configuration.DestinationPulsar.ProducerName = types.StringValue(*resp.Configuration.DestinationPulsar.ProducerName)
		} else {
			r.Configuration.DestinationPulsar.ProducerName = types.StringNull()
		}
		if resp.Configuration.DestinationPulsar.ProducerSync != nil {
			r.Configuration.DestinationPulsar.ProducerSync = types.BoolValue(*resp.Configuration.DestinationPulsar.ProducerSync)
		} else {
			r.Configuration.DestinationPulsar.ProducerSync = types.BoolNull()
		}
		r.Configuration.DestinationPulsar.SendTimeoutMs = types.Int64Value(resp.Configuration.DestinationPulsar.SendTimeoutMs)
		r.Configuration.DestinationPulsar.TopicNamespace = types.StringValue(resp.Configuration.DestinationPulsar.TopicNamespace)
		r.Configuration.DestinationPulsar.TopicPattern = types.StringValue(resp.Configuration.DestinationPulsar.TopicPattern)
		r.Configuration.DestinationPulsar.TopicTenant = types.StringValue(resp.Configuration.DestinationPulsar.TopicTenant)
		if resp.Configuration.DestinationPulsar.TopicTest != nil {
			r.Configuration.DestinationPulsar.TopicTest = types.StringValue(*resp.Configuration.DestinationPulsar.TopicTest)
		} else {
			r.Configuration.DestinationPulsar.TopicTest = types.StringNull()
		}
		r.Configuration.DestinationPulsar.TopicType = types.StringValue(string(resp.Configuration.DestinationPulsar.TopicType))
		r.Configuration.DestinationPulsar.UseTLS = types.BoolValue(resp.Configuration.DestinationPulsar.UseTLS)
	}
	if resp.Configuration.DestinationRabbitmq != nil {
		r.Configuration.DestinationRabbitmq = &DestinationRabbitmq{}
		r.Configuration.DestinationRabbitmq.DestinationType = types.StringValue(string(resp.Configuration.DestinationRabbitmq.DestinationType))
		if resp.Configuration.DestinationRabbitmq.Exchange != nil {
			r.Configuration.DestinationRabbitmq.Exchange = types.StringValue(*resp.Configuration.DestinationRabbitmq.Exchange)
		} else {
			r.Configuration.DestinationRabbitmq.Exchange = types.StringNull()
		}
		r.Configuration.DestinationRabbitmq.Host = types.StringValue(resp.Configuration.DestinationRabbitmq.Host)
		if resp.Configuration.DestinationRabbitmq.Password != nil {
			r.Configuration.DestinationRabbitmq.Password = types.StringValue(*resp.Configuration.DestinationRabbitmq.Password)
		} else {
			r.Configuration.DestinationRabbitmq.Password = types.StringNull()
		}
		if resp.Configuration.DestinationRabbitmq.Port != nil {
			r.Configuration.DestinationRabbitmq.Port = types.Int64Value(*resp.Configuration.DestinationRabbitmq.Port)
		} else {
			r.Configuration.DestinationRabbitmq.Port = types.Int64Null()
		}
		r.Configuration.DestinationRabbitmq.RoutingKey = types.StringValue(resp.Configuration.DestinationRabbitmq.RoutingKey)
		if resp.Configuration.DestinationRabbitmq.Ssl != nil {
			r.Configuration.DestinationRabbitmq.Ssl = types.BoolValue(*resp.Configuration.DestinationRabbitmq.Ssl)
		} else {
			r.Configuration.DestinationRabbitmq.Ssl = types.BoolNull()
		}
		if resp.Configuration.DestinationRabbitmq.Username != nil {
			r.Configuration.DestinationRabbitmq.Username = types.StringValue(*resp.Configuration.DestinationRabbitmq.Username)
		} else {
			r.Configuration.DestinationRabbitmq.Username = types.StringNull()
		}
		if resp.Configuration.DestinationRabbitmq.VirtualHost != nil {
			r.Configuration.DestinationRabbitmq.VirtualHost = types.StringValue(*resp.Configuration.DestinationRabbitmq.VirtualHost)
		} else {
			r.Configuration.DestinationRabbitmq.VirtualHost = types.StringNull()
		}
	}
	if resp.Configuration.DestinationRedis != nil {
		r.Configuration.DestinationRedis = &DestinationRedis{}
		r.Configuration.DestinationRedis.CacheType = types.StringValue(string(resp.Configuration.DestinationRedis.CacheType))
		r.Configuration.DestinationRedis.DestinationType = types.StringValue(string(resp.Configuration.DestinationRedis.DestinationType))
		r.Configuration.DestinationRedis.Host = types.StringValue(resp.Configuration.DestinationRedis.Host)
		if resp.Configuration.DestinationRedis.Password != nil {
			r.Configuration.DestinationRedis.Password = types.StringValue(*resp.Configuration.DestinationRedis.Password)
		} else {
			r.Configuration.DestinationRedis.Password = types.StringNull()
		}
		r.Configuration.DestinationRedis.Port = types.Int64Value(resp.Configuration.DestinationRedis.Port)
		if resp.Configuration.DestinationRedis.Ssl != nil {
			r.Configuration.DestinationRedis.Ssl = types.BoolValue(*resp.Configuration.DestinationRedis.Ssl)
		} else {
			r.Configuration.DestinationRedis.Ssl = types.BoolNull()
		}
		if resp.Configuration.DestinationRedis.SslMode == nil {
			r.Configuration.DestinationRedis.SslMode = nil
		} else {
			r.Configuration.DestinationRedis.SslMode = &DestinationRedisSSLModes{}
			if resp.Configuration.DestinationRedis.SslMode.DestinationRedisSSLModesDisable != nil {
				r.Configuration.DestinationRedis.SslMode.DestinationRedisSSLModesDisable = &DestinationPostgresSSLModesDisable{}
				r.Configuration.DestinationRedis.SslMode.DestinationRedisSSLModesDisable.Mode = types.StringValue(string(resp.Configuration.DestinationRedis.SslMode.DestinationRedisSSLModesDisable.Mode))
			}
			if resp.Configuration.DestinationRedis.SslMode.DestinationRedisSSLModesVerifyFull != nil {
				r.Configuration.DestinationRedis.SslMode.DestinationRedisSSLModesVerifyFull = &DestinationPostgresSSLModesVerifyFull{}
				r.Configuration.DestinationRedis.SslMode.DestinationRedisSSLModesVerifyFull.CaCertificate = types.StringValue(resp.Configuration.DestinationRedis.SslMode.DestinationRedisSSLModesVerifyFull.CaCertificate)
				r.Configuration.DestinationRedis.SslMode.DestinationRedisSSLModesVerifyFull.ClientCertificate = types.StringValue(resp.Configuration.DestinationRedis.SslMode.DestinationRedisSSLModesVerifyFull.ClientCertificate)
				r.Configuration.DestinationRedis.SslMode.DestinationRedisSSLModesVerifyFull.ClientKey = types.StringValue(resp.Configuration.DestinationRedis.SslMode.DestinationRedisSSLModesVerifyFull.ClientKey)
				if resp.Configuration.DestinationRedis.SslMode.DestinationRedisSSLModesVerifyFull.ClientKeyPassword != nil {
					r.Configuration.DestinationRedis.SslMode.DestinationRedisSSLModesVerifyFull.ClientKeyPassword = types.StringValue(*resp.Configuration.DestinationRedis.SslMode.DestinationRedisSSLModesVerifyFull.ClientKeyPassword)
				} else {
					r.Configuration.DestinationRedis.SslMode.DestinationRedisSSLModesVerifyFull.ClientKeyPassword = types.StringNull()
				}
				r.Configuration.DestinationRedis.SslMode.DestinationRedisSSLModesVerifyFull.Mode = types.StringValue(string(resp.Configuration.DestinationRedis.SslMode.DestinationRedisSSLModesVerifyFull.Mode))
			}
		}
		if resp.Configuration.DestinationRedis.TunnelMethod == nil {
			r.Configuration.DestinationRedis.TunnelMethod = nil
		} else {
			r.Configuration.DestinationRedis.TunnelMethod = &DestinationRedisSSHTunnelMethod{}
			if resp.Configuration.DestinationRedis.TunnelMethod.DestinationRedisSSHTunnelMethodNoTunnel != nil {
				r.Configuration.DestinationRedis.TunnelMethod.DestinationRedisSSHTunnelMethodNoTunnel = &DestinationClickhouseSSHTunnelMethodNoTunnel{}
				r.Configuration.DestinationRedis.TunnelMethod.DestinationRedisSSHTunnelMethodNoTunnel.TunnelMethod = types.StringValue(string(resp.Configuration.DestinationRedis.TunnelMethod.DestinationRedisSSHTunnelMethodNoTunnel.TunnelMethod))
			}
			if resp.Configuration.DestinationRedis.TunnelMethod.DestinationRedisSSHTunnelMethodSSHKeyAuthentication != nil {
				r.Configuration.DestinationRedis.TunnelMethod.DestinationRedisSSHTunnelMethodSSHKeyAuthentication = &DestinationClickhouseSSHTunnelMethodSSHKeyAuthentication{}
				r.Configuration.DestinationRedis.TunnelMethod.DestinationRedisSSHTunnelMethodSSHKeyAuthentication.SSHKey = types.StringValue(resp.Configuration.DestinationRedis.TunnelMethod.DestinationRedisSSHTunnelMethodSSHKeyAuthentication.SSHKey)
				r.Configuration.DestinationRedis.TunnelMethod.DestinationRedisSSHTunnelMethodSSHKeyAuthentication.TunnelHost = types.StringValue(resp.Configuration.DestinationRedis.TunnelMethod.DestinationRedisSSHTunnelMethodSSHKeyAuthentication.TunnelHost)
				r.Configuration.DestinationRedis.TunnelMethod.DestinationRedisSSHTunnelMethodSSHKeyAuthentication.TunnelMethod = types.StringValue(string(resp.Configuration.DestinationRedis.TunnelMethod.DestinationRedisSSHTunnelMethodSSHKeyAuthentication.TunnelMethod))
				r.Configuration.DestinationRedis.TunnelMethod.DestinationRedisSSHTunnelMethodSSHKeyAuthentication.TunnelPort = types.Int64Value(resp.Configuration.DestinationRedis.TunnelMethod.DestinationRedisSSHTunnelMethodSSHKeyAuthentication.TunnelPort)
				r.Configuration.DestinationRedis.TunnelMethod.DestinationRedisSSHTunnelMethodSSHKeyAuthentication.TunnelUser = types.StringValue(resp.Configuration.DestinationRedis.TunnelMethod.DestinationRedisSSHTunnelMethodSSHKeyAuthentication.TunnelUser)
			}
			if resp.Configuration.DestinationRedis.TunnelMethod.DestinationRedisSSHTunnelMethodPasswordAuthentication != nil {
				r.Configuration.DestinationRedis.TunnelMethod.DestinationRedisSSHTunnelMethodPasswordAuthentication = &DestinationClickhouseSSHTunnelMethodPasswordAuthentication{}
				r.Configuration.DestinationRedis.TunnelMethod.DestinationRedisSSHTunnelMethodPasswordAuthentication.TunnelHost = types.StringValue(resp.Configuration.DestinationRedis.TunnelMethod.DestinationRedisSSHTunnelMethodPasswordAuthentication.TunnelHost)
				r.Configuration.DestinationRedis.TunnelMethod.DestinationRedisSSHTunnelMethodPasswordAuthentication.TunnelMethod = types.StringValue(string(resp.Configuration.DestinationRedis.TunnelMethod.DestinationRedisSSHTunnelMethodPasswordAuthentication.TunnelMethod))
				r.Configuration.DestinationRedis.TunnelMethod.DestinationRedisSSHTunnelMethodPasswordAuthentication.TunnelPort = types.Int64Value(resp.Configuration.DestinationRedis.TunnelMethod.DestinationRedisSSHTunnelMethodPasswordAuthentication.TunnelPort)
				r.Configuration.DestinationRedis.TunnelMethod.DestinationRedisSSHTunnelMethodPasswordAuthentication.TunnelUser = types.StringValue(resp.Configuration.DestinationRedis.TunnelMethod.DestinationRedisSSHTunnelMethodPasswordAuthentication.TunnelUser)
				r.Configuration.DestinationRedis.TunnelMethod.DestinationRedisSSHTunnelMethodPasswordAuthentication.TunnelUserPassword = types.StringValue(resp.Configuration.DestinationRedis.TunnelMethod.DestinationRedisSSHTunnelMethodPasswordAuthentication.TunnelUserPassword)
			}
		}
		r.Configuration.DestinationRedis.Username = types.StringValue(resp.Configuration.DestinationRedis.Username)
	}
	if resp.Configuration.DestinationRedshift != nil {
		r.Configuration.DestinationRedshift = &DestinationRedshift{}
		r.Configuration.DestinationRedshift.Database = types.StringValue(resp.Configuration.DestinationRedshift.Database)
		r.Configuration.DestinationRedshift.DestinationType = types.StringValue(string(resp.Configuration.DestinationRedshift.DestinationType))
		r.Configuration.DestinationRedshift.Host = types.StringValue(resp.Configuration.DestinationRedshift.Host)
		if resp.Configuration.DestinationRedshift.JdbcURLParams != nil {
			r.Configuration.DestinationRedshift.JdbcURLParams = types.StringValue(*resp.Configuration.DestinationRedshift.JdbcURLParams)
		} else {
			r.Configuration.DestinationRedshift.JdbcURLParams = types.StringNull()
		}
		r.Configuration.DestinationRedshift.Password = types.StringValue(resp.Configuration.DestinationRedshift.Password)
		r.Configuration.DestinationRedshift.Port = types.Int64Value(resp.Configuration.DestinationRedshift.Port)
		r.Configuration.DestinationRedshift.Schema = types.StringValue(resp.Configuration.DestinationRedshift.Schema)
		if resp.Configuration.DestinationRedshift.TunnelMethod == nil {
			r.Configuration.DestinationRedshift.TunnelMethod = nil
		} else {
			r.Configuration.DestinationRedshift.TunnelMethod = &DestinationRedshiftSSHTunnelMethod{}
			if resp.Configuration.DestinationRedshift.TunnelMethod.DestinationRedshiftSSHTunnelMethodNoTunnel != nil {
				r.Configuration.DestinationRedshift.TunnelMethod.DestinationRedshiftSSHTunnelMethodNoTunnel = &DestinationClickhouseSSHTunnelMethodNoTunnel{}
				r.Configuration.DestinationRedshift.TunnelMethod.DestinationRedshiftSSHTunnelMethodNoTunnel.TunnelMethod = types.StringValue(string(resp.Configuration.DestinationRedshift.TunnelMethod.DestinationRedshiftSSHTunnelMethodNoTunnel.TunnelMethod))
			}
			if resp.Configuration.DestinationRedshift.TunnelMethod.DestinationRedshiftSSHTunnelMethodSSHKeyAuthentication != nil {
				r.Configuration.DestinationRedshift.TunnelMethod.DestinationRedshiftSSHTunnelMethodSSHKeyAuthentication = &DestinationClickhouseSSHTunnelMethodSSHKeyAuthentication{}
				r.Configuration.DestinationRedshift.TunnelMethod.DestinationRedshiftSSHTunnelMethodSSHKeyAuthentication.SSHKey = types.StringValue(resp.Configuration.DestinationRedshift.TunnelMethod.DestinationRedshiftSSHTunnelMethodSSHKeyAuthentication.SSHKey)
				r.Configuration.DestinationRedshift.TunnelMethod.DestinationRedshiftSSHTunnelMethodSSHKeyAuthentication.TunnelHost = types.StringValue(resp.Configuration.DestinationRedshift.TunnelMethod.DestinationRedshiftSSHTunnelMethodSSHKeyAuthentication.TunnelHost)
				r.Configuration.DestinationRedshift.TunnelMethod.DestinationRedshiftSSHTunnelMethodSSHKeyAuthentication.TunnelMethod = types.StringValue(string(resp.Configuration.DestinationRedshift.TunnelMethod.DestinationRedshiftSSHTunnelMethodSSHKeyAuthentication.TunnelMethod))
				r.Configuration.DestinationRedshift.TunnelMethod.DestinationRedshiftSSHTunnelMethodSSHKeyAuthentication.TunnelPort = types.Int64Value(resp.Configuration.DestinationRedshift.TunnelMethod.DestinationRedshiftSSHTunnelMethodSSHKeyAuthentication.TunnelPort)
				r.Configuration.DestinationRedshift.TunnelMethod.DestinationRedshiftSSHTunnelMethodSSHKeyAuthentication.TunnelUser = types.StringValue(resp.Configuration.DestinationRedshift.TunnelMethod.DestinationRedshiftSSHTunnelMethodSSHKeyAuthentication.TunnelUser)
			}
			if resp.Configuration.DestinationRedshift.TunnelMethod.DestinationRedshiftSSHTunnelMethodPasswordAuthentication != nil {
				r.Configuration.DestinationRedshift.TunnelMethod.DestinationRedshiftSSHTunnelMethodPasswordAuthentication = &DestinationClickhouseSSHTunnelMethodPasswordAuthentication{}
				r.Configuration.DestinationRedshift.TunnelMethod.DestinationRedshiftSSHTunnelMethodPasswordAuthentication.TunnelHost = types.StringValue(resp.Configuration.DestinationRedshift.TunnelMethod.DestinationRedshiftSSHTunnelMethodPasswordAuthentication.TunnelHost)
				r.Configuration.DestinationRedshift.TunnelMethod.DestinationRedshiftSSHTunnelMethodPasswordAuthentication.TunnelMethod = types.StringValue(string(resp.Configuration.DestinationRedshift.TunnelMethod.DestinationRedshiftSSHTunnelMethodPasswordAuthentication.TunnelMethod))
				r.Configuration.DestinationRedshift.TunnelMethod.DestinationRedshiftSSHTunnelMethodPasswordAuthentication.TunnelPort = types.Int64Value(resp.Configuration.DestinationRedshift.TunnelMethod.DestinationRedshiftSSHTunnelMethodPasswordAuthentication.TunnelPort)
				r.Configuration.DestinationRedshift.TunnelMethod.DestinationRedshiftSSHTunnelMethodPasswordAuthentication.TunnelUser = types.StringValue(resp.Configuration.DestinationRedshift.TunnelMethod.DestinationRedshiftSSHTunnelMethodPasswordAuthentication.TunnelUser)
				r.Configuration.DestinationRedshift.TunnelMethod.DestinationRedshiftSSHTunnelMethodPasswordAuthentication.TunnelUserPassword = types.StringValue(resp.Configuration.DestinationRedshift.TunnelMethod.DestinationRedshiftSSHTunnelMethodPasswordAuthentication.TunnelUserPassword)
			}
		}
		if resp.Configuration.DestinationRedshift.UploadingMethod == nil {
			r.Configuration.DestinationRedshift.UploadingMethod = nil
		} else {
			r.Configuration.DestinationRedshift.UploadingMethod = &DestinationRedshiftUploadingMethod{}
			if resp.Configuration.DestinationRedshift.UploadingMethod.DestinationRedshiftUploadingMethodStandard != nil {
				r.Configuration.DestinationRedshift.UploadingMethod.DestinationRedshiftUploadingMethodStandard = &DestinationRedshiftUploadingMethodStandard{}
				r.Configuration.DestinationRedshift.UploadingMethod.DestinationRedshiftUploadingMethodStandard.Method = types.StringValue(string(resp.Configuration.DestinationRedshift.UploadingMethod.DestinationRedshiftUploadingMethodStandard.Method))
			}
			if resp.Configuration.DestinationRedshift.UploadingMethod.DestinationRedshiftUploadingMethodS3Staging != nil {
				r.Configuration.DestinationRedshift.UploadingMethod.DestinationRedshiftUploadingMethodS3Staging = &DestinationRedshiftUploadingMethodS3Staging{}
				r.Configuration.DestinationRedshift.UploadingMethod.DestinationRedshiftUploadingMethodS3Staging.AccessKeyID = types.StringValue(resp.Configuration.DestinationRedshift.UploadingMethod.DestinationRedshiftUploadingMethodS3Staging.AccessKeyID)
				if resp.Configuration.DestinationRedshift.UploadingMethod.DestinationRedshiftUploadingMethodS3Staging.Encryption == nil {
					r.Configuration.DestinationRedshift.UploadingMethod.DestinationRedshiftUploadingMethodS3Staging.Encryption = nil
				} else {
					r.Configuration.DestinationRedshift.UploadingMethod.DestinationRedshiftUploadingMethodS3Staging.Encryption = &DestinationRedshiftUploadingMethodS3StagingEncryption{}
					if resp.Configuration.DestinationRedshift.UploadingMethod.DestinationRedshiftUploadingMethodS3Staging.Encryption.DestinationRedshiftUploadingMethodS3StagingEncryptionNoEncryption != nil {
						r.Configuration.DestinationRedshift.UploadingMethod.DestinationRedshiftUploadingMethodS3Staging.Encryption.DestinationRedshiftUploadingMethodS3StagingEncryptionNoEncryption = &DestinationRedshiftUploadingMethodS3StagingEncryptionNoEncryption{}
						r.Configuration.DestinationRedshift.UploadingMethod.DestinationRedshiftUploadingMethodS3Staging.Encryption.DestinationRedshiftUploadingMethodS3StagingEncryptionNoEncryption.EncryptionType = types.StringValue(string(resp.Configuration.DestinationRedshift.UploadingMethod.DestinationRedshiftUploadingMethodS3Staging.Encryption.DestinationRedshiftUploadingMethodS3StagingEncryptionNoEncryption.EncryptionType))
					}
					if resp.Configuration.DestinationRedshift.UploadingMethod.DestinationRedshiftUploadingMethodS3Staging.Encryption.DestinationRedshiftUploadingMethodS3StagingEncryptionAESCBCEnvelopeEncryption != nil {
						r.Configuration.DestinationRedshift.UploadingMethod.DestinationRedshiftUploadingMethodS3Staging.Encryption.DestinationRedshiftUploadingMethodS3StagingEncryptionAESCBCEnvelopeEncryption = &DestinationRedshiftUploadingMethodS3StagingEncryptionAESCBCEnvelopeEncryption{}
						r.Configuration.DestinationRedshift.UploadingMethod.DestinationRedshiftUploadingMethodS3Staging.Encryption.DestinationRedshiftUploadingMethodS3StagingEncryptionAESCBCEnvelopeEncryption.EncryptionType = types.StringValue(string(resp.Configuration.DestinationRedshift.UploadingMethod.DestinationRedshiftUploadingMethodS3Staging.Encryption.DestinationRedshiftUploadingMethodS3StagingEncryptionAESCBCEnvelopeEncryption.EncryptionType))
						if resp.Configuration.DestinationRedshift.UploadingMethod.DestinationRedshiftUploadingMethodS3Staging.Encryption.DestinationRedshiftUploadingMethodS3StagingEncryptionAESCBCEnvelopeEncryption.KeyEncryptingKey != nil {
							r.Configuration.DestinationRedshift.UploadingMethod.DestinationRedshiftUploadingMethodS3Staging.Encryption.DestinationRedshiftUploadingMethodS3StagingEncryptionAESCBCEnvelopeEncryption.KeyEncryptingKey = types.StringValue(*resp.Configuration.DestinationRedshift.UploadingMethod.DestinationRedshiftUploadingMethodS3Staging.Encryption.DestinationRedshiftUploadingMethodS3StagingEncryptionAESCBCEnvelopeEncryption.KeyEncryptingKey)
						} else {
							r.Configuration.DestinationRedshift.UploadingMethod.DestinationRedshiftUploadingMethodS3Staging.Encryption.DestinationRedshiftUploadingMethodS3StagingEncryptionAESCBCEnvelopeEncryption.KeyEncryptingKey = types.StringNull()
						}
					}
				}
				if resp.Configuration.DestinationRedshift.UploadingMethod.DestinationRedshiftUploadingMethodS3Staging.FileBufferCount != nil {
					r.Configuration.DestinationRedshift.UploadingMethod.DestinationRedshiftUploadingMethodS3Staging.FileBufferCount = types.Int64Value(*resp.Configuration.DestinationRedshift.UploadingMethod.DestinationRedshiftUploadingMethodS3Staging.FileBufferCount)
				} else {
					r.Configuration.DestinationRedshift.UploadingMethod.DestinationRedshiftUploadingMethodS3Staging.FileBufferCount = types.Int64Null()
				}
				if resp.Configuration.DestinationRedshift.UploadingMethod.DestinationRedshiftUploadingMethodS3Staging.FileNamePattern != nil {
					r.Configuration.DestinationRedshift.UploadingMethod.DestinationRedshiftUploadingMethodS3Staging.FileNamePattern = types.StringValue(*resp.Configuration.DestinationRedshift.UploadingMethod.DestinationRedshiftUploadingMethodS3Staging.FileNamePattern)
				} else {
					r.Configuration.DestinationRedshift.UploadingMethod.DestinationRedshiftUploadingMethodS3Staging.FileNamePattern = types.StringNull()
				}
				r.Configuration.DestinationRedshift.UploadingMethod.DestinationRedshiftUploadingMethodS3Staging.Method = types.StringValue(string(resp.Configuration.DestinationRedshift.UploadingMethod.DestinationRedshiftUploadingMethodS3Staging.Method))
				if resp.Configuration.DestinationRedshift.UploadingMethod.DestinationRedshiftUploadingMethodS3Staging.PurgeStagingData != nil {
					r.Configuration.DestinationRedshift.UploadingMethod.DestinationRedshiftUploadingMethodS3Staging.PurgeStagingData = types.BoolValue(*resp.Configuration.DestinationRedshift.UploadingMethod.DestinationRedshiftUploadingMethodS3Staging.PurgeStagingData)
				} else {
					r.Configuration.DestinationRedshift.UploadingMethod.DestinationRedshiftUploadingMethodS3Staging.PurgeStagingData = types.BoolNull()
				}
				r.Configuration.DestinationRedshift.UploadingMethod.DestinationRedshiftUploadingMethodS3Staging.S3BucketName = types.StringValue(resp.Configuration.DestinationRedshift.UploadingMethod.DestinationRedshiftUploadingMethodS3Staging.S3BucketName)
				if resp.Configuration.DestinationRedshift.UploadingMethod.DestinationRedshiftUploadingMethodS3Staging.S3BucketPath != nil {
					r.Configuration.DestinationRedshift.UploadingMethod.DestinationRedshiftUploadingMethodS3Staging.S3BucketPath = types.StringValue(*resp.Configuration.DestinationRedshift.UploadingMethod.DestinationRedshiftUploadingMethodS3Staging.S3BucketPath)
				} else {
					r.Configuration.DestinationRedshift.UploadingMethod.DestinationRedshiftUploadingMethodS3Staging.S3BucketPath = types.StringNull()
				}
				r.Configuration.DestinationRedshift.UploadingMethod.DestinationRedshiftUploadingMethodS3Staging.S3BucketRegion = types.StringValue(string(resp.Configuration.DestinationRedshift.UploadingMethod.DestinationRedshiftUploadingMethodS3Staging.S3BucketRegion))
				r.Configuration.DestinationRedshift.UploadingMethod.DestinationRedshiftUploadingMethodS3Staging.SecretAccessKey = types.StringValue(resp.Configuration.DestinationRedshift.UploadingMethod.DestinationRedshiftUploadingMethodS3Staging.SecretAccessKey)
			}
		}
		r.Configuration.DestinationRedshift.Username = types.StringValue(resp.Configuration.DestinationRedshift.Username)
	}
	if resp.Configuration.DestinationRockset != nil {
		r.Configuration.DestinationRockset = &DestinationRockset{}
		r.Configuration.DestinationRockset.APIKey = types.StringValue(resp.Configuration.DestinationRockset.APIKey)
		if resp.Configuration.DestinationRockset.APIServer != nil {
			r.Configuration.DestinationRockset.APIServer = types.StringValue(*resp.Configuration.DestinationRockset.APIServer)
		} else {
			r.Configuration.DestinationRockset.APIServer = types.StringNull()
		}
		r.Configuration.DestinationRockset.DestinationType = types.StringValue(string(resp.Configuration.DestinationRockset.DestinationType))
		r.Configuration.DestinationRockset.Workspace = types.StringValue(resp.Configuration.DestinationRockset.Workspace)
	}
	if resp.Configuration.DestinationS3 != nil {
		r.Configuration.DestinationS3 = &DestinationS3{}
		if resp.Configuration.DestinationS3.AccessKeyID != nil {
			r.Configuration.DestinationS3.AccessKeyID = types.StringValue(*resp.Configuration.DestinationS3.AccessKeyID)
		} else {
			r.Configuration.DestinationS3.AccessKeyID = types.StringNull()
		}
		r.Configuration.DestinationS3.DestinationType = types.StringValue(string(resp.Configuration.DestinationS3.DestinationType))
		if resp.Configuration.DestinationS3.FileNamePattern != nil {
			r.Configuration.DestinationS3.FileNamePattern = types.StringValue(*resp.Configuration.DestinationS3.FileNamePattern)
		} else {
			r.Configuration.DestinationS3.FileNamePattern = types.StringNull()
		}
		if resp.Configuration.DestinationS3.Format.DestinationS3OutputFormatAvroApacheAvro != nil {
			r.Configuration.DestinationS3.Format.DestinationS3OutputFormatAvroApacheAvro = &DestinationS3OutputFormatAvroApacheAvro{}
			if resp.Configuration.DestinationS3.Format.DestinationS3OutputFormatAvroApacheAvro.CompressionCodec.DestinationS3OutputFormatAvroApacheAvroCompressionCodecNoCompression != nil {
				r.Configuration.DestinationS3.Format.DestinationS3OutputFormatAvroApacheAvro.CompressionCodec.DestinationS3OutputFormatAvroApacheAvroCompressionCodecNoCompression = &DestinationGcsOutputFormatAvroApacheAvroCompressionCodecNoCompression{}
				r.Configuration.DestinationS3.Format.DestinationS3OutputFormatAvroApacheAvro.CompressionCodec.DestinationS3OutputFormatAvroApacheAvroCompressionCodecNoCompression.Codec = types.StringValue(string(resp.Configuration.DestinationS3.Format.DestinationS3OutputFormatAvroApacheAvro.CompressionCodec.DestinationS3OutputFormatAvroApacheAvroCompressionCodecNoCompression.Codec))
			}
			if resp.Configuration.DestinationS3.Format.DestinationS3OutputFormatAvroApacheAvro.CompressionCodec.DestinationS3OutputFormatAvroApacheAvroCompressionCodecDeflate != nil {
				r.Configuration.DestinationS3.Format.DestinationS3OutputFormatAvroApacheAvro.CompressionCodec.DestinationS3OutputFormatAvroApacheAvroCompressionCodecDeflate = &DestinationGcsOutputFormatAvroApacheAvroCompressionCodecDeflate{}
				r.Configuration.DestinationS3.Format.DestinationS3OutputFormatAvroApacheAvro.CompressionCodec.DestinationS3OutputFormatAvroApacheAvroCompressionCodecDeflate.Codec = types.StringValue(string(resp.Configuration.DestinationS3.Format.DestinationS3OutputFormatAvroApacheAvro.CompressionCodec.DestinationS3OutputFormatAvroApacheAvroCompressionCodecDeflate.Codec))
				r.Configuration.DestinationS3.Format.DestinationS3OutputFormatAvroApacheAvro.CompressionCodec.DestinationS3OutputFormatAvroApacheAvroCompressionCodecDeflate.CompressionLevel = types.Int64Value(resp.Configuration.DestinationS3.Format.DestinationS3OutputFormatAvroApacheAvro.CompressionCodec.DestinationS3OutputFormatAvroApacheAvroCompressionCodecDeflate.CompressionLevel)
			}
			if resp.Configuration.DestinationS3.Format.DestinationS3OutputFormatAvroApacheAvro.CompressionCodec.DestinationS3OutputFormatAvroApacheAvroCompressionCodecBzip2 != nil {
				r.Configuration.DestinationS3.Format.DestinationS3OutputFormatAvroApacheAvro.CompressionCodec.DestinationS3OutputFormatAvroApacheAvroCompressionCodecBzip2 = &DestinationGcsOutputFormatAvroApacheAvroCompressionCodecBzip2{}
				r.Configuration.DestinationS3.Format.DestinationS3OutputFormatAvroApacheAvro.CompressionCodec.DestinationS3OutputFormatAvroApacheAvroCompressionCodecBzip2.Codec = types.StringValue(string(resp.Configuration.DestinationS3.Format.DestinationS3OutputFormatAvroApacheAvro.CompressionCodec.DestinationS3OutputFormatAvroApacheAvroCompressionCodecBzip2.Codec))
			}
			if resp.Configuration.DestinationS3.Format.DestinationS3OutputFormatAvroApacheAvro.CompressionCodec.DestinationS3OutputFormatAvroApacheAvroCompressionCodecXz != nil {
				r.Configuration.DestinationS3.Format.DestinationS3OutputFormatAvroApacheAvro.CompressionCodec.DestinationS3OutputFormatAvroApacheAvroCompressionCodecXz = &DestinationGcsOutputFormatAvroApacheAvroCompressionCodecXz{}
				r.Configuration.DestinationS3.Format.DestinationS3OutputFormatAvroApacheAvro.CompressionCodec.DestinationS3OutputFormatAvroApacheAvroCompressionCodecXz.Codec = types.StringValue(string(resp.Configuration.DestinationS3.Format.DestinationS3OutputFormatAvroApacheAvro.CompressionCodec.DestinationS3OutputFormatAvroApacheAvroCompressionCodecXz.Codec))
				r.Configuration.DestinationS3.Format.DestinationS3OutputFormatAvroApacheAvro.CompressionCodec.DestinationS3OutputFormatAvroApacheAvroCompressionCodecXz.CompressionLevel = types.Int64Value(resp.Configuration.DestinationS3.Format.DestinationS3OutputFormatAvroApacheAvro.CompressionCodec.DestinationS3OutputFormatAvroApacheAvroCompressionCodecXz.CompressionLevel)
			}
			if resp.Configuration.DestinationS3.Format.DestinationS3OutputFormatAvroApacheAvro.CompressionCodec.DestinationS3OutputFormatAvroApacheAvroCompressionCodecZstandard != nil {
				r.Configuration.DestinationS3.Format.DestinationS3OutputFormatAvroApacheAvro.CompressionCodec.DestinationS3OutputFormatAvroApacheAvroCompressionCodecZstandard = &DestinationGcsOutputFormatAvroApacheAvroCompressionCodecZstandard{}
				r.Configuration.DestinationS3.Format.DestinationS3OutputFormatAvroApacheAvro.CompressionCodec.DestinationS3OutputFormatAvroApacheAvroCompressionCodecZstandard.Codec = types.StringValue(string(resp.Configuration.DestinationS3.Format.DestinationS3OutputFormatAvroApacheAvro.CompressionCodec.DestinationS3OutputFormatAvroApacheAvroCompressionCodecZstandard.Codec))
				r.Configuration.DestinationS3.Format.DestinationS3OutputFormatAvroApacheAvro.CompressionCodec.DestinationS3OutputFormatAvroApacheAvroCompressionCodecZstandard.CompressionLevel = types.Int64Value(resp.Configuration.DestinationS3.Format.DestinationS3OutputFormatAvroApacheAvro.CompressionCodec.DestinationS3OutputFormatAvroApacheAvroCompressionCodecZstandard.CompressionLevel)
				if resp.Configuration.DestinationS3.Format.DestinationS3OutputFormatAvroApacheAvro.CompressionCodec.DestinationS3OutputFormatAvroApacheAvroCompressionCodecZstandard.IncludeChecksum != nil {
					r.Configuration.DestinationS3.Format.DestinationS3OutputFormatAvroApacheAvro.CompressionCodec.DestinationS3OutputFormatAvroApacheAvroCompressionCodecZstandard.IncludeChecksum = types.BoolValue(*resp.Configuration.DestinationS3.Format.DestinationS3OutputFormatAvroApacheAvro.CompressionCodec.DestinationS3OutputFormatAvroApacheAvroCompressionCodecZstandard.IncludeChecksum)
				} else {
					r.Configuration.DestinationS3.Format.DestinationS3OutputFormatAvroApacheAvro.CompressionCodec.DestinationS3OutputFormatAvroApacheAvroCompressionCodecZstandard.IncludeChecksum = types.BoolNull()
				}
			}
			if resp.Configuration.DestinationS3.Format.DestinationS3OutputFormatAvroApacheAvro.CompressionCodec.DestinationS3OutputFormatAvroApacheAvroCompressionCodecSnappy != nil {
				r.Configuration.DestinationS3.Format.DestinationS3OutputFormatAvroApacheAvro.CompressionCodec.DestinationS3OutputFormatAvroApacheAvroCompressionCodecSnappy = &DestinationGcsOutputFormatAvroApacheAvroCompressionCodecSnappy{}
				r.Configuration.DestinationS3.Format.DestinationS3OutputFormatAvroApacheAvro.CompressionCodec.DestinationS3OutputFormatAvroApacheAvroCompressionCodecSnappy.Codec = types.StringValue(string(resp.Configuration.DestinationS3.Format.DestinationS3OutputFormatAvroApacheAvro.CompressionCodec.DestinationS3OutputFormatAvroApacheAvroCompressionCodecSnappy.Codec))
			}
			r.Configuration.DestinationS3.Format.DestinationS3OutputFormatAvroApacheAvro.FormatType = types.StringValue(string(resp.Configuration.DestinationS3.Format.DestinationS3OutputFormatAvroApacheAvro.FormatType))
		}
		if resp.Configuration.DestinationS3.Format.DestinationS3OutputFormatCSVCommaSeparatedValues != nil {
			r.Configuration.DestinationS3.Format.DestinationS3OutputFormatCSVCommaSeparatedValues = &DestinationS3OutputFormatCSVCommaSeparatedValues{}
			if resp.Configuration.DestinationS3.Format.DestinationS3OutputFormatCSVCommaSeparatedValues.Compression == nil {
				r.Configuration.DestinationS3.Format.DestinationS3OutputFormatCSVCommaSeparatedValues.Compression = nil
			} else {
				r.Configuration.DestinationS3.Format.DestinationS3OutputFormatCSVCommaSeparatedValues.Compression = &DestinationS3OutputFormatCSVCommaSeparatedValuesCompression{}
				if resp.Configuration.DestinationS3.Format.DestinationS3OutputFormatCSVCommaSeparatedValues.Compression.DestinationS3OutputFormatCSVCommaSeparatedValuesCompressionNoCompression != nil {
					r.Configuration.DestinationS3.Format.DestinationS3OutputFormatCSVCommaSeparatedValues.Compression.DestinationS3OutputFormatCSVCommaSeparatedValuesCompressionNoCompression = &DestinationGcsOutputFormatCSVCommaSeparatedValuesCompressionNoCompression{}
					if resp.Configuration.DestinationS3.Format.DestinationS3OutputFormatCSVCommaSeparatedValues.Compression.DestinationS3OutputFormatCSVCommaSeparatedValuesCompressionNoCompression.CompressionType != nil {
						r.Configuration.DestinationS3.Format.DestinationS3OutputFormatCSVCommaSeparatedValues.Compression.DestinationS3OutputFormatCSVCommaSeparatedValuesCompressionNoCompression.CompressionType = types.StringValue(string(*resp.Configuration.DestinationS3.Format.DestinationS3OutputFormatCSVCommaSeparatedValues.Compression.DestinationS3OutputFormatCSVCommaSeparatedValuesCompressionNoCompression.CompressionType))
					} else {
						r.Configuration.DestinationS3.Format.DestinationS3OutputFormatCSVCommaSeparatedValues.Compression.DestinationS3OutputFormatCSVCommaSeparatedValuesCompressionNoCompression.CompressionType = types.StringNull()
					}
				}
				if resp.Configuration.DestinationS3.Format.DestinationS3OutputFormatCSVCommaSeparatedValues.Compression.DestinationS3OutputFormatCSVCommaSeparatedValuesCompressionGZIP != nil {
					r.Configuration.DestinationS3.Format.DestinationS3OutputFormatCSVCommaSeparatedValues.Compression.DestinationS3OutputFormatCSVCommaSeparatedValuesCompressionGZIP = &DestinationGcsOutputFormatCSVCommaSeparatedValuesCompressionGZIP{}
					if resp.Configuration.DestinationS3.Format.DestinationS3OutputFormatCSVCommaSeparatedValues.Compression.DestinationS3OutputFormatCSVCommaSeparatedValuesCompressionGZIP.CompressionType != nil {
						r.Configuration.DestinationS3.Format.DestinationS3OutputFormatCSVCommaSeparatedValues.Compression.DestinationS3OutputFormatCSVCommaSeparatedValuesCompressionGZIP.CompressionType = types.StringValue(string(*resp.Configuration.DestinationS3.Format.DestinationS3OutputFormatCSVCommaSeparatedValues.Compression.DestinationS3OutputFormatCSVCommaSeparatedValuesCompressionGZIP.CompressionType))
					} else {
						r.Configuration.DestinationS3.Format.DestinationS3OutputFormatCSVCommaSeparatedValues.Compression.DestinationS3OutputFormatCSVCommaSeparatedValuesCompressionGZIP.CompressionType = types.StringNull()
					}
				}
			}
			r.Configuration.DestinationS3.Format.DestinationS3OutputFormatCSVCommaSeparatedValues.Flattening = types.StringValue(string(resp.Configuration.DestinationS3.Format.DestinationS3OutputFormatCSVCommaSeparatedValues.Flattening))
			r.Configuration.DestinationS3.Format.DestinationS3OutputFormatCSVCommaSeparatedValues.FormatType = types.StringValue(string(resp.Configuration.DestinationS3.Format.DestinationS3OutputFormatCSVCommaSeparatedValues.FormatType))
		}
		if resp.Configuration.DestinationS3.Format.DestinationS3OutputFormatJSONLinesNewlineDelimitedJSON != nil {
			r.Configuration.DestinationS3.Format.DestinationS3OutputFormatJSONLinesNewlineDelimitedJSON = &DestinationS3OutputFormatJSONLinesNewlineDelimitedJSON{}
			if resp.Configuration.DestinationS3.Format.DestinationS3OutputFormatJSONLinesNewlineDelimitedJSON.Compression == nil {
				r.Configuration.DestinationS3.Format.DestinationS3OutputFormatJSONLinesNewlineDelimitedJSON.Compression = nil
			} else {
				r.Configuration.DestinationS3.Format.DestinationS3OutputFormatJSONLinesNewlineDelimitedJSON.Compression = &DestinationS3OutputFormatJSONLinesNewlineDelimitedJSONCompression{}
				if resp.Configuration.DestinationS3.Format.DestinationS3OutputFormatJSONLinesNewlineDelimitedJSON.Compression.DestinationS3OutputFormatJSONLinesNewlineDelimitedJSONCompressionNoCompression != nil {
					r.Configuration.DestinationS3.Format.DestinationS3OutputFormatJSONLinesNewlineDelimitedJSON.Compression.DestinationS3OutputFormatJSONLinesNewlineDelimitedJSONCompressionNoCompression = &DestinationGcsOutputFormatJSONLinesNewlineDelimitedJSONCompressionNoCompression{}
					if resp.Configuration.DestinationS3.Format.DestinationS3OutputFormatJSONLinesNewlineDelimitedJSON.Compression.DestinationS3OutputFormatJSONLinesNewlineDelimitedJSONCompressionNoCompression.CompressionType != nil {
						r.Configuration.DestinationS3.Format.DestinationS3OutputFormatJSONLinesNewlineDelimitedJSON.Compression.DestinationS3OutputFormatJSONLinesNewlineDelimitedJSONCompressionNoCompression.CompressionType = types.StringValue(string(*resp.Configuration.DestinationS3.Format.DestinationS3OutputFormatJSONLinesNewlineDelimitedJSON.Compression.DestinationS3OutputFormatJSONLinesNewlineDelimitedJSONCompressionNoCompression.CompressionType))
					} else {
						r.Configuration.DestinationS3.Format.DestinationS3OutputFormatJSONLinesNewlineDelimitedJSON.Compression.DestinationS3OutputFormatJSONLinesNewlineDelimitedJSONCompressionNoCompression.CompressionType = types.StringNull()
					}
				}
				if resp.Configuration.DestinationS3.Format.DestinationS3OutputFormatJSONLinesNewlineDelimitedJSON.Compression.DestinationS3OutputFormatJSONLinesNewlineDelimitedJSONCompressionGZIP != nil {
					r.Configuration.DestinationS3.Format.DestinationS3OutputFormatJSONLinesNewlineDelimitedJSON.Compression.DestinationS3OutputFormatJSONLinesNewlineDelimitedJSONCompressionGZIP = &DestinationGcsOutputFormatJSONLinesNewlineDelimitedJSONCompressionGZIP{}
					if resp.Configuration.DestinationS3.Format.DestinationS3OutputFormatJSONLinesNewlineDelimitedJSON.Compression.DestinationS3OutputFormatJSONLinesNewlineDelimitedJSONCompressionGZIP.CompressionType != nil {
						r.Configuration.DestinationS3.Format.DestinationS3OutputFormatJSONLinesNewlineDelimitedJSON.Compression.DestinationS3OutputFormatJSONLinesNewlineDelimitedJSONCompressionGZIP.CompressionType = types.StringValue(string(*resp.Configuration.DestinationS3.Format.DestinationS3OutputFormatJSONLinesNewlineDelimitedJSON.Compression.DestinationS3OutputFormatJSONLinesNewlineDelimitedJSONCompressionGZIP.CompressionType))
					} else {
						r.Configuration.DestinationS3.Format.DestinationS3OutputFormatJSONLinesNewlineDelimitedJSON.Compression.DestinationS3OutputFormatJSONLinesNewlineDelimitedJSONCompressionGZIP.CompressionType = types.StringNull()
					}
				}
			}
			if resp.Configuration.DestinationS3.Format.DestinationS3OutputFormatJSONLinesNewlineDelimitedJSON.Flattening != nil {
				r.Configuration.DestinationS3.Format.DestinationS3OutputFormatJSONLinesNewlineDelimitedJSON.Flattening = types.StringValue(string(*resp.Configuration.DestinationS3.Format.DestinationS3OutputFormatJSONLinesNewlineDelimitedJSON.Flattening))
			} else {
				r.Configuration.DestinationS3.Format.DestinationS3OutputFormatJSONLinesNewlineDelimitedJSON.Flattening = types.StringNull()
			}
			r.Configuration.DestinationS3.Format.DestinationS3OutputFormatJSONLinesNewlineDelimitedJSON.FormatType = types.StringValue(string(resp.Configuration.DestinationS3.Format.DestinationS3OutputFormatJSONLinesNewlineDelimitedJSON.FormatType))
		}
		if resp.Configuration.DestinationS3.Format.DestinationS3OutputFormatParquetColumnarStorage != nil {
			r.Configuration.DestinationS3.Format.DestinationS3OutputFormatParquetColumnarStorage = &DestinationS3OutputFormatParquetColumnarStorage{}
			if resp.Configuration.DestinationS3.Format.DestinationS3OutputFormatParquetColumnarStorage.BlockSizeMb != nil {
				r.Configuration.DestinationS3.Format.DestinationS3OutputFormatParquetColumnarStorage.BlockSizeMb = types.Int64Value(*resp.Configuration.DestinationS3.Format.DestinationS3OutputFormatParquetColumnarStorage.BlockSizeMb)
			} else {
				r.Configuration.DestinationS3.Format.DestinationS3OutputFormatParquetColumnarStorage.BlockSizeMb = types.Int64Null()
			}
			if resp.Configuration.DestinationS3.Format.DestinationS3OutputFormatParquetColumnarStorage.CompressionCodec != nil {
				r.Configuration.DestinationS3.Format.DestinationS3OutputFormatParquetColumnarStorage.CompressionCodec = types.StringValue(string(*resp.Configuration.DestinationS3.Format.DestinationS3OutputFormatParquetColumnarStorage.CompressionCodec))
			} else {
				r.Configuration.DestinationS3.Format.DestinationS3OutputFormatParquetColumnarStorage.CompressionCodec = types.StringNull()
			}
			if resp.Configuration.DestinationS3.Format.DestinationS3OutputFormatParquetColumnarStorage.DictionaryEncoding != nil {
				r.Configuration.DestinationS3.Format.DestinationS3OutputFormatParquetColumnarStorage.DictionaryEncoding = types.BoolValue(*resp.Configuration.DestinationS3.Format.DestinationS3OutputFormatParquetColumnarStorage.DictionaryEncoding)
			} else {
				r.Configuration.DestinationS3.Format.DestinationS3OutputFormatParquetColumnarStorage.DictionaryEncoding = types.BoolNull()
			}
			if resp.Configuration.DestinationS3.Format.DestinationS3OutputFormatParquetColumnarStorage.DictionaryPageSizeKb != nil {
				r.Configuration.DestinationS3.Format.DestinationS3OutputFormatParquetColumnarStorage.DictionaryPageSizeKb = types.Int64Value(*resp.Configuration.DestinationS3.Format.DestinationS3OutputFormatParquetColumnarStorage.DictionaryPageSizeKb)
			} else {
				r.Configuration.DestinationS3.Format.DestinationS3OutputFormatParquetColumnarStorage.DictionaryPageSizeKb = types.Int64Null()
			}
			r.Configuration.DestinationS3.Format.DestinationS3OutputFormatParquetColumnarStorage.FormatType = types.StringValue(string(resp.Configuration.DestinationS3.Format.DestinationS3OutputFormatParquetColumnarStorage.FormatType))
			if resp.Configuration.DestinationS3.Format.DestinationS3OutputFormatParquetColumnarStorage.MaxPaddingSizeMb != nil {
				r.Configuration.DestinationS3.Format.DestinationS3OutputFormatParquetColumnarStorage.MaxPaddingSizeMb = types.Int64Value(*resp.Configuration.DestinationS3.Format.DestinationS3OutputFormatParquetColumnarStorage.MaxPaddingSizeMb)
			} else {
				r.Configuration.DestinationS3.Format.DestinationS3OutputFormatParquetColumnarStorage.MaxPaddingSizeMb = types.Int64Null()
			}
			if resp.Configuration.DestinationS3.Format.DestinationS3OutputFormatParquetColumnarStorage.PageSizeKb != nil {
				r.Configuration.DestinationS3.Format.DestinationS3OutputFormatParquetColumnarStorage.PageSizeKb = types.Int64Value(*resp.Configuration.DestinationS3.Format.DestinationS3OutputFormatParquetColumnarStorage.PageSizeKb)
			} else {
				r.Configuration.DestinationS3.Format.DestinationS3OutputFormatParquetColumnarStorage.PageSizeKb = types.Int64Null()
			}
		}
		r.Configuration.DestinationS3.S3BucketName = types.StringValue(resp.Configuration.DestinationS3.S3BucketName)
		r.Configuration.DestinationS3.S3BucketPath = types.StringValue(resp.Configuration.DestinationS3.S3BucketPath)
		r.Configuration.DestinationS3.S3BucketRegion = types.StringValue(string(resp.Configuration.DestinationS3.S3BucketRegion))
		if resp.Configuration.DestinationS3.S3Endpoint != nil {
			r.Configuration.DestinationS3.S3Endpoint = types.StringValue(*resp.Configuration.DestinationS3.S3Endpoint)
		} else {
			r.Configuration.DestinationS3.S3Endpoint = types.StringNull()
		}
		if resp.Configuration.DestinationS3.S3PathFormat != nil {
			r.Configuration.DestinationS3.S3PathFormat = types.StringValue(*resp.Configuration.DestinationS3.S3PathFormat)
		} else {
			r.Configuration.DestinationS3.S3PathFormat = types.StringNull()
		}
		if resp.Configuration.DestinationS3.SecretAccessKey != nil {
			r.Configuration.DestinationS3.SecretAccessKey = types.StringValue(*resp.Configuration.DestinationS3.SecretAccessKey)
		} else {
			r.Configuration.DestinationS3.SecretAccessKey = types.StringNull()
		}
	}
	if resp.Configuration.DestinationS3Glue != nil {
		r.Configuration.DestinationS3Glue = &DestinationS3Glue{}
		if resp.Configuration.DestinationS3Glue.AccessKeyID != nil {
			r.Configuration.DestinationS3Glue.AccessKeyID = types.StringValue(*resp.Configuration.DestinationS3Glue.AccessKeyID)
		} else {
			r.Configuration.DestinationS3Glue.AccessKeyID = types.StringNull()
		}
		r.Configuration.DestinationS3Glue.DestinationType = types.StringValue(string(resp.Configuration.DestinationS3Glue.DestinationType))
		if resp.Configuration.DestinationS3Glue.FileNamePattern != nil {
			r.Configuration.DestinationS3Glue.FileNamePattern = types.StringValue(*resp.Configuration.DestinationS3Glue.FileNamePattern)
		} else {
			r.Configuration.DestinationS3Glue.FileNamePattern = types.StringNull()
		}
		if resp.Configuration.DestinationS3Glue.Format.DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSON != nil {
			r.Configuration.DestinationS3Glue.Format.DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSON = &DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSON{}
			if resp.Configuration.DestinationS3Glue.Format.DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSON.Compression == nil {
				r.Configuration.DestinationS3Glue.Format.DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSON.Compression = nil
			} else {
				r.Configuration.DestinationS3Glue.Format.DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSON.Compression = &DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompression{}
				if resp.Configuration.DestinationS3Glue.Format.DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSON.Compression.DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompressionNoCompression != nil {
					r.Configuration.DestinationS3Glue.Format.DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSON.Compression.DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompressionNoCompression = &DestinationGcsOutputFormatJSONLinesNewlineDelimitedJSONCompressionNoCompression{}
					if resp.Configuration.DestinationS3Glue.Format.DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSON.Compression.DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompressionNoCompression.CompressionType != nil {
						r.Configuration.DestinationS3Glue.Format.DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSON.Compression.DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompressionNoCompression.CompressionType = types.StringValue(string(*resp.Configuration.DestinationS3Glue.Format.DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSON.Compression.DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompressionNoCompression.CompressionType))
					} else {
						r.Configuration.DestinationS3Glue.Format.DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSON.Compression.DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompressionNoCompression.CompressionType = types.StringNull()
					}
				}
				if resp.Configuration.DestinationS3Glue.Format.DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSON.Compression.DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompressionGZIP != nil {
					r.Configuration.DestinationS3Glue.Format.DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSON.Compression.DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompressionGZIP = &DestinationGcsOutputFormatJSONLinesNewlineDelimitedJSONCompressionGZIP{}
					if resp.Configuration.DestinationS3Glue.Format.DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSON.Compression.DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompressionGZIP.CompressionType != nil {
						r.Configuration.DestinationS3Glue.Format.DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSON.Compression.DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompressionGZIP.CompressionType = types.StringValue(string(*resp.Configuration.DestinationS3Glue.Format.DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSON.Compression.DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompressionGZIP.CompressionType))
					} else {
						r.Configuration.DestinationS3Glue.Format.DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSON.Compression.DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompressionGZIP.CompressionType = types.StringNull()
					}
				}
			}
			if resp.Configuration.DestinationS3Glue.Format.DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSON.FlattenData != nil {
				r.Configuration.DestinationS3Glue.Format.DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSON.FlattenData = types.BoolValue(*resp.Configuration.DestinationS3Glue.Format.DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSON.FlattenData)
			} else {
				r.Configuration.DestinationS3Glue.Format.DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSON.FlattenData = types.BoolNull()
			}
			r.Configuration.DestinationS3Glue.Format.DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSON.FormatType = types.StringValue(string(resp.Configuration.DestinationS3Glue.Format.DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSON.FormatType))
		}
		r.Configuration.DestinationS3Glue.GlueDatabase = types.StringValue(resp.Configuration.DestinationS3Glue.GlueDatabase)
		r.Configuration.DestinationS3Glue.GlueSerializationLibrary = types.StringValue(string(resp.Configuration.DestinationS3Glue.GlueSerializationLibrary))
		r.Configuration.DestinationS3Glue.S3BucketName = types.StringValue(resp.Configuration.DestinationS3Glue.S3BucketName)
		r.Configuration.DestinationS3Glue.S3BucketPath = types.StringValue(resp.Configuration.DestinationS3Glue.S3BucketPath)
		r.Configuration.DestinationS3Glue.S3BucketRegion = types.StringValue(string(resp.Configuration.DestinationS3Glue.S3BucketRegion))
		if resp.Configuration.DestinationS3Glue.S3Endpoint != nil {
			r.Configuration.DestinationS3Glue.S3Endpoint = types.StringValue(*resp.Configuration.DestinationS3Glue.S3Endpoint)
		} else {
			r.Configuration.DestinationS3Glue.S3Endpoint = types.StringNull()
		}
		if resp.Configuration.DestinationS3Glue.S3PathFormat != nil {
			r.Configuration.DestinationS3Glue.S3PathFormat = types.StringValue(*resp.Configuration.DestinationS3Glue.S3PathFormat)
		} else {
			r.Configuration.DestinationS3Glue.S3PathFormat = types.StringNull()
		}
		if resp.Configuration.DestinationS3Glue.SecretAccessKey != nil {
			r.Configuration.DestinationS3Glue.SecretAccessKey = types.StringValue(*resp.Configuration.DestinationS3Glue.SecretAccessKey)
		} else {
			r.Configuration.DestinationS3Glue.SecretAccessKey = types.StringNull()
		}
	}
	if resp.Configuration.DestinationScylla != nil {
		r.Configuration.DestinationScylla = &DestinationScylla{}
		r.Configuration.DestinationScylla.Address = types.StringValue(resp.Configuration.DestinationScylla.Address)
		r.Configuration.DestinationScylla.DestinationType = types.StringValue(string(resp.Configuration.DestinationScylla.DestinationType))
		r.Configuration.DestinationScylla.Keyspace = types.StringValue(resp.Configuration.DestinationScylla.Keyspace)
		r.Configuration.DestinationScylla.Password = types.StringValue(resp.Configuration.DestinationScylla.Password)
		r.Configuration.DestinationScylla.Port = types.Int64Value(resp.Configuration.DestinationScylla.Port)
		if resp.Configuration.DestinationScylla.Replication != nil {
			r.Configuration.DestinationScylla.Replication = types.Int64Value(*resp.Configuration.DestinationScylla.Replication)
		} else {
			r.Configuration.DestinationScylla.Replication = types.Int64Null()
		}
		r.Configuration.DestinationScylla.Username = types.StringValue(resp.Configuration.DestinationScylla.Username)
	}
	if resp.Configuration.DestinationSftpJSON != nil {
		r.Configuration.DestinationSftpJSON = &DestinationSftpJSON{}
		r.Configuration.DestinationSftpJSON.DestinationType = types.StringValue(string(resp.Configuration.DestinationSftpJSON.DestinationType))
		r.Configuration.DestinationSftpJSON.DestinationPath = types.StringValue(resp.Configuration.DestinationSftpJSON.DestinationPath)
		r.Configuration.DestinationSftpJSON.Host = types.StringValue(resp.Configuration.DestinationSftpJSON.Host)
		r.Configuration.DestinationSftpJSON.Password = types.StringValue(resp.Configuration.DestinationSftpJSON.Password)
		if resp.Configuration.DestinationSftpJSON.Port != nil {
			r.Configuration.DestinationSftpJSON.Port = types.Int64Value(*resp.Configuration.DestinationSftpJSON.Port)
		} else {
			r.Configuration.DestinationSftpJSON.Port = types.Int64Null()
		}
		r.Configuration.DestinationSftpJSON.Username = types.StringValue(resp.Configuration.DestinationSftpJSON.Username)
	}
	if resp.Configuration.DestinationSnowflake != nil {
		r.Configuration.DestinationSnowflake = &DestinationSnowflake{}
		if resp.Configuration.DestinationSnowflake.Credentials == nil {
			r.Configuration.DestinationSnowflake.Credentials = nil
		} else {
			r.Configuration.DestinationSnowflake.Credentials = &DestinationSnowflakeAuthorizationMethod{}
			if resp.Configuration.DestinationSnowflake.Credentials.DestinationSnowflakeAuthorizationMethodOAuth20 != nil {
				r.Configuration.DestinationSnowflake.Credentials.DestinationSnowflakeAuthorizationMethodOAuth20 = &DestinationSnowflakeAuthorizationMethodOAuth20{}
				r.Configuration.DestinationSnowflake.Credentials.DestinationSnowflakeAuthorizationMethodOAuth20.AccessToken = types.StringValue(resp.Configuration.DestinationSnowflake.Credentials.DestinationSnowflakeAuthorizationMethodOAuth20.AccessToken)
				if resp.Configuration.DestinationSnowflake.Credentials.DestinationSnowflakeAuthorizationMethodOAuth20.AuthType != nil {
					r.Configuration.DestinationSnowflake.Credentials.DestinationSnowflakeAuthorizationMethodOAuth20.AuthType = types.StringValue(string(*resp.Configuration.DestinationSnowflake.Credentials.DestinationSnowflakeAuthorizationMethodOAuth20.AuthType))
				} else {
					r.Configuration.DestinationSnowflake.Credentials.DestinationSnowflakeAuthorizationMethodOAuth20.AuthType = types.StringNull()
				}
				if resp.Configuration.DestinationSnowflake.Credentials.DestinationSnowflakeAuthorizationMethodOAuth20.ClientID != nil {
					r.Configuration.DestinationSnowflake.Credentials.DestinationSnowflakeAuthorizationMethodOAuth20.ClientID = types.StringValue(*resp.Configuration.DestinationSnowflake.Credentials.DestinationSnowflakeAuthorizationMethodOAuth20.ClientID)
				} else {
					r.Configuration.DestinationSnowflake.Credentials.DestinationSnowflakeAuthorizationMethodOAuth20.ClientID = types.StringNull()
				}
				if resp.Configuration.DestinationSnowflake.Credentials.DestinationSnowflakeAuthorizationMethodOAuth20.ClientSecret != nil {
					r.Configuration.DestinationSnowflake.Credentials.DestinationSnowflakeAuthorizationMethodOAuth20.ClientSecret = types.StringValue(*resp.Configuration.DestinationSnowflake.Credentials.DestinationSnowflakeAuthorizationMethodOAuth20.ClientSecret)
				} else {
					r.Configuration.DestinationSnowflake.Credentials.DestinationSnowflakeAuthorizationMethodOAuth20.ClientSecret = types.StringNull()
				}
				r.Configuration.DestinationSnowflake.Credentials.DestinationSnowflakeAuthorizationMethodOAuth20.RefreshToken = types.StringValue(resp.Configuration.DestinationSnowflake.Credentials.DestinationSnowflakeAuthorizationMethodOAuth20.RefreshToken)
			}
			if resp.Configuration.DestinationSnowflake.Credentials.DestinationSnowflakeAuthorizationMethodKeyPairAuthentication != nil {
				r.Configuration.DestinationSnowflake.Credentials.DestinationSnowflakeAuthorizationMethodKeyPairAuthentication = &DestinationSnowflakeAuthorizationMethodKeyPairAuthentication{}
				if resp.Configuration.DestinationSnowflake.Credentials.DestinationSnowflakeAuthorizationMethodKeyPairAuthentication.AuthType != nil {
					r.Configuration.DestinationSnowflake.Credentials.DestinationSnowflakeAuthorizationMethodKeyPairAuthentication.AuthType = types.StringValue(string(*resp.Configuration.DestinationSnowflake.Credentials.DestinationSnowflakeAuthorizationMethodKeyPairAuthentication.AuthType))
				} else {
					r.Configuration.DestinationSnowflake.Credentials.DestinationSnowflakeAuthorizationMethodKeyPairAuthentication.AuthType = types.StringNull()
				}
				r.Configuration.DestinationSnowflake.Credentials.DestinationSnowflakeAuthorizationMethodKeyPairAuthentication.PrivateKey = types.StringValue(resp.Configuration.DestinationSnowflake.Credentials.DestinationSnowflakeAuthorizationMethodKeyPairAuthentication.PrivateKey)
				if resp.Configuration.DestinationSnowflake.Credentials.DestinationSnowflakeAuthorizationMethodKeyPairAuthentication.PrivateKeyPassword != nil {
					r.Configuration.DestinationSnowflake.Credentials.DestinationSnowflakeAuthorizationMethodKeyPairAuthentication.PrivateKeyPassword = types.StringValue(*resp.Configuration.DestinationSnowflake.Credentials.DestinationSnowflakeAuthorizationMethodKeyPairAuthentication.PrivateKeyPassword)
				} else {
					r.Configuration.DestinationSnowflake.Credentials.DestinationSnowflakeAuthorizationMethodKeyPairAuthentication.PrivateKeyPassword = types.StringNull()
				}
			}
			if resp.Configuration.DestinationSnowflake.Credentials.DestinationSnowflakeAuthorizationMethodUsernameAndPassword != nil {
				r.Configuration.DestinationSnowflake.Credentials.DestinationSnowflakeAuthorizationMethodUsernameAndPassword = &DestinationSnowflakeAuthorizationMethodUsernameAndPassword{}
				if resp.Configuration.DestinationSnowflake.Credentials.DestinationSnowflakeAuthorizationMethodUsernameAndPassword.AuthType != nil {
					r.Configuration.DestinationSnowflake.Credentials.DestinationSnowflakeAuthorizationMethodUsernameAndPassword.AuthType = types.StringValue(string(*resp.Configuration.DestinationSnowflake.Credentials.DestinationSnowflakeAuthorizationMethodUsernameAndPassword.AuthType))
				} else {
					r.Configuration.DestinationSnowflake.Credentials.DestinationSnowflakeAuthorizationMethodUsernameAndPassword.AuthType = types.StringNull()
				}
				r.Configuration.DestinationSnowflake.Credentials.DestinationSnowflakeAuthorizationMethodUsernameAndPassword.Password = types.StringValue(resp.Configuration.DestinationSnowflake.Credentials.DestinationSnowflakeAuthorizationMethodUsernameAndPassword.Password)
			}
		}
		r.Configuration.DestinationSnowflake.Database = types.StringValue(resp.Configuration.DestinationSnowflake.Database)
		r.Configuration.DestinationSnowflake.DestinationType = types.StringValue(string(resp.Configuration.DestinationSnowflake.DestinationType))
		if resp.Configuration.DestinationSnowflake.FileBufferCount != nil {
			r.Configuration.DestinationSnowflake.FileBufferCount = types.Int64Value(*resp.Configuration.DestinationSnowflake.FileBufferCount)
		} else {
			r.Configuration.DestinationSnowflake.FileBufferCount = types.Int64Null()
		}
		r.Configuration.DestinationSnowflake.Host = types.StringValue(resp.Configuration.DestinationSnowflake.Host)
		if resp.Configuration.DestinationSnowflake.JdbcURLParams != nil {
			r.Configuration.DestinationSnowflake.JdbcURLParams = types.StringValue(*resp.Configuration.DestinationSnowflake.JdbcURLParams)
		} else {
			r.Configuration.DestinationSnowflake.JdbcURLParams = types.StringNull()
		}
		if resp.Configuration.DestinationSnowflake.LoadingMethod == nil {
			r.Configuration.DestinationSnowflake.LoadingMethod = nil
		} else {
			r.Configuration.DestinationSnowflake.LoadingMethod = &DestinationSnowflakeDataStagingMethod{}
			if resp.Configuration.DestinationSnowflake.LoadingMethod.DestinationSnowflakeDataStagingMethodSelectAnotherOption != nil {
				r.Configuration.DestinationSnowflake.LoadingMethod.DestinationSnowflakeDataStagingMethodSelectAnotherOption = &DestinationSnowflakeDataStagingMethodSelectAnotherOption{}
				r.Configuration.DestinationSnowflake.LoadingMethod.DestinationSnowflakeDataStagingMethodSelectAnotherOption.Method = types.StringValue(string(resp.Configuration.DestinationSnowflake.LoadingMethod.DestinationSnowflakeDataStagingMethodSelectAnotherOption.Method))
			}
			if resp.Configuration.DestinationSnowflake.LoadingMethod.DestinationSnowflakeDataStagingMethodRecommendedInternalStaging != nil {
				r.Configuration.DestinationSnowflake.LoadingMethod.DestinationSnowflakeDataStagingMethodRecommendedInternalStaging = &DestinationSnowflakeDataStagingMethodRecommendedInternalStaging{}
				r.Configuration.DestinationSnowflake.LoadingMethod.DestinationSnowflakeDataStagingMethodRecommendedInternalStaging.Method = types.StringValue(string(resp.Configuration.DestinationSnowflake.LoadingMethod.DestinationSnowflakeDataStagingMethodRecommendedInternalStaging.Method))
			}
			if resp.Configuration.DestinationSnowflake.LoadingMethod.DestinationSnowflakeDataStagingMethodAWSS3Staging != nil {
				r.Configuration.DestinationSnowflake.LoadingMethod.DestinationSnowflakeDataStagingMethodAWSS3Staging = &DestinationSnowflakeDataStagingMethodAWSS3Staging{}
				r.Configuration.DestinationSnowflake.LoadingMethod.DestinationSnowflakeDataStagingMethodAWSS3Staging.AccessKeyID = types.StringValue(resp.Configuration.DestinationSnowflake.LoadingMethod.DestinationSnowflakeDataStagingMethodAWSS3Staging.AccessKeyID)
				if resp.Configuration.DestinationSnowflake.LoadingMethod.DestinationSnowflakeDataStagingMethodAWSS3Staging.Encryption == nil {
					r.Configuration.DestinationSnowflake.LoadingMethod.DestinationSnowflakeDataStagingMethodAWSS3Staging.Encryption = nil
				} else {
					r.Configuration.DestinationSnowflake.LoadingMethod.DestinationSnowflakeDataStagingMethodAWSS3Staging.Encryption = &DestinationSnowflakeDataStagingMethodAWSS3StagingEncryption{}
					if resp.Configuration.DestinationSnowflake.LoadingMethod.DestinationSnowflakeDataStagingMethodAWSS3Staging.Encryption.DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionNoEncryption != nil {
						r.Configuration.DestinationSnowflake.LoadingMethod.DestinationSnowflakeDataStagingMethodAWSS3Staging.Encryption.DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionNoEncryption = &DestinationRedshiftUploadingMethodS3StagingEncryptionNoEncryption{}
						r.Configuration.DestinationSnowflake.LoadingMethod.DestinationSnowflakeDataStagingMethodAWSS3Staging.Encryption.DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionNoEncryption.EncryptionType = types.StringValue(string(resp.Configuration.DestinationSnowflake.LoadingMethod.DestinationSnowflakeDataStagingMethodAWSS3Staging.Encryption.DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionNoEncryption.EncryptionType))
					}
					if resp.Configuration.DestinationSnowflake.LoadingMethod.DestinationSnowflakeDataStagingMethodAWSS3Staging.Encryption.DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionAESCBCEnvelopeEncryption != nil {
						r.Configuration.DestinationSnowflake.LoadingMethod.DestinationSnowflakeDataStagingMethodAWSS3Staging.Encryption.DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionAESCBCEnvelopeEncryption = &DestinationRedshiftUploadingMethodS3StagingEncryptionAESCBCEnvelopeEncryption{}
						r.Configuration.DestinationSnowflake.LoadingMethod.DestinationSnowflakeDataStagingMethodAWSS3Staging.Encryption.DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionAESCBCEnvelopeEncryption.EncryptionType = types.StringValue(string(resp.Configuration.DestinationSnowflake.LoadingMethod.DestinationSnowflakeDataStagingMethodAWSS3Staging.Encryption.DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionAESCBCEnvelopeEncryption.EncryptionType))
						if resp.Configuration.DestinationSnowflake.LoadingMethod.DestinationSnowflakeDataStagingMethodAWSS3Staging.Encryption.DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionAESCBCEnvelopeEncryption.KeyEncryptingKey != nil {
							r.Configuration.DestinationSnowflake.LoadingMethod.DestinationSnowflakeDataStagingMethodAWSS3Staging.Encryption.DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionAESCBCEnvelopeEncryption.KeyEncryptingKey = types.StringValue(*resp.Configuration.DestinationSnowflake.LoadingMethod.DestinationSnowflakeDataStagingMethodAWSS3Staging.Encryption.DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionAESCBCEnvelopeEncryption.KeyEncryptingKey)
						} else {
							r.Configuration.DestinationSnowflake.LoadingMethod.DestinationSnowflakeDataStagingMethodAWSS3Staging.Encryption.DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionAESCBCEnvelopeEncryption.KeyEncryptingKey = types.StringNull()
						}
					}
				}
				if resp.Configuration.DestinationSnowflake.LoadingMethod.DestinationSnowflakeDataStagingMethodAWSS3Staging.FileNamePattern != nil {
					r.Configuration.DestinationSnowflake.LoadingMethod.DestinationSnowflakeDataStagingMethodAWSS3Staging.FileNamePattern = types.StringValue(*resp.Configuration.DestinationSnowflake.LoadingMethod.DestinationSnowflakeDataStagingMethodAWSS3Staging.FileNamePattern)
				} else {
					r.Configuration.DestinationSnowflake.LoadingMethod.DestinationSnowflakeDataStagingMethodAWSS3Staging.FileNamePattern = types.StringNull()
				}
				r.Configuration.DestinationSnowflake.LoadingMethod.DestinationSnowflakeDataStagingMethodAWSS3Staging.Method = types.StringValue(string(resp.Configuration.DestinationSnowflake.LoadingMethod.DestinationSnowflakeDataStagingMethodAWSS3Staging.Method))
				if resp.Configuration.DestinationSnowflake.LoadingMethod.DestinationSnowflakeDataStagingMethodAWSS3Staging.PurgeStagingData != nil {
					r.Configuration.DestinationSnowflake.LoadingMethod.DestinationSnowflakeDataStagingMethodAWSS3Staging.PurgeStagingData = types.BoolValue(*resp.Configuration.DestinationSnowflake.LoadingMethod.DestinationSnowflakeDataStagingMethodAWSS3Staging.PurgeStagingData)
				} else {
					r.Configuration.DestinationSnowflake.LoadingMethod.DestinationSnowflakeDataStagingMethodAWSS3Staging.PurgeStagingData = types.BoolNull()
				}
				r.Configuration.DestinationSnowflake.LoadingMethod.DestinationSnowflakeDataStagingMethodAWSS3Staging.S3BucketName = types.StringValue(resp.Configuration.DestinationSnowflake.LoadingMethod.DestinationSnowflakeDataStagingMethodAWSS3Staging.S3BucketName)
				if resp.Configuration.DestinationSnowflake.LoadingMethod.DestinationSnowflakeDataStagingMethodAWSS3Staging.S3BucketRegion != nil {
					r.Configuration.DestinationSnowflake.LoadingMethod.DestinationSnowflakeDataStagingMethodAWSS3Staging.S3BucketRegion = types.StringValue(string(*resp.Configuration.DestinationSnowflake.LoadingMethod.DestinationSnowflakeDataStagingMethodAWSS3Staging.S3BucketRegion))
				} else {
					r.Configuration.DestinationSnowflake.LoadingMethod.DestinationSnowflakeDataStagingMethodAWSS3Staging.S3BucketRegion = types.StringNull()
				}
				r.Configuration.DestinationSnowflake.LoadingMethod.DestinationSnowflakeDataStagingMethodAWSS3Staging.SecretAccessKey = types.StringValue(resp.Configuration.DestinationSnowflake.LoadingMethod.DestinationSnowflakeDataStagingMethodAWSS3Staging.SecretAccessKey)
			}
			if resp.Configuration.DestinationSnowflake.LoadingMethod.DestinationSnowflakeDataStagingMethodGoogleCloudStorageStaging != nil {
				r.Configuration.DestinationSnowflake.LoadingMethod.DestinationSnowflakeDataStagingMethodGoogleCloudStorageStaging = &DestinationSnowflakeDataStagingMethodGoogleCloudStorageStaging{}
				r.Configuration.DestinationSnowflake.LoadingMethod.DestinationSnowflakeDataStagingMethodGoogleCloudStorageStaging.BucketName = types.StringValue(resp.Configuration.DestinationSnowflake.LoadingMethod.DestinationSnowflakeDataStagingMethodGoogleCloudStorageStaging.BucketName)
				r.Configuration.DestinationSnowflake.LoadingMethod.DestinationSnowflakeDataStagingMethodGoogleCloudStorageStaging.CredentialsJSON = types.StringValue(resp.Configuration.DestinationSnowflake.LoadingMethod.DestinationSnowflakeDataStagingMethodGoogleCloudStorageStaging.CredentialsJSON)
				r.Configuration.DestinationSnowflake.LoadingMethod.DestinationSnowflakeDataStagingMethodGoogleCloudStorageStaging.Method = types.StringValue(string(resp.Configuration.DestinationSnowflake.LoadingMethod.DestinationSnowflakeDataStagingMethodGoogleCloudStorageStaging.Method))
				r.Configuration.DestinationSnowflake.LoadingMethod.DestinationSnowflakeDataStagingMethodGoogleCloudStorageStaging.ProjectID = types.StringValue(resp.Configuration.DestinationSnowflake.LoadingMethod.DestinationSnowflakeDataStagingMethodGoogleCloudStorageStaging.ProjectID)
			}
			if resp.Configuration.DestinationSnowflake.LoadingMethod.DestinationSnowflakeDataStagingMethodAzureBlobStorageStaging != nil {
				r.Configuration.DestinationSnowflake.LoadingMethod.DestinationSnowflakeDataStagingMethodAzureBlobStorageStaging = &DestinationSnowflakeDataStagingMethodAzureBlobStorageStaging{}
				r.Configuration.DestinationSnowflake.LoadingMethod.DestinationSnowflakeDataStagingMethodAzureBlobStorageStaging.AzureBlobStorageAccountName = types.StringValue(resp.Configuration.DestinationSnowflake.LoadingMethod.DestinationSnowflakeDataStagingMethodAzureBlobStorageStaging.AzureBlobStorageAccountName)
				r.Configuration.DestinationSnowflake.LoadingMethod.DestinationSnowflakeDataStagingMethodAzureBlobStorageStaging.AzureBlobStorageContainerName = types.StringValue(resp.Configuration.DestinationSnowflake.LoadingMethod.DestinationSnowflakeDataStagingMethodAzureBlobStorageStaging.AzureBlobStorageContainerName)
				if resp.Configuration.DestinationSnowflake.LoadingMethod.DestinationSnowflakeDataStagingMethodAzureBlobStorageStaging.AzureBlobStorageEndpointDomainName != nil {
					r.Configuration.DestinationSnowflake.LoadingMethod.DestinationSnowflakeDataStagingMethodAzureBlobStorageStaging.AzureBlobStorageEndpointDomainName = types.StringValue(*resp.Configuration.DestinationSnowflake.LoadingMethod.DestinationSnowflakeDataStagingMethodAzureBlobStorageStaging.AzureBlobStorageEndpointDomainName)
				} else {
					r.Configuration.DestinationSnowflake.LoadingMethod.DestinationSnowflakeDataStagingMethodAzureBlobStorageStaging.AzureBlobStorageEndpointDomainName = types.StringNull()
				}
				r.Configuration.DestinationSnowflake.LoadingMethod.DestinationSnowflakeDataStagingMethodAzureBlobStorageStaging.AzureBlobStorageSasToken = types.StringValue(resp.Configuration.DestinationSnowflake.LoadingMethod.DestinationSnowflakeDataStagingMethodAzureBlobStorageStaging.AzureBlobStorageSasToken)
				r.Configuration.DestinationSnowflake.LoadingMethod.DestinationSnowflakeDataStagingMethodAzureBlobStorageStaging.Method = types.StringValue(string(resp.Configuration.DestinationSnowflake.LoadingMethod.DestinationSnowflakeDataStagingMethodAzureBlobStorageStaging.Method))
			}
		}
		r.Configuration.DestinationSnowflake.Role = types.StringValue(resp.Configuration.DestinationSnowflake.Role)
		r.Configuration.DestinationSnowflake.Schema = types.StringValue(resp.Configuration.DestinationSnowflake.Schema)
		r.Configuration.DestinationSnowflake.Username = types.StringValue(resp.Configuration.DestinationSnowflake.Username)
		r.Configuration.DestinationSnowflake.Warehouse = types.StringValue(resp.Configuration.DestinationSnowflake.Warehouse)
	}
	if resp.Configuration.DestinationTypesense != nil {
		r.Configuration.DestinationTypesense = &DestinationTypesense{}
		r.Configuration.DestinationTypesense.APIKey = types.StringValue(resp.Configuration.DestinationTypesense.APIKey)
		if resp.Configuration.DestinationTypesense.BatchSize != nil {
			r.Configuration.DestinationTypesense.BatchSize = types.StringValue(*resp.Configuration.DestinationTypesense.BatchSize)
		} else {
			r.Configuration.DestinationTypesense.BatchSize = types.StringNull()
		}
		r.Configuration.DestinationTypesense.DestinationType = types.StringValue(string(resp.Configuration.DestinationTypesense.DestinationType))
		r.Configuration.DestinationTypesense.Host = types.StringValue(resp.Configuration.DestinationTypesense.Host)
		if resp.Configuration.DestinationTypesense.Port != nil {
			r.Configuration.DestinationTypesense.Port = types.StringValue(*resp.Configuration.DestinationTypesense.Port)
		} else {
			r.Configuration.DestinationTypesense.Port = types.StringNull()
		}
		if resp.Configuration.DestinationTypesense.Protocol != nil {
			r.Configuration.DestinationTypesense.Protocol = types.StringValue(*resp.Configuration.DestinationTypesense.Protocol)
		} else {
			r.Configuration.DestinationTypesense.Protocol = types.StringNull()
		}
	}
	r.Name = types.StringValue(resp.Name)
	r.WorkspaceID = types.StringValue(resp.WorkspaceID)

}
