// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"airbyte/internal/sdk/pkg/models/shared"
)

func (r *DestinationAwsDatalakeResourceModel) ToCreateSDKType() *shared.DestinationAwsDatalakeCreateRequest {
	awsAccountID := new(string)
	if !r.Configuration.AwsAccountID.IsUnknown() && !r.Configuration.AwsAccountID.IsNull() {
		*awsAccountID = r.Configuration.AwsAccountID.ValueString()
	} else {
		awsAccountID = nil
	}
	bucketName := r.Configuration.BucketName.ValueString()
	bucketPrefix := new(string)
	if !r.Configuration.BucketPrefix.IsUnknown() && !r.Configuration.BucketPrefix.IsNull() {
		*bucketPrefix = r.Configuration.BucketPrefix.ValueString()
	} else {
		bucketPrefix = nil
	}
	var credentials shared.DestinationAwsDatalakeAuthenticationMode
	var destinationAwsDatalakeAuthenticationModeIAMRole *shared.DestinationAwsDatalakeAuthenticationModeIAMRole
	if r.Configuration.Credentials.DestinationAwsDatalakeAuthenticationModeIAMRole != nil {
		credentialsTitle := shared.DestinationAwsDatalakeAuthenticationModeIAMRoleCredentialsTitleEnum(r.Configuration.Credentials.DestinationAwsDatalakeAuthenticationModeIAMRole.CredentialsTitle.ValueString())
		roleArn := r.Configuration.Credentials.DestinationAwsDatalakeAuthenticationModeIAMRole.RoleArn.ValueString()
		destinationAwsDatalakeAuthenticationModeIAMRole = &shared.DestinationAwsDatalakeAuthenticationModeIAMRole{
			CredentialsTitle: credentialsTitle,
			RoleArn:          roleArn,
		}
	}
	if destinationAwsDatalakeAuthenticationModeIAMRole != nil {
		credentials = shared.DestinationAwsDatalakeAuthenticationMode{
			DestinationAwsDatalakeAuthenticationModeIAMRole: destinationAwsDatalakeAuthenticationModeIAMRole,
		}
	}
	var destinationAwsDatalakeAuthenticationModeIAMUser *shared.DestinationAwsDatalakeAuthenticationModeIAMUser
	if r.Configuration.Credentials.DestinationAwsDatalakeAuthenticationModeIAMUser != nil {
		awsAccessKeyID := r.Configuration.Credentials.DestinationAwsDatalakeAuthenticationModeIAMUser.AwsAccessKeyID.ValueString()
		awsSecretAccessKey := r.Configuration.Credentials.DestinationAwsDatalakeAuthenticationModeIAMUser.AwsSecretAccessKey.ValueString()
		credentialsTitle1 := shared.DestinationAwsDatalakeAuthenticationModeIAMUserCredentialsTitleEnum(r.Configuration.Credentials.DestinationAwsDatalakeAuthenticationModeIAMUser.CredentialsTitle.ValueString())
		destinationAwsDatalakeAuthenticationModeIAMUser = &shared.DestinationAwsDatalakeAuthenticationModeIAMUser{
			AwsAccessKeyID:     awsAccessKeyID,
			AwsSecretAccessKey: awsSecretAccessKey,
			CredentialsTitle:   credentialsTitle1,
		}
	}
	if destinationAwsDatalakeAuthenticationModeIAMUser != nil {
		credentials = shared.DestinationAwsDatalakeAuthenticationMode{
			DestinationAwsDatalakeAuthenticationModeIAMUser: destinationAwsDatalakeAuthenticationModeIAMUser,
		}
	}
	destinationType := shared.DestinationAwsDatalakeAwsDatalakeEnum(r.Configuration.DestinationType.ValueString())
	var format *shared.DestinationAwsDatalakeOutputFormatWildcard
	var destinationAwsDatalakeOutputFormatWildcardJSONLinesNewlineDelimitedJSON *shared.DestinationAwsDatalakeOutputFormatWildcardJSONLinesNewlineDelimitedJSON
	if r.Configuration.Format.DestinationAwsDatalakeOutputFormatWildcardJSONLinesNewlineDelimitedJSON != nil {
		compressionCodec := new(shared.DestinationAwsDatalakeOutputFormatWildcardJSONLinesNewlineDelimitedJSONCompressionCodecOptionalEnum)
		if !r.Configuration.Format.DestinationAwsDatalakeOutputFormatWildcardJSONLinesNewlineDelimitedJSON.CompressionCodec.IsUnknown() && !r.Configuration.Format.DestinationAwsDatalakeOutputFormatWildcardJSONLinesNewlineDelimitedJSON.CompressionCodec.IsNull() {
			*compressionCodec = shared.DestinationAwsDatalakeOutputFormatWildcardJSONLinesNewlineDelimitedJSONCompressionCodecOptionalEnum(r.Configuration.Format.DestinationAwsDatalakeOutputFormatWildcardJSONLinesNewlineDelimitedJSON.CompressionCodec.ValueString())
		} else {
			compressionCodec = nil
		}
		formatType := shared.DestinationAwsDatalakeOutputFormatWildcardJSONLinesNewlineDelimitedJSONFormatTypeWildcardEnum(r.Configuration.Format.DestinationAwsDatalakeOutputFormatWildcardJSONLinesNewlineDelimitedJSON.FormatType.ValueString())
		destinationAwsDatalakeOutputFormatWildcardJSONLinesNewlineDelimitedJSON = &shared.DestinationAwsDatalakeOutputFormatWildcardJSONLinesNewlineDelimitedJSON{
			CompressionCodec: compressionCodec,
			FormatType:       formatType,
		}
	}
	if destinationAwsDatalakeOutputFormatWildcardJSONLinesNewlineDelimitedJSON != nil {
		format = &shared.DestinationAwsDatalakeOutputFormatWildcard{
			DestinationAwsDatalakeOutputFormatWildcardJSONLinesNewlineDelimitedJSON: destinationAwsDatalakeOutputFormatWildcardJSONLinesNewlineDelimitedJSON,
		}
	}
	var destinationAwsDatalakeOutputFormatWildcardParquetColumnarStorage *shared.DestinationAwsDatalakeOutputFormatWildcardParquetColumnarStorage
	if r.Configuration.Format.DestinationAwsDatalakeOutputFormatWildcardParquetColumnarStorage != nil {
		compressionCodec1 := new(shared.DestinationAwsDatalakeOutputFormatWildcardParquetColumnarStorageCompressionCodecOptionalEnum)
		if !r.Configuration.Format.DestinationAwsDatalakeOutputFormatWildcardParquetColumnarStorage.CompressionCodec.IsUnknown() && !r.Configuration.Format.DestinationAwsDatalakeOutputFormatWildcardParquetColumnarStorage.CompressionCodec.IsNull() {
			*compressionCodec1 = shared.DestinationAwsDatalakeOutputFormatWildcardParquetColumnarStorageCompressionCodecOptionalEnum(r.Configuration.Format.DestinationAwsDatalakeOutputFormatWildcardParquetColumnarStorage.CompressionCodec.ValueString())
		} else {
			compressionCodec1 = nil
		}
		formatType1 := shared.DestinationAwsDatalakeOutputFormatWildcardParquetColumnarStorageFormatTypeWildcardEnum(r.Configuration.Format.DestinationAwsDatalakeOutputFormatWildcardParquetColumnarStorage.FormatType.ValueString())
		destinationAwsDatalakeOutputFormatWildcardParquetColumnarStorage = &shared.DestinationAwsDatalakeOutputFormatWildcardParquetColumnarStorage{
			CompressionCodec: compressionCodec1,
			FormatType:       formatType1,
		}
	}
	if destinationAwsDatalakeOutputFormatWildcardParquetColumnarStorage != nil {
		format = &shared.DestinationAwsDatalakeOutputFormatWildcard{
			DestinationAwsDatalakeOutputFormatWildcardParquetColumnarStorage: destinationAwsDatalakeOutputFormatWildcardParquetColumnarStorage,
		}
	}
	glueCatalogFloatAsDecimal := new(bool)
	if !r.Configuration.GlueCatalogFloatAsDecimal.IsUnknown() && !r.Configuration.GlueCatalogFloatAsDecimal.IsNull() {
		*glueCatalogFloatAsDecimal = r.Configuration.GlueCatalogFloatAsDecimal.ValueBool()
	} else {
		glueCatalogFloatAsDecimal = nil
	}
	lakeformationDatabaseDefaultTagKey := new(string)
	if !r.Configuration.LakeformationDatabaseDefaultTagKey.IsUnknown() && !r.Configuration.LakeformationDatabaseDefaultTagKey.IsNull() {
		*lakeformationDatabaseDefaultTagKey = r.Configuration.LakeformationDatabaseDefaultTagKey.ValueString()
	} else {
		lakeformationDatabaseDefaultTagKey = nil
	}
	lakeformationDatabaseDefaultTagValues := new(string)
	if !r.Configuration.LakeformationDatabaseDefaultTagValues.IsUnknown() && !r.Configuration.LakeformationDatabaseDefaultTagValues.IsNull() {
		*lakeformationDatabaseDefaultTagValues = r.Configuration.LakeformationDatabaseDefaultTagValues.ValueString()
	} else {
		lakeformationDatabaseDefaultTagValues = nil
	}
	lakeformationDatabaseName := r.Configuration.LakeformationDatabaseName.ValueString()
	lakeformationGovernedTables := new(bool)
	if !r.Configuration.LakeformationGovernedTables.IsUnknown() && !r.Configuration.LakeformationGovernedTables.IsNull() {
		*lakeformationGovernedTables = r.Configuration.LakeformationGovernedTables.ValueBool()
	} else {
		lakeformationGovernedTables = nil
	}
	partitioning := new(shared.DestinationAwsDatalakeChooseHowToPartitionDataEnum)
	if !r.Configuration.Partitioning.IsUnknown() && !r.Configuration.Partitioning.IsNull() {
		*partitioning = shared.DestinationAwsDatalakeChooseHowToPartitionDataEnum(r.Configuration.Partitioning.ValueString())
	} else {
		partitioning = nil
	}
	region := shared.DestinationAwsDatalakeS3BucketRegionEnum(r.Configuration.Region.ValueString())
	configuration := shared.DestinationAwsDatalake{
		AwsAccountID:                          awsAccountID,
		BucketName:                            bucketName,
		BucketPrefix:                          bucketPrefix,
		Credentials:                           credentials,
		DestinationType:                       destinationType,
		Format:                                format,
		GlueCatalogFloatAsDecimal:             glueCatalogFloatAsDecimal,
		LakeformationDatabaseDefaultTagKey:    lakeformationDatabaseDefaultTagKey,
		LakeformationDatabaseDefaultTagValues: lakeformationDatabaseDefaultTagValues,
		LakeformationDatabaseName:             lakeformationDatabaseName,
		LakeformationGovernedTables:           lakeformationGovernedTables,
		Partitioning:                          partitioning,
		Region:                                region,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.DestinationAwsDatalakeCreateRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *DestinationAwsDatalakeResourceModel) ToDeleteSDKType() *shared.DestinationAwsDatalakeCreateRequest {
	out := r.ToCreateSDKType()
	return out
}
