// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"airbyte/internal/sdk/pkg/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *DestinationPulsarResourceModel) ToCreateSDKType() *shared.DestinationPulsarCreateRequest {
	batchingEnabled := r.Configuration.BatchingEnabled.ValueBool()
	batchingMaxMessages := r.Configuration.BatchingMaxMessages.ValueInt64()
	batchingMaxPublishDelay := r.Configuration.BatchingMaxPublishDelay.ValueInt64()
	blockIfQueueFull := r.Configuration.BlockIfQueueFull.ValueBool()
	brokers := r.Configuration.Brokers.ValueString()
	compressionType := shared.DestinationPulsarCompressionType(r.Configuration.CompressionType.ValueString())
	destinationType := shared.DestinationPulsarPulsar(r.Configuration.DestinationType.ValueString())
	maxPendingMessages := r.Configuration.MaxPendingMessages.ValueInt64()
	maxPendingMessagesAcrossPartitions := r.Configuration.MaxPendingMessagesAcrossPartitions.ValueInt64()
	producerName := new(string)
	if !r.Configuration.ProducerName.IsUnknown() && !r.Configuration.ProducerName.IsNull() {
		*producerName = r.Configuration.ProducerName.ValueString()
	} else {
		producerName = nil
	}
	producerSync := new(bool)
	if !r.Configuration.ProducerSync.IsUnknown() && !r.Configuration.ProducerSync.IsNull() {
		*producerSync = r.Configuration.ProducerSync.ValueBool()
	} else {
		producerSync = nil
	}
	sendTimeoutMs := r.Configuration.SendTimeoutMs.ValueInt64()
	topicNamespace := r.Configuration.TopicNamespace.ValueString()
	topicPattern := r.Configuration.TopicPattern.ValueString()
	topicTenant := r.Configuration.TopicTenant.ValueString()
	topicTest := new(string)
	if !r.Configuration.TopicTest.IsUnknown() && !r.Configuration.TopicTest.IsNull() {
		*topicTest = r.Configuration.TopicTest.ValueString()
	} else {
		topicTest = nil
	}
	topicType := shared.DestinationPulsarTopicType(r.Configuration.TopicType.ValueString())
	useTLS := r.Configuration.UseTLS.ValueBool()
	configuration := shared.DestinationPulsar{
		BatchingEnabled:                    batchingEnabled,
		BatchingMaxMessages:                batchingMaxMessages,
		BatchingMaxPublishDelay:            batchingMaxPublishDelay,
		BlockIfQueueFull:                   blockIfQueueFull,
		Brokers:                            brokers,
		CompressionType:                    compressionType,
		DestinationType:                    destinationType,
		MaxPendingMessages:                 maxPendingMessages,
		MaxPendingMessagesAcrossPartitions: maxPendingMessagesAcrossPartitions,
		ProducerName:                       producerName,
		ProducerSync:                       producerSync,
		SendTimeoutMs:                      sendTimeoutMs,
		TopicNamespace:                     topicNamespace,
		TopicPattern:                       topicPattern,
		TopicTenant:                        topicTenant,
		TopicTest:                          topicTest,
		TopicType:                          topicType,
		UseTLS:                             useTLS,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.DestinationPulsarCreateRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *DestinationPulsarResourceModel) ToDeleteSDKType() *shared.DestinationPulsarCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *DestinationPulsarResourceModel) RefreshFromCreateResponse(resp *shared.DestinationResponse) {
	r.DestinationID = types.StringValue(resp.DestinationID)
	r.DestinationType = types.StringValue(resp.DestinationType)
	r.Name = types.StringValue(resp.Name)
	r.WorkspaceID = types.StringValue(resp.WorkspaceID)
}
