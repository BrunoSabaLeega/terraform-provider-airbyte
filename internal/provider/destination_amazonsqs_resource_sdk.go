// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"airbyte/internal/sdk/pkg/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *DestinationAmazonSqsResourceModel) ToCreateSDKType() *shared.DestinationAmazonSqsCreateRequest {
	accessKey := new(string)
	if !r.Configuration.AccessKey.IsUnknown() && !r.Configuration.AccessKey.IsNull() {
		*accessKey = r.Configuration.AccessKey.ValueString()
	} else {
		accessKey = nil
	}
	destinationType := shared.DestinationAmazonSqsAmazonSqs(r.Configuration.DestinationType.ValueString())
	messageBodyKey := new(string)
	if !r.Configuration.MessageBodyKey.IsUnknown() && !r.Configuration.MessageBodyKey.IsNull() {
		*messageBodyKey = r.Configuration.MessageBodyKey.ValueString()
	} else {
		messageBodyKey = nil
	}
	messageDelay := new(int64)
	if !r.Configuration.MessageDelay.IsUnknown() && !r.Configuration.MessageDelay.IsNull() {
		*messageDelay = r.Configuration.MessageDelay.ValueInt64()
	} else {
		messageDelay = nil
	}
	messageGroupID := new(string)
	if !r.Configuration.MessageGroupID.IsUnknown() && !r.Configuration.MessageGroupID.IsNull() {
		*messageGroupID = r.Configuration.MessageGroupID.ValueString()
	} else {
		messageGroupID = nil
	}
	queueURL := r.Configuration.QueueURL.ValueString()
	region := shared.DestinationAmazonSqsAWSRegion(r.Configuration.Region.ValueString())
	secretKey := new(string)
	if !r.Configuration.SecretKey.IsUnknown() && !r.Configuration.SecretKey.IsNull() {
		*secretKey = r.Configuration.SecretKey.ValueString()
	} else {
		secretKey = nil
	}
	configuration := shared.DestinationAmazonSqs{
		AccessKey:       accessKey,
		DestinationType: destinationType,
		MessageBodyKey:  messageBodyKey,
		MessageDelay:    messageDelay,
		MessageGroupID:  messageGroupID,
		QueueURL:        queueURL,
		Region:          region,
		SecretKey:       secretKey,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.DestinationAmazonSqsCreateRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *DestinationAmazonSqsResourceModel) ToGetSDKType() *shared.DestinationAmazonSqsCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *DestinationAmazonSqsResourceModel) ToUpdateSDKType() *shared.DestinationAmazonSqsPutRequest {
	accessKey := new(string)
	if !r.Configuration.AccessKey.IsUnknown() && !r.Configuration.AccessKey.IsNull() {
		*accessKey = r.Configuration.AccessKey.ValueString()
	} else {
		accessKey = nil
	}
	messageBodyKey := new(string)
	if !r.Configuration.MessageBodyKey.IsUnknown() && !r.Configuration.MessageBodyKey.IsNull() {
		*messageBodyKey = r.Configuration.MessageBodyKey.ValueString()
	} else {
		messageBodyKey = nil
	}
	messageDelay := new(int64)
	if !r.Configuration.MessageDelay.IsUnknown() && !r.Configuration.MessageDelay.IsNull() {
		*messageDelay = r.Configuration.MessageDelay.ValueInt64()
	} else {
		messageDelay = nil
	}
	messageGroupID := new(string)
	if !r.Configuration.MessageGroupID.IsUnknown() && !r.Configuration.MessageGroupID.IsNull() {
		*messageGroupID = r.Configuration.MessageGroupID.ValueString()
	} else {
		messageGroupID = nil
	}
	queueURL := r.Configuration.QueueURL.ValueString()
	region := shared.DestinationAmazonSqsUpdateAWSRegion(r.Configuration.Region.ValueString())
	secretKey := new(string)
	if !r.Configuration.SecretKey.IsUnknown() && !r.Configuration.SecretKey.IsNull() {
		*secretKey = r.Configuration.SecretKey.ValueString()
	} else {
		secretKey = nil
	}
	configuration := shared.DestinationAmazonSqsUpdate{
		AccessKey:      accessKey,
		MessageBodyKey: messageBodyKey,
		MessageDelay:   messageDelay,
		MessageGroupID: messageGroupID,
		QueueURL:       queueURL,
		Region:         region,
		SecretKey:      secretKey,
	}
	name := r.Name.ValueString()
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.DestinationAmazonSqsPutRequest{
		Configuration: configuration,
		Name:          name,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *DestinationAmazonSqsResourceModel) ToDeleteSDKType() *shared.DestinationAmazonSqsCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *DestinationAmazonSqsResourceModel) RefreshFromGetResponse(resp *shared.DestinationResponse) {
	r.DestinationID = types.StringValue(resp.DestinationID)
	r.DestinationType = types.StringValue(resp.DestinationType)
	r.Name = types.StringValue(resp.Name)
	r.WorkspaceID = types.StringValue(resp.WorkspaceID)
}

func (r *DestinationAmazonSqsResourceModel) RefreshFromCreateResponse(resp *shared.DestinationResponse) {
	r.RefreshFromGetResponse(resp)
}
