// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"airbyte/internal/sdk/pkg/models/shared"
	"time"
)

func (r *SourceStravaResourceModel) ToCreateSDKType() *shared.SourceStravaCreateRequest {
	athleteID := r.Configuration.AthleteID.ValueInt64()
	authType := new(shared.SourceStravaAuthTypeEnum)
	if !r.Configuration.AuthType.IsUnknown() && !r.Configuration.AuthType.IsNull() {
		*authType = shared.SourceStravaAuthTypeEnum(r.Configuration.AuthType.ValueString())
	} else {
		authType = nil
	}
	clientID := r.Configuration.ClientID.ValueString()
	clientSecret := r.Configuration.ClientSecret.ValueString()
	refreshToken := r.Configuration.RefreshToken.ValueString()
	sourceType := shared.SourceStravaStravaEnum(r.Configuration.SourceType.ValueString())
	startDate, _ := time.Parse(time.RFC3339Nano, r.Configuration.StartDate.ValueString())
	configuration := shared.SourceStrava{
		AthleteID:    athleteID,
		AuthType:     authType,
		ClientID:     clientID,
		ClientSecret: clientSecret,
		RefreshToken: refreshToken,
		SourceType:   sourceType,
		StartDate:    startDate,
	}
	name := r.Name.ValueString()
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceStravaCreateRequest{
		Configuration: configuration,
		Name:          name,
		SecretID:      secretID,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceStravaResourceModel) ToDeleteSDKType() *shared.SourceStravaCreateRequest {
	out := r.ToCreateSDKType()
	return out
}
