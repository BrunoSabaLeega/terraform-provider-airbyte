// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"airbyte/internal/sdk/pkg/models/shared"
	"encoding/json"
)

func (r *SourceRetentlyResourceModel) ToCreateSDKType() *shared.SourceRetentlyCreateRequest {
	var credentials *shared.SourceRetentlyAuthenticationMechanism
	var sourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth *shared.SourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth
	if r.Configuration.Credentials.SourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth != nil {
		authType := new(shared.SourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuthAuthTypeEnum)
		if !r.Configuration.Credentials.SourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth.AuthType.IsUnknown() && !r.Configuration.Credentials.SourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth.AuthType.IsNull() {
			*authType = shared.SourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuthAuthTypeEnum(r.Configuration.Credentials.SourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth.AuthType.ValueString())
		} else {
			authType = nil
		}
		clientID := r.Configuration.Credentials.SourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth.ClientID.ValueString()
		clientSecret := r.Configuration.Credentials.SourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth.ClientSecret.ValueString()
		refreshToken := r.Configuration.Credentials.SourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth.RefreshToken.ValueString()
		additionalProperties := make(map[string]interface{})
		for additionalPropertiesKey, additionalPropertiesValue := range r.Configuration.Credentials.SourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth.AdditionalProperties {
			var additionalPropertiesInst interface{}
			_ = json.Unmarshal([]byte(additionalPropertiesValue.ValueString()), &additionalPropertiesInst)
			additionalProperties[additionalPropertiesKey] = additionalPropertiesInst
		}
		sourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth = &shared.SourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth{
			AuthType:             authType,
			ClientID:             clientID,
			ClientSecret:         clientSecret,
			RefreshToken:         refreshToken,
			AdditionalProperties: additionalProperties,
		}
	}
	if sourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth != nil {
		credentials = &shared.SourceRetentlyAuthenticationMechanism{
			SourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth: sourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth,
		}
	}
	var sourceRetentlyAuthenticationMechanismAuthenticateWithAPIToken *shared.SourceRetentlyAuthenticationMechanismAuthenticateWithAPIToken
	if r.Configuration.Credentials.SourceRetentlyAuthenticationMechanismAuthenticateWithAPIToken != nil {
		apiKey := r.Configuration.Credentials.SourceRetentlyAuthenticationMechanismAuthenticateWithAPIToken.APIKey.ValueString()
		authType1 := new(shared.SourceRetentlyAuthenticationMechanismAuthenticateWithAPITokenAuthTypeEnum)
		if !r.Configuration.Credentials.SourceRetentlyAuthenticationMechanismAuthenticateWithAPIToken.AuthType.IsUnknown() && !r.Configuration.Credentials.SourceRetentlyAuthenticationMechanismAuthenticateWithAPIToken.AuthType.IsNull() {
			*authType1 = shared.SourceRetentlyAuthenticationMechanismAuthenticateWithAPITokenAuthTypeEnum(r.Configuration.Credentials.SourceRetentlyAuthenticationMechanismAuthenticateWithAPIToken.AuthType.ValueString())
		} else {
			authType1 = nil
		}
		additionalProperties1 := make(map[string]interface{})
		for additionalPropertiesKey1, additionalPropertiesValue1 := range r.Configuration.Credentials.SourceRetentlyAuthenticationMechanismAuthenticateWithAPIToken.AdditionalProperties {
			var additionalPropertiesInst1 interface{}
			_ = json.Unmarshal([]byte(additionalPropertiesValue1.ValueString()), &additionalPropertiesInst1)
			additionalProperties1[additionalPropertiesKey1] = additionalPropertiesInst1
		}
		sourceRetentlyAuthenticationMechanismAuthenticateWithAPIToken = &shared.SourceRetentlyAuthenticationMechanismAuthenticateWithAPIToken{
			APIKey:               apiKey,
			AuthType:             authType1,
			AdditionalProperties: additionalProperties1,
		}
	}
	if sourceRetentlyAuthenticationMechanismAuthenticateWithAPIToken != nil {
		credentials = &shared.SourceRetentlyAuthenticationMechanism{
			SourceRetentlyAuthenticationMechanismAuthenticateWithAPIToken: sourceRetentlyAuthenticationMechanismAuthenticateWithAPIToken,
		}
	}
	sourceType := shared.SourceRetentlyRetentlyEnum(r.Configuration.SourceType.ValueString())
	configuration := shared.SourceRetently{
		Credentials: credentials,
		SourceType:  sourceType,
	}
	name := r.Name.ValueString()
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceRetentlyCreateRequest{
		Configuration: configuration,
		Name:          name,
		SecretID:      secretID,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceRetentlyResourceModel) ToDeleteSDKType() *shared.SourceRetentlyCreateRequest {
	out := r.ToCreateSDKType()
	return out
}
