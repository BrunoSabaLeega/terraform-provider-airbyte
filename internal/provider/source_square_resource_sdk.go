// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"airbyte/internal/sdk/pkg/models/shared"
	customTypes "airbyte/internal/sdk/pkg/types"
)

func (r *SourceSquareResourceModel) ToCreateSDKType() *shared.SourceSquareCreateRequest {
	var credentials *shared.SourceSquareAuthentication
	var sourceSquareAuthenticationOauthAuthentication *shared.SourceSquareAuthenticationOauthAuthentication
	if r.Configuration.Credentials.SourceSquareAuthenticationOauthAuthentication != nil {
		authType := shared.SourceSquareAuthenticationOauthAuthenticationAuthTypeEnum(r.Configuration.Credentials.SourceSquareAuthenticationOauthAuthentication.AuthType.ValueString())
		clientID := r.Configuration.Credentials.SourceSquareAuthenticationOauthAuthentication.ClientID.ValueString()
		clientSecret := r.Configuration.Credentials.SourceSquareAuthenticationOauthAuthentication.ClientSecret.ValueString()
		refreshToken := r.Configuration.Credentials.SourceSquareAuthenticationOauthAuthentication.RefreshToken.ValueString()
		sourceSquareAuthenticationOauthAuthentication = &shared.SourceSquareAuthenticationOauthAuthentication{
			AuthType:     authType,
			ClientID:     clientID,
			ClientSecret: clientSecret,
			RefreshToken: refreshToken,
		}
	}
	if sourceSquareAuthenticationOauthAuthentication != nil {
		credentials = &shared.SourceSquareAuthentication{
			SourceSquareAuthenticationOauthAuthentication: sourceSquareAuthenticationOauthAuthentication,
		}
	}
	var sourceSquareAuthenticationAPIKey *shared.SourceSquareAuthenticationAPIKey
	if r.Configuration.Credentials.SourceSquareAuthenticationAPIKey != nil {
		apiKey := r.Configuration.Credentials.SourceSquareAuthenticationAPIKey.APIKey.ValueString()
		authType1 := shared.SourceSquareAuthenticationAPIKeyAuthTypeEnum(r.Configuration.Credentials.SourceSquareAuthenticationAPIKey.AuthType.ValueString())
		sourceSquareAuthenticationAPIKey = &shared.SourceSquareAuthenticationAPIKey{
			APIKey:   apiKey,
			AuthType: authType1,
		}
	}
	if sourceSquareAuthenticationAPIKey != nil {
		credentials = &shared.SourceSquareAuthentication{
			SourceSquareAuthenticationAPIKey: sourceSquareAuthenticationAPIKey,
		}
	}
	includeDeletedObjects := new(bool)
	if !r.Configuration.IncludeDeletedObjects.IsUnknown() && !r.Configuration.IncludeDeletedObjects.IsNull() {
		*includeDeletedObjects = r.Configuration.IncludeDeletedObjects.ValueBool()
	} else {
		includeDeletedObjects = nil
	}
	isSandbox := r.Configuration.IsSandbox.ValueBool()
	sourceType := shared.SourceSquareSquareEnum(r.Configuration.SourceType.ValueString())
	startDate := new(customTypes.Date)
	if !r.Configuration.StartDate.IsUnknown() && !r.Configuration.StartDate.IsNull() {
		*startDate, _ = customTypes.NewDate(r.Configuration.StartDate.ValueString())
	} else {
		startDate = nil
	}
	configuration := shared.SourceSquare{
		Credentials:           credentials,
		IncludeDeletedObjects: includeDeletedObjects,
		IsSandbox:             isSandbox,
		SourceType:            sourceType,
		StartDate:             startDate,
	}
	name := r.Name.ValueString()
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceSquareCreateRequest{
		Configuration: configuration,
		Name:          name,
		SecretID:      secretID,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceSquareResourceModel) ToDeleteSDKType() *shared.SourceSquareCreateRequest {
	out := r.ToCreateSDKType()
	return out
}
