// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"airbyte/internal/sdk/pkg/models/shared"
)

func (r *SourceLinkedinPagesResourceModel) ToCreateSDKType() *shared.SourceLinkedinPagesCreateRequest {
	var credentials *shared.SourceLinkedinPagesAuthentication
	var sourceLinkedinPagesAuthenticationOAuth20 *shared.SourceLinkedinPagesAuthenticationOAuth20
	if r.Configuration.Credentials.SourceLinkedinPagesAuthenticationOAuth20 != nil {
		authMethod := new(shared.SourceLinkedinPagesAuthenticationOAuth20AuthMethodEnum)
		if !r.Configuration.Credentials.SourceLinkedinPagesAuthenticationOAuth20.AuthMethod.IsUnknown() && !r.Configuration.Credentials.SourceLinkedinPagesAuthenticationOAuth20.AuthMethod.IsNull() {
			*authMethod = shared.SourceLinkedinPagesAuthenticationOAuth20AuthMethodEnum(r.Configuration.Credentials.SourceLinkedinPagesAuthenticationOAuth20.AuthMethod.ValueString())
		} else {
			authMethod = nil
		}
		clientID := r.Configuration.Credentials.SourceLinkedinPagesAuthenticationOAuth20.ClientID.ValueString()
		clientSecret := r.Configuration.Credentials.SourceLinkedinPagesAuthenticationOAuth20.ClientSecret.ValueString()
		refreshToken := r.Configuration.Credentials.SourceLinkedinPagesAuthenticationOAuth20.RefreshToken.ValueString()
		sourceLinkedinPagesAuthenticationOAuth20 = &shared.SourceLinkedinPagesAuthenticationOAuth20{
			AuthMethod:   authMethod,
			ClientID:     clientID,
			ClientSecret: clientSecret,
			RefreshToken: refreshToken,
		}
	}
	if sourceLinkedinPagesAuthenticationOAuth20 != nil {
		credentials = &shared.SourceLinkedinPagesAuthentication{
			SourceLinkedinPagesAuthenticationOAuth20: sourceLinkedinPagesAuthenticationOAuth20,
		}
	}
	var sourceLinkedinPagesAuthenticationAccessToken *shared.SourceLinkedinPagesAuthenticationAccessToken
	if r.Configuration.Credentials.SourceLinkedinPagesAuthenticationAccessToken != nil {
		accessToken := r.Configuration.Credentials.SourceLinkedinPagesAuthenticationAccessToken.AccessToken.ValueString()
		authMethod1 := new(shared.SourceLinkedinPagesAuthenticationAccessTokenAuthMethodEnum)
		if !r.Configuration.Credentials.SourceLinkedinPagesAuthenticationAccessToken.AuthMethod.IsUnknown() && !r.Configuration.Credentials.SourceLinkedinPagesAuthenticationAccessToken.AuthMethod.IsNull() {
			*authMethod1 = shared.SourceLinkedinPagesAuthenticationAccessTokenAuthMethodEnum(r.Configuration.Credentials.SourceLinkedinPagesAuthenticationAccessToken.AuthMethod.ValueString())
		} else {
			authMethod1 = nil
		}
		sourceLinkedinPagesAuthenticationAccessToken = &shared.SourceLinkedinPagesAuthenticationAccessToken{
			AccessToken: accessToken,
			AuthMethod:  authMethod1,
		}
	}
	if sourceLinkedinPagesAuthenticationAccessToken != nil {
		credentials = &shared.SourceLinkedinPagesAuthentication{
			SourceLinkedinPagesAuthenticationAccessToken: sourceLinkedinPagesAuthenticationAccessToken,
		}
	}
	orgID := r.Configuration.OrgID.ValueString()
	sourceType := shared.SourceLinkedinPagesLinkedinPagesEnum(r.Configuration.SourceType.ValueString())
	configuration := shared.SourceLinkedinPages{
		Credentials: credentials,
		OrgID:       orgID,
		SourceType:  sourceType,
	}
	name := r.Name.ValueString()
	secretID := new(string)
	if !r.SecretID.IsUnknown() && !r.SecretID.IsNull() {
		*secretID = r.SecretID.ValueString()
	} else {
		secretID = nil
	}
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.SourceLinkedinPagesCreateRequest{
		Configuration: configuration,
		Name:          name,
		SecretID:      secretID,
		WorkspaceID:   workspaceID,
	}
	return &out
}

func (r *SourceLinkedinPagesResourceModel) ToDeleteSDKType() *shared.SourceLinkedinPagesCreateRequest {
	out := r.ToCreateSDKType()
	return out
}
