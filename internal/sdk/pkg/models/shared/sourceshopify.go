// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

type SourceShopifyShopifyAuthorizationMethodOAuth20AuthMethodEnum string

const (
	SourceShopifyShopifyAuthorizationMethodOAuth20AuthMethodEnumOauth20 SourceShopifyShopifyAuthorizationMethodOAuth20AuthMethodEnum = "oauth2.0"
)

func (e *SourceShopifyShopifyAuthorizationMethodOAuth20AuthMethodEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "oauth2.0":
		*e = SourceShopifyShopifyAuthorizationMethodOAuth20AuthMethodEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceShopifyShopifyAuthorizationMethodOAuth20AuthMethodEnum: %s", s)
	}
}

// SourceShopifyShopifyAuthorizationMethodOAuth20 - OAuth2.0
type SourceShopifyShopifyAuthorizationMethodOAuth20 struct {
	// The Access Token for making authenticated requests.
	AccessToken *string                                                      `json:"access_token,omitempty"`
	AuthMethod  SourceShopifyShopifyAuthorizationMethodOAuth20AuthMethodEnum `json:"auth_method"`
	// The Client ID of the Shopify developer application.
	ClientID *string `json:"client_id,omitempty"`
	// The Client Secret of the Shopify developer application.
	ClientSecret *string `json:"client_secret,omitempty"`
}

type SourceShopifyShopifyAuthorizationMethodAPIPasswordAuthMethodEnum string

const (
	SourceShopifyShopifyAuthorizationMethodAPIPasswordAuthMethodEnumAPIPassword SourceShopifyShopifyAuthorizationMethodAPIPasswordAuthMethodEnum = "api_password"
)

func (e *SourceShopifyShopifyAuthorizationMethodAPIPasswordAuthMethodEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "api_password":
		*e = SourceShopifyShopifyAuthorizationMethodAPIPasswordAuthMethodEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceShopifyShopifyAuthorizationMethodAPIPasswordAuthMethodEnum: %s", s)
	}
}

// SourceShopifyShopifyAuthorizationMethodAPIPassword - API Password Auth
type SourceShopifyShopifyAuthorizationMethodAPIPassword struct {
	// The API Password for your private application in the `Shopify` store.
	APIPassword string                                                           `json:"api_password"`
	AuthMethod  SourceShopifyShopifyAuthorizationMethodAPIPasswordAuthMethodEnum `json:"auth_method"`
}

type SourceShopifyShopifyAuthorizationMethodType string

const (
	SourceShopifyShopifyAuthorizationMethodTypeSourceShopifyShopifyAuthorizationMethodAPIPassword SourceShopifyShopifyAuthorizationMethodType = "source-shopify_Shopify Authorization Method_API Password"
	SourceShopifyShopifyAuthorizationMethodTypeSourceShopifyShopifyAuthorizationMethodOAuth20     SourceShopifyShopifyAuthorizationMethodType = "source-shopify_Shopify Authorization Method_OAuth2.0"
)

type SourceShopifyShopifyAuthorizationMethod struct {
	SourceShopifyShopifyAuthorizationMethodAPIPassword *SourceShopifyShopifyAuthorizationMethodAPIPassword
	SourceShopifyShopifyAuthorizationMethodOAuth20     *SourceShopifyShopifyAuthorizationMethodOAuth20

	Type SourceShopifyShopifyAuthorizationMethodType
}

func CreateSourceShopifyShopifyAuthorizationMethodSourceShopifyShopifyAuthorizationMethodAPIPassword(sourceShopifyShopifyAuthorizationMethodAPIPassword SourceShopifyShopifyAuthorizationMethodAPIPassword) SourceShopifyShopifyAuthorizationMethod {
	typ := SourceShopifyShopifyAuthorizationMethodTypeSourceShopifyShopifyAuthorizationMethodAPIPassword

	return SourceShopifyShopifyAuthorizationMethod{
		SourceShopifyShopifyAuthorizationMethodAPIPassword: &sourceShopifyShopifyAuthorizationMethodAPIPassword,
		Type: typ,
	}
}

func CreateSourceShopifyShopifyAuthorizationMethodSourceShopifyShopifyAuthorizationMethodOAuth20(sourceShopifyShopifyAuthorizationMethodOAuth20 SourceShopifyShopifyAuthorizationMethodOAuth20) SourceShopifyShopifyAuthorizationMethod {
	typ := SourceShopifyShopifyAuthorizationMethodTypeSourceShopifyShopifyAuthorizationMethodOAuth20

	return SourceShopifyShopifyAuthorizationMethod{
		SourceShopifyShopifyAuthorizationMethodOAuth20: &sourceShopifyShopifyAuthorizationMethodOAuth20,
		Type: typ,
	}
}

func (u *SourceShopifyShopifyAuthorizationMethod) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	sourceShopifyShopifyAuthorizationMethodAPIPassword := new(SourceShopifyShopifyAuthorizationMethodAPIPassword)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceShopifyShopifyAuthorizationMethodAPIPassword); err == nil {
		u.SourceShopifyShopifyAuthorizationMethodAPIPassword = sourceShopifyShopifyAuthorizationMethodAPIPassword
		u.Type = SourceShopifyShopifyAuthorizationMethodTypeSourceShopifyShopifyAuthorizationMethodAPIPassword
		return nil
	}

	sourceShopifyShopifyAuthorizationMethodOAuth20 := new(SourceShopifyShopifyAuthorizationMethodOAuth20)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceShopifyShopifyAuthorizationMethodOAuth20); err == nil {
		u.SourceShopifyShopifyAuthorizationMethodOAuth20 = sourceShopifyShopifyAuthorizationMethodOAuth20
		u.Type = SourceShopifyShopifyAuthorizationMethodTypeSourceShopifyShopifyAuthorizationMethodOAuth20
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceShopifyShopifyAuthorizationMethod) MarshalJSON() ([]byte, error) {
	if u.SourceShopifyShopifyAuthorizationMethodAPIPassword != nil {
		return json.Marshal(u.SourceShopifyShopifyAuthorizationMethodAPIPassword)
	}

	if u.SourceShopifyShopifyAuthorizationMethodOAuth20 != nil {
		return json.Marshal(u.SourceShopifyShopifyAuthorizationMethodOAuth20)
	}

	return nil, nil
}

type SourceShopifyShopifyEnum string

const (
	SourceShopifyShopifyEnumShopify SourceShopifyShopifyEnum = "shopify"
)

func (e *SourceShopifyShopifyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "shopify":
		*e = SourceShopifyShopifyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceShopifyShopifyEnum: %s", s)
	}
}

// SourceShopify - The values required to configure the source.
type SourceShopify struct {
	// The authorization method to use to retrieve data from Shopify
	Credentials *SourceShopifyShopifyAuthorizationMethod `json:"credentials,omitempty"`
	// The name of your Shopify store found in the URL. For example, if your URL was https://NAME.myshopify.com, then the name would be 'NAME'.
	Shop       string                   `json:"shop"`
	SourceType SourceShopifyShopifyEnum `json:"sourceType"`
	// The date you would like to replicate data from. Format: YYYY-MM-DD. Any data before this date will not be replicated.
	StartDate string `json:"start_date"`
}
