// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// SourceOpenweatherLanguageEnum - You can use lang parameter to get the output in your language. The contents of the description field will be translated. See <a href="https://openweathermap.org/api/one-call-api#multi">here</a> for the list of supported languages.
type SourceOpenweatherLanguageEnum string

const (
	SourceOpenweatherLanguageEnumAf   SourceOpenweatherLanguageEnum = "af"
	SourceOpenweatherLanguageEnumAl   SourceOpenweatherLanguageEnum = "al"
	SourceOpenweatherLanguageEnumAr   SourceOpenweatherLanguageEnum = "ar"
	SourceOpenweatherLanguageEnumAz   SourceOpenweatherLanguageEnum = "az"
	SourceOpenweatherLanguageEnumBg   SourceOpenweatherLanguageEnum = "bg"
	SourceOpenweatherLanguageEnumCa   SourceOpenweatherLanguageEnum = "ca"
	SourceOpenweatherLanguageEnumCz   SourceOpenweatherLanguageEnum = "cz"
	SourceOpenweatherLanguageEnumDa   SourceOpenweatherLanguageEnum = "da"
	SourceOpenweatherLanguageEnumDe   SourceOpenweatherLanguageEnum = "de"
	SourceOpenweatherLanguageEnumEl   SourceOpenweatherLanguageEnum = "el"
	SourceOpenweatherLanguageEnumEn   SourceOpenweatherLanguageEnum = "en"
	SourceOpenweatherLanguageEnumEu   SourceOpenweatherLanguageEnum = "eu"
	SourceOpenweatherLanguageEnumFa   SourceOpenweatherLanguageEnum = "fa"
	SourceOpenweatherLanguageEnumFi   SourceOpenweatherLanguageEnum = "fi"
	SourceOpenweatherLanguageEnumFr   SourceOpenweatherLanguageEnum = "fr"
	SourceOpenweatherLanguageEnumGl   SourceOpenweatherLanguageEnum = "gl"
	SourceOpenweatherLanguageEnumHe   SourceOpenweatherLanguageEnum = "he"
	SourceOpenweatherLanguageEnumHi   SourceOpenweatherLanguageEnum = "hi"
	SourceOpenweatherLanguageEnumHr   SourceOpenweatherLanguageEnum = "hr"
	SourceOpenweatherLanguageEnumHu   SourceOpenweatherLanguageEnum = "hu"
	SourceOpenweatherLanguageEnumID   SourceOpenweatherLanguageEnum = "id"
	SourceOpenweatherLanguageEnumIt   SourceOpenweatherLanguageEnum = "it"
	SourceOpenweatherLanguageEnumJa   SourceOpenweatherLanguageEnum = "ja"
	SourceOpenweatherLanguageEnumKr   SourceOpenweatherLanguageEnum = "kr"
	SourceOpenweatherLanguageEnumLa   SourceOpenweatherLanguageEnum = "la"
	SourceOpenweatherLanguageEnumLt   SourceOpenweatherLanguageEnum = "lt"
	SourceOpenweatherLanguageEnumMk   SourceOpenweatherLanguageEnum = "mk"
	SourceOpenweatherLanguageEnumNo   SourceOpenweatherLanguageEnum = "no"
	SourceOpenweatherLanguageEnumNl   SourceOpenweatherLanguageEnum = "nl"
	SourceOpenweatherLanguageEnumPl   SourceOpenweatherLanguageEnum = "pl"
	SourceOpenweatherLanguageEnumPt   SourceOpenweatherLanguageEnum = "pt"
	SourceOpenweatherLanguageEnumPtBr SourceOpenweatherLanguageEnum = "pt_br"
	SourceOpenweatherLanguageEnumRo   SourceOpenweatherLanguageEnum = "ro"
	SourceOpenweatherLanguageEnumRu   SourceOpenweatherLanguageEnum = "ru"
	SourceOpenweatherLanguageEnumSv   SourceOpenweatherLanguageEnum = "sv"
	SourceOpenweatherLanguageEnumSe   SourceOpenweatherLanguageEnum = "se"
	SourceOpenweatherLanguageEnumSk   SourceOpenweatherLanguageEnum = "sk"
	SourceOpenweatherLanguageEnumSl   SourceOpenweatherLanguageEnum = "sl"
	SourceOpenweatherLanguageEnumSp   SourceOpenweatherLanguageEnum = "sp"
	SourceOpenweatherLanguageEnumEs   SourceOpenweatherLanguageEnum = "es"
	SourceOpenweatherLanguageEnumSr   SourceOpenweatherLanguageEnum = "sr"
	SourceOpenweatherLanguageEnumTh   SourceOpenweatherLanguageEnum = "th"
	SourceOpenweatherLanguageEnumTr   SourceOpenweatherLanguageEnum = "tr"
	SourceOpenweatherLanguageEnumUa   SourceOpenweatherLanguageEnum = "ua"
	SourceOpenweatherLanguageEnumUk   SourceOpenweatherLanguageEnum = "uk"
	SourceOpenweatherLanguageEnumVi   SourceOpenweatherLanguageEnum = "vi"
	SourceOpenweatherLanguageEnumZhCn SourceOpenweatherLanguageEnum = "zh_cn"
	SourceOpenweatherLanguageEnumZhTw SourceOpenweatherLanguageEnum = "zh_tw"
	SourceOpenweatherLanguageEnumZu   SourceOpenweatherLanguageEnum = "zu"
)

func (e *SourceOpenweatherLanguageEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "af":
		fallthrough
	case "al":
		fallthrough
	case "ar":
		fallthrough
	case "az":
		fallthrough
	case "bg":
		fallthrough
	case "ca":
		fallthrough
	case "cz":
		fallthrough
	case "da":
		fallthrough
	case "de":
		fallthrough
	case "el":
		fallthrough
	case "en":
		fallthrough
	case "eu":
		fallthrough
	case "fa":
		fallthrough
	case "fi":
		fallthrough
	case "fr":
		fallthrough
	case "gl":
		fallthrough
	case "he":
		fallthrough
	case "hi":
		fallthrough
	case "hr":
		fallthrough
	case "hu":
		fallthrough
	case "id":
		fallthrough
	case "it":
		fallthrough
	case "ja":
		fallthrough
	case "kr":
		fallthrough
	case "la":
		fallthrough
	case "lt":
		fallthrough
	case "mk":
		fallthrough
	case "no":
		fallthrough
	case "nl":
		fallthrough
	case "pl":
		fallthrough
	case "pt":
		fallthrough
	case "pt_br":
		fallthrough
	case "ro":
		fallthrough
	case "ru":
		fallthrough
	case "sv":
		fallthrough
	case "se":
		fallthrough
	case "sk":
		fallthrough
	case "sl":
		fallthrough
	case "sp":
		fallthrough
	case "es":
		fallthrough
	case "sr":
		fallthrough
	case "th":
		fallthrough
	case "tr":
		fallthrough
	case "ua":
		fallthrough
	case "uk":
		fallthrough
	case "vi":
		fallthrough
	case "zh_cn":
		fallthrough
	case "zh_tw":
		fallthrough
	case "zu":
		*e = SourceOpenweatherLanguageEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceOpenweatherLanguageEnum: %s", s)
	}
}

type SourceOpenweatherOpenweatherEnum string

const (
	SourceOpenweatherOpenweatherEnumOpenweather SourceOpenweatherOpenweatherEnum = "openweather"
)

func (e *SourceOpenweatherOpenweatherEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "openweather":
		*e = SourceOpenweatherOpenweatherEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceOpenweatherOpenweatherEnum: %s", s)
	}
}

// SourceOpenweatherUnitsEnum - Units of measurement. standard, metric and imperial units are available. If you do not use the units parameter, standard units will be applied by default.
type SourceOpenweatherUnitsEnum string

const (
	SourceOpenweatherUnitsEnumStandard SourceOpenweatherUnitsEnum = "standard"
	SourceOpenweatherUnitsEnumMetric   SourceOpenweatherUnitsEnum = "metric"
	SourceOpenweatherUnitsEnumImperial SourceOpenweatherUnitsEnum = "imperial"
)

func (e *SourceOpenweatherUnitsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "standard":
		fallthrough
	case "metric":
		fallthrough
	case "imperial":
		*e = SourceOpenweatherUnitsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceOpenweatherUnitsEnum: %s", s)
	}
}

// SourceOpenweather - The values required to configure the source.
type SourceOpenweather struct {
	// Your OpenWeather API Key. See <a href="https://openweathermap.org/api">here</a>. The key is case sensitive.
	Appid string `json:"appid"`
	// You can use lang parameter to get the output in your language. The contents of the description field will be translated. See <a href="https://openweathermap.org/api/one-call-api#multi">here</a> for the list of supported languages.
	Lang *SourceOpenweatherLanguageEnum `json:"lang,omitempty"`
	// Latitude for which you want to get weather condition from. (min -90, max 90)
	Lat string `json:"lat"`
	// Longitude for which you want to get weather condition from. (min -180, max 180)
	Lon        string                           `json:"lon"`
	SourceType SourceOpenweatherOpenweatherEnum `json:"sourceType"`
	// Units of measurement. standard, metric and imperial units are available. If you do not use the units parameter, standard units will be applied by default.
	Units *SourceOpenweatherUnitsEnum `json:"units,omitempty"`
}
