// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// SourceOpenweatherLanguage - You can use lang parameter to get the output in your language. The contents of the description field will be translated. See <a href="https://openweathermap.org/api/one-call-api#multi">here</a> for the list of supported languages.
type SourceOpenweatherLanguage string

const (
	SourceOpenweatherLanguageAf   SourceOpenweatherLanguage = "af"
	SourceOpenweatherLanguageAl   SourceOpenweatherLanguage = "al"
	SourceOpenweatherLanguageAr   SourceOpenweatherLanguage = "ar"
	SourceOpenweatherLanguageAz   SourceOpenweatherLanguage = "az"
	SourceOpenweatherLanguageBg   SourceOpenweatherLanguage = "bg"
	SourceOpenweatherLanguageCa   SourceOpenweatherLanguage = "ca"
	SourceOpenweatherLanguageCz   SourceOpenweatherLanguage = "cz"
	SourceOpenweatherLanguageDa   SourceOpenweatherLanguage = "da"
	SourceOpenweatherLanguageDe   SourceOpenweatherLanguage = "de"
	SourceOpenweatherLanguageEl   SourceOpenweatherLanguage = "el"
	SourceOpenweatherLanguageEn   SourceOpenweatherLanguage = "en"
	SourceOpenweatherLanguageEu   SourceOpenweatherLanguage = "eu"
	SourceOpenweatherLanguageFa   SourceOpenweatherLanguage = "fa"
	SourceOpenweatherLanguageFi   SourceOpenweatherLanguage = "fi"
	SourceOpenweatherLanguageFr   SourceOpenweatherLanguage = "fr"
	SourceOpenweatherLanguageGl   SourceOpenweatherLanguage = "gl"
	SourceOpenweatherLanguageHe   SourceOpenweatherLanguage = "he"
	SourceOpenweatherLanguageHi   SourceOpenweatherLanguage = "hi"
	SourceOpenweatherLanguageHr   SourceOpenweatherLanguage = "hr"
	SourceOpenweatherLanguageHu   SourceOpenweatherLanguage = "hu"
	SourceOpenweatherLanguageID   SourceOpenweatherLanguage = "id"
	SourceOpenweatherLanguageIt   SourceOpenweatherLanguage = "it"
	SourceOpenweatherLanguageJa   SourceOpenweatherLanguage = "ja"
	SourceOpenweatherLanguageKr   SourceOpenweatherLanguage = "kr"
	SourceOpenweatherLanguageLa   SourceOpenweatherLanguage = "la"
	SourceOpenweatherLanguageLt   SourceOpenweatherLanguage = "lt"
	SourceOpenweatherLanguageMk   SourceOpenweatherLanguage = "mk"
	SourceOpenweatherLanguageNo   SourceOpenweatherLanguage = "no"
	SourceOpenweatherLanguageNl   SourceOpenweatherLanguage = "nl"
	SourceOpenweatherLanguagePl   SourceOpenweatherLanguage = "pl"
	SourceOpenweatherLanguagePt   SourceOpenweatherLanguage = "pt"
	SourceOpenweatherLanguagePtBr SourceOpenweatherLanguage = "pt_br"
	SourceOpenweatherLanguageRo   SourceOpenweatherLanguage = "ro"
	SourceOpenweatherLanguageRu   SourceOpenweatherLanguage = "ru"
	SourceOpenweatherLanguageSv   SourceOpenweatherLanguage = "sv"
	SourceOpenweatherLanguageSe   SourceOpenweatherLanguage = "se"
	SourceOpenweatherLanguageSk   SourceOpenweatherLanguage = "sk"
	SourceOpenweatherLanguageSl   SourceOpenweatherLanguage = "sl"
	SourceOpenweatherLanguageSp   SourceOpenweatherLanguage = "sp"
	SourceOpenweatherLanguageEs   SourceOpenweatherLanguage = "es"
	SourceOpenweatherLanguageSr   SourceOpenweatherLanguage = "sr"
	SourceOpenweatherLanguageTh   SourceOpenweatherLanguage = "th"
	SourceOpenweatherLanguageTr   SourceOpenweatherLanguage = "tr"
	SourceOpenweatherLanguageUa   SourceOpenweatherLanguage = "ua"
	SourceOpenweatherLanguageUk   SourceOpenweatherLanguage = "uk"
	SourceOpenweatherLanguageVi   SourceOpenweatherLanguage = "vi"
	SourceOpenweatherLanguageZhCn SourceOpenweatherLanguage = "zh_cn"
	SourceOpenweatherLanguageZhTw SourceOpenweatherLanguage = "zh_tw"
	SourceOpenweatherLanguageZu   SourceOpenweatherLanguage = "zu"
)

func (e SourceOpenweatherLanguage) ToPointer() *SourceOpenweatherLanguage {
	return &e
}

func (e *SourceOpenweatherLanguage) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "af":
		fallthrough
	case "al":
		fallthrough
	case "ar":
		fallthrough
	case "az":
		fallthrough
	case "bg":
		fallthrough
	case "ca":
		fallthrough
	case "cz":
		fallthrough
	case "da":
		fallthrough
	case "de":
		fallthrough
	case "el":
		fallthrough
	case "en":
		fallthrough
	case "eu":
		fallthrough
	case "fa":
		fallthrough
	case "fi":
		fallthrough
	case "fr":
		fallthrough
	case "gl":
		fallthrough
	case "he":
		fallthrough
	case "hi":
		fallthrough
	case "hr":
		fallthrough
	case "hu":
		fallthrough
	case "id":
		fallthrough
	case "it":
		fallthrough
	case "ja":
		fallthrough
	case "kr":
		fallthrough
	case "la":
		fallthrough
	case "lt":
		fallthrough
	case "mk":
		fallthrough
	case "no":
		fallthrough
	case "nl":
		fallthrough
	case "pl":
		fallthrough
	case "pt":
		fallthrough
	case "pt_br":
		fallthrough
	case "ro":
		fallthrough
	case "ru":
		fallthrough
	case "sv":
		fallthrough
	case "se":
		fallthrough
	case "sk":
		fallthrough
	case "sl":
		fallthrough
	case "sp":
		fallthrough
	case "es":
		fallthrough
	case "sr":
		fallthrough
	case "th":
		fallthrough
	case "tr":
		fallthrough
	case "ua":
		fallthrough
	case "uk":
		fallthrough
	case "vi":
		fallthrough
	case "zh_cn":
		fallthrough
	case "zh_tw":
		fallthrough
	case "zu":
		*e = SourceOpenweatherLanguage(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceOpenweatherLanguage: %v", v)
	}
}

type SourceOpenweatherOpenweather string

const (
	SourceOpenweatherOpenweatherOpenweather SourceOpenweatherOpenweather = "openweather"
)

func (e SourceOpenweatherOpenweather) ToPointer() *SourceOpenweatherOpenweather {
	return &e
}

func (e *SourceOpenweatherOpenweather) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "openweather":
		*e = SourceOpenweatherOpenweather(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceOpenweatherOpenweather: %v", v)
	}
}

// SourceOpenweatherUnits - Units of measurement. standard, metric and imperial units are available. If you do not use the units parameter, standard units will be applied by default.
type SourceOpenweatherUnits string

const (
	SourceOpenweatherUnitsStandard SourceOpenweatherUnits = "standard"
	SourceOpenweatherUnitsMetric   SourceOpenweatherUnits = "metric"
	SourceOpenweatherUnitsImperial SourceOpenweatherUnits = "imperial"
)

func (e SourceOpenweatherUnits) ToPointer() *SourceOpenweatherUnits {
	return &e
}

func (e *SourceOpenweatherUnits) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "standard":
		fallthrough
	case "metric":
		fallthrough
	case "imperial":
		*e = SourceOpenweatherUnits(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceOpenweatherUnits: %v", v)
	}
}

type SourceOpenweather struct {
	// Your OpenWeather API Key. See <a href="https://openweathermap.org/api">here</a>. The key is case sensitive.
	Appid string `json:"appid"`
	// You can use lang parameter to get the output in your language. The contents of the description field will be translated. See <a href="https://openweathermap.org/api/one-call-api#multi">here</a> for the list of supported languages.
	Lang *SourceOpenweatherLanguage `json:"lang,omitempty"`
	// Latitude for which you want to get weather condition from. (min -90, max 90)
	Lat string `json:"lat"`
	// Longitude for which you want to get weather condition from. (min -180, max 180)
	Lon        string                       `json:"lon"`
	SourceType SourceOpenweatherOpenweather `json:"sourceType"`
	// Units of measurement. standard, metric and imperial units are available. If you do not use the units parameter, standard units will be applied by default.
	Units *SourceOpenweatherUnits `json:"units,omitempty"`
}
