// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

type DestinationMariadbColumnstoreMariadbColumnstoreEnum string

const (
	DestinationMariadbColumnstoreMariadbColumnstoreEnumMariadbColumnstore DestinationMariadbColumnstoreMariadbColumnstoreEnum = "mariadb-columnstore"
)

func (e *DestinationMariadbColumnstoreMariadbColumnstoreEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "mariadb-columnstore":
		*e = DestinationMariadbColumnstoreMariadbColumnstoreEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationMariadbColumnstoreMariadbColumnstoreEnum: %s", s)
	}
}

// DestinationMariadbColumnstoreSSHTunnelMethodPasswordAuthenticationTunnelMethodEnum - Connect through a jump server tunnel host using username and password authentication
type DestinationMariadbColumnstoreSSHTunnelMethodPasswordAuthenticationTunnelMethodEnum string

const (
	DestinationMariadbColumnstoreSSHTunnelMethodPasswordAuthenticationTunnelMethodEnumSSHPasswordAuth DestinationMariadbColumnstoreSSHTunnelMethodPasswordAuthenticationTunnelMethodEnum = "SSH_PASSWORD_AUTH"
)

func (e *DestinationMariadbColumnstoreSSHTunnelMethodPasswordAuthenticationTunnelMethodEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "SSH_PASSWORD_AUTH":
		*e = DestinationMariadbColumnstoreSSHTunnelMethodPasswordAuthenticationTunnelMethodEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationMariadbColumnstoreSSHTunnelMethodPasswordAuthenticationTunnelMethodEnum: %s", s)
	}
}

// DestinationMariadbColumnstoreSSHTunnelMethodPasswordAuthentication - Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.
type DestinationMariadbColumnstoreSSHTunnelMethodPasswordAuthentication struct {
	// Hostname of the jump server host that allows inbound ssh tunnel.
	TunnelHost string `json:"tunnel_host"`
	// Connect through a jump server tunnel host using username and password authentication
	TunnelMethod DestinationMariadbColumnstoreSSHTunnelMethodPasswordAuthenticationTunnelMethodEnum `json:"tunnel_method"`
	// Port on the proxy/jump server that accepts inbound ssh connections.
	TunnelPort int64 `json:"tunnel_port"`
	// OS-level username for logging into the jump server host
	TunnelUser string `json:"tunnel_user"`
	// OS-level password for logging into the jump server host
	TunnelUserPassword string `json:"tunnel_user_password"`
}

// DestinationMariadbColumnstoreSSHTunnelMethodSSHKeyAuthenticationTunnelMethodEnum - Connect through a jump server tunnel host using username and ssh key
type DestinationMariadbColumnstoreSSHTunnelMethodSSHKeyAuthenticationTunnelMethodEnum string

const (
	DestinationMariadbColumnstoreSSHTunnelMethodSSHKeyAuthenticationTunnelMethodEnumSSHKeyAuth DestinationMariadbColumnstoreSSHTunnelMethodSSHKeyAuthenticationTunnelMethodEnum = "SSH_KEY_AUTH"
)

func (e *DestinationMariadbColumnstoreSSHTunnelMethodSSHKeyAuthenticationTunnelMethodEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "SSH_KEY_AUTH":
		*e = DestinationMariadbColumnstoreSSHTunnelMethodSSHKeyAuthenticationTunnelMethodEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationMariadbColumnstoreSSHTunnelMethodSSHKeyAuthenticationTunnelMethodEnum: %s", s)
	}
}

// DestinationMariadbColumnstoreSSHTunnelMethodSSHKeyAuthentication - Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.
type DestinationMariadbColumnstoreSSHTunnelMethodSSHKeyAuthentication struct {
	// OS-level user account ssh key credentials in RSA PEM format ( created with ssh-keygen -t rsa -m PEM -f myuser_rsa )
	SSHKey string `json:"ssh_key"`
	// Hostname of the jump server host that allows inbound ssh tunnel.
	TunnelHost string `json:"tunnel_host"`
	// Connect through a jump server tunnel host using username and ssh key
	TunnelMethod DestinationMariadbColumnstoreSSHTunnelMethodSSHKeyAuthenticationTunnelMethodEnum `json:"tunnel_method"`
	// Port on the proxy/jump server that accepts inbound ssh connections.
	TunnelPort int64 `json:"tunnel_port"`
	// OS-level username for logging into the jump server host.
	TunnelUser string `json:"tunnel_user"`
}

// DestinationMariadbColumnstoreSSHTunnelMethodNoTunnelTunnelMethodEnum - No ssh tunnel needed to connect to database
type DestinationMariadbColumnstoreSSHTunnelMethodNoTunnelTunnelMethodEnum string

const (
	DestinationMariadbColumnstoreSSHTunnelMethodNoTunnelTunnelMethodEnumNoTunnel DestinationMariadbColumnstoreSSHTunnelMethodNoTunnelTunnelMethodEnum = "NO_TUNNEL"
)

func (e *DestinationMariadbColumnstoreSSHTunnelMethodNoTunnelTunnelMethodEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "NO_TUNNEL":
		*e = DestinationMariadbColumnstoreSSHTunnelMethodNoTunnelTunnelMethodEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationMariadbColumnstoreSSHTunnelMethodNoTunnelTunnelMethodEnum: %s", s)
	}
}

// DestinationMariadbColumnstoreSSHTunnelMethodNoTunnel - Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.
type DestinationMariadbColumnstoreSSHTunnelMethodNoTunnel struct {
	// No ssh tunnel needed to connect to database
	TunnelMethod DestinationMariadbColumnstoreSSHTunnelMethodNoTunnelTunnelMethodEnum `json:"tunnel_method"`
}

type DestinationMariadbColumnstoreSSHTunnelMethodType string

const (
	DestinationMariadbColumnstoreSSHTunnelMethodTypeDestinationMariadbColumnstoreSSHTunnelMethodNoTunnel               DestinationMariadbColumnstoreSSHTunnelMethodType = "destination-mariadb-columnstore_SSH Tunnel Method_No Tunnel"
	DestinationMariadbColumnstoreSSHTunnelMethodTypeDestinationMariadbColumnstoreSSHTunnelMethodSSHKeyAuthentication   DestinationMariadbColumnstoreSSHTunnelMethodType = "destination-mariadb-columnstore_SSH Tunnel Method_SSH Key Authentication"
	DestinationMariadbColumnstoreSSHTunnelMethodTypeDestinationMariadbColumnstoreSSHTunnelMethodPasswordAuthentication DestinationMariadbColumnstoreSSHTunnelMethodType = "destination-mariadb-columnstore_SSH Tunnel Method_Password Authentication"
)

type DestinationMariadbColumnstoreSSHTunnelMethod struct {
	DestinationMariadbColumnstoreSSHTunnelMethodNoTunnel               *DestinationMariadbColumnstoreSSHTunnelMethodNoTunnel
	DestinationMariadbColumnstoreSSHTunnelMethodSSHKeyAuthentication   *DestinationMariadbColumnstoreSSHTunnelMethodSSHKeyAuthentication
	DestinationMariadbColumnstoreSSHTunnelMethodPasswordAuthentication *DestinationMariadbColumnstoreSSHTunnelMethodPasswordAuthentication

	Type DestinationMariadbColumnstoreSSHTunnelMethodType
}

func CreateDestinationMariadbColumnstoreSSHTunnelMethodDestinationMariadbColumnstoreSSHTunnelMethodNoTunnel(destinationMariadbColumnstoreSSHTunnelMethodNoTunnel DestinationMariadbColumnstoreSSHTunnelMethodNoTunnel) DestinationMariadbColumnstoreSSHTunnelMethod {
	typ := DestinationMariadbColumnstoreSSHTunnelMethodTypeDestinationMariadbColumnstoreSSHTunnelMethodNoTunnel

	return DestinationMariadbColumnstoreSSHTunnelMethod{
		DestinationMariadbColumnstoreSSHTunnelMethodNoTunnel: &destinationMariadbColumnstoreSSHTunnelMethodNoTunnel,
		Type: typ,
	}
}

func CreateDestinationMariadbColumnstoreSSHTunnelMethodDestinationMariadbColumnstoreSSHTunnelMethodSSHKeyAuthentication(destinationMariadbColumnstoreSSHTunnelMethodSSHKeyAuthentication DestinationMariadbColumnstoreSSHTunnelMethodSSHKeyAuthentication) DestinationMariadbColumnstoreSSHTunnelMethod {
	typ := DestinationMariadbColumnstoreSSHTunnelMethodTypeDestinationMariadbColumnstoreSSHTunnelMethodSSHKeyAuthentication

	return DestinationMariadbColumnstoreSSHTunnelMethod{
		DestinationMariadbColumnstoreSSHTunnelMethodSSHKeyAuthentication: &destinationMariadbColumnstoreSSHTunnelMethodSSHKeyAuthentication,
		Type: typ,
	}
}

func CreateDestinationMariadbColumnstoreSSHTunnelMethodDestinationMariadbColumnstoreSSHTunnelMethodPasswordAuthentication(destinationMariadbColumnstoreSSHTunnelMethodPasswordAuthentication DestinationMariadbColumnstoreSSHTunnelMethodPasswordAuthentication) DestinationMariadbColumnstoreSSHTunnelMethod {
	typ := DestinationMariadbColumnstoreSSHTunnelMethodTypeDestinationMariadbColumnstoreSSHTunnelMethodPasswordAuthentication

	return DestinationMariadbColumnstoreSSHTunnelMethod{
		DestinationMariadbColumnstoreSSHTunnelMethodPasswordAuthentication: &destinationMariadbColumnstoreSSHTunnelMethodPasswordAuthentication,
		Type: typ,
	}
}

func (u *DestinationMariadbColumnstoreSSHTunnelMethod) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	destinationMariadbColumnstoreSSHTunnelMethodNoTunnel := new(DestinationMariadbColumnstoreSSHTunnelMethodNoTunnel)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&destinationMariadbColumnstoreSSHTunnelMethodNoTunnel); err == nil {
		u.DestinationMariadbColumnstoreSSHTunnelMethodNoTunnel = destinationMariadbColumnstoreSSHTunnelMethodNoTunnel
		u.Type = DestinationMariadbColumnstoreSSHTunnelMethodTypeDestinationMariadbColumnstoreSSHTunnelMethodNoTunnel
		return nil
	}

	destinationMariadbColumnstoreSSHTunnelMethodSSHKeyAuthentication := new(DestinationMariadbColumnstoreSSHTunnelMethodSSHKeyAuthentication)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&destinationMariadbColumnstoreSSHTunnelMethodSSHKeyAuthentication); err == nil {
		u.DestinationMariadbColumnstoreSSHTunnelMethodSSHKeyAuthentication = destinationMariadbColumnstoreSSHTunnelMethodSSHKeyAuthentication
		u.Type = DestinationMariadbColumnstoreSSHTunnelMethodTypeDestinationMariadbColumnstoreSSHTunnelMethodSSHKeyAuthentication
		return nil
	}

	destinationMariadbColumnstoreSSHTunnelMethodPasswordAuthentication := new(DestinationMariadbColumnstoreSSHTunnelMethodPasswordAuthentication)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&destinationMariadbColumnstoreSSHTunnelMethodPasswordAuthentication); err == nil {
		u.DestinationMariadbColumnstoreSSHTunnelMethodPasswordAuthentication = destinationMariadbColumnstoreSSHTunnelMethodPasswordAuthentication
		u.Type = DestinationMariadbColumnstoreSSHTunnelMethodTypeDestinationMariadbColumnstoreSSHTunnelMethodPasswordAuthentication
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u DestinationMariadbColumnstoreSSHTunnelMethod) MarshalJSON() ([]byte, error) {
	if u.DestinationMariadbColumnstoreSSHTunnelMethodNoTunnel != nil {
		return json.Marshal(u.DestinationMariadbColumnstoreSSHTunnelMethodNoTunnel)
	}

	if u.DestinationMariadbColumnstoreSSHTunnelMethodSSHKeyAuthentication != nil {
		return json.Marshal(u.DestinationMariadbColumnstoreSSHTunnelMethodSSHKeyAuthentication)
	}

	if u.DestinationMariadbColumnstoreSSHTunnelMethodPasswordAuthentication != nil {
		return json.Marshal(u.DestinationMariadbColumnstoreSSHTunnelMethodPasswordAuthentication)
	}

	return nil, nil
}

// DestinationMariadbColumnstore - The values required to configure the destination.
type DestinationMariadbColumnstore struct {
	// Name of the database.
	Database        string                                              `json:"database"`
	DestinationType DestinationMariadbColumnstoreMariadbColumnstoreEnum `json:"destinationType"`
	// The Hostname of the database.
	Host string `json:"host"`
	// Additional properties to pass to the JDBC URL string when connecting to the database formatted as 'key=value' pairs separated by the symbol '&'. (example: key1=value1&key2=value2&key3=value3).
	JdbcURLParams *string `json:"jdbc_url_params,omitempty"`
	// The Password associated with the username.
	Password *string `json:"password,omitempty"`
	// The Port of the database.
	Port int64 `json:"port"`
	// Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.
	TunnelMethod *DestinationMariadbColumnstoreSSHTunnelMethod `json:"tunnel_method,omitempty"`
	// The Username which is used to access the database.
	Username string `json:"username"`
}
