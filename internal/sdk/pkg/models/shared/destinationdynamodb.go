// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type DestinationDynamodbDynamodbEnum string

const (
	DestinationDynamodbDynamodbEnumDynamodb DestinationDynamodbDynamodbEnum = "dynamodb"
)

func (e DestinationDynamodbDynamodbEnum) ToPointer() *DestinationDynamodbDynamodbEnum {
	return &e
}

func (e *DestinationDynamodbDynamodbEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "dynamodb":
		*e = DestinationDynamodbDynamodbEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationDynamodbDynamodbEnum: %v", v)
	}
}

// DestinationDynamodbDynamoDBRegionEnum - The region of the DynamoDB.
type DestinationDynamodbDynamoDBRegionEnum string

const (
	DestinationDynamodbDynamoDBRegionEnumUnknown      DestinationDynamodbDynamoDBRegionEnum = ""
	DestinationDynamodbDynamoDBRegionEnumUsEast1      DestinationDynamodbDynamoDBRegionEnum = "us-east-1"
	DestinationDynamodbDynamoDBRegionEnumUsEast2      DestinationDynamodbDynamoDBRegionEnum = "us-east-2"
	DestinationDynamodbDynamoDBRegionEnumUsWest1      DestinationDynamodbDynamoDBRegionEnum = "us-west-1"
	DestinationDynamodbDynamoDBRegionEnumUsWest2      DestinationDynamodbDynamoDBRegionEnum = "us-west-2"
	DestinationDynamodbDynamoDBRegionEnumAfSouth1     DestinationDynamodbDynamoDBRegionEnum = "af-south-1"
	DestinationDynamodbDynamoDBRegionEnumApEast1      DestinationDynamodbDynamoDBRegionEnum = "ap-east-1"
	DestinationDynamodbDynamoDBRegionEnumApSouth1     DestinationDynamodbDynamoDBRegionEnum = "ap-south-1"
	DestinationDynamodbDynamoDBRegionEnumApNortheast1 DestinationDynamodbDynamoDBRegionEnum = "ap-northeast-1"
	DestinationDynamodbDynamoDBRegionEnumApNortheast2 DestinationDynamodbDynamoDBRegionEnum = "ap-northeast-2"
	DestinationDynamodbDynamoDBRegionEnumApNortheast3 DestinationDynamodbDynamoDBRegionEnum = "ap-northeast-3"
	DestinationDynamodbDynamoDBRegionEnumApSoutheast1 DestinationDynamodbDynamoDBRegionEnum = "ap-southeast-1"
	DestinationDynamodbDynamoDBRegionEnumApSoutheast2 DestinationDynamodbDynamoDBRegionEnum = "ap-southeast-2"
	DestinationDynamodbDynamoDBRegionEnumCaCentral1   DestinationDynamodbDynamoDBRegionEnum = "ca-central-1"
	DestinationDynamodbDynamoDBRegionEnumCnNorth1     DestinationDynamodbDynamoDBRegionEnum = "cn-north-1"
	DestinationDynamodbDynamoDBRegionEnumCnNorthwest1 DestinationDynamodbDynamoDBRegionEnum = "cn-northwest-1"
	DestinationDynamodbDynamoDBRegionEnumEuCentral1   DestinationDynamodbDynamoDBRegionEnum = "eu-central-1"
	DestinationDynamodbDynamoDBRegionEnumEuNorth1     DestinationDynamodbDynamoDBRegionEnum = "eu-north-1"
	DestinationDynamodbDynamoDBRegionEnumEuSouth1     DestinationDynamodbDynamoDBRegionEnum = "eu-south-1"
	DestinationDynamodbDynamoDBRegionEnumEuWest1      DestinationDynamodbDynamoDBRegionEnum = "eu-west-1"
	DestinationDynamodbDynamoDBRegionEnumEuWest2      DestinationDynamodbDynamoDBRegionEnum = "eu-west-2"
	DestinationDynamodbDynamoDBRegionEnumEuWest3      DestinationDynamodbDynamoDBRegionEnum = "eu-west-3"
	DestinationDynamodbDynamoDBRegionEnumSaEast1      DestinationDynamodbDynamoDBRegionEnum = "sa-east-1"
	DestinationDynamodbDynamoDBRegionEnumMeSouth1     DestinationDynamodbDynamoDBRegionEnum = "me-south-1"
	DestinationDynamodbDynamoDBRegionEnumUsGovEast1   DestinationDynamodbDynamoDBRegionEnum = "us-gov-east-1"
	DestinationDynamodbDynamoDBRegionEnumUsGovWest1   DestinationDynamodbDynamoDBRegionEnum = "us-gov-west-1"
)

func (e DestinationDynamodbDynamoDBRegionEnum) ToPointer() *DestinationDynamodbDynamoDBRegionEnum {
	return &e
}

func (e *DestinationDynamodbDynamoDBRegionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "":
		fallthrough
	case "us-east-1":
		fallthrough
	case "us-east-2":
		fallthrough
	case "us-west-1":
		fallthrough
	case "us-west-2":
		fallthrough
	case "af-south-1":
		fallthrough
	case "ap-east-1":
		fallthrough
	case "ap-south-1":
		fallthrough
	case "ap-northeast-1":
		fallthrough
	case "ap-northeast-2":
		fallthrough
	case "ap-northeast-3":
		fallthrough
	case "ap-southeast-1":
		fallthrough
	case "ap-southeast-2":
		fallthrough
	case "ca-central-1":
		fallthrough
	case "cn-north-1":
		fallthrough
	case "cn-northwest-1":
		fallthrough
	case "eu-central-1":
		fallthrough
	case "eu-north-1":
		fallthrough
	case "eu-south-1":
		fallthrough
	case "eu-west-1":
		fallthrough
	case "eu-west-2":
		fallthrough
	case "eu-west-3":
		fallthrough
	case "sa-east-1":
		fallthrough
	case "me-south-1":
		fallthrough
	case "us-gov-east-1":
		fallthrough
	case "us-gov-west-1":
		*e = DestinationDynamodbDynamoDBRegionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationDynamodbDynamoDBRegionEnum: %v", v)
	}
}

// DestinationDynamodb - The values required to configure the destination.
type DestinationDynamodb struct {
	// The access key id to access the DynamoDB. Airbyte requires Read and Write permissions to the DynamoDB.
	AccessKeyID     string                          `json:"access_key_id"`
	DestinationType DestinationDynamodbDynamodbEnum `json:"destinationType"`
	// This is your DynamoDB endpoint url.(if you are working with AWS DynamoDB, just leave empty).
	DynamodbEndpoint *string `json:"dynamodb_endpoint,omitempty"`
	// The region of the DynamoDB.
	DynamodbRegion DestinationDynamodbDynamoDBRegionEnum `json:"dynamodb_region"`
	// The prefix to use when naming DynamoDB tables.
	DynamodbTableNamePrefix string `json:"dynamodb_table_name_prefix"`
	// The corresponding secret to the access key id.
	SecretAccessKey string `json:"secret_access_key"`
}
