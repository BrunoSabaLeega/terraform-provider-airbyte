// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

type SourceGoogleAnalyticsV4CredentialsServiceAccountKeyAuthenticationAuthTypeEnum string

const (
	SourceGoogleAnalyticsV4CredentialsServiceAccountKeyAuthenticationAuthTypeEnumService SourceGoogleAnalyticsV4CredentialsServiceAccountKeyAuthenticationAuthTypeEnum = "Service"
)

func (e *SourceGoogleAnalyticsV4CredentialsServiceAccountKeyAuthenticationAuthTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Service":
		*e = SourceGoogleAnalyticsV4CredentialsServiceAccountKeyAuthenticationAuthTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceGoogleAnalyticsV4CredentialsServiceAccountKeyAuthenticationAuthTypeEnum: %s", s)
	}
}

// SourceGoogleAnalyticsV4CredentialsServiceAccountKeyAuthentication - Credentials for the service
type SourceGoogleAnalyticsV4CredentialsServiceAccountKeyAuthentication struct {
	AuthType *SourceGoogleAnalyticsV4CredentialsServiceAccountKeyAuthenticationAuthTypeEnum `json:"auth_type,omitempty"`
	// The JSON key of the service account to use for authorization
	CredentialsJSON string `json:"credentials_json"`
}

type SourceGoogleAnalyticsV4CredentialsAuthenticateViaGoogleOauthAuthTypeEnum string

const (
	SourceGoogleAnalyticsV4CredentialsAuthenticateViaGoogleOauthAuthTypeEnumClient SourceGoogleAnalyticsV4CredentialsAuthenticateViaGoogleOauthAuthTypeEnum = "Client"
)

func (e *SourceGoogleAnalyticsV4CredentialsAuthenticateViaGoogleOauthAuthTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Client":
		*e = SourceGoogleAnalyticsV4CredentialsAuthenticateViaGoogleOauthAuthTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceGoogleAnalyticsV4CredentialsAuthenticateViaGoogleOauthAuthTypeEnum: %s", s)
	}
}

// SourceGoogleAnalyticsV4CredentialsAuthenticateViaGoogleOauth - Credentials for the service
type SourceGoogleAnalyticsV4CredentialsAuthenticateViaGoogleOauth struct {
	// Access Token for making authenticated requests.
	AccessToken *string                                                                   `json:"access_token,omitempty"`
	AuthType    *SourceGoogleAnalyticsV4CredentialsAuthenticateViaGoogleOauthAuthTypeEnum `json:"auth_type,omitempty"`
	// The Client ID of your Google Analytics developer application.
	ClientID string `json:"client_id"`
	// The Client Secret of your Google Analytics developer application.
	ClientSecret string `json:"client_secret"`
	// The token for obtaining a new access token.
	RefreshToken string `json:"refresh_token"`
}

type SourceGoogleAnalyticsV4CredentialsType string

const (
	SourceGoogleAnalyticsV4CredentialsTypeSourceGoogleAnalyticsV4CredentialsAuthenticateViaGoogleOauth      SourceGoogleAnalyticsV4CredentialsType = "source-google-analytics-v4_Credentials_Authenticate via Google (Oauth)"
	SourceGoogleAnalyticsV4CredentialsTypeSourceGoogleAnalyticsV4CredentialsServiceAccountKeyAuthentication SourceGoogleAnalyticsV4CredentialsType = "source-google-analytics-v4_Credentials_Service Account Key Authentication"
)

type SourceGoogleAnalyticsV4Credentials struct {
	SourceGoogleAnalyticsV4CredentialsAuthenticateViaGoogleOauth      *SourceGoogleAnalyticsV4CredentialsAuthenticateViaGoogleOauth
	SourceGoogleAnalyticsV4CredentialsServiceAccountKeyAuthentication *SourceGoogleAnalyticsV4CredentialsServiceAccountKeyAuthentication

	Type SourceGoogleAnalyticsV4CredentialsType
}

func CreateSourceGoogleAnalyticsV4CredentialsSourceGoogleAnalyticsV4CredentialsAuthenticateViaGoogleOauth(sourceGoogleAnalyticsV4CredentialsAuthenticateViaGoogleOauth SourceGoogleAnalyticsV4CredentialsAuthenticateViaGoogleOauth) SourceGoogleAnalyticsV4Credentials {
	typ := SourceGoogleAnalyticsV4CredentialsTypeSourceGoogleAnalyticsV4CredentialsAuthenticateViaGoogleOauth

	return SourceGoogleAnalyticsV4Credentials{
		SourceGoogleAnalyticsV4CredentialsAuthenticateViaGoogleOauth: &sourceGoogleAnalyticsV4CredentialsAuthenticateViaGoogleOauth,
		Type: typ,
	}
}

func CreateSourceGoogleAnalyticsV4CredentialsSourceGoogleAnalyticsV4CredentialsServiceAccountKeyAuthentication(sourceGoogleAnalyticsV4CredentialsServiceAccountKeyAuthentication SourceGoogleAnalyticsV4CredentialsServiceAccountKeyAuthentication) SourceGoogleAnalyticsV4Credentials {
	typ := SourceGoogleAnalyticsV4CredentialsTypeSourceGoogleAnalyticsV4CredentialsServiceAccountKeyAuthentication

	return SourceGoogleAnalyticsV4Credentials{
		SourceGoogleAnalyticsV4CredentialsServiceAccountKeyAuthentication: &sourceGoogleAnalyticsV4CredentialsServiceAccountKeyAuthentication,
		Type: typ,
	}
}

func (u *SourceGoogleAnalyticsV4Credentials) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	sourceGoogleAnalyticsV4CredentialsAuthenticateViaGoogleOauth := new(SourceGoogleAnalyticsV4CredentialsAuthenticateViaGoogleOauth)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceGoogleAnalyticsV4CredentialsAuthenticateViaGoogleOauth); err == nil {
		u.SourceGoogleAnalyticsV4CredentialsAuthenticateViaGoogleOauth = sourceGoogleAnalyticsV4CredentialsAuthenticateViaGoogleOauth
		u.Type = SourceGoogleAnalyticsV4CredentialsTypeSourceGoogleAnalyticsV4CredentialsAuthenticateViaGoogleOauth
		return nil
	}

	sourceGoogleAnalyticsV4CredentialsServiceAccountKeyAuthentication := new(SourceGoogleAnalyticsV4CredentialsServiceAccountKeyAuthentication)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceGoogleAnalyticsV4CredentialsServiceAccountKeyAuthentication); err == nil {
		u.SourceGoogleAnalyticsV4CredentialsServiceAccountKeyAuthentication = sourceGoogleAnalyticsV4CredentialsServiceAccountKeyAuthentication
		u.Type = SourceGoogleAnalyticsV4CredentialsTypeSourceGoogleAnalyticsV4CredentialsServiceAccountKeyAuthentication
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceGoogleAnalyticsV4Credentials) MarshalJSON() ([]byte, error) {
	if u.SourceGoogleAnalyticsV4CredentialsAuthenticateViaGoogleOauth != nil {
		return json.Marshal(u.SourceGoogleAnalyticsV4CredentialsAuthenticateViaGoogleOauth)
	}

	if u.SourceGoogleAnalyticsV4CredentialsServiceAccountKeyAuthentication != nil {
		return json.Marshal(u.SourceGoogleAnalyticsV4CredentialsServiceAccountKeyAuthentication)
	}

	return nil, nil
}

type SourceGoogleAnalyticsV4GoogleAnalyticsV4Enum string

const (
	SourceGoogleAnalyticsV4GoogleAnalyticsV4EnumGoogleAnalyticsV4 SourceGoogleAnalyticsV4GoogleAnalyticsV4Enum = "google-analytics-v4"
)

func (e *SourceGoogleAnalyticsV4GoogleAnalyticsV4Enum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "google-analytics-v4":
		*e = SourceGoogleAnalyticsV4GoogleAnalyticsV4Enum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceGoogleAnalyticsV4GoogleAnalyticsV4Enum: %s", s)
	}
}

// SourceGoogleAnalyticsV4 - The values required to configure the source.
type SourceGoogleAnalyticsV4 struct {
	// Credentials for the service
	Credentials *SourceGoogleAnalyticsV4Credentials `json:"credentials,omitempty"`
	// A JSON array describing the custom reports you want to sync from Google Analytics. See <a href="https://docs.airbyte.com/integrations/sources/google-analytics-v4#data-processing-latency">the docs</a> for more information about the exact format you can use to fill out this field.
	CustomReports *string                                      `json:"custom_reports,omitempty"`
	SourceType    SourceGoogleAnalyticsV4GoogleAnalyticsV4Enum `json:"sourceType"`
	// The date in the format YYYY-MM-DD. Any data before this date will not be replicated.
	StartDate string `json:"start_date"`
	// The ID for the Google Analytics View you want to fetch data from. This can be found from the <a href="https://ga-dev-tools.appspot.com/account-explorer/">Google Analytics Account Explorer</a>.
	ViewID string `json:"view_id"`
	// The time increment used by the connector when requesting data from the Google Analytics API. More information is available in the <a href="https://docs.airbyte.com/integrations/sources/google-analytics-v4/#sampling-in-reports">the docs</a>. The bigger this value is, the faster the sync will be, but the more likely that sampling will be applied to your data, potentially causing inaccuracies in the returned results. We recommend setting this to 1 unless you have a hard requirement to make the sync faster at the expense of accuracy. The minimum allowed value for this field is 1, and the maximum is 364.
	WindowInDays *int64 `json:"window_in_days,omitempty"`
}
