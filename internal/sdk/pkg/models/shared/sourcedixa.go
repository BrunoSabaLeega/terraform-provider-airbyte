// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type SourceDixaDixa string

const (
	SourceDixaDixaDixa SourceDixaDixa = "dixa"
)

func (e SourceDixaDixa) ToPointer() *SourceDixaDixa {
	return &e
}

func (e *SourceDixaDixa) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "dixa":
		*e = SourceDixaDixa(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceDixaDixa: %v", v)
	}
}

type SourceDixa struct {
	// Dixa API token
	APIToken string `json:"api_token"`
	// Number of days to batch into one request. Max 31.
	BatchSize  *int64         `json:"batch_size,omitempty"`
	SourceType SourceDixaDixa `json:"sourceType"`
	// The connector pulls records updated from this date onwards.
	StartDate string `json:"start_date"`
}
