// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type SourceAmazonSellerPartnerAuthTypeEnum string

const (
	SourceAmazonSellerPartnerAuthTypeEnumOauth20 SourceAmazonSellerPartnerAuthTypeEnum = "oauth2.0"
)

func (e SourceAmazonSellerPartnerAuthTypeEnum) ToPointer() *SourceAmazonSellerPartnerAuthTypeEnum {
	return &e
}

func (e *SourceAmazonSellerPartnerAuthTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "oauth2.0":
		*e = SourceAmazonSellerPartnerAuthTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceAmazonSellerPartnerAuthTypeEnum: %v", v)
	}
}

// SourceAmazonSellerPartnerAWSEnvironmentEnum - An enumeration.
type SourceAmazonSellerPartnerAWSEnvironmentEnum string

const (
	SourceAmazonSellerPartnerAWSEnvironmentEnumProduction SourceAmazonSellerPartnerAWSEnvironmentEnum = "PRODUCTION"
	SourceAmazonSellerPartnerAWSEnvironmentEnumSandbox    SourceAmazonSellerPartnerAWSEnvironmentEnum = "SANDBOX"
)

func (e SourceAmazonSellerPartnerAWSEnvironmentEnum) ToPointer() *SourceAmazonSellerPartnerAWSEnvironmentEnum {
	return &e
}

func (e *SourceAmazonSellerPartnerAWSEnvironmentEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PRODUCTION":
		fallthrough
	case "SANDBOX":
		*e = SourceAmazonSellerPartnerAWSEnvironmentEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceAmazonSellerPartnerAWSEnvironmentEnum: %v", v)
	}
}

// SourceAmazonSellerPartnerAWSRegionEnum - An enumeration.
type SourceAmazonSellerPartnerAWSRegionEnum string

const (
	SourceAmazonSellerPartnerAWSRegionEnumAe SourceAmazonSellerPartnerAWSRegionEnum = "AE"
	SourceAmazonSellerPartnerAWSRegionEnumAu SourceAmazonSellerPartnerAWSRegionEnum = "AU"
	SourceAmazonSellerPartnerAWSRegionEnumBe SourceAmazonSellerPartnerAWSRegionEnum = "BE"
	SourceAmazonSellerPartnerAWSRegionEnumBr SourceAmazonSellerPartnerAWSRegionEnum = "BR"
	SourceAmazonSellerPartnerAWSRegionEnumCa SourceAmazonSellerPartnerAWSRegionEnum = "CA"
	SourceAmazonSellerPartnerAWSRegionEnumDe SourceAmazonSellerPartnerAWSRegionEnum = "DE"
	SourceAmazonSellerPartnerAWSRegionEnumEg SourceAmazonSellerPartnerAWSRegionEnum = "EG"
	SourceAmazonSellerPartnerAWSRegionEnumEs SourceAmazonSellerPartnerAWSRegionEnum = "ES"
	SourceAmazonSellerPartnerAWSRegionEnumFr SourceAmazonSellerPartnerAWSRegionEnum = "FR"
	SourceAmazonSellerPartnerAWSRegionEnumGb SourceAmazonSellerPartnerAWSRegionEnum = "GB"
	SourceAmazonSellerPartnerAWSRegionEnumIn SourceAmazonSellerPartnerAWSRegionEnum = "IN"
	SourceAmazonSellerPartnerAWSRegionEnumIt SourceAmazonSellerPartnerAWSRegionEnum = "IT"
	SourceAmazonSellerPartnerAWSRegionEnumJp SourceAmazonSellerPartnerAWSRegionEnum = "JP"
	SourceAmazonSellerPartnerAWSRegionEnumMx SourceAmazonSellerPartnerAWSRegionEnum = "MX"
	SourceAmazonSellerPartnerAWSRegionEnumNl SourceAmazonSellerPartnerAWSRegionEnum = "NL"
	SourceAmazonSellerPartnerAWSRegionEnumPl SourceAmazonSellerPartnerAWSRegionEnum = "PL"
	SourceAmazonSellerPartnerAWSRegionEnumSa SourceAmazonSellerPartnerAWSRegionEnum = "SA"
	SourceAmazonSellerPartnerAWSRegionEnumSe SourceAmazonSellerPartnerAWSRegionEnum = "SE"
	SourceAmazonSellerPartnerAWSRegionEnumSg SourceAmazonSellerPartnerAWSRegionEnum = "SG"
	SourceAmazonSellerPartnerAWSRegionEnumTr SourceAmazonSellerPartnerAWSRegionEnum = "TR"
	SourceAmazonSellerPartnerAWSRegionEnumUk SourceAmazonSellerPartnerAWSRegionEnum = "UK"
	SourceAmazonSellerPartnerAWSRegionEnumUs SourceAmazonSellerPartnerAWSRegionEnum = "US"
)

func (e SourceAmazonSellerPartnerAWSRegionEnum) ToPointer() *SourceAmazonSellerPartnerAWSRegionEnum {
	return &e
}

func (e *SourceAmazonSellerPartnerAWSRegionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AE":
		fallthrough
	case "AU":
		fallthrough
	case "BE":
		fallthrough
	case "BR":
		fallthrough
	case "CA":
		fallthrough
	case "DE":
		fallthrough
	case "EG":
		fallthrough
	case "ES":
		fallthrough
	case "FR":
		fallthrough
	case "GB":
		fallthrough
	case "IN":
		fallthrough
	case "IT":
		fallthrough
	case "JP":
		fallthrough
	case "MX":
		fallthrough
	case "NL":
		fallthrough
	case "PL":
		fallthrough
	case "SA":
		fallthrough
	case "SE":
		fallthrough
	case "SG":
		fallthrough
	case "TR":
		fallthrough
	case "UK":
		fallthrough
	case "US":
		*e = SourceAmazonSellerPartnerAWSRegionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceAmazonSellerPartnerAWSRegionEnum: %v", v)
	}
}

type SourceAmazonSellerPartnerAmazonSellerPartnerEnum string

const (
	SourceAmazonSellerPartnerAmazonSellerPartnerEnumAmazonSellerPartner SourceAmazonSellerPartnerAmazonSellerPartnerEnum = "amazon-seller-partner"
)

func (e SourceAmazonSellerPartnerAmazonSellerPartnerEnum) ToPointer() *SourceAmazonSellerPartnerAmazonSellerPartnerEnum {
	return &e
}

func (e *SourceAmazonSellerPartnerAmazonSellerPartnerEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "amazon-seller-partner":
		*e = SourceAmazonSellerPartnerAmazonSellerPartnerEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceAmazonSellerPartnerAmazonSellerPartnerEnum: %v", v)
	}
}

// SourceAmazonSellerPartner - The values required to configure the source.
type SourceAmazonSellerPartner struct {
	// Your Amazon App ID
	AppID    string                                 `json:"app_id"`
	AuthType *SourceAmazonSellerPartnerAuthTypeEnum `json:"auth_type,omitempty"`
	// Specifies the AWS access key used as part of the credentials to authenticate the user.
	AwsAccessKey *string `json:"aws_access_key,omitempty"`
	// An enumeration.
	AwsEnvironment SourceAmazonSellerPartnerAWSEnvironmentEnum `json:"aws_environment"`
	// Specifies the AWS secret key used as part of the credentials to authenticate the user.
	AwsSecretKey *string `json:"aws_secret_key,omitempty"`
	// Your Login with Amazon Client ID.
	LwaAppID string `json:"lwa_app_id"`
	// Your Login with Amazon Client Secret.
	LwaClientSecret string `json:"lwa_client_secret"`
	// Sometimes report can take up to 30 minutes to generate. This will set the limit for how long to wait for a successful report.
	MaxWaitSeconds *int64 `json:"max_wait_seconds,omitempty"`
	// Will be used for stream slicing for initial full_refresh sync when no updated state is present for reports that support sliced incremental sync.
	PeriodInDays *int64 `json:"period_in_days,omitempty"`
	// The Refresh Token obtained via OAuth flow authorization.
	RefreshToken string `json:"refresh_token"`
	// An enumeration.
	Region SourceAmazonSellerPartnerAWSRegionEnum `json:"region"`
	// UTC date and time in the format 2017-01-25T00:00:00Z. Any data after this date will not be replicated.
	ReplicationEndDate *string `json:"replication_end_date,omitempty"`
	// UTC date and time in the format 2017-01-25T00:00:00Z. Any data before this date will not be replicated.
	ReplicationStartDate string `json:"replication_start_date"`
	// Additional information passed to reports. This varies by report type. Must be a valid json string.
	ReportOptions *string `json:"report_options,omitempty"`
	// Specifies the Amazon Resource Name (ARN) of an IAM role that you want to use to perform operations requested using this profile. (Needs permission to 'Assume Role' STS).
	RoleArn    *string                                          `json:"role_arn,omitempty"`
	SourceType SourceAmazonSellerPartnerAmazonSellerPartnerEnum `json:"sourceType"`
}
