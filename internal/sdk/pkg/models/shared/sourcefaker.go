// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type SourceFakerFakerEnum string

const (
	SourceFakerFakerEnumFaker SourceFakerFakerEnum = "faker"
)

func (e SourceFakerFakerEnum) ToPointer() *SourceFakerFakerEnum {
	return &e
}

func (e *SourceFakerFakerEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "faker":
		*e = SourceFakerFakerEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceFakerFakerEnum: %v", v)
	}
}

// SourceFaker - The values required to configure the source.
type SourceFaker struct {
	// How many users should be generated in total.  This setting does not apply to the purchases or products stream.
	Count int64 `json:"count"`
	// How many parallel workers should we use to generate fake data?  Choose a value equal to the number of CPUs you will allocate to this source.
	Parallelism *int64 `json:"parallelism,omitempty"`
	// How many fake records will be in each page (stream slice), before a state message is emitted?
	RecordsPerSlice *int64 `json:"records_per_slice,omitempty"`
	// How many fake records will be returned for each sync, for each stream?  By default, it will take 2 syncs to create the requested 1000 records.
	RecordsPerSync *int64 `json:"records_per_sync,omitempty"`
	// Manually control the faker random seed to return the same values on subsequent runs (leave -1 for random)
	Seed       *int64               `json:"seed,omitempty"`
	SourceType SourceFakerFakerEnum `json:"sourceType"`
}
