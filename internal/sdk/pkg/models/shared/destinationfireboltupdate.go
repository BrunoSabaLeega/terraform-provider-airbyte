// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

type DestinationFireboltUpdateLoadingMethodExternalTableViaS3Method string

const (
	DestinationFireboltUpdateLoadingMethodExternalTableViaS3MethodS3 DestinationFireboltUpdateLoadingMethodExternalTableViaS3Method = "S3"
)

func (e DestinationFireboltUpdateLoadingMethodExternalTableViaS3Method) ToPointer() *DestinationFireboltUpdateLoadingMethodExternalTableViaS3Method {
	return &e
}

func (e *DestinationFireboltUpdateLoadingMethodExternalTableViaS3Method) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "S3":
		*e = DestinationFireboltUpdateLoadingMethodExternalTableViaS3Method(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationFireboltUpdateLoadingMethodExternalTableViaS3Method: %v", v)
	}
}

// DestinationFireboltUpdateLoadingMethodExternalTableViaS3 - Loading method used to select the way data will be uploaded to Firebolt
type DestinationFireboltUpdateLoadingMethodExternalTableViaS3 struct {
	// AWS access key granting read and write access to S3.
	AwsKeyID string `json:"aws_key_id"`
	// Corresponding secret part of the AWS Key
	AwsKeySecret string                                                         `json:"aws_key_secret"`
	Method       DestinationFireboltUpdateLoadingMethodExternalTableViaS3Method `json:"method"`
	// The name of the S3 bucket.
	S3Bucket string `json:"s3_bucket"`
	// Region name of the S3 bucket.
	S3Region string `json:"s3_region"`
}

type DestinationFireboltUpdateLoadingMethodSQLInsertsMethod string

const (
	DestinationFireboltUpdateLoadingMethodSQLInsertsMethodSQL DestinationFireboltUpdateLoadingMethodSQLInsertsMethod = "SQL"
)

func (e DestinationFireboltUpdateLoadingMethodSQLInsertsMethod) ToPointer() *DestinationFireboltUpdateLoadingMethodSQLInsertsMethod {
	return &e
}

func (e *DestinationFireboltUpdateLoadingMethodSQLInsertsMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SQL":
		*e = DestinationFireboltUpdateLoadingMethodSQLInsertsMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationFireboltUpdateLoadingMethodSQLInsertsMethod: %v", v)
	}
}

// DestinationFireboltUpdateLoadingMethodSQLInserts - Loading method used to select the way data will be uploaded to Firebolt
type DestinationFireboltUpdateLoadingMethodSQLInserts struct {
	Method DestinationFireboltUpdateLoadingMethodSQLInsertsMethod `json:"method"`
}

type DestinationFireboltUpdateLoadingMethodType string

const (
	DestinationFireboltUpdateLoadingMethodTypeDestinationFireboltUpdateLoadingMethodSQLInserts         DestinationFireboltUpdateLoadingMethodType = "destination-firebolt-update_Loading Method_SQL Inserts"
	DestinationFireboltUpdateLoadingMethodTypeDestinationFireboltUpdateLoadingMethodExternalTableViaS3 DestinationFireboltUpdateLoadingMethodType = "destination-firebolt-update_Loading Method_External Table via S3"
)

type DestinationFireboltUpdateLoadingMethod struct {
	DestinationFireboltUpdateLoadingMethodSQLInserts         *DestinationFireboltUpdateLoadingMethodSQLInserts
	DestinationFireboltUpdateLoadingMethodExternalTableViaS3 *DestinationFireboltUpdateLoadingMethodExternalTableViaS3

	Type DestinationFireboltUpdateLoadingMethodType
}

func CreateDestinationFireboltUpdateLoadingMethodDestinationFireboltUpdateLoadingMethodSQLInserts(destinationFireboltUpdateLoadingMethodSQLInserts DestinationFireboltUpdateLoadingMethodSQLInserts) DestinationFireboltUpdateLoadingMethod {
	typ := DestinationFireboltUpdateLoadingMethodTypeDestinationFireboltUpdateLoadingMethodSQLInserts

	return DestinationFireboltUpdateLoadingMethod{
		DestinationFireboltUpdateLoadingMethodSQLInserts: &destinationFireboltUpdateLoadingMethodSQLInserts,
		Type: typ,
	}
}

func CreateDestinationFireboltUpdateLoadingMethodDestinationFireboltUpdateLoadingMethodExternalTableViaS3(destinationFireboltUpdateLoadingMethodExternalTableViaS3 DestinationFireboltUpdateLoadingMethodExternalTableViaS3) DestinationFireboltUpdateLoadingMethod {
	typ := DestinationFireboltUpdateLoadingMethodTypeDestinationFireboltUpdateLoadingMethodExternalTableViaS3

	return DestinationFireboltUpdateLoadingMethod{
		DestinationFireboltUpdateLoadingMethodExternalTableViaS3: &destinationFireboltUpdateLoadingMethodExternalTableViaS3,
		Type: typ,
	}
}

func (u *DestinationFireboltUpdateLoadingMethod) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	destinationFireboltUpdateLoadingMethodSQLInserts := new(DestinationFireboltUpdateLoadingMethodSQLInserts)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&destinationFireboltUpdateLoadingMethodSQLInserts); err == nil {
		u.DestinationFireboltUpdateLoadingMethodSQLInserts = destinationFireboltUpdateLoadingMethodSQLInserts
		u.Type = DestinationFireboltUpdateLoadingMethodTypeDestinationFireboltUpdateLoadingMethodSQLInserts
		return nil
	}

	destinationFireboltUpdateLoadingMethodExternalTableViaS3 := new(DestinationFireboltUpdateLoadingMethodExternalTableViaS3)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&destinationFireboltUpdateLoadingMethodExternalTableViaS3); err == nil {
		u.DestinationFireboltUpdateLoadingMethodExternalTableViaS3 = destinationFireboltUpdateLoadingMethodExternalTableViaS3
		u.Type = DestinationFireboltUpdateLoadingMethodTypeDestinationFireboltUpdateLoadingMethodExternalTableViaS3
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u DestinationFireboltUpdateLoadingMethod) MarshalJSON() ([]byte, error) {
	if u.DestinationFireboltUpdateLoadingMethodSQLInserts != nil {
		return json.Marshal(u.DestinationFireboltUpdateLoadingMethodSQLInserts)
	}

	if u.DestinationFireboltUpdateLoadingMethodExternalTableViaS3 != nil {
		return json.Marshal(u.DestinationFireboltUpdateLoadingMethodExternalTableViaS3)
	}

	return nil, nil
}

type DestinationFireboltUpdate struct {
	// Firebolt account to login.
	Account *string `json:"account,omitempty"`
	// The database to connect to.
	Database string `json:"database"`
	// Engine name or url to connect to.
	Engine *string `json:"engine,omitempty"`
	// The host name of your Firebolt database.
	Host *string `json:"host,omitempty"`
	// Loading method used to select the way data will be uploaded to Firebolt
	LoadingMethod *DestinationFireboltUpdateLoadingMethod `json:"loading_method,omitempty"`
	// Firebolt password.
	Password string `json:"password"`
	// Firebolt email address you use to login.
	Username string `json:"username"`
}
