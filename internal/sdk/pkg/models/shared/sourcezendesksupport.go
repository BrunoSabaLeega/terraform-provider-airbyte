// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"time"
)

type SourceZendeskSupportAuthenticationAPITokenCredentialsEnum string

const (
	SourceZendeskSupportAuthenticationAPITokenCredentialsEnumAPIToken SourceZendeskSupportAuthenticationAPITokenCredentialsEnum = "api_token"
)

func (e SourceZendeskSupportAuthenticationAPITokenCredentialsEnum) ToPointer() *SourceZendeskSupportAuthenticationAPITokenCredentialsEnum {
	return &e
}

func (e *SourceZendeskSupportAuthenticationAPITokenCredentialsEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "api_token":
		*e = SourceZendeskSupportAuthenticationAPITokenCredentialsEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceZendeskSupportAuthenticationAPITokenCredentialsEnum: %v", v)
	}
}

// SourceZendeskSupportAuthenticationAPIToken - Zendesk service provides two authentication methods. Choose between: `OAuth2.0` or `API token`.
type SourceZendeskSupportAuthenticationAPIToken struct {
	// The value of the API token generated. See the <a href="https://docs.airbyte.com/integrations/sources/zendesk-support#setup-guide">docs</a> for more information.
	APIToken    string                                                     `json:"api_token"`
	Credentials *SourceZendeskSupportAuthenticationAPITokenCredentialsEnum `json:"credentials,omitempty"`
	// The user email for your Zendesk account.
	Email string `json:"email"`

	AdditionalProperties map[string]interface{} `json:"-"`
}
type _SourceZendeskSupportAuthenticationAPIToken SourceZendeskSupportAuthenticationAPIToken

func (c *SourceZendeskSupportAuthenticationAPIToken) UnmarshalJSON(bs []byte) error {
	data := _SourceZendeskSupportAuthenticationAPIToken{}

	if err := json.Unmarshal(bs, &data); err != nil {
		return err
	}
	*c = SourceZendeskSupportAuthenticationAPIToken(data)

	additionalFields := make(map[string]interface{})

	if err := json.Unmarshal(bs, &additionalFields); err != nil {
		return err
	}
	delete(additionalFields, "api_token")
	delete(additionalFields, "credentials")
	delete(additionalFields, "email")

	c.AdditionalProperties = additionalFields

	return nil
}

func (c SourceZendeskSupportAuthenticationAPIToken) MarshalJSON() ([]byte, error) {
	out := map[string]interface{}{}
	bs, err := json.Marshal(_SourceZendeskSupportAuthenticationAPIToken(c))
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	bs, err = json.Marshal(c.AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	return json.Marshal(out)
}

type SourceZendeskSupportAuthenticationOAuth20CredentialsEnum string

const (
	SourceZendeskSupportAuthenticationOAuth20CredentialsEnumOauth20 SourceZendeskSupportAuthenticationOAuth20CredentialsEnum = "oauth2.0"
)

func (e SourceZendeskSupportAuthenticationOAuth20CredentialsEnum) ToPointer() *SourceZendeskSupportAuthenticationOAuth20CredentialsEnum {
	return &e
}

func (e *SourceZendeskSupportAuthenticationOAuth20CredentialsEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "oauth2.0":
		*e = SourceZendeskSupportAuthenticationOAuth20CredentialsEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceZendeskSupportAuthenticationOAuth20CredentialsEnum: %v", v)
	}
}

// SourceZendeskSupportAuthenticationOAuth20 - Zendesk service provides two authentication methods. Choose between: `OAuth2.0` or `API token`.
type SourceZendeskSupportAuthenticationOAuth20 struct {
	// The value of the API token generated. See the <a href="https://docs.airbyte.com/integrations/sources/zendesk-support">docs</a> for more information.
	AccessToken string                                                    `json:"access_token"`
	Credentials *SourceZendeskSupportAuthenticationOAuth20CredentialsEnum `json:"credentials,omitempty"`

	AdditionalProperties map[string]interface{} `json:"-"`
}
type _SourceZendeskSupportAuthenticationOAuth20 SourceZendeskSupportAuthenticationOAuth20

func (c *SourceZendeskSupportAuthenticationOAuth20) UnmarshalJSON(bs []byte) error {
	data := _SourceZendeskSupportAuthenticationOAuth20{}

	if err := json.Unmarshal(bs, &data); err != nil {
		return err
	}
	*c = SourceZendeskSupportAuthenticationOAuth20(data)

	additionalFields := make(map[string]interface{})

	if err := json.Unmarshal(bs, &additionalFields); err != nil {
		return err
	}
	delete(additionalFields, "access_token")
	delete(additionalFields, "credentials")

	c.AdditionalProperties = additionalFields

	return nil
}

func (c SourceZendeskSupportAuthenticationOAuth20) MarshalJSON() ([]byte, error) {
	out := map[string]interface{}{}
	bs, err := json.Marshal(_SourceZendeskSupportAuthenticationOAuth20(c))
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	bs, err = json.Marshal(c.AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	return json.Marshal(out)
}

type SourceZendeskSupportAuthenticationType string

const (
	SourceZendeskSupportAuthenticationTypeSourceZendeskSupportAuthenticationOAuth20  SourceZendeskSupportAuthenticationType = "source-zendesk-support_Authentication_OAuth2.0"
	SourceZendeskSupportAuthenticationTypeSourceZendeskSupportAuthenticationAPIToken SourceZendeskSupportAuthenticationType = "source-zendesk-support_Authentication_API Token"
)

type SourceZendeskSupportAuthentication struct {
	SourceZendeskSupportAuthenticationOAuth20  *SourceZendeskSupportAuthenticationOAuth20
	SourceZendeskSupportAuthenticationAPIToken *SourceZendeskSupportAuthenticationAPIToken

	Type SourceZendeskSupportAuthenticationType
}

func CreateSourceZendeskSupportAuthenticationSourceZendeskSupportAuthenticationOAuth20(sourceZendeskSupportAuthenticationOAuth20 SourceZendeskSupportAuthenticationOAuth20) SourceZendeskSupportAuthentication {
	typ := SourceZendeskSupportAuthenticationTypeSourceZendeskSupportAuthenticationOAuth20

	return SourceZendeskSupportAuthentication{
		SourceZendeskSupportAuthenticationOAuth20: &sourceZendeskSupportAuthenticationOAuth20,
		Type: typ,
	}
}

func CreateSourceZendeskSupportAuthenticationSourceZendeskSupportAuthenticationAPIToken(sourceZendeskSupportAuthenticationAPIToken SourceZendeskSupportAuthenticationAPIToken) SourceZendeskSupportAuthentication {
	typ := SourceZendeskSupportAuthenticationTypeSourceZendeskSupportAuthenticationAPIToken

	return SourceZendeskSupportAuthentication{
		SourceZendeskSupportAuthenticationAPIToken: &sourceZendeskSupportAuthenticationAPIToken,
		Type: typ,
	}
}

func (u *SourceZendeskSupportAuthentication) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	sourceZendeskSupportAuthenticationOAuth20 := new(SourceZendeskSupportAuthenticationOAuth20)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceZendeskSupportAuthenticationOAuth20); err == nil {
		u.SourceZendeskSupportAuthenticationOAuth20 = sourceZendeskSupportAuthenticationOAuth20
		u.Type = SourceZendeskSupportAuthenticationTypeSourceZendeskSupportAuthenticationOAuth20
		return nil
	}

	sourceZendeskSupportAuthenticationAPIToken := new(SourceZendeskSupportAuthenticationAPIToken)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceZendeskSupportAuthenticationAPIToken); err == nil {
		u.SourceZendeskSupportAuthenticationAPIToken = sourceZendeskSupportAuthenticationAPIToken
		u.Type = SourceZendeskSupportAuthenticationTypeSourceZendeskSupportAuthenticationAPIToken
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceZendeskSupportAuthentication) MarshalJSON() ([]byte, error) {
	if u.SourceZendeskSupportAuthenticationOAuth20 != nil {
		return json.Marshal(u.SourceZendeskSupportAuthenticationOAuth20)
	}

	if u.SourceZendeskSupportAuthenticationAPIToken != nil {
		return json.Marshal(u.SourceZendeskSupportAuthenticationAPIToken)
	}

	return nil, nil
}

type SourceZendeskSupportZendeskSupportEnum string

const (
	SourceZendeskSupportZendeskSupportEnumZendeskSupport SourceZendeskSupportZendeskSupportEnum = "zendesk-support"
)

func (e SourceZendeskSupportZendeskSupportEnum) ToPointer() *SourceZendeskSupportZendeskSupportEnum {
	return &e
}

func (e *SourceZendeskSupportZendeskSupportEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "zendesk-support":
		*e = SourceZendeskSupportZendeskSupportEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceZendeskSupportZendeskSupportEnum: %v", v)
	}
}

type SourceZendeskSupport struct {
	// Zendesk service provides two authentication methods. Choose between: `OAuth2.0` or `API token`.
	Credentials *SourceZendeskSupportAuthentication `json:"credentials,omitempty"`
	// Makes each stream read a single page of data.
	IgnorePagination *bool                                  `json:"ignore_pagination,omitempty"`
	SourceType       SourceZendeskSupportZendeskSupportEnum `json:"sourceType"`
	// The date from which you'd like to replicate data for Zendesk Support API, in the format YYYY-MM-DDT00:00:00Z. All data generated after this date will be replicated.
	StartDate time.Time `json:"start_date"`
	// This is your Zendesk subdomain that can be found in your account URL. For example, in https://{MY_SUBDOMAIN}.zendesk.com/, where MY_SUBDOMAIN is the value of your subdomain.
	Subdomain string `json:"subdomain"`
}
