// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"time"
)

type SourceS3UpdateFileFormatJsonlFiletype string

const (
	SourceS3UpdateFileFormatJsonlFiletypeJsonl SourceS3UpdateFileFormatJsonlFiletype = "jsonl"
)

func (e SourceS3UpdateFileFormatJsonlFiletype) ToPointer() *SourceS3UpdateFileFormatJsonlFiletype {
	return &e
}

func (e *SourceS3UpdateFileFormatJsonlFiletype) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "jsonl":
		*e = SourceS3UpdateFileFormatJsonlFiletype(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceS3UpdateFileFormatJsonlFiletype: %v", v)
	}
}

// SourceS3UpdateFileFormatJsonlUnexpectedFieldBehavior - How JSON fields outside of explicit_schema (if given) are treated. Check <a href="https://arrow.apache.org/docs/python/generated/pyarrow.json.ParseOptions.html" target="_blank">PyArrow documentation</a> for details
type SourceS3UpdateFileFormatJsonlUnexpectedFieldBehavior string

const (
	SourceS3UpdateFileFormatJsonlUnexpectedFieldBehaviorIgnore SourceS3UpdateFileFormatJsonlUnexpectedFieldBehavior = "ignore"
	SourceS3UpdateFileFormatJsonlUnexpectedFieldBehaviorInfer  SourceS3UpdateFileFormatJsonlUnexpectedFieldBehavior = "infer"
	SourceS3UpdateFileFormatJsonlUnexpectedFieldBehaviorError  SourceS3UpdateFileFormatJsonlUnexpectedFieldBehavior = "error"
)

func (e SourceS3UpdateFileFormatJsonlUnexpectedFieldBehavior) ToPointer() *SourceS3UpdateFileFormatJsonlUnexpectedFieldBehavior {
	return &e
}

func (e *SourceS3UpdateFileFormatJsonlUnexpectedFieldBehavior) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ignore":
		fallthrough
	case "infer":
		fallthrough
	case "error":
		*e = SourceS3UpdateFileFormatJsonlUnexpectedFieldBehavior(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceS3UpdateFileFormatJsonlUnexpectedFieldBehavior: %v", v)
	}
}

// SourceS3UpdateFileFormatJsonl - This connector uses <a href="https://arrow.apache.org/docs/python/json.html" target="_blank">PyArrow</a> for JSON Lines (jsonl) file parsing.
type SourceS3UpdateFileFormatJsonl struct {
	// The chunk size in bytes to process at a time in memory from each file. If your data is particularly wide and failing during schema detection, increasing this should solve it. Beware of raising this too high as you could hit OOM errors.
	BlockSize *int64                                 `json:"block_size,omitempty"`
	Filetype  *SourceS3UpdateFileFormatJsonlFiletype `json:"filetype,omitempty"`
	// Whether newline characters are allowed in JSON values. Turning this on may affect performance. Leave blank to default to False.
	NewlinesInValues *bool `json:"newlines_in_values,omitempty"`
	// How JSON fields outside of explicit_schema (if given) are treated. Check <a href="https://arrow.apache.org/docs/python/generated/pyarrow.json.ParseOptions.html" target="_blank">PyArrow documentation</a> for details
	UnexpectedFieldBehavior *SourceS3UpdateFileFormatJsonlUnexpectedFieldBehavior `json:"unexpected_field_behavior,omitempty"`
}

type SourceS3UpdateFileFormatAvroFiletype string

const (
	SourceS3UpdateFileFormatAvroFiletypeAvro SourceS3UpdateFileFormatAvroFiletype = "avro"
)

func (e SourceS3UpdateFileFormatAvroFiletype) ToPointer() *SourceS3UpdateFileFormatAvroFiletype {
	return &e
}

func (e *SourceS3UpdateFileFormatAvroFiletype) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "avro":
		*e = SourceS3UpdateFileFormatAvroFiletype(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceS3UpdateFileFormatAvroFiletype: %v", v)
	}
}

// SourceS3UpdateFileFormatAvro - This connector utilises <a href="https://fastavro.readthedocs.io/en/latest/" target="_blank">fastavro</a> for Avro parsing.
type SourceS3UpdateFileFormatAvro struct {
	Filetype *SourceS3UpdateFileFormatAvroFiletype `json:"filetype,omitempty"`
}

type SourceS3UpdateFileFormatParquetFiletype string

const (
	SourceS3UpdateFileFormatParquetFiletypeParquet SourceS3UpdateFileFormatParquetFiletype = "parquet"
)

func (e SourceS3UpdateFileFormatParquetFiletype) ToPointer() *SourceS3UpdateFileFormatParquetFiletype {
	return &e
}

func (e *SourceS3UpdateFileFormatParquetFiletype) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "parquet":
		*e = SourceS3UpdateFileFormatParquetFiletype(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceS3UpdateFileFormatParquetFiletype: %v", v)
	}
}

// SourceS3UpdateFileFormatParquet - This connector utilises <a href="https://arrow.apache.org/docs/python/generated/pyarrow.parquet.ParquetFile.html" target="_blank">PyArrow (Apache Arrow)</a> for Parquet parsing.
type SourceS3UpdateFileFormatParquet struct {
	// Maximum number of records per batch read from the input files. Batches may be smaller if there arenâ€™t enough rows in the file. This option can help avoid out-of-memory errors if your data is particularly wide.
	BatchSize *int64 `json:"batch_size,omitempty"`
	// Perform read buffering when deserializing individual column chunks. By default every group column will be loaded fully to memory. This option can help avoid out-of-memory errors if your data is particularly wide.
	BufferSize *int64 `json:"buffer_size,omitempty"`
	// If you only want to sync a subset of the columns from the file(s), add the columns you want here as a comma-delimited list. Leave it empty to sync all columns.
	Columns  []string                                 `json:"columns,omitempty"`
	Filetype *SourceS3UpdateFileFormatParquetFiletype `json:"filetype,omitempty"`
}

type SourceS3UpdateFileFormatCSVFiletype string

const (
	SourceS3UpdateFileFormatCSVFiletypeCsv SourceS3UpdateFileFormatCSVFiletype = "csv"
)

func (e SourceS3UpdateFileFormatCSVFiletype) ToPointer() *SourceS3UpdateFileFormatCSVFiletype {
	return &e
}

func (e *SourceS3UpdateFileFormatCSVFiletype) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "csv":
		*e = SourceS3UpdateFileFormatCSVFiletype(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceS3UpdateFileFormatCSVFiletype: %v", v)
	}
}

// SourceS3UpdateFileFormatCSV - This connector utilises <a href="https: // arrow.apache.org/docs/python/generated/pyarrow.csv.open_csv.html" target="_blank">PyArrow (Apache Arrow)</a> for CSV parsing.
type SourceS3UpdateFileFormatCSV struct {
	// Optionally add a valid JSON string here to provide additional options to the csv reader. Mappings must correspond to options <a href="https://arrow.apache.org/docs/python/generated/pyarrow.csv.ConvertOptions.html#pyarrow.csv.ConvertOptions" target="_blank">detailed here</a>. 'column_types' is used internally to handle schema so overriding that would likely cause problems.
	AdditionalReaderOptions *string `json:"additional_reader_options,omitempty"`
	// Optionally add a valid JSON string here to provide additional <a href="https://arrow.apache.org/docs/python/generated/pyarrow.csv.ReadOptions.html#pyarrow.csv.ReadOptions" target="_blank">Pyarrow ReadOptions</a>. Specify 'column_names' here if your CSV doesn't have header, or if you want to use custom column names. 'block_size' and 'encoding' are already used above, specify them again here will override the values above.
	AdvancedOptions *string `json:"advanced_options,omitempty"`
	// The chunk size in bytes to process at a time in memory from each file. If your data is particularly wide and failing during schema detection, increasing this should solve it. Beware of raising this too high as you could hit OOM errors.
	BlockSize *int64 `json:"block_size,omitempty"`
	// The character delimiting individual cells in the CSV data. This may only be a 1-character string. For tab-delimited data enter '\t'.
	Delimiter *string `json:"delimiter,omitempty"`
	// Whether two quotes in a quoted CSV value denote a single quote in the data.
	DoubleQuote *bool `json:"double_quote,omitempty"`
	// The character encoding of the CSV data. Leave blank to default to <strong>UTF8</strong>. See <a href="https://docs.python.org/3/library/codecs.html#standard-encodings" target="_blank">list of python encodings</a> for allowable options.
	Encoding *string `json:"encoding,omitempty"`
	// The character used for escaping special characters. To disallow escaping, leave this field blank.
	EscapeChar *string                              `json:"escape_char,omitempty"`
	Filetype   *SourceS3UpdateFileFormatCSVFiletype `json:"filetype,omitempty"`
	// Configures whether a schema for the source should be inferred from the current data or not. If set to false and a custom schema is set, then the manually enforced schema is used. If a schema is not manually set, and this is set to false, then all fields will be read as strings
	InferDatatypes *bool `json:"infer_datatypes,omitempty"`
	// Whether newline characters are allowed in CSV values. Turning this on may affect performance. Leave blank to default to False.
	NewlinesInValues *bool `json:"newlines_in_values,omitempty"`
	// The character used for quoting CSV values. To disallow quoting, make this field blank.
	QuoteChar *string `json:"quote_char,omitempty"`
}

type SourceS3UpdateFileFormatType string

const (
	SourceS3UpdateFileFormatTypeSourceS3UpdateFileFormatCSV     SourceS3UpdateFileFormatType = "source-s3-update_File Format_CSV"
	SourceS3UpdateFileFormatTypeSourceS3UpdateFileFormatParquet SourceS3UpdateFileFormatType = "source-s3-update_File Format_Parquet"
	SourceS3UpdateFileFormatTypeSourceS3UpdateFileFormatAvro    SourceS3UpdateFileFormatType = "source-s3-update_File Format_Avro"
	SourceS3UpdateFileFormatTypeSourceS3UpdateFileFormatJsonl   SourceS3UpdateFileFormatType = "source-s3-update_File Format_Jsonl"
)

type SourceS3UpdateFileFormat struct {
	SourceS3UpdateFileFormatCSV     *SourceS3UpdateFileFormatCSV
	SourceS3UpdateFileFormatParquet *SourceS3UpdateFileFormatParquet
	SourceS3UpdateFileFormatAvro    *SourceS3UpdateFileFormatAvro
	SourceS3UpdateFileFormatJsonl   *SourceS3UpdateFileFormatJsonl

	Type SourceS3UpdateFileFormatType
}

func CreateSourceS3UpdateFileFormatSourceS3UpdateFileFormatCSV(sourceS3UpdateFileFormatCSV SourceS3UpdateFileFormatCSV) SourceS3UpdateFileFormat {
	typ := SourceS3UpdateFileFormatTypeSourceS3UpdateFileFormatCSV

	return SourceS3UpdateFileFormat{
		SourceS3UpdateFileFormatCSV: &sourceS3UpdateFileFormatCSV,
		Type:                        typ,
	}
}

func CreateSourceS3UpdateFileFormatSourceS3UpdateFileFormatParquet(sourceS3UpdateFileFormatParquet SourceS3UpdateFileFormatParquet) SourceS3UpdateFileFormat {
	typ := SourceS3UpdateFileFormatTypeSourceS3UpdateFileFormatParquet

	return SourceS3UpdateFileFormat{
		SourceS3UpdateFileFormatParquet: &sourceS3UpdateFileFormatParquet,
		Type:                            typ,
	}
}

func CreateSourceS3UpdateFileFormatSourceS3UpdateFileFormatAvro(sourceS3UpdateFileFormatAvro SourceS3UpdateFileFormatAvro) SourceS3UpdateFileFormat {
	typ := SourceS3UpdateFileFormatTypeSourceS3UpdateFileFormatAvro

	return SourceS3UpdateFileFormat{
		SourceS3UpdateFileFormatAvro: &sourceS3UpdateFileFormatAvro,
		Type:                         typ,
	}
}

func CreateSourceS3UpdateFileFormatSourceS3UpdateFileFormatJsonl(sourceS3UpdateFileFormatJsonl SourceS3UpdateFileFormatJsonl) SourceS3UpdateFileFormat {
	typ := SourceS3UpdateFileFormatTypeSourceS3UpdateFileFormatJsonl

	return SourceS3UpdateFileFormat{
		SourceS3UpdateFileFormatJsonl: &sourceS3UpdateFileFormatJsonl,
		Type:                          typ,
	}
}

func (u *SourceS3UpdateFileFormat) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	sourceS3UpdateFileFormatCSV := new(SourceS3UpdateFileFormatCSV)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceS3UpdateFileFormatCSV); err == nil {
		u.SourceS3UpdateFileFormatCSV = sourceS3UpdateFileFormatCSV
		u.Type = SourceS3UpdateFileFormatTypeSourceS3UpdateFileFormatCSV
		return nil
	}

	sourceS3UpdateFileFormatParquet := new(SourceS3UpdateFileFormatParquet)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceS3UpdateFileFormatParquet); err == nil {
		u.SourceS3UpdateFileFormatParquet = sourceS3UpdateFileFormatParquet
		u.Type = SourceS3UpdateFileFormatTypeSourceS3UpdateFileFormatParquet
		return nil
	}

	sourceS3UpdateFileFormatAvro := new(SourceS3UpdateFileFormatAvro)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceS3UpdateFileFormatAvro); err == nil {
		u.SourceS3UpdateFileFormatAvro = sourceS3UpdateFileFormatAvro
		u.Type = SourceS3UpdateFileFormatTypeSourceS3UpdateFileFormatAvro
		return nil
	}

	sourceS3UpdateFileFormatJsonl := new(SourceS3UpdateFileFormatJsonl)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceS3UpdateFileFormatJsonl); err == nil {
		u.SourceS3UpdateFileFormatJsonl = sourceS3UpdateFileFormatJsonl
		u.Type = SourceS3UpdateFileFormatTypeSourceS3UpdateFileFormatJsonl
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceS3UpdateFileFormat) MarshalJSON() ([]byte, error) {
	if u.SourceS3UpdateFileFormatCSV != nil {
		return json.Marshal(u.SourceS3UpdateFileFormatCSV)
	}

	if u.SourceS3UpdateFileFormatParquet != nil {
		return json.Marshal(u.SourceS3UpdateFileFormatParquet)
	}

	if u.SourceS3UpdateFileFormatAvro != nil {
		return json.Marshal(u.SourceS3UpdateFileFormatAvro)
	}

	if u.SourceS3UpdateFileFormatJsonl != nil {
		return json.Marshal(u.SourceS3UpdateFileFormatJsonl)
	}

	return nil, nil
}

// SourceS3UpdateS3AmazonWebServices - Use this to load files from S3 or S3-compatible services
type SourceS3UpdateS3AmazonWebServices struct {
	// In order to access private Buckets stored on AWS S3, this connector requires credentials with the proper permissions. If accessing publicly available data, this field is not necessary.
	AwsAccessKeyID *string `json:"aws_access_key_id,omitempty"`
	// In order to access private Buckets stored on AWS S3, this connector requires credentials with the proper permissions. If accessing publicly available data, this field is not necessary.
	AwsSecretAccessKey *string `json:"aws_secret_access_key,omitempty"`
	// Name of the S3 bucket where the file(s) exist.
	Bucket string `json:"bucket"`
	// Endpoint to an S3 compatible service. Leave empty to use AWS.
	Endpoint *string `json:"endpoint,omitempty"`
	// By providing a path-like prefix (e.g. myFolder/thisTable/) under which all the relevant files sit, we can optimize finding these in S3. This is optional but recommended if your bucket contains many folders/files which you don't need to replicate.
	PathPrefix *string `json:"path_prefix,omitempty"`
	// UTC date and time in the format 2017-01-25T00:00:00Z. Any file modified before this date will not be replicated.
	StartDate *time.Time `json:"start_date,omitempty"`
}

type SourceS3Update struct {
	// The name of the stream you would like this source to output. Can contain letters, numbers, or underscores.
	Dataset string `json:"dataset"`
	// The format of the files you'd like to replicate
	Format *SourceS3UpdateFileFormat `json:"format,omitempty"`
	// A regular expression which tells the connector which files to replicate. All files which match this pattern will be replicated. Use | to separate multiple patterns. See <a href="https://facelessuser.github.io/wcmatch/glob/" target="_blank">this page</a> to understand pattern syntax (GLOBSTAR and SPLIT flags are enabled). Use pattern <strong>**</strong> to pick up all files.
	PathPattern string `json:"path_pattern"`
	// Use this to load files from S3 or S3-compatible services
	Provider SourceS3UpdateS3AmazonWebServices `json:"provider"`
	// Optionally provide a schema to enforce, as a valid JSON string. Ensure this is a mapping of <strong>{ "column" : "type" }</strong>, where types are valid <a href="https://json-schema.org/understanding-json-schema/reference/type.html" target="_blank">JSON Schema datatypes</a>. Leave as {} to auto-infer the schema.
	Schema *string `json:"schema,omitempty"`
}
