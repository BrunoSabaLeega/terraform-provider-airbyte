// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type DestinationScyllaScyllaEnum string

const (
	DestinationScyllaScyllaEnumScylla DestinationScyllaScyllaEnum = "scylla"
)

func (e *DestinationScyllaScyllaEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "scylla":
		*e = DestinationScyllaScyllaEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationScyllaScyllaEnum: %s", s)
	}
}

// DestinationScylla - The values required to configure the destination.
type DestinationScylla struct {
	// Address to connect to.
	Address         string                      `json:"address"`
	DestinationType DestinationScyllaScyllaEnum `json:"destinationType"`
	// Default Scylla keyspace to create data in.
	Keyspace string `json:"keyspace"`
	// Password associated with Scylla.
	Password string `json:"password"`
	// Port of Scylla.
	Port int64 `json:"port"`
	// Indicates to how many nodes the data should be replicated to.
	Replication *int64 `json:"replication,omitempty"`
	// Username to use to access Scylla.
	Username string `json:"username"`
}
