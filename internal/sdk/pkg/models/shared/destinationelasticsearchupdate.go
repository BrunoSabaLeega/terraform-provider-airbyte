// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

type DestinationElasticsearchUpdateAuthenticationMethodUsernamePasswordMethod string

const (
	DestinationElasticsearchUpdateAuthenticationMethodUsernamePasswordMethodBasic DestinationElasticsearchUpdateAuthenticationMethodUsernamePasswordMethod = "basic"
)

func (e DestinationElasticsearchUpdateAuthenticationMethodUsernamePasswordMethod) ToPointer() *DestinationElasticsearchUpdateAuthenticationMethodUsernamePasswordMethod {
	return &e
}

func (e *DestinationElasticsearchUpdateAuthenticationMethodUsernamePasswordMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "basic":
		*e = DestinationElasticsearchUpdateAuthenticationMethodUsernamePasswordMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationElasticsearchUpdateAuthenticationMethodUsernamePasswordMethod: %v", v)
	}
}

// DestinationElasticsearchUpdateAuthenticationMethodUsernamePassword - Basic auth header with a username and password
type DestinationElasticsearchUpdateAuthenticationMethodUsernamePassword struct {
	Method DestinationElasticsearchUpdateAuthenticationMethodUsernamePasswordMethod `json:"method"`
	// Basic auth password to access a secure Elasticsearch server
	Password string `json:"password"`
	// Basic auth username to access a secure Elasticsearch server
	Username string `json:"username"`
}

type DestinationElasticsearchUpdateAuthenticationMethodAPIKeySecretMethod string

const (
	DestinationElasticsearchUpdateAuthenticationMethodAPIKeySecretMethodSecret DestinationElasticsearchUpdateAuthenticationMethodAPIKeySecretMethod = "secret"
)

func (e DestinationElasticsearchUpdateAuthenticationMethodAPIKeySecretMethod) ToPointer() *DestinationElasticsearchUpdateAuthenticationMethodAPIKeySecretMethod {
	return &e
}

func (e *DestinationElasticsearchUpdateAuthenticationMethodAPIKeySecretMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "secret":
		*e = DestinationElasticsearchUpdateAuthenticationMethodAPIKeySecretMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationElasticsearchUpdateAuthenticationMethodAPIKeySecretMethod: %v", v)
	}
}

// DestinationElasticsearchUpdateAuthenticationMethodAPIKeySecret - Use a api key and secret combination to authenticate
type DestinationElasticsearchUpdateAuthenticationMethodAPIKeySecret struct {
	// The Key ID to used when accessing an enterprise Elasticsearch instance.
	APIKeyID string `json:"apiKeyId"`
	// The secret associated with the API Key ID.
	APIKeySecret string                                                               `json:"apiKeySecret"`
	Method       DestinationElasticsearchUpdateAuthenticationMethodAPIKeySecretMethod `json:"method"`
}

type DestinationElasticsearchUpdateAuthenticationMethodType string

const (
	DestinationElasticsearchUpdateAuthenticationMethodTypeDestinationElasticsearchUpdateAuthenticationMethodAPIKeySecret     DestinationElasticsearchUpdateAuthenticationMethodType = "destination-elasticsearch-update_Authentication Method_Api Key/Secret"
	DestinationElasticsearchUpdateAuthenticationMethodTypeDestinationElasticsearchUpdateAuthenticationMethodUsernamePassword DestinationElasticsearchUpdateAuthenticationMethodType = "destination-elasticsearch-update_Authentication Method_Username/Password"
)

type DestinationElasticsearchUpdateAuthenticationMethod struct {
	DestinationElasticsearchUpdateAuthenticationMethodAPIKeySecret     *DestinationElasticsearchUpdateAuthenticationMethodAPIKeySecret
	DestinationElasticsearchUpdateAuthenticationMethodUsernamePassword *DestinationElasticsearchUpdateAuthenticationMethodUsernamePassword

	Type DestinationElasticsearchUpdateAuthenticationMethodType
}

func CreateDestinationElasticsearchUpdateAuthenticationMethodDestinationElasticsearchUpdateAuthenticationMethodAPIKeySecret(destinationElasticsearchUpdateAuthenticationMethodAPIKeySecret DestinationElasticsearchUpdateAuthenticationMethodAPIKeySecret) DestinationElasticsearchUpdateAuthenticationMethod {
	typ := DestinationElasticsearchUpdateAuthenticationMethodTypeDestinationElasticsearchUpdateAuthenticationMethodAPIKeySecret

	return DestinationElasticsearchUpdateAuthenticationMethod{
		DestinationElasticsearchUpdateAuthenticationMethodAPIKeySecret: &destinationElasticsearchUpdateAuthenticationMethodAPIKeySecret,
		Type: typ,
	}
}

func CreateDestinationElasticsearchUpdateAuthenticationMethodDestinationElasticsearchUpdateAuthenticationMethodUsernamePassword(destinationElasticsearchUpdateAuthenticationMethodUsernamePassword DestinationElasticsearchUpdateAuthenticationMethodUsernamePassword) DestinationElasticsearchUpdateAuthenticationMethod {
	typ := DestinationElasticsearchUpdateAuthenticationMethodTypeDestinationElasticsearchUpdateAuthenticationMethodUsernamePassword

	return DestinationElasticsearchUpdateAuthenticationMethod{
		DestinationElasticsearchUpdateAuthenticationMethodUsernamePassword: &destinationElasticsearchUpdateAuthenticationMethodUsernamePassword,
		Type: typ,
	}
}

func (u *DestinationElasticsearchUpdateAuthenticationMethod) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	destinationElasticsearchUpdateAuthenticationMethodAPIKeySecret := new(DestinationElasticsearchUpdateAuthenticationMethodAPIKeySecret)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&destinationElasticsearchUpdateAuthenticationMethodAPIKeySecret); err == nil {
		u.DestinationElasticsearchUpdateAuthenticationMethodAPIKeySecret = destinationElasticsearchUpdateAuthenticationMethodAPIKeySecret
		u.Type = DestinationElasticsearchUpdateAuthenticationMethodTypeDestinationElasticsearchUpdateAuthenticationMethodAPIKeySecret
		return nil
	}

	destinationElasticsearchUpdateAuthenticationMethodUsernamePassword := new(DestinationElasticsearchUpdateAuthenticationMethodUsernamePassword)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&destinationElasticsearchUpdateAuthenticationMethodUsernamePassword); err == nil {
		u.DestinationElasticsearchUpdateAuthenticationMethodUsernamePassword = destinationElasticsearchUpdateAuthenticationMethodUsernamePassword
		u.Type = DestinationElasticsearchUpdateAuthenticationMethodTypeDestinationElasticsearchUpdateAuthenticationMethodUsernamePassword
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u DestinationElasticsearchUpdateAuthenticationMethod) MarshalJSON() ([]byte, error) {
	if u.DestinationElasticsearchUpdateAuthenticationMethodAPIKeySecret != nil {
		return json.Marshal(u.DestinationElasticsearchUpdateAuthenticationMethodAPIKeySecret)
	}

	if u.DestinationElasticsearchUpdateAuthenticationMethodUsernamePassword != nil {
		return json.Marshal(u.DestinationElasticsearchUpdateAuthenticationMethodUsernamePassword)
	}

	return nil, nil
}

type DestinationElasticsearchUpdate struct {
	// The type of authentication to be used
	AuthenticationMethod *DestinationElasticsearchUpdateAuthenticationMethod `json:"authenticationMethod,omitempty"`
	// CA certificate
	CaCertificate *string `json:"ca_certificate,omitempty"`
	// The full url of the Elasticsearch server
	Endpoint string `json:"endpoint"`
	// If a primary key identifier is defined in the source, an upsert will be performed using the primary key value as the elasticsearch doc id. Does not support composite primary keys.
	Upsert *bool `json:"upsert,omitempty"`
}
