// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

// DestinationMariadbColumnstoreUpdateSSHTunnelMethodPasswordAuthenticationTunnelMethod - Connect through a jump server tunnel host using username and password authentication
type DestinationMariadbColumnstoreUpdateSSHTunnelMethodPasswordAuthenticationTunnelMethod string

const (
	DestinationMariadbColumnstoreUpdateSSHTunnelMethodPasswordAuthenticationTunnelMethodSSHPasswordAuth DestinationMariadbColumnstoreUpdateSSHTunnelMethodPasswordAuthenticationTunnelMethod = "SSH_PASSWORD_AUTH"
)

func (e DestinationMariadbColumnstoreUpdateSSHTunnelMethodPasswordAuthenticationTunnelMethod) ToPointer() *DestinationMariadbColumnstoreUpdateSSHTunnelMethodPasswordAuthenticationTunnelMethod {
	return &e
}

func (e *DestinationMariadbColumnstoreUpdateSSHTunnelMethodPasswordAuthenticationTunnelMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SSH_PASSWORD_AUTH":
		*e = DestinationMariadbColumnstoreUpdateSSHTunnelMethodPasswordAuthenticationTunnelMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationMariadbColumnstoreUpdateSSHTunnelMethodPasswordAuthenticationTunnelMethod: %v", v)
	}
}

// DestinationMariadbColumnstoreUpdateSSHTunnelMethodPasswordAuthentication - Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.
type DestinationMariadbColumnstoreUpdateSSHTunnelMethodPasswordAuthentication struct {
	// Hostname of the jump server host that allows inbound ssh tunnel.
	TunnelHost string `json:"tunnel_host"`
	// Connect through a jump server tunnel host using username and password authentication
	TunnelMethod DestinationMariadbColumnstoreUpdateSSHTunnelMethodPasswordAuthenticationTunnelMethod `json:"tunnel_method"`
	// Port on the proxy/jump server that accepts inbound ssh connections.
	TunnelPort int64 `json:"tunnel_port"`
	// OS-level username for logging into the jump server host
	TunnelUser string `json:"tunnel_user"`
	// OS-level password for logging into the jump server host
	TunnelUserPassword string `json:"tunnel_user_password"`
}

// DestinationMariadbColumnstoreUpdateSSHTunnelMethodSSHKeyAuthenticationTunnelMethod - Connect through a jump server tunnel host using username and ssh key
type DestinationMariadbColumnstoreUpdateSSHTunnelMethodSSHKeyAuthenticationTunnelMethod string

const (
	DestinationMariadbColumnstoreUpdateSSHTunnelMethodSSHKeyAuthenticationTunnelMethodSSHKeyAuth DestinationMariadbColumnstoreUpdateSSHTunnelMethodSSHKeyAuthenticationTunnelMethod = "SSH_KEY_AUTH"
)

func (e DestinationMariadbColumnstoreUpdateSSHTunnelMethodSSHKeyAuthenticationTunnelMethod) ToPointer() *DestinationMariadbColumnstoreUpdateSSHTunnelMethodSSHKeyAuthenticationTunnelMethod {
	return &e
}

func (e *DestinationMariadbColumnstoreUpdateSSHTunnelMethodSSHKeyAuthenticationTunnelMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SSH_KEY_AUTH":
		*e = DestinationMariadbColumnstoreUpdateSSHTunnelMethodSSHKeyAuthenticationTunnelMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationMariadbColumnstoreUpdateSSHTunnelMethodSSHKeyAuthenticationTunnelMethod: %v", v)
	}
}

// DestinationMariadbColumnstoreUpdateSSHTunnelMethodSSHKeyAuthentication - Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.
type DestinationMariadbColumnstoreUpdateSSHTunnelMethodSSHKeyAuthentication struct {
	// OS-level user account ssh key credentials in RSA PEM format ( created with ssh-keygen -t rsa -m PEM -f myuser_rsa )
	SSHKey string `json:"ssh_key"`
	// Hostname of the jump server host that allows inbound ssh tunnel.
	TunnelHost string `json:"tunnel_host"`
	// Connect through a jump server tunnel host using username and ssh key
	TunnelMethod DestinationMariadbColumnstoreUpdateSSHTunnelMethodSSHKeyAuthenticationTunnelMethod `json:"tunnel_method"`
	// Port on the proxy/jump server that accepts inbound ssh connections.
	TunnelPort int64 `json:"tunnel_port"`
	// OS-level username for logging into the jump server host.
	TunnelUser string `json:"tunnel_user"`
}

// DestinationMariadbColumnstoreUpdateSSHTunnelMethodNoTunnelTunnelMethod - No ssh tunnel needed to connect to database
type DestinationMariadbColumnstoreUpdateSSHTunnelMethodNoTunnelTunnelMethod string

const (
	DestinationMariadbColumnstoreUpdateSSHTunnelMethodNoTunnelTunnelMethodNoTunnel DestinationMariadbColumnstoreUpdateSSHTunnelMethodNoTunnelTunnelMethod = "NO_TUNNEL"
)

func (e DestinationMariadbColumnstoreUpdateSSHTunnelMethodNoTunnelTunnelMethod) ToPointer() *DestinationMariadbColumnstoreUpdateSSHTunnelMethodNoTunnelTunnelMethod {
	return &e
}

func (e *DestinationMariadbColumnstoreUpdateSSHTunnelMethodNoTunnelTunnelMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NO_TUNNEL":
		*e = DestinationMariadbColumnstoreUpdateSSHTunnelMethodNoTunnelTunnelMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationMariadbColumnstoreUpdateSSHTunnelMethodNoTunnelTunnelMethod: %v", v)
	}
}

// DestinationMariadbColumnstoreUpdateSSHTunnelMethodNoTunnel - Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.
type DestinationMariadbColumnstoreUpdateSSHTunnelMethodNoTunnel struct {
	// No ssh tunnel needed to connect to database
	TunnelMethod DestinationMariadbColumnstoreUpdateSSHTunnelMethodNoTunnelTunnelMethod `json:"tunnel_method"`
}

type DestinationMariadbColumnstoreUpdateSSHTunnelMethodType string

const (
	DestinationMariadbColumnstoreUpdateSSHTunnelMethodTypeDestinationMariadbColumnstoreUpdateSSHTunnelMethodNoTunnel               DestinationMariadbColumnstoreUpdateSSHTunnelMethodType = "destination-mariadb-columnstore-update_SSH Tunnel Method_No Tunnel"
	DestinationMariadbColumnstoreUpdateSSHTunnelMethodTypeDestinationMariadbColumnstoreUpdateSSHTunnelMethodSSHKeyAuthentication   DestinationMariadbColumnstoreUpdateSSHTunnelMethodType = "destination-mariadb-columnstore-update_SSH Tunnel Method_SSH Key Authentication"
	DestinationMariadbColumnstoreUpdateSSHTunnelMethodTypeDestinationMariadbColumnstoreUpdateSSHTunnelMethodPasswordAuthentication DestinationMariadbColumnstoreUpdateSSHTunnelMethodType = "destination-mariadb-columnstore-update_SSH Tunnel Method_Password Authentication"
)

type DestinationMariadbColumnstoreUpdateSSHTunnelMethod struct {
	DestinationMariadbColumnstoreUpdateSSHTunnelMethodNoTunnel               *DestinationMariadbColumnstoreUpdateSSHTunnelMethodNoTunnel
	DestinationMariadbColumnstoreUpdateSSHTunnelMethodSSHKeyAuthentication   *DestinationMariadbColumnstoreUpdateSSHTunnelMethodSSHKeyAuthentication
	DestinationMariadbColumnstoreUpdateSSHTunnelMethodPasswordAuthentication *DestinationMariadbColumnstoreUpdateSSHTunnelMethodPasswordAuthentication

	Type DestinationMariadbColumnstoreUpdateSSHTunnelMethodType
}

func CreateDestinationMariadbColumnstoreUpdateSSHTunnelMethodDestinationMariadbColumnstoreUpdateSSHTunnelMethodNoTunnel(destinationMariadbColumnstoreUpdateSSHTunnelMethodNoTunnel DestinationMariadbColumnstoreUpdateSSHTunnelMethodNoTunnel) DestinationMariadbColumnstoreUpdateSSHTunnelMethod {
	typ := DestinationMariadbColumnstoreUpdateSSHTunnelMethodTypeDestinationMariadbColumnstoreUpdateSSHTunnelMethodNoTunnel

	return DestinationMariadbColumnstoreUpdateSSHTunnelMethod{
		DestinationMariadbColumnstoreUpdateSSHTunnelMethodNoTunnel: &destinationMariadbColumnstoreUpdateSSHTunnelMethodNoTunnel,
		Type: typ,
	}
}

func CreateDestinationMariadbColumnstoreUpdateSSHTunnelMethodDestinationMariadbColumnstoreUpdateSSHTunnelMethodSSHKeyAuthentication(destinationMariadbColumnstoreUpdateSSHTunnelMethodSSHKeyAuthentication DestinationMariadbColumnstoreUpdateSSHTunnelMethodSSHKeyAuthentication) DestinationMariadbColumnstoreUpdateSSHTunnelMethod {
	typ := DestinationMariadbColumnstoreUpdateSSHTunnelMethodTypeDestinationMariadbColumnstoreUpdateSSHTunnelMethodSSHKeyAuthentication

	return DestinationMariadbColumnstoreUpdateSSHTunnelMethod{
		DestinationMariadbColumnstoreUpdateSSHTunnelMethodSSHKeyAuthentication: &destinationMariadbColumnstoreUpdateSSHTunnelMethodSSHKeyAuthentication,
		Type: typ,
	}
}

func CreateDestinationMariadbColumnstoreUpdateSSHTunnelMethodDestinationMariadbColumnstoreUpdateSSHTunnelMethodPasswordAuthentication(destinationMariadbColumnstoreUpdateSSHTunnelMethodPasswordAuthentication DestinationMariadbColumnstoreUpdateSSHTunnelMethodPasswordAuthentication) DestinationMariadbColumnstoreUpdateSSHTunnelMethod {
	typ := DestinationMariadbColumnstoreUpdateSSHTunnelMethodTypeDestinationMariadbColumnstoreUpdateSSHTunnelMethodPasswordAuthentication

	return DestinationMariadbColumnstoreUpdateSSHTunnelMethod{
		DestinationMariadbColumnstoreUpdateSSHTunnelMethodPasswordAuthentication: &destinationMariadbColumnstoreUpdateSSHTunnelMethodPasswordAuthentication,
		Type: typ,
	}
}

func (u *DestinationMariadbColumnstoreUpdateSSHTunnelMethod) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	destinationMariadbColumnstoreUpdateSSHTunnelMethodNoTunnel := new(DestinationMariadbColumnstoreUpdateSSHTunnelMethodNoTunnel)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&destinationMariadbColumnstoreUpdateSSHTunnelMethodNoTunnel); err == nil {
		u.DestinationMariadbColumnstoreUpdateSSHTunnelMethodNoTunnel = destinationMariadbColumnstoreUpdateSSHTunnelMethodNoTunnel
		u.Type = DestinationMariadbColumnstoreUpdateSSHTunnelMethodTypeDestinationMariadbColumnstoreUpdateSSHTunnelMethodNoTunnel
		return nil
	}

	destinationMariadbColumnstoreUpdateSSHTunnelMethodSSHKeyAuthentication := new(DestinationMariadbColumnstoreUpdateSSHTunnelMethodSSHKeyAuthentication)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&destinationMariadbColumnstoreUpdateSSHTunnelMethodSSHKeyAuthentication); err == nil {
		u.DestinationMariadbColumnstoreUpdateSSHTunnelMethodSSHKeyAuthentication = destinationMariadbColumnstoreUpdateSSHTunnelMethodSSHKeyAuthentication
		u.Type = DestinationMariadbColumnstoreUpdateSSHTunnelMethodTypeDestinationMariadbColumnstoreUpdateSSHTunnelMethodSSHKeyAuthentication
		return nil
	}

	destinationMariadbColumnstoreUpdateSSHTunnelMethodPasswordAuthentication := new(DestinationMariadbColumnstoreUpdateSSHTunnelMethodPasswordAuthentication)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&destinationMariadbColumnstoreUpdateSSHTunnelMethodPasswordAuthentication); err == nil {
		u.DestinationMariadbColumnstoreUpdateSSHTunnelMethodPasswordAuthentication = destinationMariadbColumnstoreUpdateSSHTunnelMethodPasswordAuthentication
		u.Type = DestinationMariadbColumnstoreUpdateSSHTunnelMethodTypeDestinationMariadbColumnstoreUpdateSSHTunnelMethodPasswordAuthentication
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u DestinationMariadbColumnstoreUpdateSSHTunnelMethod) MarshalJSON() ([]byte, error) {
	if u.DestinationMariadbColumnstoreUpdateSSHTunnelMethodNoTunnel != nil {
		return json.Marshal(u.DestinationMariadbColumnstoreUpdateSSHTunnelMethodNoTunnel)
	}

	if u.DestinationMariadbColumnstoreUpdateSSHTunnelMethodSSHKeyAuthentication != nil {
		return json.Marshal(u.DestinationMariadbColumnstoreUpdateSSHTunnelMethodSSHKeyAuthentication)
	}

	if u.DestinationMariadbColumnstoreUpdateSSHTunnelMethodPasswordAuthentication != nil {
		return json.Marshal(u.DestinationMariadbColumnstoreUpdateSSHTunnelMethodPasswordAuthentication)
	}

	return nil, nil
}

type DestinationMariadbColumnstoreUpdate struct {
	// Name of the database.
	Database string `json:"database"`
	// The Hostname of the database.
	Host string `json:"host"`
	// Additional properties to pass to the JDBC URL string when connecting to the database formatted as 'key=value' pairs separated by the symbol '&'. (example: key1=value1&key2=value2&key3=value3).
	JdbcURLParams *string `json:"jdbc_url_params,omitempty"`
	// The Password associated with the username.
	Password *string `json:"password,omitempty"`
	// The Port of the database.
	Port int64 `json:"port"`
	// Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.
	TunnelMethod *DestinationMariadbColumnstoreUpdateSSHTunnelMethod `json:"tunnel_method,omitempty"`
	// The Username which is used to access the database.
	Username string `json:"username"`
}
