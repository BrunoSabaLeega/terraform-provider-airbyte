// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

type DestinationS3GlueS3Glue string

const (
	DestinationS3GlueS3GlueS3Glue DestinationS3GlueS3Glue = "s3-glue"
)

func (e DestinationS3GlueS3Glue) ToPointer() *DestinationS3GlueS3Glue {
	return &e
}

func (e *DestinationS3GlueS3Glue) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "s3-glue":
		*e = DestinationS3GlueS3Glue(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationS3GlueS3Glue: %v", v)
	}
}

type DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompressionGZIPCompressionType string

const (
	DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompressionGZIPCompressionTypeGzip DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompressionGZIPCompressionType = "GZIP"
)

func (e DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompressionGZIPCompressionType) ToPointer() *DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompressionGZIPCompressionType {
	return &e
}

func (e *DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompressionGZIPCompressionType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "GZIP":
		*e = DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompressionGZIPCompressionType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompressionGZIPCompressionType: %v", v)
	}
}

// DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompressionGZIP - Whether the output files should be compressed. If compression is selected, the output filename will have an extra extension (GZIP: ".jsonl.gz").
type DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompressionGZIP struct {
	CompressionType *DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompressionGZIPCompressionType `json:"compression_type,omitempty"`
}

type DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompressionNoCompressionCompressionType string

const (
	DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompressionNoCompressionCompressionTypeNoCompression DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompressionNoCompressionCompressionType = "No Compression"
)

func (e DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompressionNoCompressionCompressionType) ToPointer() *DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompressionNoCompressionCompressionType {
	return &e
}

func (e *DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompressionNoCompressionCompressionType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "No Compression":
		*e = DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompressionNoCompressionCompressionType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompressionNoCompressionCompressionType: %v", v)
	}
}

// DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompressionNoCompression - Whether the output files should be compressed. If compression is selected, the output filename will have an extra extension (GZIP: ".jsonl.gz").
type DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompressionNoCompression struct {
	CompressionType *DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompressionNoCompressionCompressionType `json:"compression_type,omitempty"`
}

type DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompressionType string

const (
	DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompressionTypeDestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompressionNoCompression DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompressionType = "destination-s3-glue_Output Format_JSON Lines: Newline-delimited JSON_Compression_No Compression"
	DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompressionTypeDestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompressionGZIP          DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompressionType = "destination-s3-glue_Output Format_JSON Lines: Newline-delimited JSON_Compression_GZIP"
)

type DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompression struct {
	DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompressionNoCompression *DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompressionNoCompression
	DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompressionGZIP          *DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompressionGZIP

	Type DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompressionType
}

func CreateDestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompressionDestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompressionNoCompression(destinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompressionNoCompression DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompressionNoCompression) DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompression {
	typ := DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompressionTypeDestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompressionNoCompression

	return DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompression{
		DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompressionNoCompression: &destinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompressionNoCompression,
		Type: typ,
	}
}

func CreateDestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompressionDestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompressionGZIP(destinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompressionGZIP DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompressionGZIP) DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompression {
	typ := DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompressionTypeDestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompressionGZIP

	return DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompression{
		DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompressionGZIP: &destinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompressionGZIP,
		Type: typ,
	}
}

func (u *DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompression) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	destinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompressionNoCompression := new(DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompressionNoCompression)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&destinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompressionNoCompression); err == nil {
		u.DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompressionNoCompression = destinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompressionNoCompression
		u.Type = DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompressionTypeDestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompressionNoCompression
		return nil
	}

	destinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompressionGZIP := new(DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompressionGZIP)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&destinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompressionGZIP); err == nil {
		u.DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompressionGZIP = destinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompressionGZIP
		u.Type = DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompressionTypeDestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompressionGZIP
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompression) MarshalJSON() ([]byte, error) {
	if u.DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompressionNoCompression != nil {
		return json.Marshal(u.DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompressionNoCompression)
	}

	if u.DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompressionGZIP != nil {
		return json.Marshal(u.DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompressionGZIP)
	}

	return nil, nil
}

// DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONFlattening - Whether the input json data should be normalized (flattened) in the output JSON Lines. Please refer to docs for details.
type DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONFlattening string

const (
	DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONFlatteningNoFlattening        DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONFlattening = "No flattening"
	DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONFlatteningRootLevelFlattening DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONFlattening = "Root level flattening"
)

func (e DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONFlattening) ToPointer() *DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONFlattening {
	return &e
}

func (e *DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONFlattening) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "No flattening":
		fallthrough
	case "Root level flattening":
		*e = DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONFlattening(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONFlattening: %v", v)
	}
}

type DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONFormatType string

const (
	DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONFormatTypeJsonl DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONFormatType = "JSONL"
)

func (e DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONFormatType) ToPointer() *DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONFormatType {
	return &e
}

func (e *DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONFormatType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "JSONL":
		*e = DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONFormatType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONFormatType: %v", v)
	}
}

// DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSON - Format of the data output. See <a href="https://docs.airbyte.com/integrations/destinations/s3/#supported-output-schema">here</a> for more details
type DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSON struct {
	// Whether the output files should be compressed. If compression is selected, the output filename will have an extra extension (GZIP: ".jsonl.gz").
	Compression *DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONCompression `json:"compression,omitempty"`
	// Whether the input json data should be normalized (flattened) in the output JSON Lines. Please refer to docs for details.
	Flattening *DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONFlattening `json:"flattening,omitempty"`
	FormatType DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSONFormatType  `json:"format_type"`
}

type DestinationS3GlueOutputFormatType string

const (
	DestinationS3GlueOutputFormatTypeDestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSON DestinationS3GlueOutputFormatType = "destination-s3-glue_Output Format_JSON Lines: Newline-delimited JSON"
)

type DestinationS3GlueOutputFormat struct {
	DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSON *DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSON

	Type DestinationS3GlueOutputFormatType
}

func CreateDestinationS3GlueOutputFormatDestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSON(destinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSON DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSON) DestinationS3GlueOutputFormat {
	typ := DestinationS3GlueOutputFormatTypeDestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSON

	return DestinationS3GlueOutputFormat{
		DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSON: &destinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSON,
		Type: typ,
	}
}

func (u *DestinationS3GlueOutputFormat) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	destinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSON := new(DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSON)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&destinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSON); err == nil {
		u.DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSON = destinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSON
		u.Type = DestinationS3GlueOutputFormatTypeDestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSON
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u DestinationS3GlueOutputFormat) MarshalJSON() ([]byte, error) {
	if u.DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSON != nil {
		return json.Marshal(u.DestinationS3GlueOutputFormatJSONLinesNewlineDelimitedJSON)
	}

	return nil, nil
}

// DestinationS3GlueSerializationLibrary - The library that your query engine will use for reading and writing data in your lake.
type DestinationS3GlueSerializationLibrary string

const (
	DestinationS3GlueSerializationLibraryOrgOpenxDataJsonserdeJSONSerDe     DestinationS3GlueSerializationLibrary = "org.openx.data.jsonserde.JsonSerDe"
	DestinationS3GlueSerializationLibraryOrgApacheHiveHcatalogDataJSONSerDe DestinationS3GlueSerializationLibrary = "org.apache.hive.hcatalog.data.JsonSerDe"
)

func (e DestinationS3GlueSerializationLibrary) ToPointer() *DestinationS3GlueSerializationLibrary {
	return &e
}

func (e *DestinationS3GlueSerializationLibrary) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "org.openx.data.jsonserde.JsonSerDe":
		fallthrough
	case "org.apache.hive.hcatalog.data.JsonSerDe":
		*e = DestinationS3GlueSerializationLibrary(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationS3GlueSerializationLibrary: %v", v)
	}
}

// DestinationS3GlueS3BucketRegion - The region of the S3 bucket. See <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-available-regions">here</a> for all region codes.
type DestinationS3GlueS3BucketRegion string

const (
	DestinationS3GlueS3BucketRegionUnknown      DestinationS3GlueS3BucketRegion = ""
	DestinationS3GlueS3BucketRegionUsEast1      DestinationS3GlueS3BucketRegion = "us-east-1"
	DestinationS3GlueS3BucketRegionUsEast2      DestinationS3GlueS3BucketRegion = "us-east-2"
	DestinationS3GlueS3BucketRegionUsWest1      DestinationS3GlueS3BucketRegion = "us-west-1"
	DestinationS3GlueS3BucketRegionUsWest2      DestinationS3GlueS3BucketRegion = "us-west-2"
	DestinationS3GlueS3BucketRegionAfSouth1     DestinationS3GlueS3BucketRegion = "af-south-1"
	DestinationS3GlueS3BucketRegionApEast1      DestinationS3GlueS3BucketRegion = "ap-east-1"
	DestinationS3GlueS3BucketRegionApSouth1     DestinationS3GlueS3BucketRegion = "ap-south-1"
	DestinationS3GlueS3BucketRegionApNortheast1 DestinationS3GlueS3BucketRegion = "ap-northeast-1"
	DestinationS3GlueS3BucketRegionApNortheast2 DestinationS3GlueS3BucketRegion = "ap-northeast-2"
	DestinationS3GlueS3BucketRegionApNortheast3 DestinationS3GlueS3BucketRegion = "ap-northeast-3"
	DestinationS3GlueS3BucketRegionApSoutheast1 DestinationS3GlueS3BucketRegion = "ap-southeast-1"
	DestinationS3GlueS3BucketRegionApSoutheast2 DestinationS3GlueS3BucketRegion = "ap-southeast-2"
	DestinationS3GlueS3BucketRegionCaCentral1   DestinationS3GlueS3BucketRegion = "ca-central-1"
	DestinationS3GlueS3BucketRegionCnNorth1     DestinationS3GlueS3BucketRegion = "cn-north-1"
	DestinationS3GlueS3BucketRegionCnNorthwest1 DestinationS3GlueS3BucketRegion = "cn-northwest-1"
	DestinationS3GlueS3BucketRegionEuCentral1   DestinationS3GlueS3BucketRegion = "eu-central-1"
	DestinationS3GlueS3BucketRegionEuNorth1     DestinationS3GlueS3BucketRegion = "eu-north-1"
	DestinationS3GlueS3BucketRegionEuSouth1     DestinationS3GlueS3BucketRegion = "eu-south-1"
	DestinationS3GlueS3BucketRegionEuWest1      DestinationS3GlueS3BucketRegion = "eu-west-1"
	DestinationS3GlueS3BucketRegionEuWest2      DestinationS3GlueS3BucketRegion = "eu-west-2"
	DestinationS3GlueS3BucketRegionEuWest3      DestinationS3GlueS3BucketRegion = "eu-west-3"
	DestinationS3GlueS3BucketRegionSaEast1      DestinationS3GlueS3BucketRegion = "sa-east-1"
	DestinationS3GlueS3BucketRegionMeSouth1     DestinationS3GlueS3BucketRegion = "me-south-1"
	DestinationS3GlueS3BucketRegionUsGovEast1   DestinationS3GlueS3BucketRegion = "us-gov-east-1"
	DestinationS3GlueS3BucketRegionUsGovWest1   DestinationS3GlueS3BucketRegion = "us-gov-west-1"
)

func (e DestinationS3GlueS3BucketRegion) ToPointer() *DestinationS3GlueS3BucketRegion {
	return &e
}

func (e *DestinationS3GlueS3BucketRegion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "":
		fallthrough
	case "us-east-1":
		fallthrough
	case "us-east-2":
		fallthrough
	case "us-west-1":
		fallthrough
	case "us-west-2":
		fallthrough
	case "af-south-1":
		fallthrough
	case "ap-east-1":
		fallthrough
	case "ap-south-1":
		fallthrough
	case "ap-northeast-1":
		fallthrough
	case "ap-northeast-2":
		fallthrough
	case "ap-northeast-3":
		fallthrough
	case "ap-southeast-1":
		fallthrough
	case "ap-southeast-2":
		fallthrough
	case "ca-central-1":
		fallthrough
	case "cn-north-1":
		fallthrough
	case "cn-northwest-1":
		fallthrough
	case "eu-central-1":
		fallthrough
	case "eu-north-1":
		fallthrough
	case "eu-south-1":
		fallthrough
	case "eu-west-1":
		fallthrough
	case "eu-west-2":
		fallthrough
	case "eu-west-3":
		fallthrough
	case "sa-east-1":
		fallthrough
	case "me-south-1":
		fallthrough
	case "us-gov-east-1":
		fallthrough
	case "us-gov-west-1":
		*e = DestinationS3GlueS3BucketRegion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationS3GlueS3BucketRegion: %v", v)
	}
}

type DestinationS3Glue struct {
	// The access key ID to access the S3 bucket. Airbyte requires Read and Write permissions to the given bucket. Read more <a href="https://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html#access-keys-and-secret-access-keys">here</a>.
	AccessKeyID     *string                 `json:"access_key_id,omitempty"`
	DestinationType DestinationS3GlueS3Glue `json:"destinationType"`
	// The pattern allows you to set the file-name format for the S3 staging file(s)
	FileNamePattern *string `json:"file_name_pattern,omitempty"`
	// Format of the data output. See <a href="https://docs.airbyte.com/integrations/destinations/s3/#supported-output-schema">here</a> for more details
	Format DestinationS3GlueOutputFormat `json:"format"`
	// Name of the glue database for creating the tables, leave blank if no integration
	GlueDatabase string `json:"glue_database"`
	// The library that your query engine will use for reading and writing data in your lake.
	GlueSerializationLibrary DestinationS3GlueSerializationLibrary `json:"glue_serialization_library"`
	// The name of the S3 bucket. Read more <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/create-bucket-overview.html">here</a>.
	S3BucketName string `json:"s3_bucket_name"`
	// Directory under the S3 bucket where data will be written. Read more <a href="https://docs.airbyte.com/integrations/destinations/s3#:~:text=to%20format%20the-,bucket%20path,-%3A">here</a>
	S3BucketPath string `json:"s3_bucket_path"`
	// The region of the S3 bucket. See <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-available-regions">here</a> for all region codes.
	S3BucketRegion DestinationS3GlueS3BucketRegion `json:"s3_bucket_region"`
	// Your S3 endpoint url. Read more <a href="https://docs.aws.amazon.com/general/latest/gr/s3.html#:~:text=Service%20endpoints-,Amazon%20S3%20endpoints,-When%20you%20use">here</a>
	S3Endpoint *string `json:"s3_endpoint,omitempty"`
	// Format string on how data will be organized inside the S3 bucket directory. Read more <a href="https://docs.airbyte.com/integrations/destinations/s3#:~:text=The%20full%20path%20of%20the%20output%20data%20with%20the%20default%20S3%20path%20format">here</a>
	S3PathFormat *string `json:"s3_path_format,omitempty"`
	// The corresponding secret to the access key ID. Read more <a href="https://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html#access-keys-and-secret-access-keys">here</a>
	SecretAccessKey *string `json:"secret_access_key,omitempty"`
}
