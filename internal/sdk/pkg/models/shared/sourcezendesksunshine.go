// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

type SourceZendeskSunshineAuthorizationMethodAPITokenAuthMethodEnum string

const (
	SourceZendeskSunshineAuthorizationMethodAPITokenAuthMethodEnumAPIToken SourceZendeskSunshineAuthorizationMethodAPITokenAuthMethodEnum = "api_token"
)

func (e *SourceZendeskSunshineAuthorizationMethodAPITokenAuthMethodEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "api_token":
		*e = SourceZendeskSunshineAuthorizationMethodAPITokenAuthMethodEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceZendeskSunshineAuthorizationMethodAPITokenAuthMethodEnum: %s", s)
	}
}

type SourceZendeskSunshineAuthorizationMethodAPIToken struct {
	// API Token. See the <a href="https://docs.airbyte.io/integrations/sources/zendesk_sunshine">docs</a> for information on how to generate this key.
	APIToken   string                                                         `json:"api_token"`
	AuthMethod SourceZendeskSunshineAuthorizationMethodAPITokenAuthMethodEnum `json:"auth_method"`
	// The user email for your Zendesk account
	Email string `json:"email"`
}

type SourceZendeskSunshineAuthorizationMethodOAuth20AuthMethodEnum string

const (
	SourceZendeskSunshineAuthorizationMethodOAuth20AuthMethodEnumOauth20 SourceZendeskSunshineAuthorizationMethodOAuth20AuthMethodEnum = "oauth2.0"
)

func (e *SourceZendeskSunshineAuthorizationMethodOAuth20AuthMethodEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "oauth2.0":
		*e = SourceZendeskSunshineAuthorizationMethodOAuth20AuthMethodEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceZendeskSunshineAuthorizationMethodOAuth20AuthMethodEnum: %s", s)
	}
}

type SourceZendeskSunshineAuthorizationMethodOAuth20 struct {
	// Long-term access Token for making authenticated requests.
	AccessToken string                                                        `json:"access_token"`
	AuthMethod  SourceZendeskSunshineAuthorizationMethodOAuth20AuthMethodEnum `json:"auth_method"`
	// The Client ID of your OAuth application.
	ClientID string `json:"client_id"`
	// The Client Secret of your OAuth application.
	ClientSecret string `json:"client_secret"`
}

type SourceZendeskSunshineAuthorizationMethodType string

const (
	SourceZendeskSunshineAuthorizationMethodTypeSourceZendeskSunshineAuthorizationMethodOAuth20  SourceZendeskSunshineAuthorizationMethodType = "source-zendesk-sunshine_Authorization Method_OAuth2.0"
	SourceZendeskSunshineAuthorizationMethodTypeSourceZendeskSunshineAuthorizationMethodAPIToken SourceZendeskSunshineAuthorizationMethodType = "source-zendesk-sunshine_Authorization Method_API Token"
)

type SourceZendeskSunshineAuthorizationMethod struct {
	SourceZendeskSunshineAuthorizationMethodOAuth20  *SourceZendeskSunshineAuthorizationMethodOAuth20
	SourceZendeskSunshineAuthorizationMethodAPIToken *SourceZendeskSunshineAuthorizationMethodAPIToken

	Type SourceZendeskSunshineAuthorizationMethodType
}

func CreateSourceZendeskSunshineAuthorizationMethodSourceZendeskSunshineAuthorizationMethodOAuth20(sourceZendeskSunshineAuthorizationMethodOAuth20 SourceZendeskSunshineAuthorizationMethodOAuth20) SourceZendeskSunshineAuthorizationMethod {
	typ := SourceZendeskSunshineAuthorizationMethodTypeSourceZendeskSunshineAuthorizationMethodOAuth20

	return SourceZendeskSunshineAuthorizationMethod{
		SourceZendeskSunshineAuthorizationMethodOAuth20: &sourceZendeskSunshineAuthorizationMethodOAuth20,
		Type: typ,
	}
}

func CreateSourceZendeskSunshineAuthorizationMethodSourceZendeskSunshineAuthorizationMethodAPIToken(sourceZendeskSunshineAuthorizationMethodAPIToken SourceZendeskSunshineAuthorizationMethodAPIToken) SourceZendeskSunshineAuthorizationMethod {
	typ := SourceZendeskSunshineAuthorizationMethodTypeSourceZendeskSunshineAuthorizationMethodAPIToken

	return SourceZendeskSunshineAuthorizationMethod{
		SourceZendeskSunshineAuthorizationMethodAPIToken: &sourceZendeskSunshineAuthorizationMethodAPIToken,
		Type: typ,
	}
}

func (u *SourceZendeskSunshineAuthorizationMethod) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	sourceZendeskSunshineAuthorizationMethodOAuth20 := new(SourceZendeskSunshineAuthorizationMethodOAuth20)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceZendeskSunshineAuthorizationMethodOAuth20); err == nil {
		u.SourceZendeskSunshineAuthorizationMethodOAuth20 = sourceZendeskSunshineAuthorizationMethodOAuth20
		u.Type = SourceZendeskSunshineAuthorizationMethodTypeSourceZendeskSunshineAuthorizationMethodOAuth20
		return nil
	}

	sourceZendeskSunshineAuthorizationMethodAPIToken := new(SourceZendeskSunshineAuthorizationMethodAPIToken)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceZendeskSunshineAuthorizationMethodAPIToken); err == nil {
		u.SourceZendeskSunshineAuthorizationMethodAPIToken = sourceZendeskSunshineAuthorizationMethodAPIToken
		u.Type = SourceZendeskSunshineAuthorizationMethodTypeSourceZendeskSunshineAuthorizationMethodAPIToken
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceZendeskSunshineAuthorizationMethod) MarshalJSON() ([]byte, error) {
	if u.SourceZendeskSunshineAuthorizationMethodOAuth20 != nil {
		return json.Marshal(u.SourceZendeskSunshineAuthorizationMethodOAuth20)
	}

	if u.SourceZendeskSunshineAuthorizationMethodAPIToken != nil {
		return json.Marshal(u.SourceZendeskSunshineAuthorizationMethodAPIToken)
	}

	return nil, nil
}

type SourceZendeskSunshineZendeskSunshineEnum string

const (
	SourceZendeskSunshineZendeskSunshineEnumZendeskSunshine SourceZendeskSunshineZendeskSunshineEnum = "zendesk-sunshine"
)

func (e *SourceZendeskSunshineZendeskSunshineEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "zendesk-sunshine":
		*e = SourceZendeskSunshineZendeskSunshineEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceZendeskSunshineZendeskSunshineEnum: %s", s)
	}
}

// SourceZendeskSunshine - The values required to configure the source.
type SourceZendeskSunshine struct {
	Credentials *SourceZendeskSunshineAuthorizationMethod `json:"credentials,omitempty"`
	SourceType  SourceZendeskSunshineZendeskSunshineEnum  `json:"sourceType"`
	// The date from which you'd like to replicate data for Zendesk Sunshine API, in the format YYYY-MM-DDT00:00:00Z.
	StartDate string `json:"start_date"`
	// The subdomain for your Zendesk Account.
	Subdomain string `json:"subdomain"`
}
