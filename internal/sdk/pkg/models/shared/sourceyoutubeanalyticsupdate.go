// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
)

type SourceYoutubeAnalyticsUpdateAuthenticateViaOAuth20 struct {
	// The Client ID of your developer application
	ClientID string `json:"client_id"`
	// The client secret of your developer application
	ClientSecret string `json:"client_secret"`
	// A refresh token generated using the above client ID and secret
	RefreshToken string `json:"refresh_token"`

	AdditionalProperties interface{} `json:"-"`
}
type _SourceYoutubeAnalyticsUpdateAuthenticateViaOAuth20 SourceYoutubeAnalyticsUpdateAuthenticateViaOAuth20

func (c *SourceYoutubeAnalyticsUpdateAuthenticateViaOAuth20) UnmarshalJSON(bs []byte) error {
	data := _SourceYoutubeAnalyticsUpdateAuthenticateViaOAuth20{}

	if err := json.Unmarshal(bs, &data); err != nil {
		return err
	}
	*c = SourceYoutubeAnalyticsUpdateAuthenticateViaOAuth20(data)

	additionalFields := make(map[string]interface{})

	if err := json.Unmarshal(bs, &additionalFields); err != nil {
		return err
	}
	delete(additionalFields, "client_id")
	delete(additionalFields, "client_secret")
	delete(additionalFields, "refresh_token")

	c.AdditionalProperties = additionalFields

	return nil
}

func (c SourceYoutubeAnalyticsUpdateAuthenticateViaOAuth20) MarshalJSON() ([]byte, error) {
	out := map[string]interface{}{}
	bs, err := json.Marshal(_SourceYoutubeAnalyticsUpdateAuthenticateViaOAuth20(c))
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	bs, err = json.Marshal(c.AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	return json.Marshal(out)
}

type SourceYoutubeAnalyticsUpdate struct {
	Credentials SourceYoutubeAnalyticsUpdateAuthenticateViaOAuth20 `json:"credentials"`
}
