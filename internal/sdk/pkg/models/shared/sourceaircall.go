// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

type SourceAircallAircallEnum string

const (
	SourceAircallAircallEnumAircall SourceAircallAircallEnum = "aircall"
)

func (e SourceAircallAircallEnum) ToPointer() *SourceAircallAircallEnum {
	return &e
}

func (e *SourceAircallAircallEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "aircall":
		*e = SourceAircallAircallEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceAircallAircallEnum: %v", v)
	}
}

type SourceAircall struct {
	// App ID found at settings https://dashboard.aircall.io/integrations/api-keys
	APIID string `json:"api_id"`
	// App token found at settings (Ref- https://dashboard.aircall.io/integrations/api-keys)
	APIToken   string                   `json:"api_token"`
	SourceType SourceAircallAircallEnum `json:"sourceType"`
	// Date time filter for incremental filter, Specify which date to extract from.
	StartDate time.Time `json:"start_date"`
}
