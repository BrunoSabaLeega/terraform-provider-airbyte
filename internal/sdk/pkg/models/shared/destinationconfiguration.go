// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
)

type DestinationConfigurationType string

const (
	DestinationConfigurationTypeDestinationAmazonSqs            DestinationConfigurationType = "destination-amazon-sqs"
	DestinationConfigurationTypeDestinationAwsDatalake          DestinationConfigurationType = "destination-aws-datalake"
	DestinationConfigurationTypeDestinationAzureBlobStorage     DestinationConfigurationType = "destination-azure-blob-storage"
	DestinationConfigurationTypeDestinationBigquery             DestinationConfigurationType = "destination-bigquery"
	DestinationConfigurationTypeDestinationBigqueryDenormalized DestinationConfigurationType = "destination-bigquery-denormalized"
	DestinationConfigurationTypeDestinationCassandra            DestinationConfigurationType = "destination-cassandra"
	DestinationConfigurationTypeDestinationClickhouse           DestinationConfigurationType = "destination-clickhouse"
	DestinationConfigurationTypeDestinationConvex               DestinationConfigurationType = "destination-convex"
	DestinationConfigurationTypeDestinationDatabend             DestinationConfigurationType = "destination-databend"
	DestinationConfigurationTypeDestinationDatabricks           DestinationConfigurationType = "destination-databricks"
	DestinationConfigurationTypeDestinationDynamodb             DestinationConfigurationType = "destination-dynamodb"
	DestinationConfigurationTypeDestinationElasticsearch        DestinationConfigurationType = "destination-elasticsearch"
	DestinationConfigurationTypeDestinationFirebolt             DestinationConfigurationType = "destination-firebolt"
	DestinationConfigurationTypeDestinationFirestore            DestinationConfigurationType = "destination-firestore"
	DestinationConfigurationTypeDestinationGcs                  DestinationConfigurationType = "destination-gcs"
	DestinationConfigurationTypeDestinationGoogleSheets         DestinationConfigurationType = "destination-google-sheets"
	DestinationConfigurationTypeDestinationKeen                 DestinationConfigurationType = "destination-keen"
	DestinationConfigurationTypeDestinationKinesis              DestinationConfigurationType = "destination-kinesis"
	DestinationConfigurationTypeDestinationMariadbColumnstore   DestinationConfigurationType = "destination-mariadb-columnstore"
	DestinationConfigurationTypeDestinationMeilisearch          DestinationConfigurationType = "destination-meilisearch"
	DestinationConfigurationTypeDestinationMongodb              DestinationConfigurationType = "destination-mongodb"
	DestinationConfigurationTypeDestinationMssql                DestinationConfigurationType = "destination-mssql"
	DestinationConfigurationTypeDestinationMysql                DestinationConfigurationType = "destination-mysql"
	DestinationConfigurationTypeDestinationOracle               DestinationConfigurationType = "destination-oracle"
	DestinationConfigurationTypeDestinationPostgres             DestinationConfigurationType = "destination-postgres"
	DestinationConfigurationTypeDestinationPubsub               DestinationConfigurationType = "destination-pubsub"
	DestinationConfigurationTypeDestinationPulsar               DestinationConfigurationType = "destination-pulsar"
	DestinationConfigurationTypeDestinationRabbitmq             DestinationConfigurationType = "destination-rabbitmq"
	DestinationConfigurationTypeDestinationRedis                DestinationConfigurationType = "destination-redis"
	DestinationConfigurationTypeDestinationRedshift             DestinationConfigurationType = "destination-redshift"
	DestinationConfigurationTypeDestinationRockset              DestinationConfigurationType = "destination-rockset"
	DestinationConfigurationTypeDestinationS3                   DestinationConfigurationType = "destination-s3"
	DestinationConfigurationTypeDestinationS3Glue               DestinationConfigurationType = "destination-s3-glue"
	DestinationConfigurationTypeDestinationScylla               DestinationConfigurationType = "destination-scylla"
	DestinationConfigurationTypeDestinationSftpJSON             DestinationConfigurationType = "destination-sftp-json"
	DestinationConfigurationTypeDestinationSnowflake            DestinationConfigurationType = "destination-snowflake"
	DestinationConfigurationTypeDestinationTypesense            DestinationConfigurationType = "destination-typesense"
)

type DestinationConfiguration struct {
	DestinationAmazonSqs            *DestinationAmazonSqs
	DestinationAwsDatalake          *DestinationAwsDatalake
	DestinationAzureBlobStorage     *DestinationAzureBlobStorage
	DestinationBigquery             *DestinationBigquery
	DestinationBigqueryDenormalized *DestinationBigqueryDenormalized
	DestinationCassandra            *DestinationCassandra
	DestinationClickhouse           *DestinationClickhouse
	DestinationConvex               *DestinationConvex
	DestinationDatabend             *DestinationDatabend
	DestinationDatabricks           *DestinationDatabricks
	DestinationDynamodb             *DestinationDynamodb
	DestinationElasticsearch        *DestinationElasticsearch
	DestinationFirebolt             *DestinationFirebolt
	DestinationFirestore            *DestinationFirestore
	DestinationGcs                  *DestinationGcs
	DestinationGoogleSheets         *DestinationGoogleSheets
	DestinationKeen                 *DestinationKeen
	DestinationKinesis              *DestinationKinesis
	DestinationMariadbColumnstore   *DestinationMariadbColumnstore
	DestinationMeilisearch          *DestinationMeilisearch
	DestinationMongodb              *DestinationMongodb
	DestinationMssql                *DestinationMssql
	DestinationMysql                *DestinationMysql
	DestinationOracle               *DestinationOracle
	DestinationPostgres             *DestinationPostgres
	DestinationPubsub               *DestinationPubsub
	DestinationPulsar               *DestinationPulsar
	DestinationRabbitmq             *DestinationRabbitmq
	DestinationRedis                *DestinationRedis
	DestinationRedshift             *DestinationRedshift
	DestinationRockset              *DestinationRockset
	DestinationS3                   *DestinationS3
	DestinationS3Glue               *DestinationS3Glue
	DestinationScylla               *DestinationScylla
	DestinationSftpJSON             *DestinationSftpJSON
	DestinationSnowflake            *DestinationSnowflake
	DestinationTypesense            *DestinationTypesense

	Type DestinationConfigurationType
}

func CreateDestinationConfigurationDestinationAmazonSqs(destinationAmazonSqs DestinationAmazonSqs) DestinationConfiguration {
	typ := DestinationConfigurationTypeDestinationAmazonSqs

	return DestinationConfiguration{
		DestinationAmazonSqs: &destinationAmazonSqs,
		Type:                 typ,
	}
}

func CreateDestinationConfigurationDestinationAwsDatalake(destinationAwsDatalake DestinationAwsDatalake) DestinationConfiguration {
	typ := DestinationConfigurationTypeDestinationAwsDatalake

	return DestinationConfiguration{
		DestinationAwsDatalake: &destinationAwsDatalake,
		Type:                   typ,
	}
}

func CreateDestinationConfigurationDestinationAzureBlobStorage(destinationAzureBlobStorage DestinationAzureBlobStorage) DestinationConfiguration {
	typ := DestinationConfigurationTypeDestinationAzureBlobStorage

	return DestinationConfiguration{
		DestinationAzureBlobStorage: &destinationAzureBlobStorage,
		Type:                        typ,
	}
}

func CreateDestinationConfigurationDestinationBigquery(destinationBigquery DestinationBigquery) DestinationConfiguration {
	typ := DestinationConfigurationTypeDestinationBigquery

	return DestinationConfiguration{
		DestinationBigquery: &destinationBigquery,
		Type:                typ,
	}
}

func CreateDestinationConfigurationDestinationBigqueryDenormalized(destinationBigqueryDenormalized DestinationBigqueryDenormalized) DestinationConfiguration {
	typ := DestinationConfigurationTypeDestinationBigqueryDenormalized

	return DestinationConfiguration{
		DestinationBigqueryDenormalized: &destinationBigqueryDenormalized,
		Type:                            typ,
	}
}

func CreateDestinationConfigurationDestinationCassandra(destinationCassandra DestinationCassandra) DestinationConfiguration {
	typ := DestinationConfigurationTypeDestinationCassandra

	return DestinationConfiguration{
		DestinationCassandra: &destinationCassandra,
		Type:                 typ,
	}
}

func CreateDestinationConfigurationDestinationClickhouse(destinationClickhouse DestinationClickhouse) DestinationConfiguration {
	typ := DestinationConfigurationTypeDestinationClickhouse

	return DestinationConfiguration{
		DestinationClickhouse: &destinationClickhouse,
		Type:                  typ,
	}
}

func CreateDestinationConfigurationDestinationConvex(destinationConvex DestinationConvex) DestinationConfiguration {
	typ := DestinationConfigurationTypeDestinationConvex

	return DestinationConfiguration{
		DestinationConvex: &destinationConvex,
		Type:              typ,
	}
}

func CreateDestinationConfigurationDestinationDatabend(destinationDatabend DestinationDatabend) DestinationConfiguration {
	typ := DestinationConfigurationTypeDestinationDatabend

	return DestinationConfiguration{
		DestinationDatabend: &destinationDatabend,
		Type:                typ,
	}
}

func CreateDestinationConfigurationDestinationDatabricks(destinationDatabricks DestinationDatabricks) DestinationConfiguration {
	typ := DestinationConfigurationTypeDestinationDatabricks

	return DestinationConfiguration{
		DestinationDatabricks: &destinationDatabricks,
		Type:                  typ,
	}
}

func CreateDestinationConfigurationDestinationDynamodb(destinationDynamodb DestinationDynamodb) DestinationConfiguration {
	typ := DestinationConfigurationTypeDestinationDynamodb

	return DestinationConfiguration{
		DestinationDynamodb: &destinationDynamodb,
		Type:                typ,
	}
}

func CreateDestinationConfigurationDestinationElasticsearch(destinationElasticsearch DestinationElasticsearch) DestinationConfiguration {
	typ := DestinationConfigurationTypeDestinationElasticsearch

	return DestinationConfiguration{
		DestinationElasticsearch: &destinationElasticsearch,
		Type:                     typ,
	}
}

func CreateDestinationConfigurationDestinationFirebolt(destinationFirebolt DestinationFirebolt) DestinationConfiguration {
	typ := DestinationConfigurationTypeDestinationFirebolt

	return DestinationConfiguration{
		DestinationFirebolt: &destinationFirebolt,
		Type:                typ,
	}
}

func CreateDestinationConfigurationDestinationFirestore(destinationFirestore DestinationFirestore) DestinationConfiguration {
	typ := DestinationConfigurationTypeDestinationFirestore

	return DestinationConfiguration{
		DestinationFirestore: &destinationFirestore,
		Type:                 typ,
	}
}

func CreateDestinationConfigurationDestinationGcs(destinationGcs DestinationGcs) DestinationConfiguration {
	typ := DestinationConfigurationTypeDestinationGcs

	return DestinationConfiguration{
		DestinationGcs: &destinationGcs,
		Type:           typ,
	}
}

func CreateDestinationConfigurationDestinationGoogleSheets(destinationGoogleSheets DestinationGoogleSheets) DestinationConfiguration {
	typ := DestinationConfigurationTypeDestinationGoogleSheets

	return DestinationConfiguration{
		DestinationGoogleSheets: &destinationGoogleSheets,
		Type:                    typ,
	}
}

func CreateDestinationConfigurationDestinationKeen(destinationKeen DestinationKeen) DestinationConfiguration {
	typ := DestinationConfigurationTypeDestinationKeen

	return DestinationConfiguration{
		DestinationKeen: &destinationKeen,
		Type:            typ,
	}
}

func CreateDestinationConfigurationDestinationKinesis(destinationKinesis DestinationKinesis) DestinationConfiguration {
	typ := DestinationConfigurationTypeDestinationKinesis

	return DestinationConfiguration{
		DestinationKinesis: &destinationKinesis,
		Type:               typ,
	}
}

func CreateDestinationConfigurationDestinationMariadbColumnstore(destinationMariadbColumnstore DestinationMariadbColumnstore) DestinationConfiguration {
	typ := DestinationConfigurationTypeDestinationMariadbColumnstore

	return DestinationConfiguration{
		DestinationMariadbColumnstore: &destinationMariadbColumnstore,
		Type:                          typ,
	}
}

func CreateDestinationConfigurationDestinationMeilisearch(destinationMeilisearch DestinationMeilisearch) DestinationConfiguration {
	typ := DestinationConfigurationTypeDestinationMeilisearch

	return DestinationConfiguration{
		DestinationMeilisearch: &destinationMeilisearch,
		Type:                   typ,
	}
}

func CreateDestinationConfigurationDestinationMongodb(destinationMongodb DestinationMongodb) DestinationConfiguration {
	typ := DestinationConfigurationTypeDestinationMongodb

	return DestinationConfiguration{
		DestinationMongodb: &destinationMongodb,
		Type:               typ,
	}
}

func CreateDestinationConfigurationDestinationMssql(destinationMssql DestinationMssql) DestinationConfiguration {
	typ := DestinationConfigurationTypeDestinationMssql

	return DestinationConfiguration{
		DestinationMssql: &destinationMssql,
		Type:             typ,
	}
}

func CreateDestinationConfigurationDestinationMysql(destinationMysql DestinationMysql) DestinationConfiguration {
	typ := DestinationConfigurationTypeDestinationMysql

	return DestinationConfiguration{
		DestinationMysql: &destinationMysql,
		Type:             typ,
	}
}

func CreateDestinationConfigurationDestinationOracle(destinationOracle DestinationOracle) DestinationConfiguration {
	typ := DestinationConfigurationTypeDestinationOracle

	return DestinationConfiguration{
		DestinationOracle: &destinationOracle,
		Type:              typ,
	}
}

func CreateDestinationConfigurationDestinationPostgres(destinationPostgres DestinationPostgres) DestinationConfiguration {
	typ := DestinationConfigurationTypeDestinationPostgres

	return DestinationConfiguration{
		DestinationPostgres: &destinationPostgres,
		Type:                typ,
	}
}

func CreateDestinationConfigurationDestinationPubsub(destinationPubsub DestinationPubsub) DestinationConfiguration {
	typ := DestinationConfigurationTypeDestinationPubsub

	return DestinationConfiguration{
		DestinationPubsub: &destinationPubsub,
		Type:              typ,
	}
}

func CreateDestinationConfigurationDestinationPulsar(destinationPulsar DestinationPulsar) DestinationConfiguration {
	typ := DestinationConfigurationTypeDestinationPulsar

	return DestinationConfiguration{
		DestinationPulsar: &destinationPulsar,
		Type:              typ,
	}
}

func CreateDestinationConfigurationDestinationRabbitmq(destinationRabbitmq DestinationRabbitmq) DestinationConfiguration {
	typ := DestinationConfigurationTypeDestinationRabbitmq

	return DestinationConfiguration{
		DestinationRabbitmq: &destinationRabbitmq,
		Type:                typ,
	}
}

func CreateDestinationConfigurationDestinationRedis(destinationRedis DestinationRedis) DestinationConfiguration {
	typ := DestinationConfigurationTypeDestinationRedis

	return DestinationConfiguration{
		DestinationRedis: &destinationRedis,
		Type:             typ,
	}
}

func CreateDestinationConfigurationDestinationRedshift(destinationRedshift DestinationRedshift) DestinationConfiguration {
	typ := DestinationConfigurationTypeDestinationRedshift

	return DestinationConfiguration{
		DestinationRedshift: &destinationRedshift,
		Type:                typ,
	}
}

func CreateDestinationConfigurationDestinationRockset(destinationRockset DestinationRockset) DestinationConfiguration {
	typ := DestinationConfigurationTypeDestinationRockset

	return DestinationConfiguration{
		DestinationRockset: &destinationRockset,
		Type:               typ,
	}
}

func CreateDestinationConfigurationDestinationS3(destinationS3 DestinationS3) DestinationConfiguration {
	typ := DestinationConfigurationTypeDestinationS3

	return DestinationConfiguration{
		DestinationS3: &destinationS3,
		Type:          typ,
	}
}

func CreateDestinationConfigurationDestinationS3Glue(destinationS3Glue DestinationS3Glue) DestinationConfiguration {
	typ := DestinationConfigurationTypeDestinationS3Glue

	return DestinationConfiguration{
		DestinationS3Glue: &destinationS3Glue,
		Type:              typ,
	}
}

func CreateDestinationConfigurationDestinationScylla(destinationScylla DestinationScylla) DestinationConfiguration {
	typ := DestinationConfigurationTypeDestinationScylla

	return DestinationConfiguration{
		DestinationScylla: &destinationScylla,
		Type:              typ,
	}
}

func CreateDestinationConfigurationDestinationSftpJSON(destinationSftpJSON DestinationSftpJSON) DestinationConfiguration {
	typ := DestinationConfigurationTypeDestinationSftpJSON

	return DestinationConfiguration{
		DestinationSftpJSON: &destinationSftpJSON,
		Type:                typ,
	}
}

func CreateDestinationConfigurationDestinationSnowflake(destinationSnowflake DestinationSnowflake) DestinationConfiguration {
	typ := DestinationConfigurationTypeDestinationSnowflake

	return DestinationConfiguration{
		DestinationSnowflake: &destinationSnowflake,
		Type:                 typ,
	}
}

func CreateDestinationConfigurationDestinationTypesense(destinationTypesense DestinationTypesense) DestinationConfiguration {
	typ := DestinationConfigurationTypeDestinationTypesense

	return DestinationConfiguration{
		DestinationTypesense: &destinationTypesense,
		Type:                 typ,
	}
}

func (u *DestinationConfiguration) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	destinationAmazonSqs := new(DestinationAmazonSqs)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&destinationAmazonSqs); err == nil {
		u.DestinationAmazonSqs = destinationAmazonSqs
		u.Type = DestinationConfigurationTypeDestinationAmazonSqs
		return nil
	}

	destinationAwsDatalake := new(DestinationAwsDatalake)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&destinationAwsDatalake); err == nil {
		u.DestinationAwsDatalake = destinationAwsDatalake
		u.Type = DestinationConfigurationTypeDestinationAwsDatalake
		return nil
	}

	destinationAzureBlobStorage := new(DestinationAzureBlobStorage)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&destinationAzureBlobStorage); err == nil {
		u.DestinationAzureBlobStorage = destinationAzureBlobStorage
		u.Type = DestinationConfigurationTypeDestinationAzureBlobStorage
		return nil
	}

	destinationBigquery := new(DestinationBigquery)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&destinationBigquery); err == nil {
		u.DestinationBigquery = destinationBigquery
		u.Type = DestinationConfigurationTypeDestinationBigquery
		return nil
	}

	destinationBigqueryDenormalized := new(DestinationBigqueryDenormalized)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&destinationBigqueryDenormalized); err == nil {
		u.DestinationBigqueryDenormalized = destinationBigqueryDenormalized
		u.Type = DestinationConfigurationTypeDestinationBigqueryDenormalized
		return nil
	}

	destinationCassandra := new(DestinationCassandra)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&destinationCassandra); err == nil {
		u.DestinationCassandra = destinationCassandra
		u.Type = DestinationConfigurationTypeDestinationCassandra
		return nil
	}

	destinationClickhouse := new(DestinationClickhouse)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&destinationClickhouse); err == nil {
		u.DestinationClickhouse = destinationClickhouse
		u.Type = DestinationConfigurationTypeDestinationClickhouse
		return nil
	}

	destinationConvex := new(DestinationConvex)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&destinationConvex); err == nil {
		u.DestinationConvex = destinationConvex
		u.Type = DestinationConfigurationTypeDestinationConvex
		return nil
	}

	destinationDatabend := new(DestinationDatabend)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&destinationDatabend); err == nil {
		u.DestinationDatabend = destinationDatabend
		u.Type = DestinationConfigurationTypeDestinationDatabend
		return nil
	}

	destinationDatabricks := new(DestinationDatabricks)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&destinationDatabricks); err == nil {
		u.DestinationDatabricks = destinationDatabricks
		u.Type = DestinationConfigurationTypeDestinationDatabricks
		return nil
	}

	destinationDynamodb := new(DestinationDynamodb)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&destinationDynamodb); err == nil {
		u.DestinationDynamodb = destinationDynamodb
		u.Type = DestinationConfigurationTypeDestinationDynamodb
		return nil
	}

	destinationElasticsearch := new(DestinationElasticsearch)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&destinationElasticsearch); err == nil {
		u.DestinationElasticsearch = destinationElasticsearch
		u.Type = DestinationConfigurationTypeDestinationElasticsearch
		return nil
	}

	destinationFirebolt := new(DestinationFirebolt)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&destinationFirebolt); err == nil {
		u.DestinationFirebolt = destinationFirebolt
		u.Type = DestinationConfigurationTypeDestinationFirebolt
		return nil
	}

	destinationFirestore := new(DestinationFirestore)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&destinationFirestore); err == nil {
		u.DestinationFirestore = destinationFirestore
		u.Type = DestinationConfigurationTypeDestinationFirestore
		return nil
	}

	destinationGcs := new(DestinationGcs)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&destinationGcs); err == nil {
		u.DestinationGcs = destinationGcs
		u.Type = DestinationConfigurationTypeDestinationGcs
		return nil
	}

	destinationGoogleSheets := new(DestinationGoogleSheets)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&destinationGoogleSheets); err == nil {
		u.DestinationGoogleSheets = destinationGoogleSheets
		u.Type = DestinationConfigurationTypeDestinationGoogleSheets
		return nil
	}

	destinationKeen := new(DestinationKeen)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&destinationKeen); err == nil {
		u.DestinationKeen = destinationKeen
		u.Type = DestinationConfigurationTypeDestinationKeen
		return nil
	}

	destinationKinesis := new(DestinationKinesis)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&destinationKinesis); err == nil {
		u.DestinationKinesis = destinationKinesis
		u.Type = DestinationConfigurationTypeDestinationKinesis
		return nil
	}

	destinationMariadbColumnstore := new(DestinationMariadbColumnstore)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&destinationMariadbColumnstore); err == nil {
		u.DestinationMariadbColumnstore = destinationMariadbColumnstore
		u.Type = DestinationConfigurationTypeDestinationMariadbColumnstore
		return nil
	}

	destinationMeilisearch := new(DestinationMeilisearch)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&destinationMeilisearch); err == nil {
		u.DestinationMeilisearch = destinationMeilisearch
		u.Type = DestinationConfigurationTypeDestinationMeilisearch
		return nil
	}

	destinationMongodb := new(DestinationMongodb)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&destinationMongodb); err == nil {
		u.DestinationMongodb = destinationMongodb
		u.Type = DestinationConfigurationTypeDestinationMongodb
		return nil
	}

	destinationMssql := new(DestinationMssql)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&destinationMssql); err == nil {
		u.DestinationMssql = destinationMssql
		u.Type = DestinationConfigurationTypeDestinationMssql
		return nil
	}

	destinationMysql := new(DestinationMysql)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&destinationMysql); err == nil {
		u.DestinationMysql = destinationMysql
		u.Type = DestinationConfigurationTypeDestinationMysql
		return nil
	}

	destinationOracle := new(DestinationOracle)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&destinationOracle); err == nil {
		u.DestinationOracle = destinationOracle
		u.Type = DestinationConfigurationTypeDestinationOracle
		return nil
	}

	destinationPostgres := new(DestinationPostgres)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&destinationPostgres); err == nil {
		u.DestinationPostgres = destinationPostgres
		u.Type = DestinationConfigurationTypeDestinationPostgres
		return nil
	}

	destinationPubsub := new(DestinationPubsub)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&destinationPubsub); err == nil {
		u.DestinationPubsub = destinationPubsub
		u.Type = DestinationConfigurationTypeDestinationPubsub
		return nil
	}

	destinationPulsar := new(DestinationPulsar)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&destinationPulsar); err == nil {
		u.DestinationPulsar = destinationPulsar
		u.Type = DestinationConfigurationTypeDestinationPulsar
		return nil
	}

	destinationRabbitmq := new(DestinationRabbitmq)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&destinationRabbitmq); err == nil {
		u.DestinationRabbitmq = destinationRabbitmq
		u.Type = DestinationConfigurationTypeDestinationRabbitmq
		return nil
	}

	destinationRedis := new(DestinationRedis)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&destinationRedis); err == nil {
		u.DestinationRedis = destinationRedis
		u.Type = DestinationConfigurationTypeDestinationRedis
		return nil
	}

	destinationRedshift := new(DestinationRedshift)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&destinationRedshift); err == nil {
		u.DestinationRedshift = destinationRedshift
		u.Type = DestinationConfigurationTypeDestinationRedshift
		return nil
	}

	destinationRockset := new(DestinationRockset)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&destinationRockset); err == nil {
		u.DestinationRockset = destinationRockset
		u.Type = DestinationConfigurationTypeDestinationRockset
		return nil
	}

	destinationS3 := new(DestinationS3)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&destinationS3); err == nil {
		u.DestinationS3 = destinationS3
		u.Type = DestinationConfigurationTypeDestinationS3
		return nil
	}

	destinationS3Glue := new(DestinationS3Glue)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&destinationS3Glue); err == nil {
		u.DestinationS3Glue = destinationS3Glue
		u.Type = DestinationConfigurationTypeDestinationS3Glue
		return nil
	}

	destinationScylla := new(DestinationScylla)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&destinationScylla); err == nil {
		u.DestinationScylla = destinationScylla
		u.Type = DestinationConfigurationTypeDestinationScylla
		return nil
	}

	destinationSftpJSON := new(DestinationSftpJSON)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&destinationSftpJSON); err == nil {
		u.DestinationSftpJSON = destinationSftpJSON
		u.Type = DestinationConfigurationTypeDestinationSftpJSON
		return nil
	}

	destinationSnowflake := new(DestinationSnowflake)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&destinationSnowflake); err == nil {
		u.DestinationSnowflake = destinationSnowflake
		u.Type = DestinationConfigurationTypeDestinationSnowflake
		return nil
	}

	destinationTypesense := new(DestinationTypesense)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&destinationTypesense); err == nil {
		u.DestinationTypesense = destinationTypesense
		u.Type = DestinationConfigurationTypeDestinationTypesense
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u DestinationConfiguration) MarshalJSON() ([]byte, error) {
	if u.DestinationAmazonSqs != nil {
		return json.Marshal(u.DestinationAmazonSqs)
	}

	if u.DestinationAwsDatalake != nil {
		return json.Marshal(u.DestinationAwsDatalake)
	}

	if u.DestinationAzureBlobStorage != nil {
		return json.Marshal(u.DestinationAzureBlobStorage)
	}

	if u.DestinationBigquery != nil {
		return json.Marshal(u.DestinationBigquery)
	}

	if u.DestinationBigqueryDenormalized != nil {
		return json.Marshal(u.DestinationBigqueryDenormalized)
	}

	if u.DestinationCassandra != nil {
		return json.Marshal(u.DestinationCassandra)
	}

	if u.DestinationClickhouse != nil {
		return json.Marshal(u.DestinationClickhouse)
	}

	if u.DestinationConvex != nil {
		return json.Marshal(u.DestinationConvex)
	}

	if u.DestinationDatabend != nil {
		return json.Marshal(u.DestinationDatabend)
	}

	if u.DestinationDatabricks != nil {
		return json.Marshal(u.DestinationDatabricks)
	}

	if u.DestinationDynamodb != nil {
		return json.Marshal(u.DestinationDynamodb)
	}

	if u.DestinationElasticsearch != nil {
		return json.Marshal(u.DestinationElasticsearch)
	}

	if u.DestinationFirebolt != nil {
		return json.Marshal(u.DestinationFirebolt)
	}

	if u.DestinationFirestore != nil {
		return json.Marshal(u.DestinationFirestore)
	}

	if u.DestinationGcs != nil {
		return json.Marshal(u.DestinationGcs)
	}

	if u.DestinationGoogleSheets != nil {
		return json.Marshal(u.DestinationGoogleSheets)
	}

	if u.DestinationKeen != nil {
		return json.Marshal(u.DestinationKeen)
	}

	if u.DestinationKinesis != nil {
		return json.Marshal(u.DestinationKinesis)
	}

	if u.DestinationMariadbColumnstore != nil {
		return json.Marshal(u.DestinationMariadbColumnstore)
	}

	if u.DestinationMeilisearch != nil {
		return json.Marshal(u.DestinationMeilisearch)
	}

	if u.DestinationMongodb != nil {
		return json.Marshal(u.DestinationMongodb)
	}

	if u.DestinationMssql != nil {
		return json.Marshal(u.DestinationMssql)
	}

	if u.DestinationMysql != nil {
		return json.Marshal(u.DestinationMysql)
	}

	if u.DestinationOracle != nil {
		return json.Marshal(u.DestinationOracle)
	}

	if u.DestinationPostgres != nil {
		return json.Marshal(u.DestinationPostgres)
	}

	if u.DestinationPubsub != nil {
		return json.Marshal(u.DestinationPubsub)
	}

	if u.DestinationPulsar != nil {
		return json.Marshal(u.DestinationPulsar)
	}

	if u.DestinationRabbitmq != nil {
		return json.Marshal(u.DestinationRabbitmq)
	}

	if u.DestinationRedis != nil {
		return json.Marshal(u.DestinationRedis)
	}

	if u.DestinationRedshift != nil {
		return json.Marshal(u.DestinationRedshift)
	}

	if u.DestinationRockset != nil {
		return json.Marshal(u.DestinationRockset)
	}

	if u.DestinationS3 != nil {
		return json.Marshal(u.DestinationS3)
	}

	if u.DestinationS3Glue != nil {
		return json.Marshal(u.DestinationS3Glue)
	}

	if u.DestinationScylla != nil {
		return json.Marshal(u.DestinationScylla)
	}

	if u.DestinationSftpJSON != nil {
		return json.Marshal(u.DestinationSftpJSON)
	}

	if u.DestinationSnowflake != nil {
		return json.Marshal(u.DestinationSnowflake)
	}

	if u.DestinationTypesense != nil {
		return json.Marshal(u.DestinationTypesense)
	}

	return nil, nil
}
