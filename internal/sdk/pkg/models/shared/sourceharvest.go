// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

type SourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessTokenAuthTypeEnum string

const (
	SourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessTokenAuthTypeEnumToken SourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessTokenAuthTypeEnum = "Token"
)

func (e *SourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessTokenAuthTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Token":
		*e = SourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessTokenAuthTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessTokenAuthTypeEnum: %s", s)
	}
}

// SourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessToken - Choose how to authenticate to Harvest.
type SourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessToken struct {
	// Log into Harvest and then create new <a href="https://id.getharvest.com/developers"> personal access token</a>.
	APIToken string                                                                               `json:"api_token"`
	AuthType *SourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessTokenAuthTypeEnum `json:"auth_type,omitempty"`
}

type SourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuthAuthTypeEnum string

const (
	SourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuthAuthTypeEnumClient SourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuthAuthTypeEnum = "Client"
)

func (e *SourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuthAuthTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Client":
		*e = SourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuthAuthTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuthAuthTypeEnum: %s", s)
	}
}

// SourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuth - Choose how to authenticate to Harvest.
type SourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuth struct {
	AuthType *SourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuthAuthTypeEnum `json:"auth_type,omitempty"`
	// The Client ID of your Harvest developer application.
	ClientID string `json:"client_id"`
	// The Client Secret of your Harvest developer application.
	ClientSecret string `json:"client_secret"`
	// Refresh Token to renew the expired Access Token.
	RefreshToken string `json:"refresh_token"`
}

type SourceHarvestAuthenticationMechanismType string

const (
	SourceHarvestAuthenticationMechanismTypeSourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuth         SourceHarvestAuthenticationMechanismType = "source-harvest_Authentication mechanism_Authenticate via Harvest (OAuth)"
	SourceHarvestAuthenticationMechanismTypeSourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessToken SourceHarvestAuthenticationMechanismType = "source-harvest_Authentication mechanism_Authenticate with Personal Access Token"
)

type SourceHarvestAuthenticationMechanism struct {
	SourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuth         *SourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuth
	SourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessToken *SourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessToken

	Type SourceHarvestAuthenticationMechanismType
}

func CreateSourceHarvestAuthenticationMechanismSourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuth(sourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuth SourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuth) SourceHarvestAuthenticationMechanism {
	typ := SourceHarvestAuthenticationMechanismTypeSourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuth

	return SourceHarvestAuthenticationMechanism{
		SourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuth: &sourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuth,
		Type: typ,
	}
}

func CreateSourceHarvestAuthenticationMechanismSourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessToken(sourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessToken SourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessToken) SourceHarvestAuthenticationMechanism {
	typ := SourceHarvestAuthenticationMechanismTypeSourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessToken

	return SourceHarvestAuthenticationMechanism{
		SourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessToken: &sourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessToken,
		Type: typ,
	}
}

func (u *SourceHarvestAuthenticationMechanism) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	sourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuth := new(SourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuth)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuth); err == nil {
		u.SourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuth = sourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuth
		u.Type = SourceHarvestAuthenticationMechanismTypeSourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuth
		return nil
	}

	sourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessToken := new(SourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessToken)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessToken); err == nil {
		u.SourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessToken = sourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessToken
		u.Type = SourceHarvestAuthenticationMechanismTypeSourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessToken
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceHarvestAuthenticationMechanism) MarshalJSON() ([]byte, error) {
	if u.SourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuth != nil {
		return json.Marshal(u.SourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuth)
	}

	if u.SourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessToken != nil {
		return json.Marshal(u.SourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessToken)
	}

	return nil, nil
}

type SourceHarvestHarvestEnum string

const (
	SourceHarvestHarvestEnumHarvest SourceHarvestHarvestEnum = "harvest"
)

func (e *SourceHarvestHarvestEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "harvest":
		*e = SourceHarvestHarvestEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceHarvestHarvestEnum: %s", s)
	}
}

// SourceHarvest - The values required to configure the source.
type SourceHarvest struct {
	// Harvest account ID. Required for all Harvest requests in pair with Personal Access Token
	AccountID string `json:"account_id"`
	// Choose how to authenticate to Harvest.
	Credentials *SourceHarvestAuthenticationMechanism `json:"credentials,omitempty"`
	// UTC date and time in the format 2017-01-25T00:00:00Z. Any data after this date will not be replicated.
	ReplicationEndDate *string `json:"replication_end_date,omitempty"`
	// UTC date and time in the format 2017-01-25T00:00:00Z. Any data before this date will not be replicated.
	ReplicationStartDate string                   `json:"replication_start_date"`
	SourceType           SourceHarvestHarvestEnum `json:"sourceType"`
}
