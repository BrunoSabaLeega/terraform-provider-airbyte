// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type DestinationAmazonSqsAmazonSqsEnum string

const (
	DestinationAmazonSqsAmazonSqsEnumAmazonSqs DestinationAmazonSqsAmazonSqsEnum = "amazon-sqs"
)

func (e DestinationAmazonSqsAmazonSqsEnum) ToPointer() *DestinationAmazonSqsAmazonSqsEnum {
	return &e
}

func (e *DestinationAmazonSqsAmazonSqsEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "amazon-sqs":
		*e = DestinationAmazonSqsAmazonSqsEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationAmazonSqsAmazonSqsEnum: %v", v)
	}
}

// DestinationAmazonSqsAWSRegionEnum - AWS Region of the SQS Queue
type DestinationAmazonSqsAWSRegionEnum string

const (
	DestinationAmazonSqsAWSRegionEnumUsEast1      DestinationAmazonSqsAWSRegionEnum = "us-east-1"
	DestinationAmazonSqsAWSRegionEnumUsEast2      DestinationAmazonSqsAWSRegionEnum = "us-east-2"
	DestinationAmazonSqsAWSRegionEnumUsWest1      DestinationAmazonSqsAWSRegionEnum = "us-west-1"
	DestinationAmazonSqsAWSRegionEnumUsWest2      DestinationAmazonSqsAWSRegionEnum = "us-west-2"
	DestinationAmazonSqsAWSRegionEnumAfSouth1     DestinationAmazonSqsAWSRegionEnum = "af-south-1"
	DestinationAmazonSqsAWSRegionEnumApEast1      DestinationAmazonSqsAWSRegionEnum = "ap-east-1"
	DestinationAmazonSqsAWSRegionEnumApSouth1     DestinationAmazonSqsAWSRegionEnum = "ap-south-1"
	DestinationAmazonSqsAWSRegionEnumApNortheast1 DestinationAmazonSqsAWSRegionEnum = "ap-northeast-1"
	DestinationAmazonSqsAWSRegionEnumApNortheast2 DestinationAmazonSqsAWSRegionEnum = "ap-northeast-2"
	DestinationAmazonSqsAWSRegionEnumApNortheast3 DestinationAmazonSqsAWSRegionEnum = "ap-northeast-3"
	DestinationAmazonSqsAWSRegionEnumApSoutheast1 DestinationAmazonSqsAWSRegionEnum = "ap-southeast-1"
	DestinationAmazonSqsAWSRegionEnumApSoutheast2 DestinationAmazonSqsAWSRegionEnum = "ap-southeast-2"
	DestinationAmazonSqsAWSRegionEnumCaCentral1   DestinationAmazonSqsAWSRegionEnum = "ca-central-1"
	DestinationAmazonSqsAWSRegionEnumCnNorth1     DestinationAmazonSqsAWSRegionEnum = "cn-north-1"
	DestinationAmazonSqsAWSRegionEnumCnNorthwest1 DestinationAmazonSqsAWSRegionEnum = "cn-northwest-1"
	DestinationAmazonSqsAWSRegionEnumEuCentral1   DestinationAmazonSqsAWSRegionEnum = "eu-central-1"
	DestinationAmazonSqsAWSRegionEnumEuNorth1     DestinationAmazonSqsAWSRegionEnum = "eu-north-1"
	DestinationAmazonSqsAWSRegionEnumEuSouth1     DestinationAmazonSqsAWSRegionEnum = "eu-south-1"
	DestinationAmazonSqsAWSRegionEnumEuWest1      DestinationAmazonSqsAWSRegionEnum = "eu-west-1"
	DestinationAmazonSqsAWSRegionEnumEuWest2      DestinationAmazonSqsAWSRegionEnum = "eu-west-2"
	DestinationAmazonSqsAWSRegionEnumEuWest3      DestinationAmazonSqsAWSRegionEnum = "eu-west-3"
	DestinationAmazonSqsAWSRegionEnumSaEast1      DestinationAmazonSqsAWSRegionEnum = "sa-east-1"
	DestinationAmazonSqsAWSRegionEnumMeSouth1     DestinationAmazonSqsAWSRegionEnum = "me-south-1"
	DestinationAmazonSqsAWSRegionEnumUsGovEast1   DestinationAmazonSqsAWSRegionEnum = "us-gov-east-1"
	DestinationAmazonSqsAWSRegionEnumUsGovWest1   DestinationAmazonSqsAWSRegionEnum = "us-gov-west-1"
)

func (e DestinationAmazonSqsAWSRegionEnum) ToPointer() *DestinationAmazonSqsAWSRegionEnum {
	return &e
}

func (e *DestinationAmazonSqsAWSRegionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "us-east-1":
		fallthrough
	case "us-east-2":
		fallthrough
	case "us-west-1":
		fallthrough
	case "us-west-2":
		fallthrough
	case "af-south-1":
		fallthrough
	case "ap-east-1":
		fallthrough
	case "ap-south-1":
		fallthrough
	case "ap-northeast-1":
		fallthrough
	case "ap-northeast-2":
		fallthrough
	case "ap-northeast-3":
		fallthrough
	case "ap-southeast-1":
		fallthrough
	case "ap-southeast-2":
		fallthrough
	case "ca-central-1":
		fallthrough
	case "cn-north-1":
		fallthrough
	case "cn-northwest-1":
		fallthrough
	case "eu-central-1":
		fallthrough
	case "eu-north-1":
		fallthrough
	case "eu-south-1":
		fallthrough
	case "eu-west-1":
		fallthrough
	case "eu-west-2":
		fallthrough
	case "eu-west-3":
		fallthrough
	case "sa-east-1":
		fallthrough
	case "me-south-1":
		fallthrough
	case "us-gov-east-1":
		fallthrough
	case "us-gov-west-1":
		*e = DestinationAmazonSqsAWSRegionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationAmazonSqsAWSRegionEnum: %v", v)
	}
}

// DestinationAmazonSqs - The values required to configure the destination.
type DestinationAmazonSqs struct {
	// The Access Key ID of the AWS IAM Role to use for sending  messages
	AccessKey       *string                           `json:"access_key,omitempty"`
	DestinationType DestinationAmazonSqsAmazonSqsEnum `json:"destinationType"`
	// Use this property to extract the contents of the named key in the input record to use as the SQS message body. If not set, the entire content of the input record data is used as the message body.
	MessageBodyKey *string `json:"message_body_key,omitempty"`
	// Modify the Message Delay of the individual message from the Queue's default (seconds).
	MessageDelay *int64 `json:"message_delay,omitempty"`
	// The tag that specifies that a message belongs to a specific message group. This parameter applies only to, and is REQUIRED by, FIFO queues.
	MessageGroupID *string `json:"message_group_id,omitempty"`
	// URL of the SQS Queue
	QueueURL string `json:"queue_url"`
	// AWS Region of the SQS Queue
	Region DestinationAmazonSqsAWSRegionEnum `json:"region"`
	// The Secret Key of the AWS IAM Role to use for sending messages
	SecretKey *string `json:"secret_key,omitempty"`
}
