// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type DestinationAmazonSqsAmazonSqs string

const (
	DestinationAmazonSqsAmazonSqsAmazonSqs DestinationAmazonSqsAmazonSqs = "amazon-sqs"
)

func (e DestinationAmazonSqsAmazonSqs) ToPointer() *DestinationAmazonSqsAmazonSqs {
	return &e
}

func (e *DestinationAmazonSqsAmazonSqs) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "amazon-sqs":
		*e = DestinationAmazonSqsAmazonSqs(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationAmazonSqsAmazonSqs: %v", v)
	}
}

// DestinationAmazonSqsAWSRegion - AWS Region of the SQS Queue
type DestinationAmazonSqsAWSRegion string

const (
	DestinationAmazonSqsAWSRegionUsEast1      DestinationAmazonSqsAWSRegion = "us-east-1"
	DestinationAmazonSqsAWSRegionUsEast2      DestinationAmazonSqsAWSRegion = "us-east-2"
	DestinationAmazonSqsAWSRegionUsWest1      DestinationAmazonSqsAWSRegion = "us-west-1"
	DestinationAmazonSqsAWSRegionUsWest2      DestinationAmazonSqsAWSRegion = "us-west-2"
	DestinationAmazonSqsAWSRegionAfSouth1     DestinationAmazonSqsAWSRegion = "af-south-1"
	DestinationAmazonSqsAWSRegionApEast1      DestinationAmazonSqsAWSRegion = "ap-east-1"
	DestinationAmazonSqsAWSRegionApSouth1     DestinationAmazonSqsAWSRegion = "ap-south-1"
	DestinationAmazonSqsAWSRegionApNortheast1 DestinationAmazonSqsAWSRegion = "ap-northeast-1"
	DestinationAmazonSqsAWSRegionApNortheast2 DestinationAmazonSqsAWSRegion = "ap-northeast-2"
	DestinationAmazonSqsAWSRegionApNortheast3 DestinationAmazonSqsAWSRegion = "ap-northeast-3"
	DestinationAmazonSqsAWSRegionApSoutheast1 DestinationAmazonSqsAWSRegion = "ap-southeast-1"
	DestinationAmazonSqsAWSRegionApSoutheast2 DestinationAmazonSqsAWSRegion = "ap-southeast-2"
	DestinationAmazonSqsAWSRegionCaCentral1   DestinationAmazonSqsAWSRegion = "ca-central-1"
	DestinationAmazonSqsAWSRegionCnNorth1     DestinationAmazonSqsAWSRegion = "cn-north-1"
	DestinationAmazonSqsAWSRegionCnNorthwest1 DestinationAmazonSqsAWSRegion = "cn-northwest-1"
	DestinationAmazonSqsAWSRegionEuCentral1   DestinationAmazonSqsAWSRegion = "eu-central-1"
	DestinationAmazonSqsAWSRegionEuNorth1     DestinationAmazonSqsAWSRegion = "eu-north-1"
	DestinationAmazonSqsAWSRegionEuSouth1     DestinationAmazonSqsAWSRegion = "eu-south-1"
	DestinationAmazonSqsAWSRegionEuWest1      DestinationAmazonSqsAWSRegion = "eu-west-1"
	DestinationAmazonSqsAWSRegionEuWest2      DestinationAmazonSqsAWSRegion = "eu-west-2"
	DestinationAmazonSqsAWSRegionEuWest3      DestinationAmazonSqsAWSRegion = "eu-west-3"
	DestinationAmazonSqsAWSRegionSaEast1      DestinationAmazonSqsAWSRegion = "sa-east-1"
	DestinationAmazonSqsAWSRegionMeSouth1     DestinationAmazonSqsAWSRegion = "me-south-1"
	DestinationAmazonSqsAWSRegionUsGovEast1   DestinationAmazonSqsAWSRegion = "us-gov-east-1"
	DestinationAmazonSqsAWSRegionUsGovWest1   DestinationAmazonSqsAWSRegion = "us-gov-west-1"
)

func (e DestinationAmazonSqsAWSRegion) ToPointer() *DestinationAmazonSqsAWSRegion {
	return &e
}

func (e *DestinationAmazonSqsAWSRegion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "us-east-1":
		fallthrough
	case "us-east-2":
		fallthrough
	case "us-west-1":
		fallthrough
	case "us-west-2":
		fallthrough
	case "af-south-1":
		fallthrough
	case "ap-east-1":
		fallthrough
	case "ap-south-1":
		fallthrough
	case "ap-northeast-1":
		fallthrough
	case "ap-northeast-2":
		fallthrough
	case "ap-northeast-3":
		fallthrough
	case "ap-southeast-1":
		fallthrough
	case "ap-southeast-2":
		fallthrough
	case "ca-central-1":
		fallthrough
	case "cn-north-1":
		fallthrough
	case "cn-northwest-1":
		fallthrough
	case "eu-central-1":
		fallthrough
	case "eu-north-1":
		fallthrough
	case "eu-south-1":
		fallthrough
	case "eu-west-1":
		fallthrough
	case "eu-west-2":
		fallthrough
	case "eu-west-3":
		fallthrough
	case "sa-east-1":
		fallthrough
	case "me-south-1":
		fallthrough
	case "us-gov-east-1":
		fallthrough
	case "us-gov-west-1":
		*e = DestinationAmazonSqsAWSRegion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationAmazonSqsAWSRegion: %v", v)
	}
}

type DestinationAmazonSqs struct {
	// The Access Key ID of the AWS IAM Role to use for sending  messages
	AccessKey       *string                       `json:"access_key,omitempty"`
	DestinationType DestinationAmazonSqsAmazonSqs `json:"destinationType"`
	// Use this property to extract the contents of the named key in the input record to use as the SQS message body. If not set, the entire content of the input record data is used as the message body.
	MessageBodyKey *string `json:"message_body_key,omitempty"`
	// Modify the Message Delay of the individual message from the Queue's default (seconds).
	MessageDelay *int64 `json:"message_delay,omitempty"`
	// The tag that specifies that a message belongs to a specific message group. This parameter applies only to, and is REQUIRED by, FIFO queues.
	MessageGroupID *string `json:"message_group_id,omitempty"`
	// URL of the SQS Queue
	QueueURL string `json:"queue_url"`
	// AWS Region of the SQS Queue
	Region DestinationAmazonSqsAWSRegion `json:"region"`
	// The Secret Key of the AWS IAM Role to use for sending messages
	SecretKey *string `json:"secret_key,omitempty"`
}
