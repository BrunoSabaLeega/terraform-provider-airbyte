// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// SourcePocketContentTypeEnum - Select the content type of the items to retrieve.
type SourcePocketContentTypeEnum string

const (
	SourcePocketContentTypeEnumArticle SourcePocketContentTypeEnum = "article"
	SourcePocketContentTypeEnumVideo   SourcePocketContentTypeEnum = "video"
	SourcePocketContentTypeEnumImage   SourcePocketContentTypeEnum = "image"
)

func (e *SourcePocketContentTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "article":
		fallthrough
	case "video":
		fallthrough
	case "image":
		*e = SourcePocketContentTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SourcePocketContentTypeEnum: %s", s)
	}
}

// SourcePocketDetailTypeEnum - Select the granularity of the information about each item.
type SourcePocketDetailTypeEnum string

const (
	SourcePocketDetailTypeEnumSimple   SourcePocketDetailTypeEnum = "simple"
	SourcePocketDetailTypeEnumComplete SourcePocketDetailTypeEnum = "complete"
)

func (e *SourcePocketDetailTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "simple":
		fallthrough
	case "complete":
		*e = SourcePocketDetailTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SourcePocketDetailTypeEnum: %s", s)
	}
}

// SourcePocketSortByEnum - Sort retrieved items by the given criteria.
type SourcePocketSortByEnum string

const (
	SourcePocketSortByEnumNewest SourcePocketSortByEnum = "newest"
	SourcePocketSortByEnumOldest SourcePocketSortByEnum = "oldest"
	SourcePocketSortByEnumTitle  SourcePocketSortByEnum = "title"
	SourcePocketSortByEnumSite   SourcePocketSortByEnum = "site"
)

func (e *SourcePocketSortByEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "newest":
		fallthrough
	case "oldest":
		fallthrough
	case "title":
		fallthrough
	case "site":
		*e = SourcePocketSortByEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SourcePocketSortByEnum: %s", s)
	}
}

type SourcePocketPocketEnum string

const (
	SourcePocketPocketEnumPocket SourcePocketPocketEnum = "pocket"
)

func (e *SourcePocketPocketEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pocket":
		*e = SourcePocketPocketEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SourcePocketPocketEnum: %s", s)
	}
}

// SourcePocketStateEnum - Select the state of the items to retrieve.
type SourcePocketStateEnum string

const (
	SourcePocketStateEnumUnread  SourcePocketStateEnum = "unread"
	SourcePocketStateEnumArchive SourcePocketStateEnum = "archive"
	SourcePocketStateEnumAll     SourcePocketStateEnum = "all"
)

func (e *SourcePocketStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "unread":
		fallthrough
	case "archive":
		fallthrough
	case "all":
		*e = SourcePocketStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SourcePocketStateEnum: %s", s)
	}
}

// SourcePocket - The values required to configure the source.
type SourcePocket struct {
	// The user's Pocket access token.
	AccessToken string `json:"access_token"`
	// Your application's Consumer Key.
	ConsumerKey string `json:"consumer_key"`
	// Select the content type of the items to retrieve.
	ContentType *SourcePocketContentTypeEnum `json:"content_type,omitempty"`
	// Select the granularity of the information about each item.
	DetailType *SourcePocketDetailTypeEnum `json:"detail_type,omitempty"`
	// Only return items from a particular `domain`.
	Domain *string `json:"domain,omitempty"`
	// Retrieve only favorited items.
	Favorite *bool `json:"favorite,omitempty"`
	// Only return items whose title or url contain the `search` string.
	Search *string `json:"search,omitempty"`
	// Only return items modified since the given timestamp.
	Since *string `json:"since,omitempty"`
	// Sort retrieved items by the given criteria.
	Sort       *SourcePocketSortByEnum `json:"sort,omitempty"`
	SourceType SourcePocketPocketEnum  `json:"sourceType"`
	// Select the state of the items to retrieve.
	State *SourcePocketStateEnum `json:"state,omitempty"`
	// Return only items tagged with this tag name. Use _untagged_ for retrieving only untagged items.
	Tag *string `json:"tag,omitempty"`
}
