// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

type DestinationSnowflakeAuthorizationMethodUsernameAndPasswordAuthTypeEnum string

const (
	DestinationSnowflakeAuthorizationMethodUsernameAndPasswordAuthTypeEnumUsernameAndPassword DestinationSnowflakeAuthorizationMethodUsernameAndPasswordAuthTypeEnum = "Username and Password"
)

func (e DestinationSnowflakeAuthorizationMethodUsernameAndPasswordAuthTypeEnum) ToPointer() *DestinationSnowflakeAuthorizationMethodUsernameAndPasswordAuthTypeEnum {
	return &e
}

func (e *DestinationSnowflakeAuthorizationMethodUsernameAndPasswordAuthTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Username and Password":
		*e = DestinationSnowflakeAuthorizationMethodUsernameAndPasswordAuthTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationSnowflakeAuthorizationMethodUsernameAndPasswordAuthTypeEnum: %v", v)
	}
}

type DestinationSnowflakeAuthorizationMethodUsernameAndPassword struct {
	AuthType *DestinationSnowflakeAuthorizationMethodUsernameAndPasswordAuthTypeEnum `json:"auth_type,omitempty"`
	// Enter the password associated with the username.
	Password string `json:"password"`
}

type DestinationSnowflakeAuthorizationMethodKeyPairAuthenticationAuthTypeEnum string

const (
	DestinationSnowflakeAuthorizationMethodKeyPairAuthenticationAuthTypeEnumKeyPairAuthentication DestinationSnowflakeAuthorizationMethodKeyPairAuthenticationAuthTypeEnum = "Key Pair Authentication"
)

func (e DestinationSnowflakeAuthorizationMethodKeyPairAuthenticationAuthTypeEnum) ToPointer() *DestinationSnowflakeAuthorizationMethodKeyPairAuthenticationAuthTypeEnum {
	return &e
}

func (e *DestinationSnowflakeAuthorizationMethodKeyPairAuthenticationAuthTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Key Pair Authentication":
		*e = DestinationSnowflakeAuthorizationMethodKeyPairAuthenticationAuthTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationSnowflakeAuthorizationMethodKeyPairAuthenticationAuthTypeEnum: %v", v)
	}
}

type DestinationSnowflakeAuthorizationMethodKeyPairAuthentication struct {
	AuthType *DestinationSnowflakeAuthorizationMethodKeyPairAuthenticationAuthTypeEnum `json:"auth_type,omitempty"`
	// RSA Private key to use for Snowflake connection. See the <a href="https://docs.airbyte.com/integrations/destinations/snowflake">docs</a> for more information on how to obtain this key.
	PrivateKey string `json:"private_key"`
	// Passphrase for private key
	PrivateKeyPassword *string `json:"private_key_password,omitempty"`
}

type DestinationSnowflakeAuthorizationMethodOAuth20AuthTypeEnum string

const (
	DestinationSnowflakeAuthorizationMethodOAuth20AuthTypeEnumOAuth20 DestinationSnowflakeAuthorizationMethodOAuth20AuthTypeEnum = "OAuth2.0"
)

func (e DestinationSnowflakeAuthorizationMethodOAuth20AuthTypeEnum) ToPointer() *DestinationSnowflakeAuthorizationMethodOAuth20AuthTypeEnum {
	return &e
}

func (e *DestinationSnowflakeAuthorizationMethodOAuth20AuthTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OAuth2.0":
		*e = DestinationSnowflakeAuthorizationMethodOAuth20AuthTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationSnowflakeAuthorizationMethodOAuth20AuthTypeEnum: %v", v)
	}
}

type DestinationSnowflakeAuthorizationMethodOAuth20 struct {
	// Enter you application's Access Token
	AccessToken string                                                      `json:"access_token"`
	AuthType    *DestinationSnowflakeAuthorizationMethodOAuth20AuthTypeEnum `json:"auth_type,omitempty"`
	// Enter your application's Client ID
	ClientID *string `json:"client_id,omitempty"`
	// Enter your application's Client secret
	ClientSecret *string `json:"client_secret,omitempty"`
	// Enter your application's Refresh Token
	RefreshToken string `json:"refresh_token"`
}

type DestinationSnowflakeAuthorizationMethodType string

const (
	DestinationSnowflakeAuthorizationMethodTypeDestinationSnowflakeAuthorizationMethodOAuth20               DestinationSnowflakeAuthorizationMethodType = "destination-snowflake_Authorization Method_OAuth2.0"
	DestinationSnowflakeAuthorizationMethodTypeDestinationSnowflakeAuthorizationMethodKeyPairAuthentication DestinationSnowflakeAuthorizationMethodType = "destination-snowflake_Authorization Method_Key Pair Authentication"
	DestinationSnowflakeAuthorizationMethodTypeDestinationSnowflakeAuthorizationMethodUsernameAndPassword   DestinationSnowflakeAuthorizationMethodType = "destination-snowflake_Authorization Method_Username and Password"
)

type DestinationSnowflakeAuthorizationMethod struct {
	DestinationSnowflakeAuthorizationMethodOAuth20               *DestinationSnowflakeAuthorizationMethodOAuth20
	DestinationSnowflakeAuthorizationMethodKeyPairAuthentication *DestinationSnowflakeAuthorizationMethodKeyPairAuthentication
	DestinationSnowflakeAuthorizationMethodUsernameAndPassword   *DestinationSnowflakeAuthorizationMethodUsernameAndPassword

	Type DestinationSnowflakeAuthorizationMethodType
}

func CreateDestinationSnowflakeAuthorizationMethodDestinationSnowflakeAuthorizationMethodOAuth20(destinationSnowflakeAuthorizationMethodOAuth20 DestinationSnowflakeAuthorizationMethodOAuth20) DestinationSnowflakeAuthorizationMethod {
	typ := DestinationSnowflakeAuthorizationMethodTypeDestinationSnowflakeAuthorizationMethodOAuth20

	return DestinationSnowflakeAuthorizationMethod{
		DestinationSnowflakeAuthorizationMethodOAuth20: &destinationSnowflakeAuthorizationMethodOAuth20,
		Type: typ,
	}
}

func CreateDestinationSnowflakeAuthorizationMethodDestinationSnowflakeAuthorizationMethodKeyPairAuthentication(destinationSnowflakeAuthorizationMethodKeyPairAuthentication DestinationSnowflakeAuthorizationMethodKeyPairAuthentication) DestinationSnowflakeAuthorizationMethod {
	typ := DestinationSnowflakeAuthorizationMethodTypeDestinationSnowflakeAuthorizationMethodKeyPairAuthentication

	return DestinationSnowflakeAuthorizationMethod{
		DestinationSnowflakeAuthorizationMethodKeyPairAuthentication: &destinationSnowflakeAuthorizationMethodKeyPairAuthentication,
		Type: typ,
	}
}

func CreateDestinationSnowflakeAuthorizationMethodDestinationSnowflakeAuthorizationMethodUsernameAndPassword(destinationSnowflakeAuthorizationMethodUsernameAndPassword DestinationSnowflakeAuthorizationMethodUsernameAndPassword) DestinationSnowflakeAuthorizationMethod {
	typ := DestinationSnowflakeAuthorizationMethodTypeDestinationSnowflakeAuthorizationMethodUsernameAndPassword

	return DestinationSnowflakeAuthorizationMethod{
		DestinationSnowflakeAuthorizationMethodUsernameAndPassword: &destinationSnowflakeAuthorizationMethodUsernameAndPassword,
		Type: typ,
	}
}

func (u *DestinationSnowflakeAuthorizationMethod) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	destinationSnowflakeAuthorizationMethodOAuth20 := new(DestinationSnowflakeAuthorizationMethodOAuth20)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&destinationSnowflakeAuthorizationMethodOAuth20); err == nil {
		u.DestinationSnowflakeAuthorizationMethodOAuth20 = destinationSnowflakeAuthorizationMethodOAuth20
		u.Type = DestinationSnowflakeAuthorizationMethodTypeDestinationSnowflakeAuthorizationMethodOAuth20
		return nil
	}

	destinationSnowflakeAuthorizationMethodKeyPairAuthentication := new(DestinationSnowflakeAuthorizationMethodKeyPairAuthentication)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&destinationSnowflakeAuthorizationMethodKeyPairAuthentication); err == nil {
		u.DestinationSnowflakeAuthorizationMethodKeyPairAuthentication = destinationSnowflakeAuthorizationMethodKeyPairAuthentication
		u.Type = DestinationSnowflakeAuthorizationMethodTypeDestinationSnowflakeAuthorizationMethodKeyPairAuthentication
		return nil
	}

	destinationSnowflakeAuthorizationMethodUsernameAndPassword := new(DestinationSnowflakeAuthorizationMethodUsernameAndPassword)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&destinationSnowflakeAuthorizationMethodUsernameAndPassword); err == nil {
		u.DestinationSnowflakeAuthorizationMethodUsernameAndPassword = destinationSnowflakeAuthorizationMethodUsernameAndPassword
		u.Type = DestinationSnowflakeAuthorizationMethodTypeDestinationSnowflakeAuthorizationMethodUsernameAndPassword
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u DestinationSnowflakeAuthorizationMethod) MarshalJSON() ([]byte, error) {
	if u.DestinationSnowflakeAuthorizationMethodOAuth20 != nil {
		return json.Marshal(u.DestinationSnowflakeAuthorizationMethodOAuth20)
	}

	if u.DestinationSnowflakeAuthorizationMethodKeyPairAuthentication != nil {
		return json.Marshal(u.DestinationSnowflakeAuthorizationMethodKeyPairAuthentication)
	}

	if u.DestinationSnowflakeAuthorizationMethodUsernameAndPassword != nil {
		return json.Marshal(u.DestinationSnowflakeAuthorizationMethodUsernameAndPassword)
	}

	return nil, nil
}

type DestinationSnowflakeSnowflakeEnum string

const (
	DestinationSnowflakeSnowflakeEnumSnowflake DestinationSnowflakeSnowflakeEnum = "snowflake"
)

func (e DestinationSnowflakeSnowflakeEnum) ToPointer() *DestinationSnowflakeSnowflakeEnum {
	return &e
}

func (e *DestinationSnowflakeSnowflakeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "snowflake":
		*e = DestinationSnowflakeSnowflakeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationSnowflakeSnowflakeEnum: %v", v)
	}
}

type DestinationSnowflakeDataStagingMethodGoogleCloudStorageStagingMethodEnum string

const (
	DestinationSnowflakeDataStagingMethodGoogleCloudStorageStagingMethodEnumGcsStaging DestinationSnowflakeDataStagingMethodGoogleCloudStorageStagingMethodEnum = "GCS Staging"
)

func (e DestinationSnowflakeDataStagingMethodGoogleCloudStorageStagingMethodEnum) ToPointer() *DestinationSnowflakeDataStagingMethodGoogleCloudStorageStagingMethodEnum {
	return &e
}

func (e *DestinationSnowflakeDataStagingMethodGoogleCloudStorageStagingMethodEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "GCS Staging":
		*e = DestinationSnowflakeDataStagingMethodGoogleCloudStorageStagingMethodEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationSnowflakeDataStagingMethodGoogleCloudStorageStagingMethodEnum: %v", v)
	}
}

// DestinationSnowflakeDataStagingMethodGoogleCloudStorageStaging - Recommended for large production workloads for better speed and scalability.
type DestinationSnowflakeDataStagingMethodGoogleCloudStorageStaging struct {
	// Enter the <a href="https://cloud.google.com/storage/docs/creating-buckets">Cloud Storage bucket name</a>
	BucketName string `json:"bucket_name"`
	// Enter your <a href="https://cloud.google.com/iam/docs/creating-managing-service-account-keys#creating_service_account_keys">Google Cloud service account key</a> in the JSON format with read/write access to your Cloud Storage staging bucket
	CredentialsJSON string                                                                   `json:"credentials_json"`
	Method          DestinationSnowflakeDataStagingMethodGoogleCloudStorageStagingMethodEnum `json:"method"`
	// Enter the <a href="https://cloud.google.com/resource-manager/docs/creating-managing-projects#identifying_projects">Google Cloud project ID</a>
	ProjectID string `json:"project_id"`
}

type DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionAESCBCEnvelopeEncryptionEncryptionTypeEnum string

const (
	DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionAESCBCEnvelopeEncryptionEncryptionTypeEnumAesCbcEnvelope DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionAESCBCEnvelopeEncryptionEncryptionTypeEnum = "aes_cbc_envelope"
)

func (e DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionAESCBCEnvelopeEncryptionEncryptionTypeEnum) ToPointer() *DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionAESCBCEnvelopeEncryptionEncryptionTypeEnum {
	return &e
}

func (e *DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionAESCBCEnvelopeEncryptionEncryptionTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "aes_cbc_envelope":
		*e = DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionAESCBCEnvelopeEncryptionEncryptionTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionAESCBCEnvelopeEncryptionEncryptionTypeEnum: %v", v)
	}
}

// DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionAESCBCEnvelopeEncryption - Staging data will be encrypted using AES-CBC envelope encryption.
type DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionAESCBCEnvelopeEncryption struct {
	EncryptionType DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionAESCBCEnvelopeEncryptionEncryptionTypeEnum `json:"encryption_type"`
	// The key, base64-encoded. Must be either 128, 192, or 256 bits. Leave blank to have Airbyte generate an ephemeral key for each sync.
	KeyEncryptingKey *string `json:"key_encrypting_key,omitempty"`
}

type DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionNoEncryptionEncryptionTypeEnum string

const (
	DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionNoEncryptionEncryptionTypeEnumNone DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionNoEncryptionEncryptionTypeEnum = "none"
)

func (e DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionNoEncryptionEncryptionTypeEnum) ToPointer() *DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionNoEncryptionEncryptionTypeEnum {
	return &e
}

func (e *DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionNoEncryptionEncryptionTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		*e = DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionNoEncryptionEncryptionTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionNoEncryptionEncryptionTypeEnum: %v", v)
	}
}

// DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionNoEncryption - Staging data will be stored in plaintext.
type DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionNoEncryption struct {
	EncryptionType DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionNoEncryptionEncryptionTypeEnum `json:"encryption_type"`
}

type DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionType string

const (
	DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionTypeDestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionNoEncryption             DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionType = "destination-snowflake_Data Staging Method_AWS S3 Staging_Encryption_No encryption"
	DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionTypeDestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionAESCBCEnvelopeEncryption DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionType = "destination-snowflake_Data Staging Method_AWS S3 Staging_Encryption_AES-CBC envelope encryption"
)

type DestinationSnowflakeDataStagingMethodAWSS3StagingEncryption struct {
	DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionNoEncryption             *DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionNoEncryption
	DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionAESCBCEnvelopeEncryption *DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionAESCBCEnvelopeEncryption

	Type DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionType
}

func CreateDestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionDestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionNoEncryption(destinationSnowflakeDataStagingMethodAWSS3StagingEncryptionNoEncryption DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionNoEncryption) DestinationSnowflakeDataStagingMethodAWSS3StagingEncryption {
	typ := DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionTypeDestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionNoEncryption

	return DestinationSnowflakeDataStagingMethodAWSS3StagingEncryption{
		DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionNoEncryption: &destinationSnowflakeDataStagingMethodAWSS3StagingEncryptionNoEncryption,
		Type: typ,
	}
}

func CreateDestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionDestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionAESCBCEnvelopeEncryption(destinationSnowflakeDataStagingMethodAWSS3StagingEncryptionAESCBCEnvelopeEncryption DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionAESCBCEnvelopeEncryption) DestinationSnowflakeDataStagingMethodAWSS3StagingEncryption {
	typ := DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionTypeDestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionAESCBCEnvelopeEncryption

	return DestinationSnowflakeDataStagingMethodAWSS3StagingEncryption{
		DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionAESCBCEnvelopeEncryption: &destinationSnowflakeDataStagingMethodAWSS3StagingEncryptionAESCBCEnvelopeEncryption,
		Type: typ,
	}
}

func (u *DestinationSnowflakeDataStagingMethodAWSS3StagingEncryption) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	destinationSnowflakeDataStagingMethodAWSS3StagingEncryptionNoEncryption := new(DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionNoEncryption)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&destinationSnowflakeDataStagingMethodAWSS3StagingEncryptionNoEncryption); err == nil {
		u.DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionNoEncryption = destinationSnowflakeDataStagingMethodAWSS3StagingEncryptionNoEncryption
		u.Type = DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionTypeDestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionNoEncryption
		return nil
	}

	destinationSnowflakeDataStagingMethodAWSS3StagingEncryptionAESCBCEnvelopeEncryption := new(DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionAESCBCEnvelopeEncryption)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&destinationSnowflakeDataStagingMethodAWSS3StagingEncryptionAESCBCEnvelopeEncryption); err == nil {
		u.DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionAESCBCEnvelopeEncryption = destinationSnowflakeDataStagingMethodAWSS3StagingEncryptionAESCBCEnvelopeEncryption
		u.Type = DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionTypeDestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionAESCBCEnvelopeEncryption
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u DestinationSnowflakeDataStagingMethodAWSS3StagingEncryption) MarshalJSON() ([]byte, error) {
	if u.DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionNoEncryption != nil {
		return json.Marshal(u.DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionNoEncryption)
	}

	if u.DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionAESCBCEnvelopeEncryption != nil {
		return json.Marshal(u.DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionAESCBCEnvelopeEncryption)
	}

	return nil, nil
}

type DestinationSnowflakeDataStagingMethodAWSS3StagingMethodEnum string

const (
	DestinationSnowflakeDataStagingMethodAWSS3StagingMethodEnumS3Staging DestinationSnowflakeDataStagingMethodAWSS3StagingMethodEnum = "S3 Staging"
)

func (e DestinationSnowflakeDataStagingMethodAWSS3StagingMethodEnum) ToPointer() *DestinationSnowflakeDataStagingMethodAWSS3StagingMethodEnum {
	return &e
}

func (e *DestinationSnowflakeDataStagingMethodAWSS3StagingMethodEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "S3 Staging":
		*e = DestinationSnowflakeDataStagingMethodAWSS3StagingMethodEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationSnowflakeDataStagingMethodAWSS3StagingMethodEnum: %v", v)
	}
}

// DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegionEnum - Enter the region where your S3 bucket resides
type DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegionEnum string

const (
	DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegionEnumUnknown      DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegionEnum = ""
	DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegionEnumUsEast1      DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegionEnum = "us-east-1"
	DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegionEnumUsEast2      DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegionEnum = "us-east-2"
	DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegionEnumUsWest1      DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegionEnum = "us-west-1"
	DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegionEnumUsWest2      DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegionEnum = "us-west-2"
	DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegionEnumAfSouth1     DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegionEnum = "af-south-1"
	DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegionEnumApEast1      DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegionEnum = "ap-east-1"
	DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegionEnumApSouth1     DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegionEnum = "ap-south-1"
	DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegionEnumApNortheast1 DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegionEnum = "ap-northeast-1"
	DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegionEnumApNortheast2 DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegionEnum = "ap-northeast-2"
	DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegionEnumApNortheast3 DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegionEnum = "ap-northeast-3"
	DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegionEnumApSoutheast1 DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegionEnum = "ap-southeast-1"
	DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegionEnumApSoutheast2 DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegionEnum = "ap-southeast-2"
	DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegionEnumCaCentral1   DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegionEnum = "ca-central-1"
	DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegionEnumCnNorth1     DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegionEnum = "cn-north-1"
	DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegionEnumCnNorthwest1 DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegionEnum = "cn-northwest-1"
	DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegionEnumEuCentral1   DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegionEnum = "eu-central-1"
	DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegionEnumEuWest1      DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegionEnum = "eu-west-1"
	DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegionEnumEuWest2      DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegionEnum = "eu-west-2"
	DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegionEnumEuWest3      DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegionEnum = "eu-west-3"
	DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegionEnumEuSouth1     DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegionEnum = "eu-south-1"
	DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegionEnumEuNorth1     DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegionEnum = "eu-north-1"
	DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegionEnumSaEast1      DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegionEnum = "sa-east-1"
	DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegionEnumMeSouth1     DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegionEnum = "me-south-1"
)

func (e DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegionEnum) ToPointer() *DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegionEnum {
	return &e
}

func (e *DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "":
		fallthrough
	case "us-east-1":
		fallthrough
	case "us-east-2":
		fallthrough
	case "us-west-1":
		fallthrough
	case "us-west-2":
		fallthrough
	case "af-south-1":
		fallthrough
	case "ap-east-1":
		fallthrough
	case "ap-south-1":
		fallthrough
	case "ap-northeast-1":
		fallthrough
	case "ap-northeast-2":
		fallthrough
	case "ap-northeast-3":
		fallthrough
	case "ap-southeast-1":
		fallthrough
	case "ap-southeast-2":
		fallthrough
	case "ca-central-1":
		fallthrough
	case "cn-north-1":
		fallthrough
	case "cn-northwest-1":
		fallthrough
	case "eu-central-1":
		fallthrough
	case "eu-west-1":
		fallthrough
	case "eu-west-2":
		fallthrough
	case "eu-west-3":
		fallthrough
	case "eu-south-1":
		fallthrough
	case "eu-north-1":
		fallthrough
	case "sa-east-1":
		fallthrough
	case "me-south-1":
		*e = DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegionEnum: %v", v)
	}
}

// DestinationSnowflakeDataStagingMethodAWSS3Staging - Recommended for large production workloads for better speed and scalability.
type DestinationSnowflakeDataStagingMethodAWSS3Staging struct {
	// Enter your <a href="https://docs.aws.amazon.com/powershell/latest/userguide/pstools-appendix-sign-up.html">AWS access key ID</a>. Airbyte requires Read and Write permissions on your S3 bucket
	AccessKeyID string `json:"access_key_id"`
	// Choose a data encryption method for the staging data
	Encryption *DestinationSnowflakeDataStagingMethodAWSS3StagingEncryption `json:"encryption,omitempty"`
	// The pattern allows you to set the file-name format for the S3 staging file(s)
	FileNamePattern *string                                                     `json:"file_name_pattern,omitempty"`
	Method          DestinationSnowflakeDataStagingMethodAWSS3StagingMethodEnum `json:"method"`
	// Toggle to delete staging files from the S3 bucket after a successful sync
	PurgeStagingData *bool `json:"purge_staging_data,omitempty"`
	// Enter your S3 bucket name
	S3BucketName string `json:"s3_bucket_name"`
	// Enter the region where your S3 bucket resides
	S3BucketRegion *DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegionEnum `json:"s3_bucket_region,omitempty"`
	// Enter your <a href="https://docs.aws.amazon.com/powershell/latest/userguide/pstools-appendix-sign-up.html">AWS secret access key</a>
	SecretAccessKey string `json:"secret_access_key"`
}

type DestinationSnowflakeDataStagingMethodRecommendedInternalStagingMethodEnum string

const (
	DestinationSnowflakeDataStagingMethodRecommendedInternalStagingMethodEnumInternalStaging DestinationSnowflakeDataStagingMethodRecommendedInternalStagingMethodEnum = "Internal Staging"
)

func (e DestinationSnowflakeDataStagingMethodRecommendedInternalStagingMethodEnum) ToPointer() *DestinationSnowflakeDataStagingMethodRecommendedInternalStagingMethodEnum {
	return &e
}

func (e *DestinationSnowflakeDataStagingMethodRecommendedInternalStagingMethodEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Internal Staging":
		*e = DestinationSnowflakeDataStagingMethodRecommendedInternalStagingMethodEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationSnowflakeDataStagingMethodRecommendedInternalStagingMethodEnum: %v", v)
	}
}

// DestinationSnowflakeDataStagingMethodRecommendedInternalStaging - Recommended for large production workloads for better speed and scalability.
type DestinationSnowflakeDataStagingMethodRecommendedInternalStaging struct {
	Method DestinationSnowflakeDataStagingMethodRecommendedInternalStagingMethodEnum `json:"method"`
}

type DestinationSnowflakeDataStagingMethodSelectAnotherOptionMethodEnum string

const (
	DestinationSnowflakeDataStagingMethodSelectAnotherOptionMethodEnumStandard DestinationSnowflakeDataStagingMethodSelectAnotherOptionMethodEnum = "Standard"
)

func (e DestinationSnowflakeDataStagingMethodSelectAnotherOptionMethodEnum) ToPointer() *DestinationSnowflakeDataStagingMethodSelectAnotherOptionMethodEnum {
	return &e
}

func (e *DestinationSnowflakeDataStagingMethodSelectAnotherOptionMethodEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Standard":
		*e = DestinationSnowflakeDataStagingMethodSelectAnotherOptionMethodEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationSnowflakeDataStagingMethodSelectAnotherOptionMethodEnum: %v", v)
	}
}

// DestinationSnowflakeDataStagingMethodSelectAnotherOption - Select another option
type DestinationSnowflakeDataStagingMethodSelectAnotherOption struct {
	Method DestinationSnowflakeDataStagingMethodSelectAnotherOptionMethodEnum `json:"method"`
}

type DestinationSnowflakeDataStagingMethodType string

const (
	DestinationSnowflakeDataStagingMethodTypeDestinationSnowflakeDataStagingMethodSelectAnotherOption        DestinationSnowflakeDataStagingMethodType = "destination-snowflake_Data Staging Method_Select another option"
	DestinationSnowflakeDataStagingMethodTypeDestinationSnowflakeDataStagingMethodRecommendedInternalStaging DestinationSnowflakeDataStagingMethodType = "destination-snowflake_Data Staging Method_[Recommended] Internal Staging"
	DestinationSnowflakeDataStagingMethodTypeDestinationSnowflakeDataStagingMethodAWSS3Staging               DestinationSnowflakeDataStagingMethodType = "destination-snowflake_Data Staging Method_AWS S3 Staging"
	DestinationSnowflakeDataStagingMethodTypeDestinationSnowflakeDataStagingMethodGoogleCloudStorageStaging  DestinationSnowflakeDataStagingMethodType = "destination-snowflake_Data Staging Method_Google Cloud Storage Staging"
)

type DestinationSnowflakeDataStagingMethod struct {
	DestinationSnowflakeDataStagingMethodSelectAnotherOption        *DestinationSnowflakeDataStagingMethodSelectAnotherOption
	DestinationSnowflakeDataStagingMethodRecommendedInternalStaging *DestinationSnowflakeDataStagingMethodRecommendedInternalStaging
	DestinationSnowflakeDataStagingMethodAWSS3Staging               *DestinationSnowflakeDataStagingMethodAWSS3Staging
	DestinationSnowflakeDataStagingMethodGoogleCloudStorageStaging  *DestinationSnowflakeDataStagingMethodGoogleCloudStorageStaging

	Type DestinationSnowflakeDataStagingMethodType
}

func CreateDestinationSnowflakeDataStagingMethodDestinationSnowflakeDataStagingMethodSelectAnotherOption(destinationSnowflakeDataStagingMethodSelectAnotherOption DestinationSnowflakeDataStagingMethodSelectAnotherOption) DestinationSnowflakeDataStagingMethod {
	typ := DestinationSnowflakeDataStagingMethodTypeDestinationSnowflakeDataStagingMethodSelectAnotherOption

	return DestinationSnowflakeDataStagingMethod{
		DestinationSnowflakeDataStagingMethodSelectAnotherOption: &destinationSnowflakeDataStagingMethodSelectAnotherOption,
		Type: typ,
	}
}

func CreateDestinationSnowflakeDataStagingMethodDestinationSnowflakeDataStagingMethodRecommendedInternalStaging(destinationSnowflakeDataStagingMethodRecommendedInternalStaging DestinationSnowflakeDataStagingMethodRecommendedInternalStaging) DestinationSnowflakeDataStagingMethod {
	typ := DestinationSnowflakeDataStagingMethodTypeDestinationSnowflakeDataStagingMethodRecommendedInternalStaging

	return DestinationSnowflakeDataStagingMethod{
		DestinationSnowflakeDataStagingMethodRecommendedInternalStaging: &destinationSnowflakeDataStagingMethodRecommendedInternalStaging,
		Type: typ,
	}
}

func CreateDestinationSnowflakeDataStagingMethodDestinationSnowflakeDataStagingMethodAWSS3Staging(destinationSnowflakeDataStagingMethodAWSS3Staging DestinationSnowflakeDataStagingMethodAWSS3Staging) DestinationSnowflakeDataStagingMethod {
	typ := DestinationSnowflakeDataStagingMethodTypeDestinationSnowflakeDataStagingMethodAWSS3Staging

	return DestinationSnowflakeDataStagingMethod{
		DestinationSnowflakeDataStagingMethodAWSS3Staging: &destinationSnowflakeDataStagingMethodAWSS3Staging,
		Type: typ,
	}
}

func CreateDestinationSnowflakeDataStagingMethodDestinationSnowflakeDataStagingMethodGoogleCloudStorageStaging(destinationSnowflakeDataStagingMethodGoogleCloudStorageStaging DestinationSnowflakeDataStagingMethodGoogleCloudStorageStaging) DestinationSnowflakeDataStagingMethod {
	typ := DestinationSnowflakeDataStagingMethodTypeDestinationSnowflakeDataStagingMethodGoogleCloudStorageStaging

	return DestinationSnowflakeDataStagingMethod{
		DestinationSnowflakeDataStagingMethodGoogleCloudStorageStaging: &destinationSnowflakeDataStagingMethodGoogleCloudStorageStaging,
		Type: typ,
	}
}

func (u *DestinationSnowflakeDataStagingMethod) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	destinationSnowflakeDataStagingMethodSelectAnotherOption := new(DestinationSnowflakeDataStagingMethodSelectAnotherOption)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&destinationSnowflakeDataStagingMethodSelectAnotherOption); err == nil {
		u.DestinationSnowflakeDataStagingMethodSelectAnotherOption = destinationSnowflakeDataStagingMethodSelectAnotherOption
		u.Type = DestinationSnowflakeDataStagingMethodTypeDestinationSnowflakeDataStagingMethodSelectAnotherOption
		return nil
	}

	destinationSnowflakeDataStagingMethodRecommendedInternalStaging := new(DestinationSnowflakeDataStagingMethodRecommendedInternalStaging)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&destinationSnowflakeDataStagingMethodRecommendedInternalStaging); err == nil {
		u.DestinationSnowflakeDataStagingMethodRecommendedInternalStaging = destinationSnowflakeDataStagingMethodRecommendedInternalStaging
		u.Type = DestinationSnowflakeDataStagingMethodTypeDestinationSnowflakeDataStagingMethodRecommendedInternalStaging
		return nil
	}

	destinationSnowflakeDataStagingMethodAWSS3Staging := new(DestinationSnowflakeDataStagingMethodAWSS3Staging)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&destinationSnowflakeDataStagingMethodAWSS3Staging); err == nil {
		u.DestinationSnowflakeDataStagingMethodAWSS3Staging = destinationSnowflakeDataStagingMethodAWSS3Staging
		u.Type = DestinationSnowflakeDataStagingMethodTypeDestinationSnowflakeDataStagingMethodAWSS3Staging
		return nil
	}

	destinationSnowflakeDataStagingMethodGoogleCloudStorageStaging := new(DestinationSnowflakeDataStagingMethodGoogleCloudStorageStaging)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&destinationSnowflakeDataStagingMethodGoogleCloudStorageStaging); err == nil {
		u.DestinationSnowflakeDataStagingMethodGoogleCloudStorageStaging = destinationSnowflakeDataStagingMethodGoogleCloudStorageStaging
		u.Type = DestinationSnowflakeDataStagingMethodTypeDestinationSnowflakeDataStagingMethodGoogleCloudStorageStaging
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u DestinationSnowflakeDataStagingMethod) MarshalJSON() ([]byte, error) {
	if u.DestinationSnowflakeDataStagingMethodSelectAnotherOption != nil {
		return json.Marshal(u.DestinationSnowflakeDataStagingMethodSelectAnotherOption)
	}

	if u.DestinationSnowflakeDataStagingMethodRecommendedInternalStaging != nil {
		return json.Marshal(u.DestinationSnowflakeDataStagingMethodRecommendedInternalStaging)
	}

	if u.DestinationSnowflakeDataStagingMethodAWSS3Staging != nil {
		return json.Marshal(u.DestinationSnowflakeDataStagingMethodAWSS3Staging)
	}

	if u.DestinationSnowflakeDataStagingMethodGoogleCloudStorageStaging != nil {
		return json.Marshal(u.DestinationSnowflakeDataStagingMethodGoogleCloudStorageStaging)
	}

	return nil, nil
}

type DestinationSnowflake struct {
	Credentials *DestinationSnowflakeAuthorizationMethod `json:"credentials,omitempty"`
	// Enter the name of the <a href="https://docs.snowflake.com/en/sql-reference/ddl-database.html#database-schema-share-ddl">database</a> you want to sync data into
	Database        string                            `json:"database"`
	DestinationType DestinationSnowflakeSnowflakeEnum `json:"destinationType"`
	// Number of file buffers allocated for writing data. Increasing this number is beneficial for connections using Change Data Capture (CDC) and up to the number of streams within a connection. Increasing the number of file buffers past the maximum number of streams has deteriorating effects
	FileBufferCount *int64 `json:"file_buffer_count,omitempty"`
	// Enter your Snowflake account's <a href="https://docs.snowflake.com/en/user-guide/admin-account-identifier.html#using-an-account-locator-as-an-identifier">locator</a> (in the format <account_locator>.<region>.<cloud>.snowflakecomputing.com)
	Host string `json:"host"`
	// Enter the additional properties to pass to the JDBC URL string when connecting to the database (formatted as key=value pairs separated by the symbol &). Example: key1=value1&key2=value2&key3=value3
	JdbcURLParams *string `json:"jdbc_url_params,omitempty"`
	// Select a data staging method
	LoadingMethod *DestinationSnowflakeDataStagingMethod `json:"loading_method,omitempty"`
	// Enter the <a href="https://docs.snowflake.com/en/user-guide/security-access-control-overview.html#roles">role</a> that you want to use to access Snowflake
	Role string `json:"role"`
	// Enter the name of the default <a href="https://docs.snowflake.com/en/sql-reference/ddl-database.html#database-schema-share-ddl">schema</a>
	Schema string `json:"schema"`
	// Enter the name of the user you want to use to access the database
	Username string `json:"username"`
	// Enter the name of the <a href="https://docs.snowflake.com/en/user-guide/warehouses-overview.html#overview-of-warehouses">warehouse</a> that you want to sync data into
	Warehouse string `json:"warehouse"`
}
