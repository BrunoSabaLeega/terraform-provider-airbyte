// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

type DestinationSnowflakeAuthorizationMethodUsernameAndPasswordAuthType string

const (
	DestinationSnowflakeAuthorizationMethodUsernameAndPasswordAuthTypeUsernameAndPassword DestinationSnowflakeAuthorizationMethodUsernameAndPasswordAuthType = "Username and Password"
)

func (e DestinationSnowflakeAuthorizationMethodUsernameAndPasswordAuthType) ToPointer() *DestinationSnowflakeAuthorizationMethodUsernameAndPasswordAuthType {
	return &e
}

func (e *DestinationSnowflakeAuthorizationMethodUsernameAndPasswordAuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Username and Password":
		*e = DestinationSnowflakeAuthorizationMethodUsernameAndPasswordAuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationSnowflakeAuthorizationMethodUsernameAndPasswordAuthType: %v", v)
	}
}

type DestinationSnowflakeAuthorizationMethodUsernameAndPassword struct {
	AuthType *DestinationSnowflakeAuthorizationMethodUsernameAndPasswordAuthType `json:"auth_type,omitempty"`
	// Enter the password associated with the username.
	Password string `json:"password"`
}

type DestinationSnowflakeAuthorizationMethodKeyPairAuthenticationAuthType string

const (
	DestinationSnowflakeAuthorizationMethodKeyPairAuthenticationAuthTypeKeyPairAuthentication DestinationSnowflakeAuthorizationMethodKeyPairAuthenticationAuthType = "Key Pair Authentication"
)

func (e DestinationSnowflakeAuthorizationMethodKeyPairAuthenticationAuthType) ToPointer() *DestinationSnowflakeAuthorizationMethodKeyPairAuthenticationAuthType {
	return &e
}

func (e *DestinationSnowflakeAuthorizationMethodKeyPairAuthenticationAuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Key Pair Authentication":
		*e = DestinationSnowflakeAuthorizationMethodKeyPairAuthenticationAuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationSnowflakeAuthorizationMethodKeyPairAuthenticationAuthType: %v", v)
	}
}

type DestinationSnowflakeAuthorizationMethodKeyPairAuthentication struct {
	AuthType *DestinationSnowflakeAuthorizationMethodKeyPairAuthenticationAuthType `json:"auth_type,omitempty"`
	// RSA Private key to use for Snowflake connection. See the <a href="https://docs.airbyte.com/integrations/destinations/snowflake">docs</a> for more information on how to obtain this key.
	PrivateKey string `json:"private_key"`
	// Passphrase for private key
	PrivateKeyPassword *string `json:"private_key_password,omitempty"`
}

type DestinationSnowflakeAuthorizationMethodOAuth20AuthType string

const (
	DestinationSnowflakeAuthorizationMethodOAuth20AuthTypeOAuth20 DestinationSnowflakeAuthorizationMethodOAuth20AuthType = "OAuth2.0"
)

func (e DestinationSnowflakeAuthorizationMethodOAuth20AuthType) ToPointer() *DestinationSnowflakeAuthorizationMethodOAuth20AuthType {
	return &e
}

func (e *DestinationSnowflakeAuthorizationMethodOAuth20AuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OAuth2.0":
		*e = DestinationSnowflakeAuthorizationMethodOAuth20AuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationSnowflakeAuthorizationMethodOAuth20AuthType: %v", v)
	}
}

type DestinationSnowflakeAuthorizationMethodOAuth20 struct {
	// Enter you application's Access Token
	AccessToken string                                                  `json:"access_token"`
	AuthType    *DestinationSnowflakeAuthorizationMethodOAuth20AuthType `json:"auth_type,omitempty"`
	// Enter your application's Client ID
	ClientID *string `json:"client_id,omitempty"`
	// Enter your application's Client secret
	ClientSecret *string `json:"client_secret,omitempty"`
	// Enter your application's Refresh Token
	RefreshToken string `json:"refresh_token"`
}

type DestinationSnowflakeAuthorizationMethodType string

const (
	DestinationSnowflakeAuthorizationMethodTypeDestinationSnowflakeAuthorizationMethodOAuth20               DestinationSnowflakeAuthorizationMethodType = "destination-snowflake_Authorization Method_OAuth2.0"
	DestinationSnowflakeAuthorizationMethodTypeDestinationSnowflakeAuthorizationMethodKeyPairAuthentication DestinationSnowflakeAuthorizationMethodType = "destination-snowflake_Authorization Method_Key Pair Authentication"
	DestinationSnowflakeAuthorizationMethodTypeDestinationSnowflakeAuthorizationMethodUsernameAndPassword   DestinationSnowflakeAuthorizationMethodType = "destination-snowflake_Authorization Method_Username and Password"
)

type DestinationSnowflakeAuthorizationMethod struct {
	DestinationSnowflakeAuthorizationMethodOAuth20               *DestinationSnowflakeAuthorizationMethodOAuth20
	DestinationSnowflakeAuthorizationMethodKeyPairAuthentication *DestinationSnowflakeAuthorizationMethodKeyPairAuthentication
	DestinationSnowflakeAuthorizationMethodUsernameAndPassword   *DestinationSnowflakeAuthorizationMethodUsernameAndPassword

	Type DestinationSnowflakeAuthorizationMethodType
}

func CreateDestinationSnowflakeAuthorizationMethodDestinationSnowflakeAuthorizationMethodOAuth20(destinationSnowflakeAuthorizationMethodOAuth20 DestinationSnowflakeAuthorizationMethodOAuth20) DestinationSnowflakeAuthorizationMethod {
	typ := DestinationSnowflakeAuthorizationMethodTypeDestinationSnowflakeAuthorizationMethodOAuth20

	return DestinationSnowflakeAuthorizationMethod{
		DestinationSnowflakeAuthorizationMethodOAuth20: &destinationSnowflakeAuthorizationMethodOAuth20,
		Type: typ,
	}
}

func CreateDestinationSnowflakeAuthorizationMethodDestinationSnowflakeAuthorizationMethodKeyPairAuthentication(destinationSnowflakeAuthorizationMethodKeyPairAuthentication DestinationSnowflakeAuthorizationMethodKeyPairAuthentication) DestinationSnowflakeAuthorizationMethod {
	typ := DestinationSnowflakeAuthorizationMethodTypeDestinationSnowflakeAuthorizationMethodKeyPairAuthentication

	return DestinationSnowflakeAuthorizationMethod{
		DestinationSnowflakeAuthorizationMethodKeyPairAuthentication: &destinationSnowflakeAuthorizationMethodKeyPairAuthentication,
		Type: typ,
	}
}

func CreateDestinationSnowflakeAuthorizationMethodDestinationSnowflakeAuthorizationMethodUsernameAndPassword(destinationSnowflakeAuthorizationMethodUsernameAndPassword DestinationSnowflakeAuthorizationMethodUsernameAndPassword) DestinationSnowflakeAuthorizationMethod {
	typ := DestinationSnowflakeAuthorizationMethodTypeDestinationSnowflakeAuthorizationMethodUsernameAndPassword

	return DestinationSnowflakeAuthorizationMethod{
		DestinationSnowflakeAuthorizationMethodUsernameAndPassword: &destinationSnowflakeAuthorizationMethodUsernameAndPassword,
		Type: typ,
	}
}

func (u *DestinationSnowflakeAuthorizationMethod) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	destinationSnowflakeAuthorizationMethodOAuth20 := new(DestinationSnowflakeAuthorizationMethodOAuth20)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&destinationSnowflakeAuthorizationMethodOAuth20); err == nil {
		u.DestinationSnowflakeAuthorizationMethodOAuth20 = destinationSnowflakeAuthorizationMethodOAuth20
		u.Type = DestinationSnowflakeAuthorizationMethodTypeDestinationSnowflakeAuthorizationMethodOAuth20
		return nil
	}

	destinationSnowflakeAuthorizationMethodKeyPairAuthentication := new(DestinationSnowflakeAuthorizationMethodKeyPairAuthentication)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&destinationSnowflakeAuthorizationMethodKeyPairAuthentication); err == nil {
		u.DestinationSnowflakeAuthorizationMethodKeyPairAuthentication = destinationSnowflakeAuthorizationMethodKeyPairAuthentication
		u.Type = DestinationSnowflakeAuthorizationMethodTypeDestinationSnowflakeAuthorizationMethodKeyPairAuthentication
		return nil
	}

	destinationSnowflakeAuthorizationMethodUsernameAndPassword := new(DestinationSnowflakeAuthorizationMethodUsernameAndPassword)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&destinationSnowflakeAuthorizationMethodUsernameAndPassword); err == nil {
		u.DestinationSnowflakeAuthorizationMethodUsernameAndPassword = destinationSnowflakeAuthorizationMethodUsernameAndPassword
		u.Type = DestinationSnowflakeAuthorizationMethodTypeDestinationSnowflakeAuthorizationMethodUsernameAndPassword
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u DestinationSnowflakeAuthorizationMethod) MarshalJSON() ([]byte, error) {
	if u.DestinationSnowflakeAuthorizationMethodOAuth20 != nil {
		return json.Marshal(u.DestinationSnowflakeAuthorizationMethodOAuth20)
	}

	if u.DestinationSnowflakeAuthorizationMethodKeyPairAuthentication != nil {
		return json.Marshal(u.DestinationSnowflakeAuthorizationMethodKeyPairAuthentication)
	}

	if u.DestinationSnowflakeAuthorizationMethodUsernameAndPassword != nil {
		return json.Marshal(u.DestinationSnowflakeAuthorizationMethodUsernameAndPassword)
	}

	return nil, nil
}

type DestinationSnowflakeSnowflake string

const (
	DestinationSnowflakeSnowflakeSnowflake DestinationSnowflakeSnowflake = "snowflake"
)

func (e DestinationSnowflakeSnowflake) ToPointer() *DestinationSnowflakeSnowflake {
	return &e
}

func (e *DestinationSnowflakeSnowflake) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "snowflake":
		*e = DestinationSnowflakeSnowflake(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationSnowflakeSnowflake: %v", v)
	}
}

type DestinationSnowflakeDataStagingMethodGoogleCloudStorageStagingMethod string

const (
	DestinationSnowflakeDataStagingMethodGoogleCloudStorageStagingMethodGcsStaging DestinationSnowflakeDataStagingMethodGoogleCloudStorageStagingMethod = "GCS Staging"
)

func (e DestinationSnowflakeDataStagingMethodGoogleCloudStorageStagingMethod) ToPointer() *DestinationSnowflakeDataStagingMethodGoogleCloudStorageStagingMethod {
	return &e
}

func (e *DestinationSnowflakeDataStagingMethodGoogleCloudStorageStagingMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "GCS Staging":
		*e = DestinationSnowflakeDataStagingMethodGoogleCloudStorageStagingMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationSnowflakeDataStagingMethodGoogleCloudStorageStagingMethod: %v", v)
	}
}

// DestinationSnowflakeDataStagingMethodGoogleCloudStorageStaging - Recommended for large production workloads for better speed and scalability.
type DestinationSnowflakeDataStagingMethodGoogleCloudStorageStaging struct {
	// Enter the <a href="https://cloud.google.com/storage/docs/creating-buckets">Cloud Storage bucket name</a>
	BucketName string `json:"bucket_name"`
	// Enter your <a href="https://cloud.google.com/iam/docs/creating-managing-service-account-keys#creating_service_account_keys">Google Cloud service account key</a> in the JSON format with read/write access to your Cloud Storage staging bucket
	CredentialsJSON string                                                               `json:"credentials_json"`
	Method          DestinationSnowflakeDataStagingMethodGoogleCloudStorageStagingMethod `json:"method"`
	// Enter the <a href="https://cloud.google.com/resource-manager/docs/creating-managing-projects#identifying_projects">Google Cloud project ID</a>
	ProjectID string `json:"project_id"`
}

type DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionAESCBCEnvelopeEncryptionEncryptionType string

const (
	DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionAESCBCEnvelopeEncryptionEncryptionTypeAesCbcEnvelope DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionAESCBCEnvelopeEncryptionEncryptionType = "aes_cbc_envelope"
)

func (e DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionAESCBCEnvelopeEncryptionEncryptionType) ToPointer() *DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionAESCBCEnvelopeEncryptionEncryptionType {
	return &e
}

func (e *DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionAESCBCEnvelopeEncryptionEncryptionType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "aes_cbc_envelope":
		*e = DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionAESCBCEnvelopeEncryptionEncryptionType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionAESCBCEnvelopeEncryptionEncryptionType: %v", v)
	}
}

// DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionAESCBCEnvelopeEncryption - Staging data will be encrypted using AES-CBC envelope encryption.
type DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionAESCBCEnvelopeEncryption struct {
	EncryptionType DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionAESCBCEnvelopeEncryptionEncryptionType `json:"encryption_type"`
	// The key, base64-encoded. Must be either 128, 192, or 256 bits. Leave blank to have Airbyte generate an ephemeral key for each sync.
	KeyEncryptingKey *string `json:"key_encrypting_key,omitempty"`
}

type DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionNoEncryptionEncryptionType string

const (
	DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionNoEncryptionEncryptionTypeNone DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionNoEncryptionEncryptionType = "none"
)

func (e DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionNoEncryptionEncryptionType) ToPointer() *DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionNoEncryptionEncryptionType {
	return &e
}

func (e *DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionNoEncryptionEncryptionType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		*e = DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionNoEncryptionEncryptionType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionNoEncryptionEncryptionType: %v", v)
	}
}

// DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionNoEncryption - Staging data will be stored in plaintext.
type DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionNoEncryption struct {
	EncryptionType DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionNoEncryptionEncryptionType `json:"encryption_type"`
}

type DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionType string

const (
	DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionTypeDestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionNoEncryption             DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionType = "destination-snowflake_Data Staging Method_AWS S3 Staging_Encryption_No encryption"
	DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionTypeDestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionAESCBCEnvelopeEncryption DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionType = "destination-snowflake_Data Staging Method_AWS S3 Staging_Encryption_AES-CBC envelope encryption"
)

type DestinationSnowflakeDataStagingMethodAWSS3StagingEncryption struct {
	DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionNoEncryption             *DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionNoEncryption
	DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionAESCBCEnvelopeEncryption *DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionAESCBCEnvelopeEncryption

	Type DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionType
}

func CreateDestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionDestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionNoEncryption(destinationSnowflakeDataStagingMethodAWSS3StagingEncryptionNoEncryption DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionNoEncryption) DestinationSnowflakeDataStagingMethodAWSS3StagingEncryption {
	typ := DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionTypeDestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionNoEncryption

	return DestinationSnowflakeDataStagingMethodAWSS3StagingEncryption{
		DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionNoEncryption: &destinationSnowflakeDataStagingMethodAWSS3StagingEncryptionNoEncryption,
		Type: typ,
	}
}

func CreateDestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionDestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionAESCBCEnvelopeEncryption(destinationSnowflakeDataStagingMethodAWSS3StagingEncryptionAESCBCEnvelopeEncryption DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionAESCBCEnvelopeEncryption) DestinationSnowflakeDataStagingMethodAWSS3StagingEncryption {
	typ := DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionTypeDestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionAESCBCEnvelopeEncryption

	return DestinationSnowflakeDataStagingMethodAWSS3StagingEncryption{
		DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionAESCBCEnvelopeEncryption: &destinationSnowflakeDataStagingMethodAWSS3StagingEncryptionAESCBCEnvelopeEncryption,
		Type: typ,
	}
}

func (u *DestinationSnowflakeDataStagingMethodAWSS3StagingEncryption) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	destinationSnowflakeDataStagingMethodAWSS3StagingEncryptionNoEncryption := new(DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionNoEncryption)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&destinationSnowflakeDataStagingMethodAWSS3StagingEncryptionNoEncryption); err == nil {
		u.DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionNoEncryption = destinationSnowflakeDataStagingMethodAWSS3StagingEncryptionNoEncryption
		u.Type = DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionTypeDestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionNoEncryption
		return nil
	}

	destinationSnowflakeDataStagingMethodAWSS3StagingEncryptionAESCBCEnvelopeEncryption := new(DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionAESCBCEnvelopeEncryption)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&destinationSnowflakeDataStagingMethodAWSS3StagingEncryptionAESCBCEnvelopeEncryption); err == nil {
		u.DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionAESCBCEnvelopeEncryption = destinationSnowflakeDataStagingMethodAWSS3StagingEncryptionAESCBCEnvelopeEncryption
		u.Type = DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionTypeDestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionAESCBCEnvelopeEncryption
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u DestinationSnowflakeDataStagingMethodAWSS3StagingEncryption) MarshalJSON() ([]byte, error) {
	if u.DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionNoEncryption != nil {
		return json.Marshal(u.DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionNoEncryption)
	}

	if u.DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionAESCBCEnvelopeEncryption != nil {
		return json.Marshal(u.DestinationSnowflakeDataStagingMethodAWSS3StagingEncryptionAESCBCEnvelopeEncryption)
	}

	return nil, nil
}

type DestinationSnowflakeDataStagingMethodAWSS3StagingMethod string

const (
	DestinationSnowflakeDataStagingMethodAWSS3StagingMethodS3Staging DestinationSnowflakeDataStagingMethodAWSS3StagingMethod = "S3 Staging"
)

func (e DestinationSnowflakeDataStagingMethodAWSS3StagingMethod) ToPointer() *DestinationSnowflakeDataStagingMethodAWSS3StagingMethod {
	return &e
}

func (e *DestinationSnowflakeDataStagingMethodAWSS3StagingMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "S3 Staging":
		*e = DestinationSnowflakeDataStagingMethodAWSS3StagingMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationSnowflakeDataStagingMethodAWSS3StagingMethod: %v", v)
	}
}

// DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegion - Enter the region where your S3 bucket resides
type DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegion string

const (
	DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegionUnknown      DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegion = ""
	DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegionUsEast1      DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegion = "us-east-1"
	DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegionUsEast2      DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegion = "us-east-2"
	DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegionUsWest1      DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegion = "us-west-1"
	DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegionUsWest2      DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegion = "us-west-2"
	DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegionAfSouth1     DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegion = "af-south-1"
	DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegionApEast1      DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegion = "ap-east-1"
	DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegionApSouth1     DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegion = "ap-south-1"
	DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegionApNortheast1 DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegion = "ap-northeast-1"
	DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegionApNortheast2 DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegion = "ap-northeast-2"
	DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegionApNortheast3 DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegion = "ap-northeast-3"
	DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegionApSoutheast1 DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegion = "ap-southeast-1"
	DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegionApSoutheast2 DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegion = "ap-southeast-2"
	DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegionCaCentral1   DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegion = "ca-central-1"
	DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegionCnNorth1     DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegion = "cn-north-1"
	DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegionCnNorthwest1 DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegion = "cn-northwest-1"
	DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegionEuCentral1   DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegion = "eu-central-1"
	DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegionEuWest1      DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegion = "eu-west-1"
	DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegionEuWest2      DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegion = "eu-west-2"
	DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegionEuWest3      DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegion = "eu-west-3"
	DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegionEuSouth1     DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegion = "eu-south-1"
	DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegionEuNorth1     DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegion = "eu-north-1"
	DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegionSaEast1      DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegion = "sa-east-1"
	DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegionMeSouth1     DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegion = "me-south-1"
)

func (e DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegion) ToPointer() *DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegion {
	return &e
}

func (e *DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "":
		fallthrough
	case "us-east-1":
		fallthrough
	case "us-east-2":
		fallthrough
	case "us-west-1":
		fallthrough
	case "us-west-2":
		fallthrough
	case "af-south-1":
		fallthrough
	case "ap-east-1":
		fallthrough
	case "ap-south-1":
		fallthrough
	case "ap-northeast-1":
		fallthrough
	case "ap-northeast-2":
		fallthrough
	case "ap-northeast-3":
		fallthrough
	case "ap-southeast-1":
		fallthrough
	case "ap-southeast-2":
		fallthrough
	case "ca-central-1":
		fallthrough
	case "cn-north-1":
		fallthrough
	case "cn-northwest-1":
		fallthrough
	case "eu-central-1":
		fallthrough
	case "eu-west-1":
		fallthrough
	case "eu-west-2":
		fallthrough
	case "eu-west-3":
		fallthrough
	case "eu-south-1":
		fallthrough
	case "eu-north-1":
		fallthrough
	case "sa-east-1":
		fallthrough
	case "me-south-1":
		*e = DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegion: %v", v)
	}
}

// DestinationSnowflakeDataStagingMethodAWSS3Staging - Recommended for large production workloads for better speed and scalability.
type DestinationSnowflakeDataStagingMethodAWSS3Staging struct {
	// Enter your <a href="https://docs.aws.amazon.com/powershell/latest/userguide/pstools-appendix-sign-up.html">AWS access key ID</a>. Airbyte requires Read and Write permissions on your S3 bucket
	AccessKeyID string `json:"access_key_id"`
	// Choose a data encryption method for the staging data
	Encryption *DestinationSnowflakeDataStagingMethodAWSS3StagingEncryption `json:"encryption,omitempty"`
	// The pattern allows you to set the file-name format for the S3 staging file(s)
	FileNamePattern *string                                                 `json:"file_name_pattern,omitempty"`
	Method          DestinationSnowflakeDataStagingMethodAWSS3StagingMethod `json:"method"`
	// Toggle to delete staging files from the S3 bucket after a successful sync
	PurgeStagingData *bool `json:"purge_staging_data,omitempty"`
	// Enter your S3 bucket name
	S3BucketName string `json:"s3_bucket_name"`
	// Enter the region where your S3 bucket resides
	S3BucketRegion *DestinationSnowflakeDataStagingMethodAWSS3StagingS3BucketRegion `json:"s3_bucket_region,omitempty"`
	// Enter your <a href="https://docs.aws.amazon.com/powershell/latest/userguide/pstools-appendix-sign-up.html">AWS secret access key</a>
	SecretAccessKey string `json:"secret_access_key"`
}

type DestinationSnowflakeDataStagingMethodRecommendedInternalStagingMethod string

const (
	DestinationSnowflakeDataStagingMethodRecommendedInternalStagingMethodInternalStaging DestinationSnowflakeDataStagingMethodRecommendedInternalStagingMethod = "Internal Staging"
)

func (e DestinationSnowflakeDataStagingMethodRecommendedInternalStagingMethod) ToPointer() *DestinationSnowflakeDataStagingMethodRecommendedInternalStagingMethod {
	return &e
}

func (e *DestinationSnowflakeDataStagingMethodRecommendedInternalStagingMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Internal Staging":
		*e = DestinationSnowflakeDataStagingMethodRecommendedInternalStagingMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationSnowflakeDataStagingMethodRecommendedInternalStagingMethod: %v", v)
	}
}

// DestinationSnowflakeDataStagingMethodRecommendedInternalStaging - Recommended for large production workloads for better speed and scalability.
type DestinationSnowflakeDataStagingMethodRecommendedInternalStaging struct {
	Method DestinationSnowflakeDataStagingMethodRecommendedInternalStagingMethod `json:"method"`
}

type DestinationSnowflakeDataStagingMethodSelectAnotherOptionMethod string

const (
	DestinationSnowflakeDataStagingMethodSelectAnotherOptionMethodStandard DestinationSnowflakeDataStagingMethodSelectAnotherOptionMethod = "Standard"
)

func (e DestinationSnowflakeDataStagingMethodSelectAnotherOptionMethod) ToPointer() *DestinationSnowflakeDataStagingMethodSelectAnotherOptionMethod {
	return &e
}

func (e *DestinationSnowflakeDataStagingMethodSelectAnotherOptionMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Standard":
		*e = DestinationSnowflakeDataStagingMethodSelectAnotherOptionMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationSnowflakeDataStagingMethodSelectAnotherOptionMethod: %v", v)
	}
}

// DestinationSnowflakeDataStagingMethodSelectAnotherOption - Select another option
type DestinationSnowflakeDataStagingMethodSelectAnotherOption struct {
	Method DestinationSnowflakeDataStagingMethodSelectAnotherOptionMethod `json:"method"`
}

type DestinationSnowflakeDataStagingMethodType string

const (
	DestinationSnowflakeDataStagingMethodTypeDestinationSnowflakeDataStagingMethodSelectAnotherOption        DestinationSnowflakeDataStagingMethodType = "destination-snowflake_Data Staging Method_Select another option"
	DestinationSnowflakeDataStagingMethodTypeDestinationSnowflakeDataStagingMethodRecommendedInternalStaging DestinationSnowflakeDataStagingMethodType = "destination-snowflake_Data Staging Method_[Recommended] Internal Staging"
	DestinationSnowflakeDataStagingMethodTypeDestinationSnowflakeDataStagingMethodAWSS3Staging               DestinationSnowflakeDataStagingMethodType = "destination-snowflake_Data Staging Method_AWS S3 Staging"
	DestinationSnowflakeDataStagingMethodTypeDestinationSnowflakeDataStagingMethodGoogleCloudStorageStaging  DestinationSnowflakeDataStagingMethodType = "destination-snowflake_Data Staging Method_Google Cloud Storage Staging"
)

type DestinationSnowflakeDataStagingMethod struct {
	DestinationSnowflakeDataStagingMethodSelectAnotherOption        *DestinationSnowflakeDataStagingMethodSelectAnotherOption
	DestinationSnowflakeDataStagingMethodRecommendedInternalStaging *DestinationSnowflakeDataStagingMethodRecommendedInternalStaging
	DestinationSnowflakeDataStagingMethodAWSS3Staging               *DestinationSnowflakeDataStagingMethodAWSS3Staging
	DestinationSnowflakeDataStagingMethodGoogleCloudStorageStaging  *DestinationSnowflakeDataStagingMethodGoogleCloudStorageStaging

	Type DestinationSnowflakeDataStagingMethodType
}

func CreateDestinationSnowflakeDataStagingMethodDestinationSnowflakeDataStagingMethodSelectAnotherOption(destinationSnowflakeDataStagingMethodSelectAnotherOption DestinationSnowflakeDataStagingMethodSelectAnotherOption) DestinationSnowflakeDataStagingMethod {
	typ := DestinationSnowflakeDataStagingMethodTypeDestinationSnowflakeDataStagingMethodSelectAnotherOption

	return DestinationSnowflakeDataStagingMethod{
		DestinationSnowflakeDataStagingMethodSelectAnotherOption: &destinationSnowflakeDataStagingMethodSelectAnotherOption,
		Type: typ,
	}
}

func CreateDestinationSnowflakeDataStagingMethodDestinationSnowflakeDataStagingMethodRecommendedInternalStaging(destinationSnowflakeDataStagingMethodRecommendedInternalStaging DestinationSnowflakeDataStagingMethodRecommendedInternalStaging) DestinationSnowflakeDataStagingMethod {
	typ := DestinationSnowflakeDataStagingMethodTypeDestinationSnowflakeDataStagingMethodRecommendedInternalStaging

	return DestinationSnowflakeDataStagingMethod{
		DestinationSnowflakeDataStagingMethodRecommendedInternalStaging: &destinationSnowflakeDataStagingMethodRecommendedInternalStaging,
		Type: typ,
	}
}

func CreateDestinationSnowflakeDataStagingMethodDestinationSnowflakeDataStagingMethodAWSS3Staging(destinationSnowflakeDataStagingMethodAWSS3Staging DestinationSnowflakeDataStagingMethodAWSS3Staging) DestinationSnowflakeDataStagingMethod {
	typ := DestinationSnowflakeDataStagingMethodTypeDestinationSnowflakeDataStagingMethodAWSS3Staging

	return DestinationSnowflakeDataStagingMethod{
		DestinationSnowflakeDataStagingMethodAWSS3Staging: &destinationSnowflakeDataStagingMethodAWSS3Staging,
		Type: typ,
	}
}

func CreateDestinationSnowflakeDataStagingMethodDestinationSnowflakeDataStagingMethodGoogleCloudStorageStaging(destinationSnowflakeDataStagingMethodGoogleCloudStorageStaging DestinationSnowflakeDataStagingMethodGoogleCloudStorageStaging) DestinationSnowflakeDataStagingMethod {
	typ := DestinationSnowflakeDataStagingMethodTypeDestinationSnowflakeDataStagingMethodGoogleCloudStorageStaging

	return DestinationSnowflakeDataStagingMethod{
		DestinationSnowflakeDataStagingMethodGoogleCloudStorageStaging: &destinationSnowflakeDataStagingMethodGoogleCloudStorageStaging,
		Type: typ,
	}
}

func (u *DestinationSnowflakeDataStagingMethod) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	destinationSnowflakeDataStagingMethodSelectAnotherOption := new(DestinationSnowflakeDataStagingMethodSelectAnotherOption)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&destinationSnowflakeDataStagingMethodSelectAnotherOption); err == nil {
		u.DestinationSnowflakeDataStagingMethodSelectAnotherOption = destinationSnowflakeDataStagingMethodSelectAnotherOption
		u.Type = DestinationSnowflakeDataStagingMethodTypeDestinationSnowflakeDataStagingMethodSelectAnotherOption
		return nil
	}

	destinationSnowflakeDataStagingMethodRecommendedInternalStaging := new(DestinationSnowflakeDataStagingMethodRecommendedInternalStaging)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&destinationSnowflakeDataStagingMethodRecommendedInternalStaging); err == nil {
		u.DestinationSnowflakeDataStagingMethodRecommendedInternalStaging = destinationSnowflakeDataStagingMethodRecommendedInternalStaging
		u.Type = DestinationSnowflakeDataStagingMethodTypeDestinationSnowflakeDataStagingMethodRecommendedInternalStaging
		return nil
	}

	destinationSnowflakeDataStagingMethodAWSS3Staging := new(DestinationSnowflakeDataStagingMethodAWSS3Staging)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&destinationSnowflakeDataStagingMethodAWSS3Staging); err == nil {
		u.DestinationSnowflakeDataStagingMethodAWSS3Staging = destinationSnowflakeDataStagingMethodAWSS3Staging
		u.Type = DestinationSnowflakeDataStagingMethodTypeDestinationSnowflakeDataStagingMethodAWSS3Staging
		return nil
	}

	destinationSnowflakeDataStagingMethodGoogleCloudStorageStaging := new(DestinationSnowflakeDataStagingMethodGoogleCloudStorageStaging)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&destinationSnowflakeDataStagingMethodGoogleCloudStorageStaging); err == nil {
		u.DestinationSnowflakeDataStagingMethodGoogleCloudStorageStaging = destinationSnowflakeDataStagingMethodGoogleCloudStorageStaging
		u.Type = DestinationSnowflakeDataStagingMethodTypeDestinationSnowflakeDataStagingMethodGoogleCloudStorageStaging
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u DestinationSnowflakeDataStagingMethod) MarshalJSON() ([]byte, error) {
	if u.DestinationSnowflakeDataStagingMethodSelectAnotherOption != nil {
		return json.Marshal(u.DestinationSnowflakeDataStagingMethodSelectAnotherOption)
	}

	if u.DestinationSnowflakeDataStagingMethodRecommendedInternalStaging != nil {
		return json.Marshal(u.DestinationSnowflakeDataStagingMethodRecommendedInternalStaging)
	}

	if u.DestinationSnowflakeDataStagingMethodAWSS3Staging != nil {
		return json.Marshal(u.DestinationSnowflakeDataStagingMethodAWSS3Staging)
	}

	if u.DestinationSnowflakeDataStagingMethodGoogleCloudStorageStaging != nil {
		return json.Marshal(u.DestinationSnowflakeDataStagingMethodGoogleCloudStorageStaging)
	}

	return nil, nil
}

type DestinationSnowflake struct {
	Credentials *DestinationSnowflakeAuthorizationMethod `json:"credentials,omitempty"`
	// Enter the name of the <a href="https://docs.snowflake.com/en/sql-reference/ddl-database.html#database-schema-share-ddl">database</a> you want to sync data into
	Database        string                        `json:"database"`
	DestinationType DestinationSnowflakeSnowflake `json:"destinationType"`
	// Number of file buffers allocated for writing data. Increasing this number is beneficial for connections using Change Data Capture (CDC) and up to the number of streams within a connection. Increasing the number of file buffers past the maximum number of streams has deteriorating effects
	FileBufferCount *int64 `json:"file_buffer_count,omitempty"`
	// Enter your Snowflake account's <a href="https://docs.snowflake.com/en/user-guide/admin-account-identifier.html#using-an-account-locator-as-an-identifier">locator</a> (in the format <account_locator>.<region>.<cloud>.snowflakecomputing.com)
	Host string `json:"host"`
	// Enter the additional properties to pass to the JDBC URL string when connecting to the database (formatted as key=value pairs separated by the symbol &). Example: key1=value1&key2=value2&key3=value3
	JdbcURLParams *string `json:"jdbc_url_params,omitempty"`
	// Select a data staging method
	LoadingMethod *DestinationSnowflakeDataStagingMethod `json:"loading_method,omitempty"`
	// Enter the <a href="https://docs.snowflake.com/en/user-guide/security-access-control-overview.html#roles">role</a> that you want to use to access Snowflake
	Role string `json:"role"`
	// Enter the name of the default <a href="https://docs.snowflake.com/en/sql-reference/ddl-database.html#database-schema-share-ddl">schema</a>
	Schema string `json:"schema"`
	// Enter the name of the user you want to use to access the database
	Username string `json:"username"`
	// Enter the name of the <a href="https://docs.snowflake.com/en/user-guide/warehouses-overview.html#overview-of-warehouses">warehouse</a> that you want to sync data into
	Warehouse string `json:"warehouse"`
}
