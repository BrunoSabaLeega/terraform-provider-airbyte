// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

type DestinationOracleOracleEnum string

const (
	DestinationOracleOracleEnumOracle DestinationOracleOracleEnum = "oracle"
)

func (e DestinationOracleOracleEnum) ToPointer() *DestinationOracleOracleEnum {
	return &e
}

func (e *DestinationOracleOracleEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "oracle":
		*e = DestinationOracleOracleEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationOracleOracleEnum: %v", v)
	}
}

// DestinationOracleSSHTunnelMethodPasswordAuthenticationTunnelMethodEnum - Connect through a jump server tunnel host using username and password authentication
type DestinationOracleSSHTunnelMethodPasswordAuthenticationTunnelMethodEnum string

const (
	DestinationOracleSSHTunnelMethodPasswordAuthenticationTunnelMethodEnumSSHPasswordAuth DestinationOracleSSHTunnelMethodPasswordAuthenticationTunnelMethodEnum = "SSH_PASSWORD_AUTH"
)

func (e DestinationOracleSSHTunnelMethodPasswordAuthenticationTunnelMethodEnum) ToPointer() *DestinationOracleSSHTunnelMethodPasswordAuthenticationTunnelMethodEnum {
	return &e
}

func (e *DestinationOracleSSHTunnelMethodPasswordAuthenticationTunnelMethodEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SSH_PASSWORD_AUTH":
		*e = DestinationOracleSSHTunnelMethodPasswordAuthenticationTunnelMethodEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationOracleSSHTunnelMethodPasswordAuthenticationTunnelMethodEnum: %v", v)
	}
}

// DestinationOracleSSHTunnelMethodPasswordAuthentication - Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.
type DestinationOracleSSHTunnelMethodPasswordAuthentication struct {
	// Hostname of the jump server host that allows inbound ssh tunnel.
	TunnelHost string `json:"tunnel_host"`
	// Connect through a jump server tunnel host using username and password authentication
	TunnelMethod DestinationOracleSSHTunnelMethodPasswordAuthenticationTunnelMethodEnum `json:"tunnel_method"`
	// Port on the proxy/jump server that accepts inbound ssh connections.
	TunnelPort int64 `json:"tunnel_port"`
	// OS-level username for logging into the jump server host
	TunnelUser string `json:"tunnel_user"`
	// OS-level password for logging into the jump server host
	TunnelUserPassword string `json:"tunnel_user_password"`
}

// DestinationOracleSSHTunnelMethodSSHKeyAuthenticationTunnelMethodEnum - Connect through a jump server tunnel host using username and ssh key
type DestinationOracleSSHTunnelMethodSSHKeyAuthenticationTunnelMethodEnum string

const (
	DestinationOracleSSHTunnelMethodSSHKeyAuthenticationTunnelMethodEnumSSHKeyAuth DestinationOracleSSHTunnelMethodSSHKeyAuthenticationTunnelMethodEnum = "SSH_KEY_AUTH"
)

func (e DestinationOracleSSHTunnelMethodSSHKeyAuthenticationTunnelMethodEnum) ToPointer() *DestinationOracleSSHTunnelMethodSSHKeyAuthenticationTunnelMethodEnum {
	return &e
}

func (e *DestinationOracleSSHTunnelMethodSSHKeyAuthenticationTunnelMethodEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SSH_KEY_AUTH":
		*e = DestinationOracleSSHTunnelMethodSSHKeyAuthenticationTunnelMethodEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationOracleSSHTunnelMethodSSHKeyAuthenticationTunnelMethodEnum: %v", v)
	}
}

// DestinationOracleSSHTunnelMethodSSHKeyAuthentication - Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.
type DestinationOracleSSHTunnelMethodSSHKeyAuthentication struct {
	// OS-level user account ssh key credentials in RSA PEM format ( created with ssh-keygen -t rsa -m PEM -f myuser_rsa )
	SSHKey string `json:"ssh_key"`
	// Hostname of the jump server host that allows inbound ssh tunnel.
	TunnelHost string `json:"tunnel_host"`
	// Connect through a jump server tunnel host using username and ssh key
	TunnelMethod DestinationOracleSSHTunnelMethodSSHKeyAuthenticationTunnelMethodEnum `json:"tunnel_method"`
	// Port on the proxy/jump server that accepts inbound ssh connections.
	TunnelPort int64 `json:"tunnel_port"`
	// OS-level username for logging into the jump server host.
	TunnelUser string `json:"tunnel_user"`
}

// DestinationOracleSSHTunnelMethodNoTunnelTunnelMethodEnum - No ssh tunnel needed to connect to database
type DestinationOracleSSHTunnelMethodNoTunnelTunnelMethodEnum string

const (
	DestinationOracleSSHTunnelMethodNoTunnelTunnelMethodEnumNoTunnel DestinationOracleSSHTunnelMethodNoTunnelTunnelMethodEnum = "NO_TUNNEL"
)

func (e DestinationOracleSSHTunnelMethodNoTunnelTunnelMethodEnum) ToPointer() *DestinationOracleSSHTunnelMethodNoTunnelTunnelMethodEnum {
	return &e
}

func (e *DestinationOracleSSHTunnelMethodNoTunnelTunnelMethodEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NO_TUNNEL":
		*e = DestinationOracleSSHTunnelMethodNoTunnelTunnelMethodEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationOracleSSHTunnelMethodNoTunnelTunnelMethodEnum: %v", v)
	}
}

// DestinationOracleSSHTunnelMethodNoTunnel - Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.
type DestinationOracleSSHTunnelMethodNoTunnel struct {
	// No ssh tunnel needed to connect to database
	TunnelMethod DestinationOracleSSHTunnelMethodNoTunnelTunnelMethodEnum `json:"tunnel_method"`
}

type DestinationOracleSSHTunnelMethodType string

const (
	DestinationOracleSSHTunnelMethodTypeDestinationOracleSSHTunnelMethodNoTunnel               DestinationOracleSSHTunnelMethodType = "destination-oracle_SSH Tunnel Method_No Tunnel"
	DestinationOracleSSHTunnelMethodTypeDestinationOracleSSHTunnelMethodSSHKeyAuthentication   DestinationOracleSSHTunnelMethodType = "destination-oracle_SSH Tunnel Method_SSH Key Authentication"
	DestinationOracleSSHTunnelMethodTypeDestinationOracleSSHTunnelMethodPasswordAuthentication DestinationOracleSSHTunnelMethodType = "destination-oracle_SSH Tunnel Method_Password Authentication"
)

type DestinationOracleSSHTunnelMethod struct {
	DestinationOracleSSHTunnelMethodNoTunnel               *DestinationOracleSSHTunnelMethodNoTunnel
	DestinationOracleSSHTunnelMethodSSHKeyAuthentication   *DestinationOracleSSHTunnelMethodSSHKeyAuthentication
	DestinationOracleSSHTunnelMethodPasswordAuthentication *DestinationOracleSSHTunnelMethodPasswordAuthentication

	Type DestinationOracleSSHTunnelMethodType
}

func CreateDestinationOracleSSHTunnelMethodDestinationOracleSSHTunnelMethodNoTunnel(destinationOracleSSHTunnelMethodNoTunnel DestinationOracleSSHTunnelMethodNoTunnel) DestinationOracleSSHTunnelMethod {
	typ := DestinationOracleSSHTunnelMethodTypeDestinationOracleSSHTunnelMethodNoTunnel

	return DestinationOracleSSHTunnelMethod{
		DestinationOracleSSHTunnelMethodNoTunnel: &destinationOracleSSHTunnelMethodNoTunnel,
		Type:                                     typ,
	}
}

func CreateDestinationOracleSSHTunnelMethodDestinationOracleSSHTunnelMethodSSHKeyAuthentication(destinationOracleSSHTunnelMethodSSHKeyAuthentication DestinationOracleSSHTunnelMethodSSHKeyAuthentication) DestinationOracleSSHTunnelMethod {
	typ := DestinationOracleSSHTunnelMethodTypeDestinationOracleSSHTunnelMethodSSHKeyAuthentication

	return DestinationOracleSSHTunnelMethod{
		DestinationOracleSSHTunnelMethodSSHKeyAuthentication: &destinationOracleSSHTunnelMethodSSHKeyAuthentication,
		Type: typ,
	}
}

func CreateDestinationOracleSSHTunnelMethodDestinationOracleSSHTunnelMethodPasswordAuthentication(destinationOracleSSHTunnelMethodPasswordAuthentication DestinationOracleSSHTunnelMethodPasswordAuthentication) DestinationOracleSSHTunnelMethod {
	typ := DestinationOracleSSHTunnelMethodTypeDestinationOracleSSHTunnelMethodPasswordAuthentication

	return DestinationOracleSSHTunnelMethod{
		DestinationOracleSSHTunnelMethodPasswordAuthentication: &destinationOracleSSHTunnelMethodPasswordAuthentication,
		Type: typ,
	}
}

func (u *DestinationOracleSSHTunnelMethod) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	destinationOracleSSHTunnelMethodNoTunnel := new(DestinationOracleSSHTunnelMethodNoTunnel)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&destinationOracleSSHTunnelMethodNoTunnel); err == nil {
		u.DestinationOracleSSHTunnelMethodNoTunnel = destinationOracleSSHTunnelMethodNoTunnel
		u.Type = DestinationOracleSSHTunnelMethodTypeDestinationOracleSSHTunnelMethodNoTunnel
		return nil
	}

	destinationOracleSSHTunnelMethodSSHKeyAuthentication := new(DestinationOracleSSHTunnelMethodSSHKeyAuthentication)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&destinationOracleSSHTunnelMethodSSHKeyAuthentication); err == nil {
		u.DestinationOracleSSHTunnelMethodSSHKeyAuthentication = destinationOracleSSHTunnelMethodSSHKeyAuthentication
		u.Type = DestinationOracleSSHTunnelMethodTypeDestinationOracleSSHTunnelMethodSSHKeyAuthentication
		return nil
	}

	destinationOracleSSHTunnelMethodPasswordAuthentication := new(DestinationOracleSSHTunnelMethodPasswordAuthentication)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&destinationOracleSSHTunnelMethodPasswordAuthentication); err == nil {
		u.DestinationOracleSSHTunnelMethodPasswordAuthentication = destinationOracleSSHTunnelMethodPasswordAuthentication
		u.Type = DestinationOracleSSHTunnelMethodTypeDestinationOracleSSHTunnelMethodPasswordAuthentication
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u DestinationOracleSSHTunnelMethod) MarshalJSON() ([]byte, error) {
	if u.DestinationOracleSSHTunnelMethodNoTunnel != nil {
		return json.Marshal(u.DestinationOracleSSHTunnelMethodNoTunnel)
	}

	if u.DestinationOracleSSHTunnelMethodSSHKeyAuthentication != nil {
		return json.Marshal(u.DestinationOracleSSHTunnelMethodSSHKeyAuthentication)
	}

	if u.DestinationOracleSSHTunnelMethodPasswordAuthentication != nil {
		return json.Marshal(u.DestinationOracleSSHTunnelMethodPasswordAuthentication)
	}

	return nil, nil
}

// DestinationOracle - The values required to configure the destination.
type DestinationOracle struct {
	DestinationType DestinationOracleOracleEnum `json:"destinationType"`
	// The hostname of the database.
	Host string `json:"host"`
	// Additional properties to pass to the JDBC URL string when connecting to the database formatted as 'key=value' pairs separated by the symbol '&'. (example: key1=value1&key2=value2&key3=value3).
	JdbcURLParams *string `json:"jdbc_url_params,omitempty"`
	// The password associated with the username.
	Password *string `json:"password,omitempty"`
	// The port of the database.
	Port int64 `json:"port"`
	// The default schema is used as the target schema for all statements issued from the connection that do not explicitly specify a schema name. The usual value for this field is "airbyte".  In Oracle, schemas and users are the same thing, so the "user" parameter is used as the login credentials and this is used for the default Airbyte message schema.
	Schema *string `json:"schema,omitempty"`
	// The System Identifier uniquely distinguishes the instance from any other instance on the same computer.
	Sid string `json:"sid"`
	// Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.
	TunnelMethod *DestinationOracleSSHTunnelMethod `json:"tunnel_method,omitempty"`
	// The username to access the database. This user must have CREATE USER privileges in the database.
	Username string `json:"username"`
}
