// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

type SourceClickhouseClickhouse string

const (
	SourceClickhouseClickhouseClickhouse SourceClickhouseClickhouse = "clickhouse"
)

func (e SourceClickhouseClickhouse) ToPointer() *SourceClickhouseClickhouse {
	return &e
}

func (e *SourceClickhouseClickhouse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "clickhouse":
		*e = SourceClickhouseClickhouse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceClickhouseClickhouse: %v", v)
	}
}

// SourceClickhouseSSHTunnelMethodPasswordAuthenticationTunnelMethod - Connect through a jump server tunnel host using username and password authentication
type SourceClickhouseSSHTunnelMethodPasswordAuthenticationTunnelMethod string

const (
	SourceClickhouseSSHTunnelMethodPasswordAuthenticationTunnelMethodSSHPasswordAuth SourceClickhouseSSHTunnelMethodPasswordAuthenticationTunnelMethod = "SSH_PASSWORD_AUTH"
)

func (e SourceClickhouseSSHTunnelMethodPasswordAuthenticationTunnelMethod) ToPointer() *SourceClickhouseSSHTunnelMethodPasswordAuthenticationTunnelMethod {
	return &e
}

func (e *SourceClickhouseSSHTunnelMethodPasswordAuthenticationTunnelMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SSH_PASSWORD_AUTH":
		*e = SourceClickhouseSSHTunnelMethodPasswordAuthenticationTunnelMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceClickhouseSSHTunnelMethodPasswordAuthenticationTunnelMethod: %v", v)
	}
}

// SourceClickhouseSSHTunnelMethodPasswordAuthentication - Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.
type SourceClickhouseSSHTunnelMethodPasswordAuthentication struct {
	// Hostname of the jump server host that allows inbound ssh tunnel.
	TunnelHost string `json:"tunnel_host"`
	// Connect through a jump server tunnel host using username and password authentication
	TunnelMethod SourceClickhouseSSHTunnelMethodPasswordAuthenticationTunnelMethod `json:"tunnel_method"`
	// Port on the proxy/jump server that accepts inbound ssh connections.
	TunnelPort int64 `json:"tunnel_port"`
	// OS-level username for logging into the jump server host
	TunnelUser string `json:"tunnel_user"`
	// OS-level password for logging into the jump server host
	TunnelUserPassword string `json:"tunnel_user_password"`
}

// SourceClickhouseSSHTunnelMethodSSHKeyAuthenticationTunnelMethod - Connect through a jump server tunnel host using username and ssh key
type SourceClickhouseSSHTunnelMethodSSHKeyAuthenticationTunnelMethod string

const (
	SourceClickhouseSSHTunnelMethodSSHKeyAuthenticationTunnelMethodSSHKeyAuth SourceClickhouseSSHTunnelMethodSSHKeyAuthenticationTunnelMethod = "SSH_KEY_AUTH"
)

func (e SourceClickhouseSSHTunnelMethodSSHKeyAuthenticationTunnelMethod) ToPointer() *SourceClickhouseSSHTunnelMethodSSHKeyAuthenticationTunnelMethod {
	return &e
}

func (e *SourceClickhouseSSHTunnelMethodSSHKeyAuthenticationTunnelMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SSH_KEY_AUTH":
		*e = SourceClickhouseSSHTunnelMethodSSHKeyAuthenticationTunnelMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceClickhouseSSHTunnelMethodSSHKeyAuthenticationTunnelMethod: %v", v)
	}
}

// SourceClickhouseSSHTunnelMethodSSHKeyAuthentication - Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.
type SourceClickhouseSSHTunnelMethodSSHKeyAuthentication struct {
	// OS-level user account ssh key credentials in RSA PEM format ( created with ssh-keygen -t rsa -m PEM -f myuser_rsa )
	SSHKey string `json:"ssh_key"`
	// Hostname of the jump server host that allows inbound ssh tunnel.
	TunnelHost string `json:"tunnel_host"`
	// Connect through a jump server tunnel host using username and ssh key
	TunnelMethod SourceClickhouseSSHTunnelMethodSSHKeyAuthenticationTunnelMethod `json:"tunnel_method"`
	// Port on the proxy/jump server that accepts inbound ssh connections.
	TunnelPort int64 `json:"tunnel_port"`
	// OS-level username for logging into the jump server host.
	TunnelUser string `json:"tunnel_user"`
}

// SourceClickhouseSSHTunnelMethodNoTunnelTunnelMethod - No ssh tunnel needed to connect to database
type SourceClickhouseSSHTunnelMethodNoTunnelTunnelMethod string

const (
	SourceClickhouseSSHTunnelMethodNoTunnelTunnelMethodNoTunnel SourceClickhouseSSHTunnelMethodNoTunnelTunnelMethod = "NO_TUNNEL"
)

func (e SourceClickhouseSSHTunnelMethodNoTunnelTunnelMethod) ToPointer() *SourceClickhouseSSHTunnelMethodNoTunnelTunnelMethod {
	return &e
}

func (e *SourceClickhouseSSHTunnelMethodNoTunnelTunnelMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NO_TUNNEL":
		*e = SourceClickhouseSSHTunnelMethodNoTunnelTunnelMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceClickhouseSSHTunnelMethodNoTunnelTunnelMethod: %v", v)
	}
}

// SourceClickhouseSSHTunnelMethodNoTunnel - Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.
type SourceClickhouseSSHTunnelMethodNoTunnel struct {
	// No ssh tunnel needed to connect to database
	TunnelMethod SourceClickhouseSSHTunnelMethodNoTunnelTunnelMethod `json:"tunnel_method"`
}

type SourceClickhouseSSHTunnelMethodType string

const (
	SourceClickhouseSSHTunnelMethodTypeSourceClickhouseSSHTunnelMethodNoTunnel               SourceClickhouseSSHTunnelMethodType = "source-clickhouse_SSH Tunnel Method_No Tunnel"
	SourceClickhouseSSHTunnelMethodTypeSourceClickhouseSSHTunnelMethodSSHKeyAuthentication   SourceClickhouseSSHTunnelMethodType = "source-clickhouse_SSH Tunnel Method_SSH Key Authentication"
	SourceClickhouseSSHTunnelMethodTypeSourceClickhouseSSHTunnelMethodPasswordAuthentication SourceClickhouseSSHTunnelMethodType = "source-clickhouse_SSH Tunnel Method_Password Authentication"
)

type SourceClickhouseSSHTunnelMethod struct {
	SourceClickhouseSSHTunnelMethodNoTunnel               *SourceClickhouseSSHTunnelMethodNoTunnel
	SourceClickhouseSSHTunnelMethodSSHKeyAuthentication   *SourceClickhouseSSHTunnelMethodSSHKeyAuthentication
	SourceClickhouseSSHTunnelMethodPasswordAuthentication *SourceClickhouseSSHTunnelMethodPasswordAuthentication

	Type SourceClickhouseSSHTunnelMethodType
}

func CreateSourceClickhouseSSHTunnelMethodSourceClickhouseSSHTunnelMethodNoTunnel(sourceClickhouseSSHTunnelMethodNoTunnel SourceClickhouseSSHTunnelMethodNoTunnel) SourceClickhouseSSHTunnelMethod {
	typ := SourceClickhouseSSHTunnelMethodTypeSourceClickhouseSSHTunnelMethodNoTunnel

	return SourceClickhouseSSHTunnelMethod{
		SourceClickhouseSSHTunnelMethodNoTunnel: &sourceClickhouseSSHTunnelMethodNoTunnel,
		Type:                                    typ,
	}
}

func CreateSourceClickhouseSSHTunnelMethodSourceClickhouseSSHTunnelMethodSSHKeyAuthentication(sourceClickhouseSSHTunnelMethodSSHKeyAuthentication SourceClickhouseSSHTunnelMethodSSHKeyAuthentication) SourceClickhouseSSHTunnelMethod {
	typ := SourceClickhouseSSHTunnelMethodTypeSourceClickhouseSSHTunnelMethodSSHKeyAuthentication

	return SourceClickhouseSSHTunnelMethod{
		SourceClickhouseSSHTunnelMethodSSHKeyAuthentication: &sourceClickhouseSSHTunnelMethodSSHKeyAuthentication,
		Type: typ,
	}
}

func CreateSourceClickhouseSSHTunnelMethodSourceClickhouseSSHTunnelMethodPasswordAuthentication(sourceClickhouseSSHTunnelMethodPasswordAuthentication SourceClickhouseSSHTunnelMethodPasswordAuthentication) SourceClickhouseSSHTunnelMethod {
	typ := SourceClickhouseSSHTunnelMethodTypeSourceClickhouseSSHTunnelMethodPasswordAuthentication

	return SourceClickhouseSSHTunnelMethod{
		SourceClickhouseSSHTunnelMethodPasswordAuthentication: &sourceClickhouseSSHTunnelMethodPasswordAuthentication,
		Type: typ,
	}
}

func (u *SourceClickhouseSSHTunnelMethod) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	sourceClickhouseSSHTunnelMethodNoTunnel := new(SourceClickhouseSSHTunnelMethodNoTunnel)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceClickhouseSSHTunnelMethodNoTunnel); err == nil {
		u.SourceClickhouseSSHTunnelMethodNoTunnel = sourceClickhouseSSHTunnelMethodNoTunnel
		u.Type = SourceClickhouseSSHTunnelMethodTypeSourceClickhouseSSHTunnelMethodNoTunnel
		return nil
	}

	sourceClickhouseSSHTunnelMethodSSHKeyAuthentication := new(SourceClickhouseSSHTunnelMethodSSHKeyAuthentication)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceClickhouseSSHTunnelMethodSSHKeyAuthentication); err == nil {
		u.SourceClickhouseSSHTunnelMethodSSHKeyAuthentication = sourceClickhouseSSHTunnelMethodSSHKeyAuthentication
		u.Type = SourceClickhouseSSHTunnelMethodTypeSourceClickhouseSSHTunnelMethodSSHKeyAuthentication
		return nil
	}

	sourceClickhouseSSHTunnelMethodPasswordAuthentication := new(SourceClickhouseSSHTunnelMethodPasswordAuthentication)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceClickhouseSSHTunnelMethodPasswordAuthentication); err == nil {
		u.SourceClickhouseSSHTunnelMethodPasswordAuthentication = sourceClickhouseSSHTunnelMethodPasswordAuthentication
		u.Type = SourceClickhouseSSHTunnelMethodTypeSourceClickhouseSSHTunnelMethodPasswordAuthentication
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceClickhouseSSHTunnelMethod) MarshalJSON() ([]byte, error) {
	if u.SourceClickhouseSSHTunnelMethodNoTunnel != nil {
		return json.Marshal(u.SourceClickhouseSSHTunnelMethodNoTunnel)
	}

	if u.SourceClickhouseSSHTunnelMethodSSHKeyAuthentication != nil {
		return json.Marshal(u.SourceClickhouseSSHTunnelMethodSSHKeyAuthentication)
	}

	if u.SourceClickhouseSSHTunnelMethodPasswordAuthentication != nil {
		return json.Marshal(u.SourceClickhouseSSHTunnelMethodPasswordAuthentication)
	}

	return nil, nil
}

type SourceClickhouse struct {
	// The name of the database.
	Database string `json:"database"`
	// The host endpoint of the Clickhouse cluster.
	Host string `json:"host"`
	// The password associated with this username.
	Password *string `json:"password,omitempty"`
	// The port of the database.
	Port       int64                      `json:"port"`
	SourceType SourceClickhouseClickhouse `json:"sourceType"`
	// Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.
	TunnelMethod *SourceClickhouseSSHTunnelMethod `json:"tunnel_method,omitempty"`
	// The username which is used to access the database.
	Username string `json:"username"`
}
