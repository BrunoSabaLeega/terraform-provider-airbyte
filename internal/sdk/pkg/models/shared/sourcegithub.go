// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"time"
)

type SourceGithubAuthenticationPersonalAccessTokenOptionTitleEnum string

const (
	SourceGithubAuthenticationPersonalAccessTokenOptionTitleEnumPatCredentials SourceGithubAuthenticationPersonalAccessTokenOptionTitleEnum = "PAT Credentials"
)

func (e *SourceGithubAuthenticationPersonalAccessTokenOptionTitleEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "PAT Credentials":
		*e = SourceGithubAuthenticationPersonalAccessTokenOptionTitleEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceGithubAuthenticationPersonalAccessTokenOptionTitleEnum: %s", s)
	}
}

// SourceGithubAuthenticationPersonalAccessToken - Choose how to authenticate to GitHub
type SourceGithubAuthenticationPersonalAccessToken struct {
	OptionTitle *SourceGithubAuthenticationPersonalAccessTokenOptionTitleEnum `json:"option_title,omitempty"`
	// Log into GitHub and then generate a <a href="https://github.com/settings/tokens">personal access token</a>. To load balance your API quota consumption across multiple API tokens, input multiple tokens separated with ","
	PersonalAccessToken string `json:"personal_access_token"`
}

type SourceGithubAuthenticationOAuthOptionTitleEnum string

const (
	SourceGithubAuthenticationOAuthOptionTitleEnumOAuthCredentials SourceGithubAuthenticationOAuthOptionTitleEnum = "OAuth Credentials"
)

func (e *SourceGithubAuthenticationOAuthOptionTitleEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "OAuth Credentials":
		*e = SourceGithubAuthenticationOAuthOptionTitleEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceGithubAuthenticationOAuthOptionTitleEnum: %s", s)
	}
}

// SourceGithubAuthenticationOAuth - Choose how to authenticate to GitHub
type SourceGithubAuthenticationOAuth struct {
	// OAuth access token
	AccessToken string                                          `json:"access_token"`
	OptionTitle *SourceGithubAuthenticationOAuthOptionTitleEnum `json:"option_title,omitempty"`
}

type SourceGithubAuthenticationType string

const (
	SourceGithubAuthenticationTypeSourceGithubAuthenticationOAuth               SourceGithubAuthenticationType = "source-github_Authentication_OAuth"
	SourceGithubAuthenticationTypeSourceGithubAuthenticationPersonalAccessToken SourceGithubAuthenticationType = "source-github_Authentication_Personal Access Token"
)

type SourceGithubAuthentication struct {
	SourceGithubAuthenticationOAuth               *SourceGithubAuthenticationOAuth
	SourceGithubAuthenticationPersonalAccessToken *SourceGithubAuthenticationPersonalAccessToken

	Type SourceGithubAuthenticationType
}

func CreateSourceGithubAuthenticationSourceGithubAuthenticationOAuth(sourceGithubAuthenticationOAuth SourceGithubAuthenticationOAuth) SourceGithubAuthentication {
	typ := SourceGithubAuthenticationTypeSourceGithubAuthenticationOAuth

	return SourceGithubAuthentication{
		SourceGithubAuthenticationOAuth: &sourceGithubAuthenticationOAuth,
		Type:                            typ,
	}
}

func CreateSourceGithubAuthenticationSourceGithubAuthenticationPersonalAccessToken(sourceGithubAuthenticationPersonalAccessToken SourceGithubAuthenticationPersonalAccessToken) SourceGithubAuthentication {
	typ := SourceGithubAuthenticationTypeSourceGithubAuthenticationPersonalAccessToken

	return SourceGithubAuthentication{
		SourceGithubAuthenticationPersonalAccessToken: &sourceGithubAuthenticationPersonalAccessToken,
		Type: typ,
	}
}

func (u *SourceGithubAuthentication) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	sourceGithubAuthenticationOAuth := new(SourceGithubAuthenticationOAuth)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceGithubAuthenticationOAuth); err == nil {
		u.SourceGithubAuthenticationOAuth = sourceGithubAuthenticationOAuth
		u.Type = SourceGithubAuthenticationTypeSourceGithubAuthenticationOAuth
		return nil
	}

	sourceGithubAuthenticationPersonalAccessToken := new(SourceGithubAuthenticationPersonalAccessToken)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceGithubAuthenticationPersonalAccessToken); err == nil {
		u.SourceGithubAuthenticationPersonalAccessToken = sourceGithubAuthenticationPersonalAccessToken
		u.Type = SourceGithubAuthenticationTypeSourceGithubAuthenticationPersonalAccessToken
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceGithubAuthentication) MarshalJSON() ([]byte, error) {
	if u.SourceGithubAuthenticationOAuth != nil {
		return json.Marshal(u.SourceGithubAuthenticationOAuth)
	}

	if u.SourceGithubAuthenticationPersonalAccessToken != nil {
		return json.Marshal(u.SourceGithubAuthenticationPersonalAccessToken)
	}

	return nil, nil
}

type SourceGithubGithubEnum string

const (
	SourceGithubGithubEnumGithub SourceGithubGithubEnum = "github"
)

func (e *SourceGithubGithubEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "github":
		*e = SourceGithubGithubEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceGithubGithubEnum: %s", s)
	}
}

// SourceGithub - The values required to configure the source.
type SourceGithub struct {
	// Space-delimited list of GitHub repository branches to pull commits for, e.g. `airbytehq/airbyte/master`. If no branches are specified for a repository, the default branch will be pulled.
	Branch *string `json:"branch,omitempty"`
	// Choose how to authenticate to GitHub
	Credentials *SourceGithubAuthentication `json:"credentials,omitempty"`
	// The Github connector contains several streams with a large amount of data. The page size of such streams depends on the size of your repository. We recommended that you specify values between 10 and 30.
	PageSizeForLargeStreams *int64 `json:"page_size_for_large_streams,omitempty"`
	// Space-delimited list of GitHub organizations/repositories, e.g. `airbytehq/airbyte` for single repository, `airbytehq/*` for get all repositories from organization and `airbytehq/airbyte airbytehq/another-repo` for multiple repositories.
	Repository string                 `json:"repository"`
	SourceType SourceGithubGithubEnum `json:"sourceType"`
	// The date from which you'd like to replicate data from GitHub in the format YYYY-MM-DDT00:00:00Z. For the streams which support this configuration, only data generated on or after the start date will be replicated. This field doesn't apply to all streams, see the <a href="https://docs.airbyte.com/integrations/sources/github">docs</a> for more info
	StartDate time.Time `json:"start_date"`
}
