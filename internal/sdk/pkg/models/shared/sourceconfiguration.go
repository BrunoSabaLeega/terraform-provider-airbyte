// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
)

type SourceConfigurationType string

const (
	SourceConfigurationTypeSourcePokeapi                     SourceConfigurationType = "source-pokeapi"
	SourceConfigurationTypeSourceAirtable                    SourceConfigurationType = "source-airtable"
	SourceConfigurationTypeSourceAlloydb                     SourceConfigurationType = "source-alloydb"
	SourceConfigurationTypeSourceAmazonAds                   SourceConfigurationType = "source-amazon-ads"
	SourceConfigurationTypeSourceAmazonSellerPartner         SourceConfigurationType = "source-amazon-seller-partner"
	SourceConfigurationTypeSourceAmazonSqs                   SourceConfigurationType = "source-amazon-sqs"
	SourceConfigurationTypeSourceAmplitude                   SourceConfigurationType = "source-amplitude"
	SourceConfigurationTypeSourceApifyDataset                SourceConfigurationType = "source-apify-dataset"
	SourceConfigurationTypeSourceAsana                       SourceConfigurationType = "source-asana"
	SourceConfigurationTypeSourceAuth0                       SourceConfigurationType = "source-auth0"
	SourceConfigurationTypeSourceAwsCloudtrail               SourceConfigurationType = "source-aws-cloudtrail"
	SourceConfigurationTypeSourceAzureBlobStorage            SourceConfigurationType = "source-azure-blob-storage"
	SourceConfigurationTypeSourceAzureTable                  SourceConfigurationType = "source-azure-table"
	SourceConfigurationTypeSourceBambooHr                    SourceConfigurationType = "source-bamboo-hr"
	SourceConfigurationTypeSourceBigcommerce                 SourceConfigurationType = "source-bigcommerce"
	SourceConfigurationTypeSourceBigquery                    SourceConfigurationType = "source-bigquery"
	SourceConfigurationTypeSourceBingAds                     SourceConfigurationType = "source-bing-ads"
	SourceConfigurationTypeSourceBraintree                   SourceConfigurationType = "source-braintree"
	SourceConfigurationTypeSourceBraze                       SourceConfigurationType = "source-braze"
	SourceConfigurationTypeSourceChargebee                   SourceConfigurationType = "source-chargebee"
	SourceConfigurationTypeSourceChartmogul                  SourceConfigurationType = "source-chartmogul"
	SourceConfigurationTypeSourceClickhouse                  SourceConfigurationType = "source-clickhouse"
	SourceConfigurationTypeSourceClickupAPI                  SourceConfigurationType = "source-clickup-api"
	SourceConfigurationTypeSourceCloseCom                    SourceConfigurationType = "source-close-com"
	SourceConfigurationTypeSourceCoda                        SourceConfigurationType = "source-coda"
	SourceConfigurationTypeSourceCoinAPI                     SourceConfigurationType = "source-coin-api"
	SourceConfigurationTypeSourceCoinmarketcap               SourceConfigurationType = "source-coinmarketcap"
	SourceConfigurationTypeSourceConfigcat                   SourceConfigurationType = "source-configcat"
	SourceConfigurationTypeSourceConfluence                  SourceConfigurationType = "source-confluence"
	SourceConfigurationTypeSourceDatascope                   SourceConfigurationType = "source-datascope"
	SourceConfigurationTypeSourceDelighted                   SourceConfigurationType = "source-delighted"
	SourceConfigurationTypeSourceDixa                        SourceConfigurationType = "source-dixa"
	SourceConfigurationTypeSourceDockerhub                   SourceConfigurationType = "source-dockerhub"
	SourceConfigurationTypeSourceDremio                      SourceConfigurationType = "source-dremio"
	SourceConfigurationTypeSourceDynamodb                    SourceConfigurationType = "source-dynamodb"
	SourceConfigurationTypeSourceE2eTestCloud                SourceConfigurationType = "source-e2e-test-cloud"
	SourceConfigurationTypeSourceEmailoctopus                SourceConfigurationType = "source-emailoctopus"
	SourceConfigurationTypeSourceExchangeRates               SourceConfigurationType = "source-exchange-rates"
	SourceConfigurationTypeSourceFacebookMarketing           SourceConfigurationType = "source-facebook-marketing"
	SourceConfigurationTypeSourceFacebookPages               SourceConfigurationType = "source-facebook-pages"
	SourceConfigurationTypeSourceFaker                       SourceConfigurationType = "source-faker"
	SourceConfigurationTypeSourceFauna                       SourceConfigurationType = "source-fauna"
	SourceConfigurationTypeSourceFileSecure                  SourceConfigurationType = "source-file-secure"
	SourceConfigurationTypeSourceFirebolt                    SourceConfigurationType = "source-firebolt"
	SourceConfigurationTypeSourceFreshcaller                 SourceConfigurationType = "source-freshcaller"
	SourceConfigurationTypeSourceFreshdesk                   SourceConfigurationType = "source-freshdesk"
	SourceConfigurationTypeSourceFreshsales                  SourceConfigurationType = "source-freshsales"
	SourceConfigurationTypeSourceGcs                         SourceConfigurationType = "source-gcs"
	SourceConfigurationTypeSourceGetlago                     SourceConfigurationType = "source-getlago"
	SourceConfigurationTypeSourceGithub                      SourceConfigurationType = "source-github"
	SourceConfigurationTypeSourceGitlab                      SourceConfigurationType = "source-gitlab"
	SourceConfigurationTypeSourceGlassfrog                   SourceConfigurationType = "source-glassfrog"
	SourceConfigurationTypeSourceGnews                       SourceConfigurationType = "source-gnews"
	SourceConfigurationTypeSourceGoogleAds                   SourceConfigurationType = "source-google-ads"
	SourceConfigurationTypeSourceGoogleAnalyticsDataAPI      SourceConfigurationType = "source-google-analytics-data-api"
	SourceConfigurationTypeSourceGoogleAnalyticsV4           SourceConfigurationType = "source-google-analytics-v4"
	SourceConfigurationTypeSourceGoogleDirectory             SourceConfigurationType = "source-google-directory"
	SourceConfigurationTypeSourceGoogleSearchConsole         SourceConfigurationType = "source-google-search-console"
	SourceConfigurationTypeSourceGoogleSheets                SourceConfigurationType = "source-google-sheets"
	SourceConfigurationTypeSourceGoogleWebfonts              SourceConfigurationType = "source-google-webfonts"
	SourceConfigurationTypeSourceGoogleWorkspaceAdminReports SourceConfigurationType = "source-google-workspace-admin-reports"
	SourceConfigurationTypeSourceGreenhouse                  SourceConfigurationType = "source-greenhouse"
	SourceConfigurationTypeSourceGridly                      SourceConfigurationType = "source-gridly"
	SourceConfigurationTypeSourceHarvest                     SourceConfigurationType = "source-harvest"
	SourceConfigurationTypeSourceHubplanner                  SourceConfigurationType = "source-hubplanner"
	SourceConfigurationTypeSourceHubspot                     SourceConfigurationType = "source-hubspot"
	SourceConfigurationTypeSourceInsightly                   SourceConfigurationType = "source-insightly"
	SourceConfigurationTypeSourceInstagram                   SourceConfigurationType = "source-instagram"
	SourceConfigurationTypeSourceInstatus                    SourceConfigurationType = "source-instatus"
	SourceConfigurationTypeSourceIntercom                    SourceConfigurationType = "source-intercom"
	SourceConfigurationTypeSourceIp2whois                    SourceConfigurationType = "source-ip2whois"
	SourceConfigurationTypeSourceIterable                    SourceConfigurationType = "source-iterable"
	SourceConfigurationTypeSourceJira                        SourceConfigurationType = "source-jira"
	SourceConfigurationTypeSourceK6Cloud                     SourceConfigurationType = "source-k6-cloud"
	SourceConfigurationTypeSourceKlarna                      SourceConfigurationType = "source-klarna"
	SourceConfigurationTypeSourceKlaviyo                     SourceConfigurationType = "source-klaviyo"
	SourceConfigurationTypeSourceKustomerSinger              SourceConfigurationType = "source-kustomer-singer"
	SourceConfigurationTypeSourceLaunchdarkly                SourceConfigurationType = "source-launchdarkly"
	SourceConfigurationTypeSourceLemlist                     SourceConfigurationType = "source-lemlist"
	SourceConfigurationTypeSourceLinkedinAds                 SourceConfigurationType = "source-linkedin-ads"
	SourceConfigurationTypeSourceLinkedinPages               SourceConfigurationType = "source-linkedin-pages"
	SourceConfigurationTypeSourceLinnworks                   SourceConfigurationType = "source-linnworks"
	SourceConfigurationTypeSourceLokalise                    SourceConfigurationType = "source-lokalise"
	SourceConfigurationTypeSourceMailchimp                   SourceConfigurationType = "source-mailchimp"
	SourceConfigurationTypeSourceMailgun                     SourceConfigurationType = "source-mailgun"
	SourceConfigurationTypeSourceMailjetSms                  SourceConfigurationType = "source-mailjet-sms"
	SourceConfigurationTypeSourceMarketo                     SourceConfigurationType = "source-marketo"
	SourceConfigurationTypeSourceMetabase                    SourceConfigurationType = "source-metabase"
	SourceConfigurationTypeSourceMicrosoftTeams              SourceConfigurationType = "source-microsoft-teams"
	SourceConfigurationTypeSourceMixpanel                    SourceConfigurationType = "source-mixpanel"
	SourceConfigurationTypeSourceMonday                      SourceConfigurationType = "source-monday"
	SourceConfigurationTypeSourceMongodb                     SourceConfigurationType = "source-mongodb"
	SourceConfigurationTypeSourceMssql                       SourceConfigurationType = "source-mssql"
	SourceConfigurationTypeSourceMyHours                     SourceConfigurationType = "source-my-hours"
	SourceConfigurationTypeSourceMysql                       SourceConfigurationType = "source-mysql"
	SourceConfigurationTypeSourceNetsuite                    SourceConfigurationType = "source-netsuite"
	SourceConfigurationTypeSourceNotion                      SourceConfigurationType = "source-notion"
	SourceConfigurationTypeSourceNytimes                     SourceConfigurationType = "source-nytimes"
	SourceConfigurationTypeSourceOkta                        SourceConfigurationType = "source-okta"
	SourceConfigurationTypeSourceOmnisend                    SourceConfigurationType = "source-omnisend"
	SourceConfigurationTypeSourceOnesignal                   SourceConfigurationType = "source-onesignal"
	SourceConfigurationTypeSourceOpenweather                 SourceConfigurationType = "source-openweather"
	SourceConfigurationTypeSourceOracle                      SourceConfigurationType = "source-oracle"
	SourceConfigurationTypeSourceOrb                         SourceConfigurationType = "source-orb"
	SourceConfigurationTypeSourceOrbit                       SourceConfigurationType = "source-orbit"
	SourceConfigurationTypeSourceOutreach                    SourceConfigurationType = "source-outreach"
	SourceConfigurationTypeSourcePaypalTransaction           SourceConfigurationType = "source-paypal-transaction"
	SourceConfigurationTypeSourcePaystack                    SourceConfigurationType = "source-paystack"
	SourceConfigurationTypeSourcePendo                       SourceConfigurationType = "source-pendo"
	SourceConfigurationTypeSourcePersistiq                   SourceConfigurationType = "source-persistiq"
	SourceConfigurationTypeSourcePexelsAPI                   SourceConfigurationType = "source-pexels-api"
	SourceConfigurationTypeSourcePinterest                   SourceConfigurationType = "source-pinterest"
	SourceConfigurationTypeSourcePipedrive                   SourceConfigurationType = "source-pipedrive"
	SourceConfigurationTypeSourcePocket                      SourceConfigurationType = "source-pocket"
	SourceConfigurationTypeSourcePolygonStockAPI             SourceConfigurationType = "source-polygon-stock-api"
	SourceConfigurationTypeSourcePostgres                    SourceConfigurationType = "source-postgres"
	SourceConfigurationTypeSourcePosthog                     SourceConfigurationType = "source-posthog"
	SourceConfigurationTypeSourcePostmarkapp                 SourceConfigurationType = "source-postmarkapp"
	SourceConfigurationTypeSourcePrestashop                  SourceConfigurationType = "source-prestashop"
	SourceConfigurationTypeSourcePublicApis                  SourceConfigurationType = "source-public-apis"
	SourceConfigurationTypeSourcePunkAPI                     SourceConfigurationType = "source-punk-api"
	SourceConfigurationTypeSourcePypi                        SourceConfigurationType = "source-pypi"
	SourceConfigurationTypeSourceQualaroo                    SourceConfigurationType = "source-qualaroo"
	SourceConfigurationTypeSourceQuickbooks                  SourceConfigurationType = "source-quickbooks"
	SourceConfigurationTypeSourceRailz                       SourceConfigurationType = "source-railz"
	SourceConfigurationTypeSourceRecharge                    SourceConfigurationType = "source-recharge"
	SourceConfigurationTypeSourceRecreation                  SourceConfigurationType = "source-recreation"
	SourceConfigurationTypeSourceRecruitee                   SourceConfigurationType = "source-recruitee"
	SourceConfigurationTypeSourceRecurly                     SourceConfigurationType = "source-recurly"
	SourceConfigurationTypeSourceRedshift                    SourceConfigurationType = "source-redshift"
	SourceConfigurationTypeSourceRetently                    SourceConfigurationType = "source-retently"
	SourceConfigurationTypeSourceRkiCovid                    SourceConfigurationType = "source-rki-covid"
	SourceConfigurationTypeSourceRss                         SourceConfigurationType = "source-rss"
	SourceConfigurationTypeSourceS3                          SourceConfigurationType = "source-s3"
	SourceConfigurationTypeSourceSalesforce                  SourceConfigurationType = "source-salesforce"
	SourceConfigurationTypeSourceSalesforceSinger            SourceConfigurationType = "source-salesforce-singer"
	SourceConfigurationTypeSourceSalesloft                   SourceConfigurationType = "source-salesloft"
	SourceConfigurationTypeSourceSapFieldglass               SourceConfigurationType = "source-sap-fieldglass"
	SourceConfigurationTypeSourceSecoda                      SourceConfigurationType = "source-secoda"
	SourceConfigurationTypeSourceSendgrid                    SourceConfigurationType = "source-sendgrid"
	SourceConfigurationTypeSourceSendinblue                  SourceConfigurationType = "source-sendinblue"
	SourceConfigurationTypeSourceSenseforce                  SourceConfigurationType = "source-senseforce"
	SourceConfigurationTypeSourceSentry                      SourceConfigurationType = "source-sentry"
	SourceConfigurationTypeSourceSftp                        SourceConfigurationType = "source-sftp"
	SourceConfigurationTypeSourceSftpBulk                    SourceConfigurationType = "source-sftp-bulk"
	SourceConfigurationTypeSourceShopify                     SourceConfigurationType = "source-shopify"
	SourceConfigurationTypeSourceShortio                     SourceConfigurationType = "source-shortio"
	SourceConfigurationTypeSourceSlack                       SourceConfigurationType = "source-slack"
	SourceConfigurationTypeSourceSmaily                      SourceConfigurationType = "source-smaily"
	SourceConfigurationTypeSourceSmartengage                 SourceConfigurationType = "source-smartengage"
	SourceConfigurationTypeSourceSmartsheets                 SourceConfigurationType = "source-smartsheets"
	SourceConfigurationTypeSourceSnapchatMarketing           SourceConfigurationType = "source-snapchat-marketing"
	SourceConfigurationTypeSourceSnowflake                   SourceConfigurationType = "source-snowflake"
	SourceConfigurationTypeSourceSonarCloud                  SourceConfigurationType = "source-sonar-cloud"
	SourceConfigurationTypeSourceSpacexAPI                   SourceConfigurationType = "source-spacex-api"
	SourceConfigurationTypeSourceSquare                      SourceConfigurationType = "source-square"
	SourceConfigurationTypeSourceStrava                      SourceConfigurationType = "source-strava"
	SourceConfigurationTypeSourceStripe                      SourceConfigurationType = "source-stripe"
	SourceConfigurationTypeSourceSurveySparrow               SourceConfigurationType = "source-survey-sparrow"
	SourceConfigurationTypeSourceSurveymonkey                SourceConfigurationType = "source-surveymonkey"
	SourceConfigurationTypeSourceTempo                       SourceConfigurationType = "source-tempo"
	SourceConfigurationTypeSourceTheGuardianAPI              SourceConfigurationType = "source-the-guardian-api"
	SourceConfigurationTypeSourceTiktokMarketing             SourceConfigurationType = "source-tiktok-marketing"
	SourceConfigurationTypeSourceTodoist                     SourceConfigurationType = "source-todoist"
	SourceConfigurationTypeSourceTrello                      SourceConfigurationType = "source-trello"
	SourceConfigurationTypeSourceTrustpilot                  SourceConfigurationType = "source-trustpilot"
	SourceConfigurationTypeSourceTvmazeSchedule              SourceConfigurationType = "source-tvmaze-schedule"
	SourceConfigurationTypeSourceTwilio                      SourceConfigurationType = "source-twilio"
	SourceConfigurationTypeSourceTwilioTaskrouter            SourceConfigurationType = "source-twilio-taskrouter"
	SourceConfigurationTypeSourceTwitter                     SourceConfigurationType = "source-twitter"
	SourceConfigurationTypeSourceTypeform                    SourceConfigurationType = "source-typeform"
	SourceConfigurationTypeSourceUsCensus                    SourceConfigurationType = "source-us-census"
	SourceConfigurationTypeSourceVantage                     SourceConfigurationType = "source-vantage"
	SourceConfigurationTypeSourceWebflow                     SourceConfigurationType = "source-webflow"
	SourceConfigurationTypeSourceWhiskyHunter                SourceConfigurationType = "source-whisky-hunter"
	SourceConfigurationTypeSourceWikipediaPageviews          SourceConfigurationType = "source-wikipedia-pageviews"
	SourceConfigurationTypeSourceWoocommerce                 SourceConfigurationType = "source-woocommerce"
	SourceConfigurationTypeSourceXero                        SourceConfigurationType = "source-xero"
	SourceConfigurationTypeSourceXkcd                        SourceConfigurationType = "source-xkcd"
	SourceConfigurationTypeSourceYandexMetrica               SourceConfigurationType = "source-yandex-metrica"
	SourceConfigurationTypeSourceYounium                     SourceConfigurationType = "source-younium"
	SourceConfigurationTypeSourceYoutubeAnalytics            SourceConfigurationType = "source-youtube-analytics"
	SourceConfigurationTypeSourceZendeskChat                 SourceConfigurationType = "source-zendesk-chat"
	SourceConfigurationTypeSourceZendeskSunshine             SourceConfigurationType = "source-zendesk-sunshine"
	SourceConfigurationTypeSourceZendeskSupport              SourceConfigurationType = "source-zendesk-support"
	SourceConfigurationTypeSourceZendeskTalk                 SourceConfigurationType = "source-zendesk-talk"
	SourceConfigurationTypeSourceZenloop                     SourceConfigurationType = "source-zenloop"
	SourceConfigurationTypeSourceZohoCrm                     SourceConfigurationType = "source-zoho-crm"
	SourceConfigurationTypeSourceZoom                        SourceConfigurationType = "source-zoom"
	SourceConfigurationTypeSourceZuora                       SourceConfigurationType = "source-zuora"
)

type SourceConfiguration struct {
	SourcePokeapi                     *SourcePokeapi
	SourceAirtable                    *SourceAirtable
	SourceAlloydb                     *SourceAlloydb
	SourceAmazonAds                   *SourceAmazonAds
	SourceAmazonSellerPartner         *SourceAmazonSellerPartner
	SourceAmazonSqs                   *SourceAmazonSqs
	SourceAmplitude                   *SourceAmplitude
	SourceApifyDataset                *SourceApifyDataset
	SourceAsana                       *SourceAsana
	SourceAuth0                       *SourceAuth0
	SourceAwsCloudtrail               *SourceAwsCloudtrail
	SourceAzureBlobStorage            *SourceAzureBlobStorage
	SourceAzureTable                  *SourceAzureTable
	SourceBambooHr                    *SourceBambooHr
	SourceBigcommerce                 *SourceBigcommerce
	SourceBigquery                    *SourceBigquery
	SourceBingAds                     *SourceBingAds
	SourceBraintree                   *SourceBraintree
	SourceBraze                       *SourceBraze
	SourceChargebee                   *SourceChargebee
	SourceChartmogul                  *SourceChartmogul
	SourceClickhouse                  *SourceClickhouse
	SourceClickupAPI                  *SourceClickupAPI
	SourceCloseCom                    *SourceCloseCom
	SourceCoda                        *SourceCoda
	SourceCoinAPI                     *SourceCoinAPI
	SourceCoinmarketcap               *SourceCoinmarketcap
	SourceConfigcat                   *SourceConfigcat
	SourceConfluence                  *SourceConfluence
	SourceDatascope                   *SourceDatascope
	SourceDelighted                   *SourceDelighted
	SourceDixa                        *SourceDixa
	SourceDockerhub                   *SourceDockerhub
	SourceDremio                      *SourceDremio
	SourceDynamodb                    *SourceDynamodb
	SourceE2eTestCloud                *SourceE2eTestCloud
	SourceEmailoctopus                *SourceEmailoctopus
	SourceExchangeRates               *SourceExchangeRates
	SourceFacebookMarketing           *SourceFacebookMarketing
	SourceFacebookPages               *SourceFacebookPages
	SourceFaker                       *SourceFaker
	SourceFauna                       *SourceFauna
	SourceFileSecure                  *SourceFileSecure
	SourceFirebolt                    *SourceFirebolt
	SourceFreshcaller                 *SourceFreshcaller
	SourceFreshdesk                   *SourceFreshdesk
	SourceFreshsales                  *SourceFreshsales
	SourceGcs                         *SourceGcs
	SourceGetlago                     *SourceGetlago
	SourceGithub                      *SourceGithub
	SourceGitlab                      *SourceGitlab
	SourceGlassfrog                   *SourceGlassfrog
	SourceGnews                       *SourceGnews
	SourceGoogleAds                   *SourceGoogleAds
	SourceGoogleAnalyticsDataAPI      *SourceGoogleAnalyticsDataAPI
	SourceGoogleAnalyticsV4           *SourceGoogleAnalyticsV4
	SourceGoogleDirectory             *SourceGoogleDirectory
	SourceGoogleSearchConsole         *SourceGoogleSearchConsole
	SourceGoogleSheets                *SourceGoogleSheets
	SourceGoogleWebfonts              *SourceGoogleWebfonts
	SourceGoogleWorkspaceAdminReports *SourceGoogleWorkspaceAdminReports
	SourceGreenhouse                  *SourceGreenhouse
	SourceGridly                      *SourceGridly
	SourceHarvest                     *SourceHarvest
	SourceHubplanner                  *SourceHubplanner
	SourceHubspot                     *SourceHubspot
	SourceInsightly                   *SourceInsightly
	SourceInstagram                   *SourceInstagram
	SourceInstatus                    *SourceInstatus
	SourceIntercom                    *SourceIntercom
	SourceIp2whois                    *SourceIp2whois
	SourceIterable                    *SourceIterable
	SourceJira                        *SourceJira
	SourceK6Cloud                     *SourceK6Cloud
	SourceKlarna                      *SourceKlarna
	SourceKlaviyo                     *SourceKlaviyo
	SourceKustomerSinger              *SourceKustomerSinger
	SourceLaunchdarkly                *SourceLaunchdarkly
	SourceLemlist                     *SourceLemlist
	SourceLinkedinAds                 *SourceLinkedinAds
	SourceLinkedinPages               *SourceLinkedinPages
	SourceLinnworks                   *SourceLinnworks
	SourceLokalise                    *SourceLokalise
	SourceMailchimp                   *SourceMailchimp
	SourceMailgun                     *SourceMailgun
	SourceMailjetSms                  *SourceMailjetSms
	SourceMarketo                     *SourceMarketo
	SourceMetabase                    *SourceMetabase
	SourceMicrosoftTeams              *SourceMicrosoftTeams
	SourceMixpanel                    *SourceMixpanel
	SourceMonday                      *SourceMonday
	SourceMongodb                     *SourceMongodb
	SourceMssql                       *SourceMssql
	SourceMyHours                     *SourceMyHours
	SourceMysql                       *SourceMysql
	SourceNetsuite                    *SourceNetsuite
	SourceNotion                      *SourceNotion
	SourceNytimes                     *SourceNytimes
	SourceOkta                        *SourceOkta
	SourceOmnisend                    *SourceOmnisend
	SourceOnesignal                   *SourceOnesignal
	SourceOpenweather                 *SourceOpenweather
	SourceOracle                      *SourceOracle
	SourceOrb                         *SourceOrb
	SourceOrbit                       *SourceOrbit
	SourceOutreach                    *SourceOutreach
	SourcePaypalTransaction           *SourcePaypalTransaction
	SourcePaystack                    *SourcePaystack
	SourcePendo                       *SourcePendo
	SourcePersistiq                   *SourcePersistiq
	SourcePexelsAPI                   *SourcePexelsAPI
	SourcePinterest                   *SourcePinterest
	SourcePipedrive                   *SourcePipedrive
	SourcePocket                      *SourcePocket
	SourcePolygonStockAPI             *SourcePolygonStockAPI
	SourcePostgres                    *SourcePostgres
	SourcePosthog                     *SourcePosthog
	SourcePostmarkapp                 *SourcePostmarkapp
	SourcePrestashop                  *SourcePrestashop
	SourcePublicApis                  *SourcePublicApis
	SourcePunkAPI                     *SourcePunkAPI
	SourcePypi                        *SourcePypi
	SourceQualaroo                    *SourceQualaroo
	SourceQuickbooks                  *SourceQuickbooks
	SourceRailz                       *SourceRailz
	SourceRecharge                    *SourceRecharge
	SourceRecreation                  *SourceRecreation
	SourceRecruitee                   *SourceRecruitee
	SourceRecurly                     *SourceRecurly
	SourceRedshift                    *SourceRedshift
	SourceRetently                    *SourceRetently
	SourceRkiCovid                    *SourceRkiCovid
	SourceRss                         *SourceRss
	SourceS3                          *SourceS3
	SourceSalesforce                  *SourceSalesforce
	SourceSalesforceSinger            *SourceSalesforceSinger
	SourceSalesloft                   *SourceSalesloft
	SourceSapFieldglass               *SourceSapFieldglass
	SourceSecoda                      *SourceSecoda
	SourceSendgrid                    *SourceSendgrid
	SourceSendinblue                  *SourceSendinblue
	SourceSenseforce                  *SourceSenseforce
	SourceSentry                      *SourceSentry
	SourceSftp                        *SourceSftp
	SourceSftpBulk                    *SourceSftpBulk
	SourceShopify                     *SourceShopify
	SourceShortio                     *SourceShortio
	SourceSlack                       *SourceSlack
	SourceSmaily                      *SourceSmaily
	SourceSmartengage                 *SourceSmartengage
	SourceSmartsheets                 *SourceSmartsheets
	SourceSnapchatMarketing           *SourceSnapchatMarketing
	SourceSnowflake                   *SourceSnowflake
	SourceSonarCloud                  *SourceSonarCloud
	SourceSpacexAPI                   *SourceSpacexAPI
	SourceSquare                      *SourceSquare
	SourceStrava                      *SourceStrava
	SourceStripe                      *SourceStripe
	SourceSurveySparrow               *SourceSurveySparrow
	SourceSurveymonkey                *SourceSurveymonkey
	SourceTempo                       *SourceTempo
	SourceTheGuardianAPI              *SourceTheGuardianAPI
	SourceTiktokMarketing             *SourceTiktokMarketing
	SourceTodoist                     *SourceTodoist
	SourceTrello                      *SourceTrello
	SourceTrustpilot                  *SourceTrustpilot
	SourceTvmazeSchedule              *SourceTvmazeSchedule
	SourceTwilio                      *SourceTwilio
	SourceTwilioTaskrouter            *SourceTwilioTaskrouter
	SourceTwitter                     *SourceTwitter
	SourceTypeform                    *SourceTypeform
	SourceUsCensus                    *SourceUsCensus
	SourceVantage                     *SourceVantage
	SourceWebflow                     *SourceWebflow
	SourceWhiskyHunter                *SourceWhiskyHunter
	SourceWikipediaPageviews          *SourceWikipediaPageviews
	SourceWoocommerce                 *SourceWoocommerce
	SourceXero                        *SourceXero
	SourceXkcd                        *SourceXkcd
	SourceYandexMetrica               *SourceYandexMetrica
	SourceYounium                     *SourceYounium
	SourceYoutubeAnalytics            *SourceYoutubeAnalytics
	SourceZendeskChat                 *SourceZendeskChat
	SourceZendeskSunshine             *SourceZendeskSunshine
	SourceZendeskSupport              *SourceZendeskSupport
	SourceZendeskTalk                 *SourceZendeskTalk
	SourceZenloop                     *SourceZenloop
	SourceZohoCrm                     *SourceZohoCrm
	SourceZoom                        *SourceZoom
	SourceZuora                       *SourceZuora

	Type SourceConfigurationType
}

func CreateSourceConfigurationSourcePokeapi(sourcePokeapi SourcePokeapi) SourceConfiguration {
	typ := SourceConfigurationTypeSourcePokeapi

	return SourceConfiguration{
		SourcePokeapi: &sourcePokeapi,
		Type:          typ,
	}
}

func CreateSourceConfigurationSourceAirtable(sourceAirtable SourceAirtable) SourceConfiguration {
	typ := SourceConfigurationTypeSourceAirtable

	return SourceConfiguration{
		SourceAirtable: &sourceAirtable,
		Type:           typ,
	}
}

func CreateSourceConfigurationSourceAlloydb(sourceAlloydb SourceAlloydb) SourceConfiguration {
	typ := SourceConfigurationTypeSourceAlloydb

	return SourceConfiguration{
		SourceAlloydb: &sourceAlloydb,
		Type:          typ,
	}
}

func CreateSourceConfigurationSourceAmazonAds(sourceAmazonAds SourceAmazonAds) SourceConfiguration {
	typ := SourceConfigurationTypeSourceAmazonAds

	return SourceConfiguration{
		SourceAmazonAds: &sourceAmazonAds,
		Type:            typ,
	}
}

func CreateSourceConfigurationSourceAmazonSellerPartner(sourceAmazonSellerPartner SourceAmazonSellerPartner) SourceConfiguration {
	typ := SourceConfigurationTypeSourceAmazonSellerPartner

	return SourceConfiguration{
		SourceAmazonSellerPartner: &sourceAmazonSellerPartner,
		Type:                      typ,
	}
}

func CreateSourceConfigurationSourceAmazonSqs(sourceAmazonSqs SourceAmazonSqs) SourceConfiguration {
	typ := SourceConfigurationTypeSourceAmazonSqs

	return SourceConfiguration{
		SourceAmazonSqs: &sourceAmazonSqs,
		Type:            typ,
	}
}

func CreateSourceConfigurationSourceAmplitude(sourceAmplitude SourceAmplitude) SourceConfiguration {
	typ := SourceConfigurationTypeSourceAmplitude

	return SourceConfiguration{
		SourceAmplitude: &sourceAmplitude,
		Type:            typ,
	}
}

func CreateSourceConfigurationSourceApifyDataset(sourceApifyDataset SourceApifyDataset) SourceConfiguration {
	typ := SourceConfigurationTypeSourceApifyDataset

	return SourceConfiguration{
		SourceApifyDataset: &sourceApifyDataset,
		Type:               typ,
	}
}

func CreateSourceConfigurationSourceAsana(sourceAsana SourceAsana) SourceConfiguration {
	typ := SourceConfigurationTypeSourceAsana

	return SourceConfiguration{
		SourceAsana: &sourceAsana,
		Type:        typ,
	}
}

func CreateSourceConfigurationSourceAuth0(sourceAuth0 SourceAuth0) SourceConfiguration {
	typ := SourceConfigurationTypeSourceAuth0

	return SourceConfiguration{
		SourceAuth0: &sourceAuth0,
		Type:        typ,
	}
}

func CreateSourceConfigurationSourceAwsCloudtrail(sourceAwsCloudtrail SourceAwsCloudtrail) SourceConfiguration {
	typ := SourceConfigurationTypeSourceAwsCloudtrail

	return SourceConfiguration{
		SourceAwsCloudtrail: &sourceAwsCloudtrail,
		Type:                typ,
	}
}

func CreateSourceConfigurationSourceAzureBlobStorage(sourceAzureBlobStorage SourceAzureBlobStorage) SourceConfiguration {
	typ := SourceConfigurationTypeSourceAzureBlobStorage

	return SourceConfiguration{
		SourceAzureBlobStorage: &sourceAzureBlobStorage,
		Type:                   typ,
	}
}

func CreateSourceConfigurationSourceAzureTable(sourceAzureTable SourceAzureTable) SourceConfiguration {
	typ := SourceConfigurationTypeSourceAzureTable

	return SourceConfiguration{
		SourceAzureTable: &sourceAzureTable,
		Type:             typ,
	}
}

func CreateSourceConfigurationSourceBambooHr(sourceBambooHr SourceBambooHr) SourceConfiguration {
	typ := SourceConfigurationTypeSourceBambooHr

	return SourceConfiguration{
		SourceBambooHr: &sourceBambooHr,
		Type:           typ,
	}
}

func CreateSourceConfigurationSourceBigcommerce(sourceBigcommerce SourceBigcommerce) SourceConfiguration {
	typ := SourceConfigurationTypeSourceBigcommerce

	return SourceConfiguration{
		SourceBigcommerce: &sourceBigcommerce,
		Type:              typ,
	}
}

func CreateSourceConfigurationSourceBigquery(sourceBigquery SourceBigquery) SourceConfiguration {
	typ := SourceConfigurationTypeSourceBigquery

	return SourceConfiguration{
		SourceBigquery: &sourceBigquery,
		Type:           typ,
	}
}

func CreateSourceConfigurationSourceBingAds(sourceBingAds SourceBingAds) SourceConfiguration {
	typ := SourceConfigurationTypeSourceBingAds

	return SourceConfiguration{
		SourceBingAds: &sourceBingAds,
		Type:          typ,
	}
}

func CreateSourceConfigurationSourceBraintree(sourceBraintree SourceBraintree) SourceConfiguration {
	typ := SourceConfigurationTypeSourceBraintree

	return SourceConfiguration{
		SourceBraintree: &sourceBraintree,
		Type:            typ,
	}
}

func CreateSourceConfigurationSourceBraze(sourceBraze SourceBraze) SourceConfiguration {
	typ := SourceConfigurationTypeSourceBraze

	return SourceConfiguration{
		SourceBraze: &sourceBraze,
		Type:        typ,
	}
}

func CreateSourceConfigurationSourceChargebee(sourceChargebee SourceChargebee) SourceConfiguration {
	typ := SourceConfigurationTypeSourceChargebee

	return SourceConfiguration{
		SourceChargebee: &sourceChargebee,
		Type:            typ,
	}
}

func CreateSourceConfigurationSourceChartmogul(sourceChartmogul SourceChartmogul) SourceConfiguration {
	typ := SourceConfigurationTypeSourceChartmogul

	return SourceConfiguration{
		SourceChartmogul: &sourceChartmogul,
		Type:             typ,
	}
}

func CreateSourceConfigurationSourceClickhouse(sourceClickhouse SourceClickhouse) SourceConfiguration {
	typ := SourceConfigurationTypeSourceClickhouse

	return SourceConfiguration{
		SourceClickhouse: &sourceClickhouse,
		Type:             typ,
	}
}

func CreateSourceConfigurationSourceClickupAPI(sourceClickupAPI SourceClickupAPI) SourceConfiguration {
	typ := SourceConfigurationTypeSourceClickupAPI

	return SourceConfiguration{
		SourceClickupAPI: &sourceClickupAPI,
		Type:             typ,
	}
}

func CreateSourceConfigurationSourceCloseCom(sourceCloseCom SourceCloseCom) SourceConfiguration {
	typ := SourceConfigurationTypeSourceCloseCom

	return SourceConfiguration{
		SourceCloseCom: &sourceCloseCom,
		Type:           typ,
	}
}

func CreateSourceConfigurationSourceCoda(sourceCoda SourceCoda) SourceConfiguration {
	typ := SourceConfigurationTypeSourceCoda

	return SourceConfiguration{
		SourceCoda: &sourceCoda,
		Type:       typ,
	}
}

func CreateSourceConfigurationSourceCoinAPI(sourceCoinAPI SourceCoinAPI) SourceConfiguration {
	typ := SourceConfigurationTypeSourceCoinAPI

	return SourceConfiguration{
		SourceCoinAPI: &sourceCoinAPI,
		Type:          typ,
	}
}

func CreateSourceConfigurationSourceCoinmarketcap(sourceCoinmarketcap SourceCoinmarketcap) SourceConfiguration {
	typ := SourceConfigurationTypeSourceCoinmarketcap

	return SourceConfiguration{
		SourceCoinmarketcap: &sourceCoinmarketcap,
		Type:                typ,
	}
}

func CreateSourceConfigurationSourceConfigcat(sourceConfigcat SourceConfigcat) SourceConfiguration {
	typ := SourceConfigurationTypeSourceConfigcat

	return SourceConfiguration{
		SourceConfigcat: &sourceConfigcat,
		Type:            typ,
	}
}

func CreateSourceConfigurationSourceConfluence(sourceConfluence SourceConfluence) SourceConfiguration {
	typ := SourceConfigurationTypeSourceConfluence

	return SourceConfiguration{
		SourceConfluence: &sourceConfluence,
		Type:             typ,
	}
}

func CreateSourceConfigurationSourceDatascope(sourceDatascope SourceDatascope) SourceConfiguration {
	typ := SourceConfigurationTypeSourceDatascope

	return SourceConfiguration{
		SourceDatascope: &sourceDatascope,
		Type:            typ,
	}
}

func CreateSourceConfigurationSourceDelighted(sourceDelighted SourceDelighted) SourceConfiguration {
	typ := SourceConfigurationTypeSourceDelighted

	return SourceConfiguration{
		SourceDelighted: &sourceDelighted,
		Type:            typ,
	}
}

func CreateSourceConfigurationSourceDixa(sourceDixa SourceDixa) SourceConfiguration {
	typ := SourceConfigurationTypeSourceDixa

	return SourceConfiguration{
		SourceDixa: &sourceDixa,
		Type:       typ,
	}
}

func CreateSourceConfigurationSourceDockerhub(sourceDockerhub SourceDockerhub) SourceConfiguration {
	typ := SourceConfigurationTypeSourceDockerhub

	return SourceConfiguration{
		SourceDockerhub: &sourceDockerhub,
		Type:            typ,
	}
}

func CreateSourceConfigurationSourceDremio(sourceDremio SourceDremio) SourceConfiguration {
	typ := SourceConfigurationTypeSourceDremio

	return SourceConfiguration{
		SourceDremio: &sourceDremio,
		Type:         typ,
	}
}

func CreateSourceConfigurationSourceDynamodb(sourceDynamodb SourceDynamodb) SourceConfiguration {
	typ := SourceConfigurationTypeSourceDynamodb

	return SourceConfiguration{
		SourceDynamodb: &sourceDynamodb,
		Type:           typ,
	}
}

func CreateSourceConfigurationSourceE2eTestCloud(sourceE2eTestCloud SourceE2eTestCloud) SourceConfiguration {
	typ := SourceConfigurationTypeSourceE2eTestCloud

	return SourceConfiguration{
		SourceE2eTestCloud: &sourceE2eTestCloud,
		Type:               typ,
	}
}

func CreateSourceConfigurationSourceEmailoctopus(sourceEmailoctopus SourceEmailoctopus) SourceConfiguration {
	typ := SourceConfigurationTypeSourceEmailoctopus

	return SourceConfiguration{
		SourceEmailoctopus: &sourceEmailoctopus,
		Type:               typ,
	}
}

func CreateSourceConfigurationSourceExchangeRates(sourceExchangeRates SourceExchangeRates) SourceConfiguration {
	typ := SourceConfigurationTypeSourceExchangeRates

	return SourceConfiguration{
		SourceExchangeRates: &sourceExchangeRates,
		Type:                typ,
	}
}

func CreateSourceConfigurationSourceFacebookMarketing(sourceFacebookMarketing SourceFacebookMarketing) SourceConfiguration {
	typ := SourceConfigurationTypeSourceFacebookMarketing

	return SourceConfiguration{
		SourceFacebookMarketing: &sourceFacebookMarketing,
		Type:                    typ,
	}
}

func CreateSourceConfigurationSourceFacebookPages(sourceFacebookPages SourceFacebookPages) SourceConfiguration {
	typ := SourceConfigurationTypeSourceFacebookPages

	return SourceConfiguration{
		SourceFacebookPages: &sourceFacebookPages,
		Type:                typ,
	}
}

func CreateSourceConfigurationSourceFaker(sourceFaker SourceFaker) SourceConfiguration {
	typ := SourceConfigurationTypeSourceFaker

	return SourceConfiguration{
		SourceFaker: &sourceFaker,
		Type:        typ,
	}
}

func CreateSourceConfigurationSourceFauna(sourceFauna SourceFauna) SourceConfiguration {
	typ := SourceConfigurationTypeSourceFauna

	return SourceConfiguration{
		SourceFauna: &sourceFauna,
		Type:        typ,
	}
}

func CreateSourceConfigurationSourceFileSecure(sourceFileSecure SourceFileSecure) SourceConfiguration {
	typ := SourceConfigurationTypeSourceFileSecure

	return SourceConfiguration{
		SourceFileSecure: &sourceFileSecure,
		Type:             typ,
	}
}

func CreateSourceConfigurationSourceFirebolt(sourceFirebolt SourceFirebolt) SourceConfiguration {
	typ := SourceConfigurationTypeSourceFirebolt

	return SourceConfiguration{
		SourceFirebolt: &sourceFirebolt,
		Type:           typ,
	}
}

func CreateSourceConfigurationSourceFreshcaller(sourceFreshcaller SourceFreshcaller) SourceConfiguration {
	typ := SourceConfigurationTypeSourceFreshcaller

	return SourceConfiguration{
		SourceFreshcaller: &sourceFreshcaller,
		Type:              typ,
	}
}

func CreateSourceConfigurationSourceFreshdesk(sourceFreshdesk SourceFreshdesk) SourceConfiguration {
	typ := SourceConfigurationTypeSourceFreshdesk

	return SourceConfiguration{
		SourceFreshdesk: &sourceFreshdesk,
		Type:            typ,
	}
}

func CreateSourceConfigurationSourceFreshsales(sourceFreshsales SourceFreshsales) SourceConfiguration {
	typ := SourceConfigurationTypeSourceFreshsales

	return SourceConfiguration{
		SourceFreshsales: &sourceFreshsales,
		Type:             typ,
	}
}

func CreateSourceConfigurationSourceGcs(sourceGcs SourceGcs) SourceConfiguration {
	typ := SourceConfigurationTypeSourceGcs

	return SourceConfiguration{
		SourceGcs: &sourceGcs,
		Type:      typ,
	}
}

func CreateSourceConfigurationSourceGetlago(sourceGetlago SourceGetlago) SourceConfiguration {
	typ := SourceConfigurationTypeSourceGetlago

	return SourceConfiguration{
		SourceGetlago: &sourceGetlago,
		Type:          typ,
	}
}

func CreateSourceConfigurationSourceGithub(sourceGithub SourceGithub) SourceConfiguration {
	typ := SourceConfigurationTypeSourceGithub

	return SourceConfiguration{
		SourceGithub: &sourceGithub,
		Type:         typ,
	}
}

func CreateSourceConfigurationSourceGitlab(sourceGitlab SourceGitlab) SourceConfiguration {
	typ := SourceConfigurationTypeSourceGitlab

	return SourceConfiguration{
		SourceGitlab: &sourceGitlab,
		Type:         typ,
	}
}

func CreateSourceConfigurationSourceGlassfrog(sourceGlassfrog SourceGlassfrog) SourceConfiguration {
	typ := SourceConfigurationTypeSourceGlassfrog

	return SourceConfiguration{
		SourceGlassfrog: &sourceGlassfrog,
		Type:            typ,
	}
}

func CreateSourceConfigurationSourceGnews(sourceGnews SourceGnews) SourceConfiguration {
	typ := SourceConfigurationTypeSourceGnews

	return SourceConfiguration{
		SourceGnews: &sourceGnews,
		Type:        typ,
	}
}

func CreateSourceConfigurationSourceGoogleAds(sourceGoogleAds SourceGoogleAds) SourceConfiguration {
	typ := SourceConfigurationTypeSourceGoogleAds

	return SourceConfiguration{
		SourceGoogleAds: &sourceGoogleAds,
		Type:            typ,
	}
}

func CreateSourceConfigurationSourceGoogleAnalyticsDataAPI(sourceGoogleAnalyticsDataAPI SourceGoogleAnalyticsDataAPI) SourceConfiguration {
	typ := SourceConfigurationTypeSourceGoogleAnalyticsDataAPI

	return SourceConfiguration{
		SourceGoogleAnalyticsDataAPI: &sourceGoogleAnalyticsDataAPI,
		Type:                         typ,
	}
}

func CreateSourceConfigurationSourceGoogleAnalyticsV4(sourceGoogleAnalyticsV4 SourceGoogleAnalyticsV4) SourceConfiguration {
	typ := SourceConfigurationTypeSourceGoogleAnalyticsV4

	return SourceConfiguration{
		SourceGoogleAnalyticsV4: &sourceGoogleAnalyticsV4,
		Type:                    typ,
	}
}

func CreateSourceConfigurationSourceGoogleDirectory(sourceGoogleDirectory SourceGoogleDirectory) SourceConfiguration {
	typ := SourceConfigurationTypeSourceGoogleDirectory

	return SourceConfiguration{
		SourceGoogleDirectory: &sourceGoogleDirectory,
		Type:                  typ,
	}
}

func CreateSourceConfigurationSourceGoogleSearchConsole(sourceGoogleSearchConsole SourceGoogleSearchConsole) SourceConfiguration {
	typ := SourceConfigurationTypeSourceGoogleSearchConsole

	return SourceConfiguration{
		SourceGoogleSearchConsole: &sourceGoogleSearchConsole,
		Type:                      typ,
	}
}

func CreateSourceConfigurationSourceGoogleSheets(sourceGoogleSheets SourceGoogleSheets) SourceConfiguration {
	typ := SourceConfigurationTypeSourceGoogleSheets

	return SourceConfiguration{
		SourceGoogleSheets: &sourceGoogleSheets,
		Type:               typ,
	}
}

func CreateSourceConfigurationSourceGoogleWebfonts(sourceGoogleWebfonts SourceGoogleWebfonts) SourceConfiguration {
	typ := SourceConfigurationTypeSourceGoogleWebfonts

	return SourceConfiguration{
		SourceGoogleWebfonts: &sourceGoogleWebfonts,
		Type:                 typ,
	}
}

func CreateSourceConfigurationSourceGoogleWorkspaceAdminReports(sourceGoogleWorkspaceAdminReports SourceGoogleWorkspaceAdminReports) SourceConfiguration {
	typ := SourceConfigurationTypeSourceGoogleWorkspaceAdminReports

	return SourceConfiguration{
		SourceGoogleWorkspaceAdminReports: &sourceGoogleWorkspaceAdminReports,
		Type:                              typ,
	}
}

func CreateSourceConfigurationSourceGreenhouse(sourceGreenhouse SourceGreenhouse) SourceConfiguration {
	typ := SourceConfigurationTypeSourceGreenhouse

	return SourceConfiguration{
		SourceGreenhouse: &sourceGreenhouse,
		Type:             typ,
	}
}

func CreateSourceConfigurationSourceGridly(sourceGridly SourceGridly) SourceConfiguration {
	typ := SourceConfigurationTypeSourceGridly

	return SourceConfiguration{
		SourceGridly: &sourceGridly,
		Type:         typ,
	}
}

func CreateSourceConfigurationSourceHarvest(sourceHarvest SourceHarvest) SourceConfiguration {
	typ := SourceConfigurationTypeSourceHarvest

	return SourceConfiguration{
		SourceHarvest: &sourceHarvest,
		Type:          typ,
	}
}

func CreateSourceConfigurationSourceHubplanner(sourceHubplanner SourceHubplanner) SourceConfiguration {
	typ := SourceConfigurationTypeSourceHubplanner

	return SourceConfiguration{
		SourceHubplanner: &sourceHubplanner,
		Type:             typ,
	}
}

func CreateSourceConfigurationSourceHubspot(sourceHubspot SourceHubspot) SourceConfiguration {
	typ := SourceConfigurationTypeSourceHubspot

	return SourceConfiguration{
		SourceHubspot: &sourceHubspot,
		Type:          typ,
	}
}

func CreateSourceConfigurationSourceInsightly(sourceInsightly SourceInsightly) SourceConfiguration {
	typ := SourceConfigurationTypeSourceInsightly

	return SourceConfiguration{
		SourceInsightly: &sourceInsightly,
		Type:            typ,
	}
}

func CreateSourceConfigurationSourceInstagram(sourceInstagram SourceInstagram) SourceConfiguration {
	typ := SourceConfigurationTypeSourceInstagram

	return SourceConfiguration{
		SourceInstagram: &sourceInstagram,
		Type:            typ,
	}
}

func CreateSourceConfigurationSourceInstatus(sourceInstatus SourceInstatus) SourceConfiguration {
	typ := SourceConfigurationTypeSourceInstatus

	return SourceConfiguration{
		SourceInstatus: &sourceInstatus,
		Type:           typ,
	}
}

func CreateSourceConfigurationSourceIntercom(sourceIntercom SourceIntercom) SourceConfiguration {
	typ := SourceConfigurationTypeSourceIntercom

	return SourceConfiguration{
		SourceIntercom: &sourceIntercom,
		Type:           typ,
	}
}

func CreateSourceConfigurationSourceIp2whois(sourceIp2whois SourceIp2whois) SourceConfiguration {
	typ := SourceConfigurationTypeSourceIp2whois

	return SourceConfiguration{
		SourceIp2whois: &sourceIp2whois,
		Type:           typ,
	}
}

func CreateSourceConfigurationSourceIterable(sourceIterable SourceIterable) SourceConfiguration {
	typ := SourceConfigurationTypeSourceIterable

	return SourceConfiguration{
		SourceIterable: &sourceIterable,
		Type:           typ,
	}
}

func CreateSourceConfigurationSourceJira(sourceJira SourceJira) SourceConfiguration {
	typ := SourceConfigurationTypeSourceJira

	return SourceConfiguration{
		SourceJira: &sourceJira,
		Type:       typ,
	}
}

func CreateSourceConfigurationSourceK6Cloud(sourceK6Cloud SourceK6Cloud) SourceConfiguration {
	typ := SourceConfigurationTypeSourceK6Cloud

	return SourceConfiguration{
		SourceK6Cloud: &sourceK6Cloud,
		Type:          typ,
	}
}

func CreateSourceConfigurationSourceKlarna(sourceKlarna SourceKlarna) SourceConfiguration {
	typ := SourceConfigurationTypeSourceKlarna

	return SourceConfiguration{
		SourceKlarna: &sourceKlarna,
		Type:         typ,
	}
}

func CreateSourceConfigurationSourceKlaviyo(sourceKlaviyo SourceKlaviyo) SourceConfiguration {
	typ := SourceConfigurationTypeSourceKlaviyo

	return SourceConfiguration{
		SourceKlaviyo: &sourceKlaviyo,
		Type:          typ,
	}
}

func CreateSourceConfigurationSourceKustomerSinger(sourceKustomerSinger SourceKustomerSinger) SourceConfiguration {
	typ := SourceConfigurationTypeSourceKustomerSinger

	return SourceConfiguration{
		SourceKustomerSinger: &sourceKustomerSinger,
		Type:                 typ,
	}
}

func CreateSourceConfigurationSourceLaunchdarkly(sourceLaunchdarkly SourceLaunchdarkly) SourceConfiguration {
	typ := SourceConfigurationTypeSourceLaunchdarkly

	return SourceConfiguration{
		SourceLaunchdarkly: &sourceLaunchdarkly,
		Type:               typ,
	}
}

func CreateSourceConfigurationSourceLemlist(sourceLemlist SourceLemlist) SourceConfiguration {
	typ := SourceConfigurationTypeSourceLemlist

	return SourceConfiguration{
		SourceLemlist: &sourceLemlist,
		Type:          typ,
	}
}

func CreateSourceConfigurationSourceLinkedinAds(sourceLinkedinAds SourceLinkedinAds) SourceConfiguration {
	typ := SourceConfigurationTypeSourceLinkedinAds

	return SourceConfiguration{
		SourceLinkedinAds: &sourceLinkedinAds,
		Type:              typ,
	}
}

func CreateSourceConfigurationSourceLinkedinPages(sourceLinkedinPages SourceLinkedinPages) SourceConfiguration {
	typ := SourceConfigurationTypeSourceLinkedinPages

	return SourceConfiguration{
		SourceLinkedinPages: &sourceLinkedinPages,
		Type:                typ,
	}
}

func CreateSourceConfigurationSourceLinnworks(sourceLinnworks SourceLinnworks) SourceConfiguration {
	typ := SourceConfigurationTypeSourceLinnworks

	return SourceConfiguration{
		SourceLinnworks: &sourceLinnworks,
		Type:            typ,
	}
}

func CreateSourceConfigurationSourceLokalise(sourceLokalise SourceLokalise) SourceConfiguration {
	typ := SourceConfigurationTypeSourceLokalise

	return SourceConfiguration{
		SourceLokalise: &sourceLokalise,
		Type:           typ,
	}
}

func CreateSourceConfigurationSourceMailchimp(sourceMailchimp SourceMailchimp) SourceConfiguration {
	typ := SourceConfigurationTypeSourceMailchimp

	return SourceConfiguration{
		SourceMailchimp: &sourceMailchimp,
		Type:            typ,
	}
}

func CreateSourceConfigurationSourceMailgun(sourceMailgun SourceMailgun) SourceConfiguration {
	typ := SourceConfigurationTypeSourceMailgun

	return SourceConfiguration{
		SourceMailgun: &sourceMailgun,
		Type:          typ,
	}
}

func CreateSourceConfigurationSourceMailjetSms(sourceMailjetSms SourceMailjetSms) SourceConfiguration {
	typ := SourceConfigurationTypeSourceMailjetSms

	return SourceConfiguration{
		SourceMailjetSms: &sourceMailjetSms,
		Type:             typ,
	}
}

func CreateSourceConfigurationSourceMarketo(sourceMarketo SourceMarketo) SourceConfiguration {
	typ := SourceConfigurationTypeSourceMarketo

	return SourceConfiguration{
		SourceMarketo: &sourceMarketo,
		Type:          typ,
	}
}

func CreateSourceConfigurationSourceMetabase(sourceMetabase SourceMetabase) SourceConfiguration {
	typ := SourceConfigurationTypeSourceMetabase

	return SourceConfiguration{
		SourceMetabase: &sourceMetabase,
		Type:           typ,
	}
}

func CreateSourceConfigurationSourceMicrosoftTeams(sourceMicrosoftTeams SourceMicrosoftTeams) SourceConfiguration {
	typ := SourceConfigurationTypeSourceMicrosoftTeams

	return SourceConfiguration{
		SourceMicrosoftTeams: &sourceMicrosoftTeams,
		Type:                 typ,
	}
}

func CreateSourceConfigurationSourceMixpanel(sourceMixpanel SourceMixpanel) SourceConfiguration {
	typ := SourceConfigurationTypeSourceMixpanel

	return SourceConfiguration{
		SourceMixpanel: &sourceMixpanel,
		Type:           typ,
	}
}

func CreateSourceConfigurationSourceMonday(sourceMonday SourceMonday) SourceConfiguration {
	typ := SourceConfigurationTypeSourceMonday

	return SourceConfiguration{
		SourceMonday: &sourceMonday,
		Type:         typ,
	}
}

func CreateSourceConfigurationSourceMongodb(sourceMongodb SourceMongodb) SourceConfiguration {
	typ := SourceConfigurationTypeSourceMongodb

	return SourceConfiguration{
		SourceMongodb: &sourceMongodb,
		Type:          typ,
	}
}

func CreateSourceConfigurationSourceMssql(sourceMssql SourceMssql) SourceConfiguration {
	typ := SourceConfigurationTypeSourceMssql

	return SourceConfiguration{
		SourceMssql: &sourceMssql,
		Type:        typ,
	}
}

func CreateSourceConfigurationSourceMyHours(sourceMyHours SourceMyHours) SourceConfiguration {
	typ := SourceConfigurationTypeSourceMyHours

	return SourceConfiguration{
		SourceMyHours: &sourceMyHours,
		Type:          typ,
	}
}

func CreateSourceConfigurationSourceMysql(sourceMysql SourceMysql) SourceConfiguration {
	typ := SourceConfigurationTypeSourceMysql

	return SourceConfiguration{
		SourceMysql: &sourceMysql,
		Type:        typ,
	}
}

func CreateSourceConfigurationSourceNetsuite(sourceNetsuite SourceNetsuite) SourceConfiguration {
	typ := SourceConfigurationTypeSourceNetsuite

	return SourceConfiguration{
		SourceNetsuite: &sourceNetsuite,
		Type:           typ,
	}
}

func CreateSourceConfigurationSourceNotion(sourceNotion SourceNotion) SourceConfiguration {
	typ := SourceConfigurationTypeSourceNotion

	return SourceConfiguration{
		SourceNotion: &sourceNotion,
		Type:         typ,
	}
}

func CreateSourceConfigurationSourceNytimes(sourceNytimes SourceNytimes) SourceConfiguration {
	typ := SourceConfigurationTypeSourceNytimes

	return SourceConfiguration{
		SourceNytimes: &sourceNytimes,
		Type:          typ,
	}
}

func CreateSourceConfigurationSourceOkta(sourceOkta SourceOkta) SourceConfiguration {
	typ := SourceConfigurationTypeSourceOkta

	return SourceConfiguration{
		SourceOkta: &sourceOkta,
		Type:       typ,
	}
}

func CreateSourceConfigurationSourceOmnisend(sourceOmnisend SourceOmnisend) SourceConfiguration {
	typ := SourceConfigurationTypeSourceOmnisend

	return SourceConfiguration{
		SourceOmnisend: &sourceOmnisend,
		Type:           typ,
	}
}

func CreateSourceConfigurationSourceOnesignal(sourceOnesignal SourceOnesignal) SourceConfiguration {
	typ := SourceConfigurationTypeSourceOnesignal

	return SourceConfiguration{
		SourceOnesignal: &sourceOnesignal,
		Type:            typ,
	}
}

func CreateSourceConfigurationSourceOpenweather(sourceOpenweather SourceOpenweather) SourceConfiguration {
	typ := SourceConfigurationTypeSourceOpenweather

	return SourceConfiguration{
		SourceOpenweather: &sourceOpenweather,
		Type:              typ,
	}
}

func CreateSourceConfigurationSourceOracle(sourceOracle SourceOracle) SourceConfiguration {
	typ := SourceConfigurationTypeSourceOracle

	return SourceConfiguration{
		SourceOracle: &sourceOracle,
		Type:         typ,
	}
}

func CreateSourceConfigurationSourceOrb(sourceOrb SourceOrb) SourceConfiguration {
	typ := SourceConfigurationTypeSourceOrb

	return SourceConfiguration{
		SourceOrb: &sourceOrb,
		Type:      typ,
	}
}

func CreateSourceConfigurationSourceOrbit(sourceOrbit SourceOrbit) SourceConfiguration {
	typ := SourceConfigurationTypeSourceOrbit

	return SourceConfiguration{
		SourceOrbit: &sourceOrbit,
		Type:        typ,
	}
}

func CreateSourceConfigurationSourceOutreach(sourceOutreach SourceOutreach) SourceConfiguration {
	typ := SourceConfigurationTypeSourceOutreach

	return SourceConfiguration{
		SourceOutreach: &sourceOutreach,
		Type:           typ,
	}
}

func CreateSourceConfigurationSourcePaypalTransaction(sourcePaypalTransaction SourcePaypalTransaction) SourceConfiguration {
	typ := SourceConfigurationTypeSourcePaypalTransaction

	return SourceConfiguration{
		SourcePaypalTransaction: &sourcePaypalTransaction,
		Type:                    typ,
	}
}

func CreateSourceConfigurationSourcePaystack(sourcePaystack SourcePaystack) SourceConfiguration {
	typ := SourceConfigurationTypeSourcePaystack

	return SourceConfiguration{
		SourcePaystack: &sourcePaystack,
		Type:           typ,
	}
}

func CreateSourceConfigurationSourcePendo(sourcePendo SourcePendo) SourceConfiguration {
	typ := SourceConfigurationTypeSourcePendo

	return SourceConfiguration{
		SourcePendo: &sourcePendo,
		Type:        typ,
	}
}

func CreateSourceConfigurationSourcePersistiq(sourcePersistiq SourcePersistiq) SourceConfiguration {
	typ := SourceConfigurationTypeSourcePersistiq

	return SourceConfiguration{
		SourcePersistiq: &sourcePersistiq,
		Type:            typ,
	}
}

func CreateSourceConfigurationSourcePexelsAPI(sourcePexelsAPI SourcePexelsAPI) SourceConfiguration {
	typ := SourceConfigurationTypeSourcePexelsAPI

	return SourceConfiguration{
		SourcePexelsAPI: &sourcePexelsAPI,
		Type:            typ,
	}
}

func CreateSourceConfigurationSourcePinterest(sourcePinterest SourcePinterest) SourceConfiguration {
	typ := SourceConfigurationTypeSourcePinterest

	return SourceConfiguration{
		SourcePinterest: &sourcePinterest,
		Type:            typ,
	}
}

func CreateSourceConfigurationSourcePipedrive(sourcePipedrive SourcePipedrive) SourceConfiguration {
	typ := SourceConfigurationTypeSourcePipedrive

	return SourceConfiguration{
		SourcePipedrive: &sourcePipedrive,
		Type:            typ,
	}
}

func CreateSourceConfigurationSourcePocket(sourcePocket SourcePocket) SourceConfiguration {
	typ := SourceConfigurationTypeSourcePocket

	return SourceConfiguration{
		SourcePocket: &sourcePocket,
		Type:         typ,
	}
}

func CreateSourceConfigurationSourcePolygonStockAPI(sourcePolygonStockAPI SourcePolygonStockAPI) SourceConfiguration {
	typ := SourceConfigurationTypeSourcePolygonStockAPI

	return SourceConfiguration{
		SourcePolygonStockAPI: &sourcePolygonStockAPI,
		Type:                  typ,
	}
}

func CreateSourceConfigurationSourcePostgres(sourcePostgres SourcePostgres) SourceConfiguration {
	typ := SourceConfigurationTypeSourcePostgres

	return SourceConfiguration{
		SourcePostgres: &sourcePostgres,
		Type:           typ,
	}
}

func CreateSourceConfigurationSourcePosthog(sourcePosthog SourcePosthog) SourceConfiguration {
	typ := SourceConfigurationTypeSourcePosthog

	return SourceConfiguration{
		SourcePosthog: &sourcePosthog,
		Type:          typ,
	}
}

func CreateSourceConfigurationSourcePostmarkapp(sourcePostmarkapp SourcePostmarkapp) SourceConfiguration {
	typ := SourceConfigurationTypeSourcePostmarkapp

	return SourceConfiguration{
		SourcePostmarkapp: &sourcePostmarkapp,
		Type:              typ,
	}
}

func CreateSourceConfigurationSourcePrestashop(sourcePrestashop SourcePrestashop) SourceConfiguration {
	typ := SourceConfigurationTypeSourcePrestashop

	return SourceConfiguration{
		SourcePrestashop: &sourcePrestashop,
		Type:             typ,
	}
}

func CreateSourceConfigurationSourcePublicApis(sourcePublicApis SourcePublicApis) SourceConfiguration {
	typ := SourceConfigurationTypeSourcePublicApis

	return SourceConfiguration{
		SourcePublicApis: &sourcePublicApis,
		Type:             typ,
	}
}

func CreateSourceConfigurationSourcePunkAPI(sourcePunkAPI SourcePunkAPI) SourceConfiguration {
	typ := SourceConfigurationTypeSourcePunkAPI

	return SourceConfiguration{
		SourcePunkAPI: &sourcePunkAPI,
		Type:          typ,
	}
}

func CreateSourceConfigurationSourcePypi(sourcePypi SourcePypi) SourceConfiguration {
	typ := SourceConfigurationTypeSourcePypi

	return SourceConfiguration{
		SourcePypi: &sourcePypi,
		Type:       typ,
	}
}

func CreateSourceConfigurationSourceQualaroo(sourceQualaroo SourceQualaroo) SourceConfiguration {
	typ := SourceConfigurationTypeSourceQualaroo

	return SourceConfiguration{
		SourceQualaroo: &sourceQualaroo,
		Type:           typ,
	}
}

func CreateSourceConfigurationSourceQuickbooks(sourceQuickbooks SourceQuickbooks) SourceConfiguration {
	typ := SourceConfigurationTypeSourceQuickbooks

	return SourceConfiguration{
		SourceQuickbooks: &sourceQuickbooks,
		Type:             typ,
	}
}

func CreateSourceConfigurationSourceRailz(sourceRailz SourceRailz) SourceConfiguration {
	typ := SourceConfigurationTypeSourceRailz

	return SourceConfiguration{
		SourceRailz: &sourceRailz,
		Type:        typ,
	}
}

func CreateSourceConfigurationSourceRecharge(sourceRecharge SourceRecharge) SourceConfiguration {
	typ := SourceConfigurationTypeSourceRecharge

	return SourceConfiguration{
		SourceRecharge: &sourceRecharge,
		Type:           typ,
	}
}

func CreateSourceConfigurationSourceRecreation(sourceRecreation SourceRecreation) SourceConfiguration {
	typ := SourceConfigurationTypeSourceRecreation

	return SourceConfiguration{
		SourceRecreation: &sourceRecreation,
		Type:             typ,
	}
}

func CreateSourceConfigurationSourceRecruitee(sourceRecruitee SourceRecruitee) SourceConfiguration {
	typ := SourceConfigurationTypeSourceRecruitee

	return SourceConfiguration{
		SourceRecruitee: &sourceRecruitee,
		Type:            typ,
	}
}

func CreateSourceConfigurationSourceRecurly(sourceRecurly SourceRecurly) SourceConfiguration {
	typ := SourceConfigurationTypeSourceRecurly

	return SourceConfiguration{
		SourceRecurly: &sourceRecurly,
		Type:          typ,
	}
}

func CreateSourceConfigurationSourceRedshift(sourceRedshift SourceRedshift) SourceConfiguration {
	typ := SourceConfigurationTypeSourceRedshift

	return SourceConfiguration{
		SourceRedshift: &sourceRedshift,
		Type:           typ,
	}
}

func CreateSourceConfigurationSourceRetently(sourceRetently SourceRetently) SourceConfiguration {
	typ := SourceConfigurationTypeSourceRetently

	return SourceConfiguration{
		SourceRetently: &sourceRetently,
		Type:           typ,
	}
}

func CreateSourceConfigurationSourceRkiCovid(sourceRkiCovid SourceRkiCovid) SourceConfiguration {
	typ := SourceConfigurationTypeSourceRkiCovid

	return SourceConfiguration{
		SourceRkiCovid: &sourceRkiCovid,
		Type:           typ,
	}
}

func CreateSourceConfigurationSourceRss(sourceRss SourceRss) SourceConfiguration {
	typ := SourceConfigurationTypeSourceRss

	return SourceConfiguration{
		SourceRss: &sourceRss,
		Type:      typ,
	}
}

func CreateSourceConfigurationSourceS3(sourceS3 SourceS3) SourceConfiguration {
	typ := SourceConfigurationTypeSourceS3

	return SourceConfiguration{
		SourceS3: &sourceS3,
		Type:     typ,
	}
}

func CreateSourceConfigurationSourceSalesforce(sourceSalesforce SourceSalesforce) SourceConfiguration {
	typ := SourceConfigurationTypeSourceSalesforce

	return SourceConfiguration{
		SourceSalesforce: &sourceSalesforce,
		Type:             typ,
	}
}

func CreateSourceConfigurationSourceSalesforceSinger(sourceSalesforceSinger SourceSalesforceSinger) SourceConfiguration {
	typ := SourceConfigurationTypeSourceSalesforceSinger

	return SourceConfiguration{
		SourceSalesforceSinger: &sourceSalesforceSinger,
		Type:                   typ,
	}
}

func CreateSourceConfigurationSourceSalesloft(sourceSalesloft SourceSalesloft) SourceConfiguration {
	typ := SourceConfigurationTypeSourceSalesloft

	return SourceConfiguration{
		SourceSalesloft: &sourceSalesloft,
		Type:            typ,
	}
}

func CreateSourceConfigurationSourceSapFieldglass(sourceSapFieldglass SourceSapFieldglass) SourceConfiguration {
	typ := SourceConfigurationTypeSourceSapFieldglass

	return SourceConfiguration{
		SourceSapFieldglass: &sourceSapFieldglass,
		Type:                typ,
	}
}

func CreateSourceConfigurationSourceSecoda(sourceSecoda SourceSecoda) SourceConfiguration {
	typ := SourceConfigurationTypeSourceSecoda

	return SourceConfiguration{
		SourceSecoda: &sourceSecoda,
		Type:         typ,
	}
}

func CreateSourceConfigurationSourceSendgrid(sourceSendgrid SourceSendgrid) SourceConfiguration {
	typ := SourceConfigurationTypeSourceSendgrid

	return SourceConfiguration{
		SourceSendgrid: &sourceSendgrid,
		Type:           typ,
	}
}

func CreateSourceConfigurationSourceSendinblue(sourceSendinblue SourceSendinblue) SourceConfiguration {
	typ := SourceConfigurationTypeSourceSendinblue

	return SourceConfiguration{
		SourceSendinblue: &sourceSendinblue,
		Type:             typ,
	}
}

func CreateSourceConfigurationSourceSenseforce(sourceSenseforce SourceSenseforce) SourceConfiguration {
	typ := SourceConfigurationTypeSourceSenseforce

	return SourceConfiguration{
		SourceSenseforce: &sourceSenseforce,
		Type:             typ,
	}
}

func CreateSourceConfigurationSourceSentry(sourceSentry SourceSentry) SourceConfiguration {
	typ := SourceConfigurationTypeSourceSentry

	return SourceConfiguration{
		SourceSentry: &sourceSentry,
		Type:         typ,
	}
}

func CreateSourceConfigurationSourceSftp(sourceSftp SourceSftp) SourceConfiguration {
	typ := SourceConfigurationTypeSourceSftp

	return SourceConfiguration{
		SourceSftp: &sourceSftp,
		Type:       typ,
	}
}

func CreateSourceConfigurationSourceSftpBulk(sourceSftpBulk SourceSftpBulk) SourceConfiguration {
	typ := SourceConfigurationTypeSourceSftpBulk

	return SourceConfiguration{
		SourceSftpBulk: &sourceSftpBulk,
		Type:           typ,
	}
}

func CreateSourceConfigurationSourceShopify(sourceShopify SourceShopify) SourceConfiguration {
	typ := SourceConfigurationTypeSourceShopify

	return SourceConfiguration{
		SourceShopify: &sourceShopify,
		Type:          typ,
	}
}

func CreateSourceConfigurationSourceShortio(sourceShortio SourceShortio) SourceConfiguration {
	typ := SourceConfigurationTypeSourceShortio

	return SourceConfiguration{
		SourceShortio: &sourceShortio,
		Type:          typ,
	}
}

func CreateSourceConfigurationSourceSlack(sourceSlack SourceSlack) SourceConfiguration {
	typ := SourceConfigurationTypeSourceSlack

	return SourceConfiguration{
		SourceSlack: &sourceSlack,
		Type:        typ,
	}
}

func CreateSourceConfigurationSourceSmaily(sourceSmaily SourceSmaily) SourceConfiguration {
	typ := SourceConfigurationTypeSourceSmaily

	return SourceConfiguration{
		SourceSmaily: &sourceSmaily,
		Type:         typ,
	}
}

func CreateSourceConfigurationSourceSmartengage(sourceSmartengage SourceSmartengage) SourceConfiguration {
	typ := SourceConfigurationTypeSourceSmartengage

	return SourceConfiguration{
		SourceSmartengage: &sourceSmartengage,
		Type:              typ,
	}
}

func CreateSourceConfigurationSourceSmartsheets(sourceSmartsheets SourceSmartsheets) SourceConfiguration {
	typ := SourceConfigurationTypeSourceSmartsheets

	return SourceConfiguration{
		SourceSmartsheets: &sourceSmartsheets,
		Type:              typ,
	}
}

func CreateSourceConfigurationSourceSnapchatMarketing(sourceSnapchatMarketing SourceSnapchatMarketing) SourceConfiguration {
	typ := SourceConfigurationTypeSourceSnapchatMarketing

	return SourceConfiguration{
		SourceSnapchatMarketing: &sourceSnapchatMarketing,
		Type:                    typ,
	}
}

func CreateSourceConfigurationSourceSnowflake(sourceSnowflake SourceSnowflake) SourceConfiguration {
	typ := SourceConfigurationTypeSourceSnowflake

	return SourceConfiguration{
		SourceSnowflake: &sourceSnowflake,
		Type:            typ,
	}
}

func CreateSourceConfigurationSourceSonarCloud(sourceSonarCloud SourceSonarCloud) SourceConfiguration {
	typ := SourceConfigurationTypeSourceSonarCloud

	return SourceConfiguration{
		SourceSonarCloud: &sourceSonarCloud,
		Type:             typ,
	}
}

func CreateSourceConfigurationSourceSpacexAPI(sourceSpacexAPI SourceSpacexAPI) SourceConfiguration {
	typ := SourceConfigurationTypeSourceSpacexAPI

	return SourceConfiguration{
		SourceSpacexAPI: &sourceSpacexAPI,
		Type:            typ,
	}
}

func CreateSourceConfigurationSourceSquare(sourceSquare SourceSquare) SourceConfiguration {
	typ := SourceConfigurationTypeSourceSquare

	return SourceConfiguration{
		SourceSquare: &sourceSquare,
		Type:         typ,
	}
}

func CreateSourceConfigurationSourceStrava(sourceStrava SourceStrava) SourceConfiguration {
	typ := SourceConfigurationTypeSourceStrava

	return SourceConfiguration{
		SourceStrava: &sourceStrava,
		Type:         typ,
	}
}

func CreateSourceConfigurationSourceStripe(sourceStripe SourceStripe) SourceConfiguration {
	typ := SourceConfigurationTypeSourceStripe

	return SourceConfiguration{
		SourceStripe: &sourceStripe,
		Type:         typ,
	}
}

func CreateSourceConfigurationSourceSurveySparrow(sourceSurveySparrow SourceSurveySparrow) SourceConfiguration {
	typ := SourceConfigurationTypeSourceSurveySparrow

	return SourceConfiguration{
		SourceSurveySparrow: &sourceSurveySparrow,
		Type:                typ,
	}
}

func CreateSourceConfigurationSourceSurveymonkey(sourceSurveymonkey SourceSurveymonkey) SourceConfiguration {
	typ := SourceConfigurationTypeSourceSurveymonkey

	return SourceConfiguration{
		SourceSurveymonkey: &sourceSurveymonkey,
		Type:               typ,
	}
}

func CreateSourceConfigurationSourceTempo(sourceTempo SourceTempo) SourceConfiguration {
	typ := SourceConfigurationTypeSourceTempo

	return SourceConfiguration{
		SourceTempo: &sourceTempo,
		Type:        typ,
	}
}

func CreateSourceConfigurationSourceTheGuardianAPI(sourceTheGuardianAPI SourceTheGuardianAPI) SourceConfiguration {
	typ := SourceConfigurationTypeSourceTheGuardianAPI

	return SourceConfiguration{
		SourceTheGuardianAPI: &sourceTheGuardianAPI,
		Type:                 typ,
	}
}

func CreateSourceConfigurationSourceTiktokMarketing(sourceTiktokMarketing SourceTiktokMarketing) SourceConfiguration {
	typ := SourceConfigurationTypeSourceTiktokMarketing

	return SourceConfiguration{
		SourceTiktokMarketing: &sourceTiktokMarketing,
		Type:                  typ,
	}
}

func CreateSourceConfigurationSourceTodoist(sourceTodoist SourceTodoist) SourceConfiguration {
	typ := SourceConfigurationTypeSourceTodoist

	return SourceConfiguration{
		SourceTodoist: &sourceTodoist,
		Type:          typ,
	}
}

func CreateSourceConfigurationSourceTrello(sourceTrello SourceTrello) SourceConfiguration {
	typ := SourceConfigurationTypeSourceTrello

	return SourceConfiguration{
		SourceTrello: &sourceTrello,
		Type:         typ,
	}
}

func CreateSourceConfigurationSourceTrustpilot(sourceTrustpilot SourceTrustpilot) SourceConfiguration {
	typ := SourceConfigurationTypeSourceTrustpilot

	return SourceConfiguration{
		SourceTrustpilot: &sourceTrustpilot,
		Type:             typ,
	}
}

func CreateSourceConfigurationSourceTvmazeSchedule(sourceTvmazeSchedule SourceTvmazeSchedule) SourceConfiguration {
	typ := SourceConfigurationTypeSourceTvmazeSchedule

	return SourceConfiguration{
		SourceTvmazeSchedule: &sourceTvmazeSchedule,
		Type:                 typ,
	}
}

func CreateSourceConfigurationSourceTwilio(sourceTwilio SourceTwilio) SourceConfiguration {
	typ := SourceConfigurationTypeSourceTwilio

	return SourceConfiguration{
		SourceTwilio: &sourceTwilio,
		Type:         typ,
	}
}

func CreateSourceConfigurationSourceTwilioTaskrouter(sourceTwilioTaskrouter SourceTwilioTaskrouter) SourceConfiguration {
	typ := SourceConfigurationTypeSourceTwilioTaskrouter

	return SourceConfiguration{
		SourceTwilioTaskrouter: &sourceTwilioTaskrouter,
		Type:                   typ,
	}
}

func CreateSourceConfigurationSourceTwitter(sourceTwitter SourceTwitter) SourceConfiguration {
	typ := SourceConfigurationTypeSourceTwitter

	return SourceConfiguration{
		SourceTwitter: &sourceTwitter,
		Type:          typ,
	}
}

func CreateSourceConfigurationSourceTypeform(sourceTypeform SourceTypeform) SourceConfiguration {
	typ := SourceConfigurationTypeSourceTypeform

	return SourceConfiguration{
		SourceTypeform: &sourceTypeform,
		Type:           typ,
	}
}

func CreateSourceConfigurationSourceUsCensus(sourceUsCensus SourceUsCensus) SourceConfiguration {
	typ := SourceConfigurationTypeSourceUsCensus

	return SourceConfiguration{
		SourceUsCensus: &sourceUsCensus,
		Type:           typ,
	}
}

func CreateSourceConfigurationSourceVantage(sourceVantage SourceVantage) SourceConfiguration {
	typ := SourceConfigurationTypeSourceVantage

	return SourceConfiguration{
		SourceVantage: &sourceVantage,
		Type:          typ,
	}
}

func CreateSourceConfigurationSourceWebflow(sourceWebflow SourceWebflow) SourceConfiguration {
	typ := SourceConfigurationTypeSourceWebflow

	return SourceConfiguration{
		SourceWebflow: &sourceWebflow,
		Type:          typ,
	}
}

func CreateSourceConfigurationSourceWhiskyHunter(sourceWhiskyHunter SourceWhiskyHunter) SourceConfiguration {
	typ := SourceConfigurationTypeSourceWhiskyHunter

	return SourceConfiguration{
		SourceWhiskyHunter: &sourceWhiskyHunter,
		Type:               typ,
	}
}

func CreateSourceConfigurationSourceWikipediaPageviews(sourceWikipediaPageviews SourceWikipediaPageviews) SourceConfiguration {
	typ := SourceConfigurationTypeSourceWikipediaPageviews

	return SourceConfiguration{
		SourceWikipediaPageviews: &sourceWikipediaPageviews,
		Type:                     typ,
	}
}

func CreateSourceConfigurationSourceWoocommerce(sourceWoocommerce SourceWoocommerce) SourceConfiguration {
	typ := SourceConfigurationTypeSourceWoocommerce

	return SourceConfiguration{
		SourceWoocommerce: &sourceWoocommerce,
		Type:              typ,
	}
}

func CreateSourceConfigurationSourceXero(sourceXero SourceXero) SourceConfiguration {
	typ := SourceConfigurationTypeSourceXero

	return SourceConfiguration{
		SourceXero: &sourceXero,
		Type:       typ,
	}
}

func CreateSourceConfigurationSourceXkcd(sourceXkcd SourceXkcd) SourceConfiguration {
	typ := SourceConfigurationTypeSourceXkcd

	return SourceConfiguration{
		SourceXkcd: &sourceXkcd,
		Type:       typ,
	}
}

func CreateSourceConfigurationSourceYandexMetrica(sourceYandexMetrica SourceYandexMetrica) SourceConfiguration {
	typ := SourceConfigurationTypeSourceYandexMetrica

	return SourceConfiguration{
		SourceYandexMetrica: &sourceYandexMetrica,
		Type:                typ,
	}
}

func CreateSourceConfigurationSourceYounium(sourceYounium SourceYounium) SourceConfiguration {
	typ := SourceConfigurationTypeSourceYounium

	return SourceConfiguration{
		SourceYounium: &sourceYounium,
		Type:          typ,
	}
}

func CreateSourceConfigurationSourceYoutubeAnalytics(sourceYoutubeAnalytics SourceYoutubeAnalytics) SourceConfiguration {
	typ := SourceConfigurationTypeSourceYoutubeAnalytics

	return SourceConfiguration{
		SourceYoutubeAnalytics: &sourceYoutubeAnalytics,
		Type:                   typ,
	}
}

func CreateSourceConfigurationSourceZendeskChat(sourceZendeskChat SourceZendeskChat) SourceConfiguration {
	typ := SourceConfigurationTypeSourceZendeskChat

	return SourceConfiguration{
		SourceZendeskChat: &sourceZendeskChat,
		Type:              typ,
	}
}

func CreateSourceConfigurationSourceZendeskSunshine(sourceZendeskSunshine SourceZendeskSunshine) SourceConfiguration {
	typ := SourceConfigurationTypeSourceZendeskSunshine

	return SourceConfiguration{
		SourceZendeskSunshine: &sourceZendeskSunshine,
		Type:                  typ,
	}
}

func CreateSourceConfigurationSourceZendeskSupport(sourceZendeskSupport SourceZendeskSupport) SourceConfiguration {
	typ := SourceConfigurationTypeSourceZendeskSupport

	return SourceConfiguration{
		SourceZendeskSupport: &sourceZendeskSupport,
		Type:                 typ,
	}
}

func CreateSourceConfigurationSourceZendeskTalk(sourceZendeskTalk SourceZendeskTalk) SourceConfiguration {
	typ := SourceConfigurationTypeSourceZendeskTalk

	return SourceConfiguration{
		SourceZendeskTalk: &sourceZendeskTalk,
		Type:              typ,
	}
}

func CreateSourceConfigurationSourceZenloop(sourceZenloop SourceZenloop) SourceConfiguration {
	typ := SourceConfigurationTypeSourceZenloop

	return SourceConfiguration{
		SourceZenloop: &sourceZenloop,
		Type:          typ,
	}
}

func CreateSourceConfigurationSourceZohoCrm(sourceZohoCrm SourceZohoCrm) SourceConfiguration {
	typ := SourceConfigurationTypeSourceZohoCrm

	return SourceConfiguration{
		SourceZohoCrm: &sourceZohoCrm,
		Type:          typ,
	}
}

func CreateSourceConfigurationSourceZoom(sourceZoom SourceZoom) SourceConfiguration {
	typ := SourceConfigurationTypeSourceZoom

	return SourceConfiguration{
		SourceZoom: &sourceZoom,
		Type:       typ,
	}
}

func CreateSourceConfigurationSourceZuora(sourceZuora SourceZuora) SourceConfiguration {
	typ := SourceConfigurationTypeSourceZuora

	return SourceConfiguration{
		SourceZuora: &sourceZuora,
		Type:        typ,
	}
}

func (u *SourceConfiguration) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	sourcePokeapi := new(SourcePokeapi)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourcePokeapi); err == nil {
		u.SourcePokeapi = sourcePokeapi
		u.Type = SourceConfigurationTypeSourcePokeapi
		return nil
	}

	sourceAirtable := new(SourceAirtable)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceAirtable); err == nil {
		u.SourceAirtable = sourceAirtable
		u.Type = SourceConfigurationTypeSourceAirtable
		return nil
	}

	sourceAlloydb := new(SourceAlloydb)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceAlloydb); err == nil {
		u.SourceAlloydb = sourceAlloydb
		u.Type = SourceConfigurationTypeSourceAlloydb
		return nil
	}

	sourceAmazonAds := new(SourceAmazonAds)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceAmazonAds); err == nil {
		u.SourceAmazonAds = sourceAmazonAds
		u.Type = SourceConfigurationTypeSourceAmazonAds
		return nil
	}

	sourceAmazonSellerPartner := new(SourceAmazonSellerPartner)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceAmazonSellerPartner); err == nil {
		u.SourceAmazonSellerPartner = sourceAmazonSellerPartner
		u.Type = SourceConfigurationTypeSourceAmazonSellerPartner
		return nil
	}

	sourceAmazonSqs := new(SourceAmazonSqs)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceAmazonSqs); err == nil {
		u.SourceAmazonSqs = sourceAmazonSqs
		u.Type = SourceConfigurationTypeSourceAmazonSqs
		return nil
	}

	sourceAmplitude := new(SourceAmplitude)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceAmplitude); err == nil {
		u.SourceAmplitude = sourceAmplitude
		u.Type = SourceConfigurationTypeSourceAmplitude
		return nil
	}

	sourceApifyDataset := new(SourceApifyDataset)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceApifyDataset); err == nil {
		u.SourceApifyDataset = sourceApifyDataset
		u.Type = SourceConfigurationTypeSourceApifyDataset
		return nil
	}

	sourceAsana := new(SourceAsana)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceAsana); err == nil {
		u.SourceAsana = sourceAsana
		u.Type = SourceConfigurationTypeSourceAsana
		return nil
	}

	sourceAuth0 := new(SourceAuth0)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceAuth0); err == nil {
		u.SourceAuth0 = sourceAuth0
		u.Type = SourceConfigurationTypeSourceAuth0
		return nil
	}

	sourceAwsCloudtrail := new(SourceAwsCloudtrail)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceAwsCloudtrail); err == nil {
		u.SourceAwsCloudtrail = sourceAwsCloudtrail
		u.Type = SourceConfigurationTypeSourceAwsCloudtrail
		return nil
	}

	sourceAzureBlobStorage := new(SourceAzureBlobStorage)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceAzureBlobStorage); err == nil {
		u.SourceAzureBlobStorage = sourceAzureBlobStorage
		u.Type = SourceConfigurationTypeSourceAzureBlobStorage
		return nil
	}

	sourceAzureTable := new(SourceAzureTable)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceAzureTable); err == nil {
		u.SourceAzureTable = sourceAzureTable
		u.Type = SourceConfigurationTypeSourceAzureTable
		return nil
	}

	sourceBambooHr := new(SourceBambooHr)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceBambooHr); err == nil {
		u.SourceBambooHr = sourceBambooHr
		u.Type = SourceConfigurationTypeSourceBambooHr
		return nil
	}

	sourceBigcommerce := new(SourceBigcommerce)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceBigcommerce); err == nil {
		u.SourceBigcommerce = sourceBigcommerce
		u.Type = SourceConfigurationTypeSourceBigcommerce
		return nil
	}

	sourceBigquery := new(SourceBigquery)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceBigquery); err == nil {
		u.SourceBigquery = sourceBigquery
		u.Type = SourceConfigurationTypeSourceBigquery
		return nil
	}

	sourceBingAds := new(SourceBingAds)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceBingAds); err == nil {
		u.SourceBingAds = sourceBingAds
		u.Type = SourceConfigurationTypeSourceBingAds
		return nil
	}

	sourceBraintree := new(SourceBraintree)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceBraintree); err == nil {
		u.SourceBraintree = sourceBraintree
		u.Type = SourceConfigurationTypeSourceBraintree
		return nil
	}

	sourceBraze := new(SourceBraze)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceBraze); err == nil {
		u.SourceBraze = sourceBraze
		u.Type = SourceConfigurationTypeSourceBraze
		return nil
	}

	sourceChargebee := new(SourceChargebee)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceChargebee); err == nil {
		u.SourceChargebee = sourceChargebee
		u.Type = SourceConfigurationTypeSourceChargebee
		return nil
	}

	sourceChartmogul := new(SourceChartmogul)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceChartmogul); err == nil {
		u.SourceChartmogul = sourceChartmogul
		u.Type = SourceConfigurationTypeSourceChartmogul
		return nil
	}

	sourceClickhouse := new(SourceClickhouse)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceClickhouse); err == nil {
		u.SourceClickhouse = sourceClickhouse
		u.Type = SourceConfigurationTypeSourceClickhouse
		return nil
	}

	sourceClickupAPI := new(SourceClickupAPI)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceClickupAPI); err == nil {
		u.SourceClickupAPI = sourceClickupAPI
		u.Type = SourceConfigurationTypeSourceClickupAPI
		return nil
	}

	sourceCloseCom := new(SourceCloseCom)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceCloseCom); err == nil {
		u.SourceCloseCom = sourceCloseCom
		u.Type = SourceConfigurationTypeSourceCloseCom
		return nil
	}

	sourceCoda := new(SourceCoda)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceCoda); err == nil {
		u.SourceCoda = sourceCoda
		u.Type = SourceConfigurationTypeSourceCoda
		return nil
	}

	sourceCoinAPI := new(SourceCoinAPI)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceCoinAPI); err == nil {
		u.SourceCoinAPI = sourceCoinAPI
		u.Type = SourceConfigurationTypeSourceCoinAPI
		return nil
	}

	sourceCoinmarketcap := new(SourceCoinmarketcap)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceCoinmarketcap); err == nil {
		u.SourceCoinmarketcap = sourceCoinmarketcap
		u.Type = SourceConfigurationTypeSourceCoinmarketcap
		return nil
	}

	sourceConfigcat := new(SourceConfigcat)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceConfigcat); err == nil {
		u.SourceConfigcat = sourceConfigcat
		u.Type = SourceConfigurationTypeSourceConfigcat
		return nil
	}

	sourceConfluence := new(SourceConfluence)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceConfluence); err == nil {
		u.SourceConfluence = sourceConfluence
		u.Type = SourceConfigurationTypeSourceConfluence
		return nil
	}

	sourceDatascope := new(SourceDatascope)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceDatascope); err == nil {
		u.SourceDatascope = sourceDatascope
		u.Type = SourceConfigurationTypeSourceDatascope
		return nil
	}

	sourceDelighted := new(SourceDelighted)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceDelighted); err == nil {
		u.SourceDelighted = sourceDelighted
		u.Type = SourceConfigurationTypeSourceDelighted
		return nil
	}

	sourceDixa := new(SourceDixa)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceDixa); err == nil {
		u.SourceDixa = sourceDixa
		u.Type = SourceConfigurationTypeSourceDixa
		return nil
	}

	sourceDockerhub := new(SourceDockerhub)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceDockerhub); err == nil {
		u.SourceDockerhub = sourceDockerhub
		u.Type = SourceConfigurationTypeSourceDockerhub
		return nil
	}

	sourceDremio := new(SourceDremio)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceDremio); err == nil {
		u.SourceDremio = sourceDremio
		u.Type = SourceConfigurationTypeSourceDremio
		return nil
	}

	sourceDynamodb := new(SourceDynamodb)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceDynamodb); err == nil {
		u.SourceDynamodb = sourceDynamodb
		u.Type = SourceConfigurationTypeSourceDynamodb
		return nil
	}

	sourceE2eTestCloud := new(SourceE2eTestCloud)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceE2eTestCloud); err == nil {
		u.SourceE2eTestCloud = sourceE2eTestCloud
		u.Type = SourceConfigurationTypeSourceE2eTestCloud
		return nil
	}

	sourceEmailoctopus := new(SourceEmailoctopus)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceEmailoctopus); err == nil {
		u.SourceEmailoctopus = sourceEmailoctopus
		u.Type = SourceConfigurationTypeSourceEmailoctopus
		return nil
	}

	sourceExchangeRates := new(SourceExchangeRates)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceExchangeRates); err == nil {
		u.SourceExchangeRates = sourceExchangeRates
		u.Type = SourceConfigurationTypeSourceExchangeRates
		return nil
	}

	sourceFacebookMarketing := new(SourceFacebookMarketing)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceFacebookMarketing); err == nil {
		u.SourceFacebookMarketing = sourceFacebookMarketing
		u.Type = SourceConfigurationTypeSourceFacebookMarketing
		return nil
	}

	sourceFacebookPages := new(SourceFacebookPages)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceFacebookPages); err == nil {
		u.SourceFacebookPages = sourceFacebookPages
		u.Type = SourceConfigurationTypeSourceFacebookPages
		return nil
	}

	sourceFaker := new(SourceFaker)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceFaker); err == nil {
		u.SourceFaker = sourceFaker
		u.Type = SourceConfigurationTypeSourceFaker
		return nil
	}

	sourceFauna := new(SourceFauna)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceFauna); err == nil {
		u.SourceFauna = sourceFauna
		u.Type = SourceConfigurationTypeSourceFauna
		return nil
	}

	sourceFileSecure := new(SourceFileSecure)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceFileSecure); err == nil {
		u.SourceFileSecure = sourceFileSecure
		u.Type = SourceConfigurationTypeSourceFileSecure
		return nil
	}

	sourceFirebolt := new(SourceFirebolt)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceFirebolt); err == nil {
		u.SourceFirebolt = sourceFirebolt
		u.Type = SourceConfigurationTypeSourceFirebolt
		return nil
	}

	sourceFreshcaller := new(SourceFreshcaller)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceFreshcaller); err == nil {
		u.SourceFreshcaller = sourceFreshcaller
		u.Type = SourceConfigurationTypeSourceFreshcaller
		return nil
	}

	sourceFreshdesk := new(SourceFreshdesk)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceFreshdesk); err == nil {
		u.SourceFreshdesk = sourceFreshdesk
		u.Type = SourceConfigurationTypeSourceFreshdesk
		return nil
	}

	sourceFreshsales := new(SourceFreshsales)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceFreshsales); err == nil {
		u.SourceFreshsales = sourceFreshsales
		u.Type = SourceConfigurationTypeSourceFreshsales
		return nil
	}

	sourceGcs := new(SourceGcs)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceGcs); err == nil {
		u.SourceGcs = sourceGcs
		u.Type = SourceConfigurationTypeSourceGcs
		return nil
	}

	sourceGetlago := new(SourceGetlago)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceGetlago); err == nil {
		u.SourceGetlago = sourceGetlago
		u.Type = SourceConfigurationTypeSourceGetlago
		return nil
	}

	sourceGithub := new(SourceGithub)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceGithub); err == nil {
		u.SourceGithub = sourceGithub
		u.Type = SourceConfigurationTypeSourceGithub
		return nil
	}

	sourceGitlab := new(SourceGitlab)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceGitlab); err == nil {
		u.SourceGitlab = sourceGitlab
		u.Type = SourceConfigurationTypeSourceGitlab
		return nil
	}

	sourceGlassfrog := new(SourceGlassfrog)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceGlassfrog); err == nil {
		u.SourceGlassfrog = sourceGlassfrog
		u.Type = SourceConfigurationTypeSourceGlassfrog
		return nil
	}

	sourceGnews := new(SourceGnews)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceGnews); err == nil {
		u.SourceGnews = sourceGnews
		u.Type = SourceConfigurationTypeSourceGnews
		return nil
	}

	sourceGoogleAds := new(SourceGoogleAds)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceGoogleAds); err == nil {
		u.SourceGoogleAds = sourceGoogleAds
		u.Type = SourceConfigurationTypeSourceGoogleAds
		return nil
	}

	sourceGoogleAnalyticsDataAPI := new(SourceGoogleAnalyticsDataAPI)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceGoogleAnalyticsDataAPI); err == nil {
		u.SourceGoogleAnalyticsDataAPI = sourceGoogleAnalyticsDataAPI
		u.Type = SourceConfigurationTypeSourceGoogleAnalyticsDataAPI
		return nil
	}

	sourceGoogleAnalyticsV4 := new(SourceGoogleAnalyticsV4)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceGoogleAnalyticsV4); err == nil {
		u.SourceGoogleAnalyticsV4 = sourceGoogleAnalyticsV4
		u.Type = SourceConfigurationTypeSourceGoogleAnalyticsV4
		return nil
	}

	sourceGoogleDirectory := new(SourceGoogleDirectory)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceGoogleDirectory); err == nil {
		u.SourceGoogleDirectory = sourceGoogleDirectory
		u.Type = SourceConfigurationTypeSourceGoogleDirectory
		return nil
	}

	sourceGoogleSearchConsole := new(SourceGoogleSearchConsole)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceGoogleSearchConsole); err == nil {
		u.SourceGoogleSearchConsole = sourceGoogleSearchConsole
		u.Type = SourceConfigurationTypeSourceGoogleSearchConsole
		return nil
	}

	sourceGoogleSheets := new(SourceGoogleSheets)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceGoogleSheets); err == nil {
		u.SourceGoogleSheets = sourceGoogleSheets
		u.Type = SourceConfigurationTypeSourceGoogleSheets
		return nil
	}

	sourceGoogleWebfonts := new(SourceGoogleWebfonts)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceGoogleWebfonts); err == nil {
		u.SourceGoogleWebfonts = sourceGoogleWebfonts
		u.Type = SourceConfigurationTypeSourceGoogleWebfonts
		return nil
	}

	sourceGoogleWorkspaceAdminReports := new(SourceGoogleWorkspaceAdminReports)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceGoogleWorkspaceAdminReports); err == nil {
		u.SourceGoogleWorkspaceAdminReports = sourceGoogleWorkspaceAdminReports
		u.Type = SourceConfigurationTypeSourceGoogleWorkspaceAdminReports
		return nil
	}

	sourceGreenhouse := new(SourceGreenhouse)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceGreenhouse); err == nil {
		u.SourceGreenhouse = sourceGreenhouse
		u.Type = SourceConfigurationTypeSourceGreenhouse
		return nil
	}

	sourceGridly := new(SourceGridly)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceGridly); err == nil {
		u.SourceGridly = sourceGridly
		u.Type = SourceConfigurationTypeSourceGridly
		return nil
	}

	sourceHarvest := new(SourceHarvest)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceHarvest); err == nil {
		u.SourceHarvest = sourceHarvest
		u.Type = SourceConfigurationTypeSourceHarvest
		return nil
	}

	sourceHubplanner := new(SourceHubplanner)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceHubplanner); err == nil {
		u.SourceHubplanner = sourceHubplanner
		u.Type = SourceConfigurationTypeSourceHubplanner
		return nil
	}

	sourceHubspot := new(SourceHubspot)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceHubspot); err == nil {
		u.SourceHubspot = sourceHubspot
		u.Type = SourceConfigurationTypeSourceHubspot
		return nil
	}

	sourceInsightly := new(SourceInsightly)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceInsightly); err == nil {
		u.SourceInsightly = sourceInsightly
		u.Type = SourceConfigurationTypeSourceInsightly
		return nil
	}

	sourceInstagram := new(SourceInstagram)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceInstagram); err == nil {
		u.SourceInstagram = sourceInstagram
		u.Type = SourceConfigurationTypeSourceInstagram
		return nil
	}

	sourceInstatus := new(SourceInstatus)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceInstatus); err == nil {
		u.SourceInstatus = sourceInstatus
		u.Type = SourceConfigurationTypeSourceInstatus
		return nil
	}

	sourceIntercom := new(SourceIntercom)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceIntercom); err == nil {
		u.SourceIntercom = sourceIntercom
		u.Type = SourceConfigurationTypeSourceIntercom
		return nil
	}

	sourceIp2whois := new(SourceIp2whois)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceIp2whois); err == nil {
		u.SourceIp2whois = sourceIp2whois
		u.Type = SourceConfigurationTypeSourceIp2whois
		return nil
	}

	sourceIterable := new(SourceIterable)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceIterable); err == nil {
		u.SourceIterable = sourceIterable
		u.Type = SourceConfigurationTypeSourceIterable
		return nil
	}

	sourceJira := new(SourceJira)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceJira); err == nil {
		u.SourceJira = sourceJira
		u.Type = SourceConfigurationTypeSourceJira
		return nil
	}

	sourceK6Cloud := new(SourceK6Cloud)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceK6Cloud); err == nil {
		u.SourceK6Cloud = sourceK6Cloud
		u.Type = SourceConfigurationTypeSourceK6Cloud
		return nil
	}

	sourceKlarna := new(SourceKlarna)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceKlarna); err == nil {
		u.SourceKlarna = sourceKlarna
		u.Type = SourceConfigurationTypeSourceKlarna
		return nil
	}

	sourceKlaviyo := new(SourceKlaviyo)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceKlaviyo); err == nil {
		u.SourceKlaviyo = sourceKlaviyo
		u.Type = SourceConfigurationTypeSourceKlaviyo
		return nil
	}

	sourceKustomerSinger := new(SourceKustomerSinger)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceKustomerSinger); err == nil {
		u.SourceKustomerSinger = sourceKustomerSinger
		u.Type = SourceConfigurationTypeSourceKustomerSinger
		return nil
	}

	sourceLaunchdarkly := new(SourceLaunchdarkly)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceLaunchdarkly); err == nil {
		u.SourceLaunchdarkly = sourceLaunchdarkly
		u.Type = SourceConfigurationTypeSourceLaunchdarkly
		return nil
	}

	sourceLemlist := new(SourceLemlist)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceLemlist); err == nil {
		u.SourceLemlist = sourceLemlist
		u.Type = SourceConfigurationTypeSourceLemlist
		return nil
	}

	sourceLinkedinAds := new(SourceLinkedinAds)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceLinkedinAds); err == nil {
		u.SourceLinkedinAds = sourceLinkedinAds
		u.Type = SourceConfigurationTypeSourceLinkedinAds
		return nil
	}

	sourceLinkedinPages := new(SourceLinkedinPages)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceLinkedinPages); err == nil {
		u.SourceLinkedinPages = sourceLinkedinPages
		u.Type = SourceConfigurationTypeSourceLinkedinPages
		return nil
	}

	sourceLinnworks := new(SourceLinnworks)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceLinnworks); err == nil {
		u.SourceLinnworks = sourceLinnworks
		u.Type = SourceConfigurationTypeSourceLinnworks
		return nil
	}

	sourceLokalise := new(SourceLokalise)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceLokalise); err == nil {
		u.SourceLokalise = sourceLokalise
		u.Type = SourceConfigurationTypeSourceLokalise
		return nil
	}

	sourceMailchimp := new(SourceMailchimp)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceMailchimp); err == nil {
		u.SourceMailchimp = sourceMailchimp
		u.Type = SourceConfigurationTypeSourceMailchimp
		return nil
	}

	sourceMailgun := new(SourceMailgun)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceMailgun); err == nil {
		u.SourceMailgun = sourceMailgun
		u.Type = SourceConfigurationTypeSourceMailgun
		return nil
	}

	sourceMailjetSms := new(SourceMailjetSms)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceMailjetSms); err == nil {
		u.SourceMailjetSms = sourceMailjetSms
		u.Type = SourceConfigurationTypeSourceMailjetSms
		return nil
	}

	sourceMarketo := new(SourceMarketo)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceMarketo); err == nil {
		u.SourceMarketo = sourceMarketo
		u.Type = SourceConfigurationTypeSourceMarketo
		return nil
	}

	sourceMetabase := new(SourceMetabase)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceMetabase); err == nil {
		u.SourceMetabase = sourceMetabase
		u.Type = SourceConfigurationTypeSourceMetabase
		return nil
	}

	sourceMicrosoftTeams := new(SourceMicrosoftTeams)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceMicrosoftTeams); err == nil {
		u.SourceMicrosoftTeams = sourceMicrosoftTeams
		u.Type = SourceConfigurationTypeSourceMicrosoftTeams
		return nil
	}

	sourceMixpanel := new(SourceMixpanel)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceMixpanel); err == nil {
		u.SourceMixpanel = sourceMixpanel
		u.Type = SourceConfigurationTypeSourceMixpanel
		return nil
	}

	sourceMonday := new(SourceMonday)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceMonday); err == nil {
		u.SourceMonday = sourceMonday
		u.Type = SourceConfigurationTypeSourceMonday
		return nil
	}

	sourceMongodb := new(SourceMongodb)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceMongodb); err == nil {
		u.SourceMongodb = sourceMongodb
		u.Type = SourceConfigurationTypeSourceMongodb
		return nil
	}

	sourceMssql := new(SourceMssql)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceMssql); err == nil {
		u.SourceMssql = sourceMssql
		u.Type = SourceConfigurationTypeSourceMssql
		return nil
	}

	sourceMyHours := new(SourceMyHours)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceMyHours); err == nil {
		u.SourceMyHours = sourceMyHours
		u.Type = SourceConfigurationTypeSourceMyHours
		return nil
	}

	sourceMysql := new(SourceMysql)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceMysql); err == nil {
		u.SourceMysql = sourceMysql
		u.Type = SourceConfigurationTypeSourceMysql
		return nil
	}

	sourceNetsuite := new(SourceNetsuite)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceNetsuite); err == nil {
		u.SourceNetsuite = sourceNetsuite
		u.Type = SourceConfigurationTypeSourceNetsuite
		return nil
	}

	sourceNotion := new(SourceNotion)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceNotion); err == nil {
		u.SourceNotion = sourceNotion
		u.Type = SourceConfigurationTypeSourceNotion
		return nil
	}

	sourceNytimes := new(SourceNytimes)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceNytimes); err == nil {
		u.SourceNytimes = sourceNytimes
		u.Type = SourceConfigurationTypeSourceNytimes
		return nil
	}

	sourceOkta := new(SourceOkta)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceOkta); err == nil {
		u.SourceOkta = sourceOkta
		u.Type = SourceConfigurationTypeSourceOkta
		return nil
	}

	sourceOmnisend := new(SourceOmnisend)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceOmnisend); err == nil {
		u.SourceOmnisend = sourceOmnisend
		u.Type = SourceConfigurationTypeSourceOmnisend
		return nil
	}

	sourceOnesignal := new(SourceOnesignal)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceOnesignal); err == nil {
		u.SourceOnesignal = sourceOnesignal
		u.Type = SourceConfigurationTypeSourceOnesignal
		return nil
	}

	sourceOpenweather := new(SourceOpenweather)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceOpenweather); err == nil {
		u.SourceOpenweather = sourceOpenweather
		u.Type = SourceConfigurationTypeSourceOpenweather
		return nil
	}

	sourceOracle := new(SourceOracle)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceOracle); err == nil {
		u.SourceOracle = sourceOracle
		u.Type = SourceConfigurationTypeSourceOracle
		return nil
	}

	sourceOrb := new(SourceOrb)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceOrb); err == nil {
		u.SourceOrb = sourceOrb
		u.Type = SourceConfigurationTypeSourceOrb
		return nil
	}

	sourceOrbit := new(SourceOrbit)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceOrbit); err == nil {
		u.SourceOrbit = sourceOrbit
		u.Type = SourceConfigurationTypeSourceOrbit
		return nil
	}

	sourceOutreach := new(SourceOutreach)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceOutreach); err == nil {
		u.SourceOutreach = sourceOutreach
		u.Type = SourceConfigurationTypeSourceOutreach
		return nil
	}

	sourcePaypalTransaction := new(SourcePaypalTransaction)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourcePaypalTransaction); err == nil {
		u.SourcePaypalTransaction = sourcePaypalTransaction
		u.Type = SourceConfigurationTypeSourcePaypalTransaction
		return nil
	}

	sourcePaystack := new(SourcePaystack)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourcePaystack); err == nil {
		u.SourcePaystack = sourcePaystack
		u.Type = SourceConfigurationTypeSourcePaystack
		return nil
	}

	sourcePendo := new(SourcePendo)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourcePendo); err == nil {
		u.SourcePendo = sourcePendo
		u.Type = SourceConfigurationTypeSourcePendo
		return nil
	}

	sourcePersistiq := new(SourcePersistiq)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourcePersistiq); err == nil {
		u.SourcePersistiq = sourcePersistiq
		u.Type = SourceConfigurationTypeSourcePersistiq
		return nil
	}

	sourcePexelsAPI := new(SourcePexelsAPI)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourcePexelsAPI); err == nil {
		u.SourcePexelsAPI = sourcePexelsAPI
		u.Type = SourceConfigurationTypeSourcePexelsAPI
		return nil
	}

	sourcePinterest := new(SourcePinterest)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourcePinterest); err == nil {
		u.SourcePinterest = sourcePinterest
		u.Type = SourceConfigurationTypeSourcePinterest
		return nil
	}

	sourcePipedrive := new(SourcePipedrive)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourcePipedrive); err == nil {
		u.SourcePipedrive = sourcePipedrive
		u.Type = SourceConfigurationTypeSourcePipedrive
		return nil
	}

	sourcePocket := new(SourcePocket)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourcePocket); err == nil {
		u.SourcePocket = sourcePocket
		u.Type = SourceConfigurationTypeSourcePocket
		return nil
	}

	sourcePolygonStockAPI := new(SourcePolygonStockAPI)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourcePolygonStockAPI); err == nil {
		u.SourcePolygonStockAPI = sourcePolygonStockAPI
		u.Type = SourceConfigurationTypeSourcePolygonStockAPI
		return nil
	}

	sourcePostgres := new(SourcePostgres)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourcePostgres); err == nil {
		u.SourcePostgres = sourcePostgres
		u.Type = SourceConfigurationTypeSourcePostgres
		return nil
	}

	sourcePosthog := new(SourcePosthog)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourcePosthog); err == nil {
		u.SourcePosthog = sourcePosthog
		u.Type = SourceConfigurationTypeSourcePosthog
		return nil
	}

	sourcePostmarkapp := new(SourcePostmarkapp)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourcePostmarkapp); err == nil {
		u.SourcePostmarkapp = sourcePostmarkapp
		u.Type = SourceConfigurationTypeSourcePostmarkapp
		return nil
	}

	sourcePrestashop := new(SourcePrestashop)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourcePrestashop); err == nil {
		u.SourcePrestashop = sourcePrestashop
		u.Type = SourceConfigurationTypeSourcePrestashop
		return nil
	}

	sourcePublicApis := new(SourcePublicApis)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourcePublicApis); err == nil {
		u.SourcePublicApis = sourcePublicApis
		u.Type = SourceConfigurationTypeSourcePublicApis
		return nil
	}

	sourcePunkAPI := new(SourcePunkAPI)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourcePunkAPI); err == nil {
		u.SourcePunkAPI = sourcePunkAPI
		u.Type = SourceConfigurationTypeSourcePunkAPI
		return nil
	}

	sourcePypi := new(SourcePypi)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourcePypi); err == nil {
		u.SourcePypi = sourcePypi
		u.Type = SourceConfigurationTypeSourcePypi
		return nil
	}

	sourceQualaroo := new(SourceQualaroo)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceQualaroo); err == nil {
		u.SourceQualaroo = sourceQualaroo
		u.Type = SourceConfigurationTypeSourceQualaroo
		return nil
	}

	sourceQuickbooks := new(SourceQuickbooks)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceQuickbooks); err == nil {
		u.SourceQuickbooks = sourceQuickbooks
		u.Type = SourceConfigurationTypeSourceQuickbooks
		return nil
	}

	sourceRailz := new(SourceRailz)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceRailz); err == nil {
		u.SourceRailz = sourceRailz
		u.Type = SourceConfigurationTypeSourceRailz
		return nil
	}

	sourceRecharge := new(SourceRecharge)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceRecharge); err == nil {
		u.SourceRecharge = sourceRecharge
		u.Type = SourceConfigurationTypeSourceRecharge
		return nil
	}

	sourceRecreation := new(SourceRecreation)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceRecreation); err == nil {
		u.SourceRecreation = sourceRecreation
		u.Type = SourceConfigurationTypeSourceRecreation
		return nil
	}

	sourceRecruitee := new(SourceRecruitee)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceRecruitee); err == nil {
		u.SourceRecruitee = sourceRecruitee
		u.Type = SourceConfigurationTypeSourceRecruitee
		return nil
	}

	sourceRecurly := new(SourceRecurly)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceRecurly); err == nil {
		u.SourceRecurly = sourceRecurly
		u.Type = SourceConfigurationTypeSourceRecurly
		return nil
	}

	sourceRedshift := new(SourceRedshift)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceRedshift); err == nil {
		u.SourceRedshift = sourceRedshift
		u.Type = SourceConfigurationTypeSourceRedshift
		return nil
	}

	sourceRetently := new(SourceRetently)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceRetently); err == nil {
		u.SourceRetently = sourceRetently
		u.Type = SourceConfigurationTypeSourceRetently
		return nil
	}

	sourceRkiCovid := new(SourceRkiCovid)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceRkiCovid); err == nil {
		u.SourceRkiCovid = sourceRkiCovid
		u.Type = SourceConfigurationTypeSourceRkiCovid
		return nil
	}

	sourceRss := new(SourceRss)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceRss); err == nil {
		u.SourceRss = sourceRss
		u.Type = SourceConfigurationTypeSourceRss
		return nil
	}

	sourceS3 := new(SourceS3)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceS3); err == nil {
		u.SourceS3 = sourceS3
		u.Type = SourceConfigurationTypeSourceS3
		return nil
	}

	sourceSalesforce := new(SourceSalesforce)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceSalesforce); err == nil {
		u.SourceSalesforce = sourceSalesforce
		u.Type = SourceConfigurationTypeSourceSalesforce
		return nil
	}

	sourceSalesforceSinger := new(SourceSalesforceSinger)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceSalesforceSinger); err == nil {
		u.SourceSalesforceSinger = sourceSalesforceSinger
		u.Type = SourceConfigurationTypeSourceSalesforceSinger
		return nil
	}

	sourceSalesloft := new(SourceSalesloft)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceSalesloft); err == nil {
		u.SourceSalesloft = sourceSalesloft
		u.Type = SourceConfigurationTypeSourceSalesloft
		return nil
	}

	sourceSapFieldglass := new(SourceSapFieldglass)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceSapFieldglass); err == nil {
		u.SourceSapFieldglass = sourceSapFieldglass
		u.Type = SourceConfigurationTypeSourceSapFieldglass
		return nil
	}

	sourceSecoda := new(SourceSecoda)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceSecoda); err == nil {
		u.SourceSecoda = sourceSecoda
		u.Type = SourceConfigurationTypeSourceSecoda
		return nil
	}

	sourceSendgrid := new(SourceSendgrid)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceSendgrid); err == nil {
		u.SourceSendgrid = sourceSendgrid
		u.Type = SourceConfigurationTypeSourceSendgrid
		return nil
	}

	sourceSendinblue := new(SourceSendinblue)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceSendinblue); err == nil {
		u.SourceSendinblue = sourceSendinblue
		u.Type = SourceConfigurationTypeSourceSendinblue
		return nil
	}

	sourceSenseforce := new(SourceSenseforce)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceSenseforce); err == nil {
		u.SourceSenseforce = sourceSenseforce
		u.Type = SourceConfigurationTypeSourceSenseforce
		return nil
	}

	sourceSentry := new(SourceSentry)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceSentry); err == nil {
		u.SourceSentry = sourceSentry
		u.Type = SourceConfigurationTypeSourceSentry
		return nil
	}

	sourceSftp := new(SourceSftp)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceSftp); err == nil {
		u.SourceSftp = sourceSftp
		u.Type = SourceConfigurationTypeSourceSftp
		return nil
	}

	sourceSftpBulk := new(SourceSftpBulk)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceSftpBulk); err == nil {
		u.SourceSftpBulk = sourceSftpBulk
		u.Type = SourceConfigurationTypeSourceSftpBulk
		return nil
	}

	sourceShopify := new(SourceShopify)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceShopify); err == nil {
		u.SourceShopify = sourceShopify
		u.Type = SourceConfigurationTypeSourceShopify
		return nil
	}

	sourceShortio := new(SourceShortio)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceShortio); err == nil {
		u.SourceShortio = sourceShortio
		u.Type = SourceConfigurationTypeSourceShortio
		return nil
	}

	sourceSlack := new(SourceSlack)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceSlack); err == nil {
		u.SourceSlack = sourceSlack
		u.Type = SourceConfigurationTypeSourceSlack
		return nil
	}

	sourceSmaily := new(SourceSmaily)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceSmaily); err == nil {
		u.SourceSmaily = sourceSmaily
		u.Type = SourceConfigurationTypeSourceSmaily
		return nil
	}

	sourceSmartengage := new(SourceSmartengage)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceSmartengage); err == nil {
		u.SourceSmartengage = sourceSmartengage
		u.Type = SourceConfigurationTypeSourceSmartengage
		return nil
	}

	sourceSmartsheets := new(SourceSmartsheets)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceSmartsheets); err == nil {
		u.SourceSmartsheets = sourceSmartsheets
		u.Type = SourceConfigurationTypeSourceSmartsheets
		return nil
	}

	sourceSnapchatMarketing := new(SourceSnapchatMarketing)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceSnapchatMarketing); err == nil {
		u.SourceSnapchatMarketing = sourceSnapchatMarketing
		u.Type = SourceConfigurationTypeSourceSnapchatMarketing
		return nil
	}

	sourceSnowflake := new(SourceSnowflake)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceSnowflake); err == nil {
		u.SourceSnowflake = sourceSnowflake
		u.Type = SourceConfigurationTypeSourceSnowflake
		return nil
	}

	sourceSonarCloud := new(SourceSonarCloud)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceSonarCloud); err == nil {
		u.SourceSonarCloud = sourceSonarCloud
		u.Type = SourceConfigurationTypeSourceSonarCloud
		return nil
	}

	sourceSpacexAPI := new(SourceSpacexAPI)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceSpacexAPI); err == nil {
		u.SourceSpacexAPI = sourceSpacexAPI
		u.Type = SourceConfigurationTypeSourceSpacexAPI
		return nil
	}

	sourceSquare := new(SourceSquare)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceSquare); err == nil {
		u.SourceSquare = sourceSquare
		u.Type = SourceConfigurationTypeSourceSquare
		return nil
	}

	sourceStrava := new(SourceStrava)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceStrava); err == nil {
		u.SourceStrava = sourceStrava
		u.Type = SourceConfigurationTypeSourceStrava
		return nil
	}

	sourceStripe := new(SourceStripe)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceStripe); err == nil {
		u.SourceStripe = sourceStripe
		u.Type = SourceConfigurationTypeSourceStripe
		return nil
	}

	sourceSurveySparrow := new(SourceSurveySparrow)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceSurveySparrow); err == nil {
		u.SourceSurveySparrow = sourceSurveySparrow
		u.Type = SourceConfigurationTypeSourceSurveySparrow
		return nil
	}

	sourceSurveymonkey := new(SourceSurveymonkey)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceSurveymonkey); err == nil {
		u.SourceSurveymonkey = sourceSurveymonkey
		u.Type = SourceConfigurationTypeSourceSurveymonkey
		return nil
	}

	sourceTempo := new(SourceTempo)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceTempo); err == nil {
		u.SourceTempo = sourceTempo
		u.Type = SourceConfigurationTypeSourceTempo
		return nil
	}

	sourceTheGuardianAPI := new(SourceTheGuardianAPI)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceTheGuardianAPI); err == nil {
		u.SourceTheGuardianAPI = sourceTheGuardianAPI
		u.Type = SourceConfigurationTypeSourceTheGuardianAPI
		return nil
	}

	sourceTiktokMarketing := new(SourceTiktokMarketing)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceTiktokMarketing); err == nil {
		u.SourceTiktokMarketing = sourceTiktokMarketing
		u.Type = SourceConfigurationTypeSourceTiktokMarketing
		return nil
	}

	sourceTodoist := new(SourceTodoist)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceTodoist); err == nil {
		u.SourceTodoist = sourceTodoist
		u.Type = SourceConfigurationTypeSourceTodoist
		return nil
	}

	sourceTrello := new(SourceTrello)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceTrello); err == nil {
		u.SourceTrello = sourceTrello
		u.Type = SourceConfigurationTypeSourceTrello
		return nil
	}

	sourceTrustpilot := new(SourceTrustpilot)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceTrustpilot); err == nil {
		u.SourceTrustpilot = sourceTrustpilot
		u.Type = SourceConfigurationTypeSourceTrustpilot
		return nil
	}

	sourceTvmazeSchedule := new(SourceTvmazeSchedule)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceTvmazeSchedule); err == nil {
		u.SourceTvmazeSchedule = sourceTvmazeSchedule
		u.Type = SourceConfigurationTypeSourceTvmazeSchedule
		return nil
	}

	sourceTwilio := new(SourceTwilio)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceTwilio); err == nil {
		u.SourceTwilio = sourceTwilio
		u.Type = SourceConfigurationTypeSourceTwilio
		return nil
	}

	sourceTwilioTaskrouter := new(SourceTwilioTaskrouter)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceTwilioTaskrouter); err == nil {
		u.SourceTwilioTaskrouter = sourceTwilioTaskrouter
		u.Type = SourceConfigurationTypeSourceTwilioTaskrouter
		return nil
	}

	sourceTwitter := new(SourceTwitter)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceTwitter); err == nil {
		u.SourceTwitter = sourceTwitter
		u.Type = SourceConfigurationTypeSourceTwitter
		return nil
	}

	sourceTypeform := new(SourceTypeform)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceTypeform); err == nil {
		u.SourceTypeform = sourceTypeform
		u.Type = SourceConfigurationTypeSourceTypeform
		return nil
	}

	sourceUsCensus := new(SourceUsCensus)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceUsCensus); err == nil {
		u.SourceUsCensus = sourceUsCensus
		u.Type = SourceConfigurationTypeSourceUsCensus
		return nil
	}

	sourceVantage := new(SourceVantage)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceVantage); err == nil {
		u.SourceVantage = sourceVantage
		u.Type = SourceConfigurationTypeSourceVantage
		return nil
	}

	sourceWebflow := new(SourceWebflow)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceWebflow); err == nil {
		u.SourceWebflow = sourceWebflow
		u.Type = SourceConfigurationTypeSourceWebflow
		return nil
	}

	sourceWhiskyHunter := new(SourceWhiskyHunter)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceWhiskyHunter); err == nil {
		u.SourceWhiskyHunter = sourceWhiskyHunter
		u.Type = SourceConfigurationTypeSourceWhiskyHunter
		return nil
	}

	sourceWikipediaPageviews := new(SourceWikipediaPageviews)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceWikipediaPageviews); err == nil {
		u.SourceWikipediaPageviews = sourceWikipediaPageviews
		u.Type = SourceConfigurationTypeSourceWikipediaPageviews
		return nil
	}

	sourceWoocommerce := new(SourceWoocommerce)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceWoocommerce); err == nil {
		u.SourceWoocommerce = sourceWoocommerce
		u.Type = SourceConfigurationTypeSourceWoocommerce
		return nil
	}

	sourceXero := new(SourceXero)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceXero); err == nil {
		u.SourceXero = sourceXero
		u.Type = SourceConfigurationTypeSourceXero
		return nil
	}

	sourceXkcd := new(SourceXkcd)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceXkcd); err == nil {
		u.SourceXkcd = sourceXkcd
		u.Type = SourceConfigurationTypeSourceXkcd
		return nil
	}

	sourceYandexMetrica := new(SourceYandexMetrica)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceYandexMetrica); err == nil {
		u.SourceYandexMetrica = sourceYandexMetrica
		u.Type = SourceConfigurationTypeSourceYandexMetrica
		return nil
	}

	sourceYounium := new(SourceYounium)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceYounium); err == nil {
		u.SourceYounium = sourceYounium
		u.Type = SourceConfigurationTypeSourceYounium
		return nil
	}

	sourceYoutubeAnalytics := new(SourceYoutubeAnalytics)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceYoutubeAnalytics); err == nil {
		u.SourceYoutubeAnalytics = sourceYoutubeAnalytics
		u.Type = SourceConfigurationTypeSourceYoutubeAnalytics
		return nil
	}

	sourceZendeskChat := new(SourceZendeskChat)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceZendeskChat); err == nil {
		u.SourceZendeskChat = sourceZendeskChat
		u.Type = SourceConfigurationTypeSourceZendeskChat
		return nil
	}

	sourceZendeskSunshine := new(SourceZendeskSunshine)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceZendeskSunshine); err == nil {
		u.SourceZendeskSunshine = sourceZendeskSunshine
		u.Type = SourceConfigurationTypeSourceZendeskSunshine
		return nil
	}

	sourceZendeskSupport := new(SourceZendeskSupport)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceZendeskSupport); err == nil {
		u.SourceZendeskSupport = sourceZendeskSupport
		u.Type = SourceConfigurationTypeSourceZendeskSupport
		return nil
	}

	sourceZendeskTalk := new(SourceZendeskTalk)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceZendeskTalk); err == nil {
		u.SourceZendeskTalk = sourceZendeskTalk
		u.Type = SourceConfigurationTypeSourceZendeskTalk
		return nil
	}

	sourceZenloop := new(SourceZenloop)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceZenloop); err == nil {
		u.SourceZenloop = sourceZenloop
		u.Type = SourceConfigurationTypeSourceZenloop
		return nil
	}

	sourceZohoCrm := new(SourceZohoCrm)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceZohoCrm); err == nil {
		u.SourceZohoCrm = sourceZohoCrm
		u.Type = SourceConfigurationTypeSourceZohoCrm
		return nil
	}

	sourceZoom := new(SourceZoom)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceZoom); err == nil {
		u.SourceZoom = sourceZoom
		u.Type = SourceConfigurationTypeSourceZoom
		return nil
	}

	sourceZuora := new(SourceZuora)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceZuora); err == nil {
		u.SourceZuora = sourceZuora
		u.Type = SourceConfigurationTypeSourceZuora
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceConfiguration) MarshalJSON() ([]byte, error) {
	if u.SourcePokeapi != nil {
		return json.Marshal(u.SourcePokeapi)
	}

	if u.SourceAirtable != nil {
		return json.Marshal(u.SourceAirtable)
	}

	if u.SourceAlloydb != nil {
		return json.Marshal(u.SourceAlloydb)
	}

	if u.SourceAmazonAds != nil {
		return json.Marshal(u.SourceAmazonAds)
	}

	if u.SourceAmazonSellerPartner != nil {
		return json.Marshal(u.SourceAmazonSellerPartner)
	}

	if u.SourceAmazonSqs != nil {
		return json.Marshal(u.SourceAmazonSqs)
	}

	if u.SourceAmplitude != nil {
		return json.Marshal(u.SourceAmplitude)
	}

	if u.SourceApifyDataset != nil {
		return json.Marshal(u.SourceApifyDataset)
	}

	if u.SourceAsana != nil {
		return json.Marshal(u.SourceAsana)
	}

	if u.SourceAuth0 != nil {
		return json.Marshal(u.SourceAuth0)
	}

	if u.SourceAwsCloudtrail != nil {
		return json.Marshal(u.SourceAwsCloudtrail)
	}

	if u.SourceAzureBlobStorage != nil {
		return json.Marshal(u.SourceAzureBlobStorage)
	}

	if u.SourceAzureTable != nil {
		return json.Marshal(u.SourceAzureTable)
	}

	if u.SourceBambooHr != nil {
		return json.Marshal(u.SourceBambooHr)
	}

	if u.SourceBigcommerce != nil {
		return json.Marshal(u.SourceBigcommerce)
	}

	if u.SourceBigquery != nil {
		return json.Marshal(u.SourceBigquery)
	}

	if u.SourceBingAds != nil {
		return json.Marshal(u.SourceBingAds)
	}

	if u.SourceBraintree != nil {
		return json.Marshal(u.SourceBraintree)
	}

	if u.SourceBraze != nil {
		return json.Marshal(u.SourceBraze)
	}

	if u.SourceChargebee != nil {
		return json.Marshal(u.SourceChargebee)
	}

	if u.SourceChartmogul != nil {
		return json.Marshal(u.SourceChartmogul)
	}

	if u.SourceClickhouse != nil {
		return json.Marshal(u.SourceClickhouse)
	}

	if u.SourceClickupAPI != nil {
		return json.Marshal(u.SourceClickupAPI)
	}

	if u.SourceCloseCom != nil {
		return json.Marshal(u.SourceCloseCom)
	}

	if u.SourceCoda != nil {
		return json.Marshal(u.SourceCoda)
	}

	if u.SourceCoinAPI != nil {
		return json.Marshal(u.SourceCoinAPI)
	}

	if u.SourceCoinmarketcap != nil {
		return json.Marshal(u.SourceCoinmarketcap)
	}

	if u.SourceConfigcat != nil {
		return json.Marshal(u.SourceConfigcat)
	}

	if u.SourceConfluence != nil {
		return json.Marshal(u.SourceConfluence)
	}

	if u.SourceDatascope != nil {
		return json.Marshal(u.SourceDatascope)
	}

	if u.SourceDelighted != nil {
		return json.Marshal(u.SourceDelighted)
	}

	if u.SourceDixa != nil {
		return json.Marshal(u.SourceDixa)
	}

	if u.SourceDockerhub != nil {
		return json.Marshal(u.SourceDockerhub)
	}

	if u.SourceDremio != nil {
		return json.Marshal(u.SourceDremio)
	}

	if u.SourceDynamodb != nil {
		return json.Marshal(u.SourceDynamodb)
	}

	if u.SourceE2eTestCloud != nil {
		return json.Marshal(u.SourceE2eTestCloud)
	}

	if u.SourceEmailoctopus != nil {
		return json.Marshal(u.SourceEmailoctopus)
	}

	if u.SourceExchangeRates != nil {
		return json.Marshal(u.SourceExchangeRates)
	}

	if u.SourceFacebookMarketing != nil {
		return json.Marshal(u.SourceFacebookMarketing)
	}

	if u.SourceFacebookPages != nil {
		return json.Marshal(u.SourceFacebookPages)
	}

	if u.SourceFaker != nil {
		return json.Marshal(u.SourceFaker)
	}

	if u.SourceFauna != nil {
		return json.Marshal(u.SourceFauna)
	}

	if u.SourceFileSecure != nil {
		return json.Marshal(u.SourceFileSecure)
	}

	if u.SourceFirebolt != nil {
		return json.Marshal(u.SourceFirebolt)
	}

	if u.SourceFreshcaller != nil {
		return json.Marshal(u.SourceFreshcaller)
	}

	if u.SourceFreshdesk != nil {
		return json.Marshal(u.SourceFreshdesk)
	}

	if u.SourceFreshsales != nil {
		return json.Marshal(u.SourceFreshsales)
	}

	if u.SourceGcs != nil {
		return json.Marshal(u.SourceGcs)
	}

	if u.SourceGetlago != nil {
		return json.Marshal(u.SourceGetlago)
	}

	if u.SourceGithub != nil {
		return json.Marshal(u.SourceGithub)
	}

	if u.SourceGitlab != nil {
		return json.Marshal(u.SourceGitlab)
	}

	if u.SourceGlassfrog != nil {
		return json.Marshal(u.SourceGlassfrog)
	}

	if u.SourceGnews != nil {
		return json.Marshal(u.SourceGnews)
	}

	if u.SourceGoogleAds != nil {
		return json.Marshal(u.SourceGoogleAds)
	}

	if u.SourceGoogleAnalyticsDataAPI != nil {
		return json.Marshal(u.SourceGoogleAnalyticsDataAPI)
	}

	if u.SourceGoogleAnalyticsV4 != nil {
		return json.Marshal(u.SourceGoogleAnalyticsV4)
	}

	if u.SourceGoogleDirectory != nil {
		return json.Marshal(u.SourceGoogleDirectory)
	}

	if u.SourceGoogleSearchConsole != nil {
		return json.Marshal(u.SourceGoogleSearchConsole)
	}

	if u.SourceGoogleSheets != nil {
		return json.Marshal(u.SourceGoogleSheets)
	}

	if u.SourceGoogleWebfonts != nil {
		return json.Marshal(u.SourceGoogleWebfonts)
	}

	if u.SourceGoogleWorkspaceAdminReports != nil {
		return json.Marshal(u.SourceGoogleWorkspaceAdminReports)
	}

	if u.SourceGreenhouse != nil {
		return json.Marshal(u.SourceGreenhouse)
	}

	if u.SourceGridly != nil {
		return json.Marshal(u.SourceGridly)
	}

	if u.SourceHarvest != nil {
		return json.Marshal(u.SourceHarvest)
	}

	if u.SourceHubplanner != nil {
		return json.Marshal(u.SourceHubplanner)
	}

	if u.SourceHubspot != nil {
		return json.Marshal(u.SourceHubspot)
	}

	if u.SourceInsightly != nil {
		return json.Marshal(u.SourceInsightly)
	}

	if u.SourceInstagram != nil {
		return json.Marshal(u.SourceInstagram)
	}

	if u.SourceInstatus != nil {
		return json.Marshal(u.SourceInstatus)
	}

	if u.SourceIntercom != nil {
		return json.Marshal(u.SourceIntercom)
	}

	if u.SourceIp2whois != nil {
		return json.Marshal(u.SourceIp2whois)
	}

	if u.SourceIterable != nil {
		return json.Marshal(u.SourceIterable)
	}

	if u.SourceJira != nil {
		return json.Marshal(u.SourceJira)
	}

	if u.SourceK6Cloud != nil {
		return json.Marshal(u.SourceK6Cloud)
	}

	if u.SourceKlarna != nil {
		return json.Marshal(u.SourceKlarna)
	}

	if u.SourceKlaviyo != nil {
		return json.Marshal(u.SourceKlaviyo)
	}

	if u.SourceKustomerSinger != nil {
		return json.Marshal(u.SourceKustomerSinger)
	}

	if u.SourceLaunchdarkly != nil {
		return json.Marshal(u.SourceLaunchdarkly)
	}

	if u.SourceLemlist != nil {
		return json.Marshal(u.SourceLemlist)
	}

	if u.SourceLinkedinAds != nil {
		return json.Marshal(u.SourceLinkedinAds)
	}

	if u.SourceLinkedinPages != nil {
		return json.Marshal(u.SourceLinkedinPages)
	}

	if u.SourceLinnworks != nil {
		return json.Marshal(u.SourceLinnworks)
	}

	if u.SourceLokalise != nil {
		return json.Marshal(u.SourceLokalise)
	}

	if u.SourceMailchimp != nil {
		return json.Marshal(u.SourceMailchimp)
	}

	if u.SourceMailgun != nil {
		return json.Marshal(u.SourceMailgun)
	}

	if u.SourceMailjetSms != nil {
		return json.Marshal(u.SourceMailjetSms)
	}

	if u.SourceMarketo != nil {
		return json.Marshal(u.SourceMarketo)
	}

	if u.SourceMetabase != nil {
		return json.Marshal(u.SourceMetabase)
	}

	if u.SourceMicrosoftTeams != nil {
		return json.Marshal(u.SourceMicrosoftTeams)
	}

	if u.SourceMixpanel != nil {
		return json.Marshal(u.SourceMixpanel)
	}

	if u.SourceMonday != nil {
		return json.Marshal(u.SourceMonday)
	}

	if u.SourceMongodb != nil {
		return json.Marshal(u.SourceMongodb)
	}

	if u.SourceMssql != nil {
		return json.Marshal(u.SourceMssql)
	}

	if u.SourceMyHours != nil {
		return json.Marshal(u.SourceMyHours)
	}

	if u.SourceMysql != nil {
		return json.Marshal(u.SourceMysql)
	}

	if u.SourceNetsuite != nil {
		return json.Marshal(u.SourceNetsuite)
	}

	if u.SourceNotion != nil {
		return json.Marshal(u.SourceNotion)
	}

	if u.SourceNytimes != nil {
		return json.Marshal(u.SourceNytimes)
	}

	if u.SourceOkta != nil {
		return json.Marshal(u.SourceOkta)
	}

	if u.SourceOmnisend != nil {
		return json.Marshal(u.SourceOmnisend)
	}

	if u.SourceOnesignal != nil {
		return json.Marshal(u.SourceOnesignal)
	}

	if u.SourceOpenweather != nil {
		return json.Marshal(u.SourceOpenweather)
	}

	if u.SourceOracle != nil {
		return json.Marshal(u.SourceOracle)
	}

	if u.SourceOrb != nil {
		return json.Marshal(u.SourceOrb)
	}

	if u.SourceOrbit != nil {
		return json.Marshal(u.SourceOrbit)
	}

	if u.SourceOutreach != nil {
		return json.Marshal(u.SourceOutreach)
	}

	if u.SourcePaypalTransaction != nil {
		return json.Marshal(u.SourcePaypalTransaction)
	}

	if u.SourcePaystack != nil {
		return json.Marshal(u.SourcePaystack)
	}

	if u.SourcePendo != nil {
		return json.Marshal(u.SourcePendo)
	}

	if u.SourcePersistiq != nil {
		return json.Marshal(u.SourcePersistiq)
	}

	if u.SourcePexelsAPI != nil {
		return json.Marshal(u.SourcePexelsAPI)
	}

	if u.SourcePinterest != nil {
		return json.Marshal(u.SourcePinterest)
	}

	if u.SourcePipedrive != nil {
		return json.Marshal(u.SourcePipedrive)
	}

	if u.SourcePocket != nil {
		return json.Marshal(u.SourcePocket)
	}

	if u.SourcePolygonStockAPI != nil {
		return json.Marshal(u.SourcePolygonStockAPI)
	}

	if u.SourcePostgres != nil {
		return json.Marshal(u.SourcePostgres)
	}

	if u.SourcePosthog != nil {
		return json.Marshal(u.SourcePosthog)
	}

	if u.SourcePostmarkapp != nil {
		return json.Marshal(u.SourcePostmarkapp)
	}

	if u.SourcePrestashop != nil {
		return json.Marshal(u.SourcePrestashop)
	}

	if u.SourcePublicApis != nil {
		return json.Marshal(u.SourcePublicApis)
	}

	if u.SourcePunkAPI != nil {
		return json.Marshal(u.SourcePunkAPI)
	}

	if u.SourcePypi != nil {
		return json.Marshal(u.SourcePypi)
	}

	if u.SourceQualaroo != nil {
		return json.Marshal(u.SourceQualaroo)
	}

	if u.SourceQuickbooks != nil {
		return json.Marshal(u.SourceQuickbooks)
	}

	if u.SourceRailz != nil {
		return json.Marshal(u.SourceRailz)
	}

	if u.SourceRecharge != nil {
		return json.Marshal(u.SourceRecharge)
	}

	if u.SourceRecreation != nil {
		return json.Marshal(u.SourceRecreation)
	}

	if u.SourceRecruitee != nil {
		return json.Marshal(u.SourceRecruitee)
	}

	if u.SourceRecurly != nil {
		return json.Marshal(u.SourceRecurly)
	}

	if u.SourceRedshift != nil {
		return json.Marshal(u.SourceRedshift)
	}

	if u.SourceRetently != nil {
		return json.Marshal(u.SourceRetently)
	}

	if u.SourceRkiCovid != nil {
		return json.Marshal(u.SourceRkiCovid)
	}

	if u.SourceRss != nil {
		return json.Marshal(u.SourceRss)
	}

	if u.SourceS3 != nil {
		return json.Marshal(u.SourceS3)
	}

	if u.SourceSalesforce != nil {
		return json.Marshal(u.SourceSalesforce)
	}

	if u.SourceSalesforceSinger != nil {
		return json.Marshal(u.SourceSalesforceSinger)
	}

	if u.SourceSalesloft != nil {
		return json.Marshal(u.SourceSalesloft)
	}

	if u.SourceSapFieldglass != nil {
		return json.Marshal(u.SourceSapFieldglass)
	}

	if u.SourceSecoda != nil {
		return json.Marshal(u.SourceSecoda)
	}

	if u.SourceSendgrid != nil {
		return json.Marshal(u.SourceSendgrid)
	}

	if u.SourceSendinblue != nil {
		return json.Marshal(u.SourceSendinblue)
	}

	if u.SourceSenseforce != nil {
		return json.Marshal(u.SourceSenseforce)
	}

	if u.SourceSentry != nil {
		return json.Marshal(u.SourceSentry)
	}

	if u.SourceSftp != nil {
		return json.Marshal(u.SourceSftp)
	}

	if u.SourceSftpBulk != nil {
		return json.Marshal(u.SourceSftpBulk)
	}

	if u.SourceShopify != nil {
		return json.Marshal(u.SourceShopify)
	}

	if u.SourceShortio != nil {
		return json.Marshal(u.SourceShortio)
	}

	if u.SourceSlack != nil {
		return json.Marshal(u.SourceSlack)
	}

	if u.SourceSmaily != nil {
		return json.Marshal(u.SourceSmaily)
	}

	if u.SourceSmartengage != nil {
		return json.Marshal(u.SourceSmartengage)
	}

	if u.SourceSmartsheets != nil {
		return json.Marshal(u.SourceSmartsheets)
	}

	if u.SourceSnapchatMarketing != nil {
		return json.Marshal(u.SourceSnapchatMarketing)
	}

	if u.SourceSnowflake != nil {
		return json.Marshal(u.SourceSnowflake)
	}

	if u.SourceSonarCloud != nil {
		return json.Marshal(u.SourceSonarCloud)
	}

	if u.SourceSpacexAPI != nil {
		return json.Marshal(u.SourceSpacexAPI)
	}

	if u.SourceSquare != nil {
		return json.Marshal(u.SourceSquare)
	}

	if u.SourceStrava != nil {
		return json.Marshal(u.SourceStrava)
	}

	if u.SourceStripe != nil {
		return json.Marshal(u.SourceStripe)
	}

	if u.SourceSurveySparrow != nil {
		return json.Marshal(u.SourceSurveySparrow)
	}

	if u.SourceSurveymonkey != nil {
		return json.Marshal(u.SourceSurveymonkey)
	}

	if u.SourceTempo != nil {
		return json.Marshal(u.SourceTempo)
	}

	if u.SourceTheGuardianAPI != nil {
		return json.Marshal(u.SourceTheGuardianAPI)
	}

	if u.SourceTiktokMarketing != nil {
		return json.Marshal(u.SourceTiktokMarketing)
	}

	if u.SourceTodoist != nil {
		return json.Marshal(u.SourceTodoist)
	}

	if u.SourceTrello != nil {
		return json.Marshal(u.SourceTrello)
	}

	if u.SourceTrustpilot != nil {
		return json.Marshal(u.SourceTrustpilot)
	}

	if u.SourceTvmazeSchedule != nil {
		return json.Marshal(u.SourceTvmazeSchedule)
	}

	if u.SourceTwilio != nil {
		return json.Marshal(u.SourceTwilio)
	}

	if u.SourceTwilioTaskrouter != nil {
		return json.Marshal(u.SourceTwilioTaskrouter)
	}

	if u.SourceTwitter != nil {
		return json.Marshal(u.SourceTwitter)
	}

	if u.SourceTypeform != nil {
		return json.Marshal(u.SourceTypeform)
	}

	if u.SourceUsCensus != nil {
		return json.Marshal(u.SourceUsCensus)
	}

	if u.SourceVantage != nil {
		return json.Marshal(u.SourceVantage)
	}

	if u.SourceWebflow != nil {
		return json.Marshal(u.SourceWebflow)
	}

	if u.SourceWhiskyHunter != nil {
		return json.Marshal(u.SourceWhiskyHunter)
	}

	if u.SourceWikipediaPageviews != nil {
		return json.Marshal(u.SourceWikipediaPageviews)
	}

	if u.SourceWoocommerce != nil {
		return json.Marshal(u.SourceWoocommerce)
	}

	if u.SourceXero != nil {
		return json.Marshal(u.SourceXero)
	}

	if u.SourceXkcd != nil {
		return json.Marshal(u.SourceXkcd)
	}

	if u.SourceYandexMetrica != nil {
		return json.Marshal(u.SourceYandexMetrica)
	}

	if u.SourceYounium != nil {
		return json.Marshal(u.SourceYounium)
	}

	if u.SourceYoutubeAnalytics != nil {
		return json.Marshal(u.SourceYoutubeAnalytics)
	}

	if u.SourceZendeskChat != nil {
		return json.Marshal(u.SourceZendeskChat)
	}

	if u.SourceZendeskSunshine != nil {
		return json.Marshal(u.SourceZendeskSunshine)
	}

	if u.SourceZendeskSupport != nil {
		return json.Marshal(u.SourceZendeskSupport)
	}

	if u.SourceZendeskTalk != nil {
		return json.Marshal(u.SourceZendeskTalk)
	}

	if u.SourceZenloop != nil {
		return json.Marshal(u.SourceZenloop)
	}

	if u.SourceZohoCrm != nil {
		return json.Marshal(u.SourceZohoCrm)
	}

	if u.SourceZoom != nil {
		return json.Marshal(u.SourceZoom)
	}

	if u.SourceZuora != nil {
		return json.Marshal(u.SourceZuora)
	}

	return nil, nil
}
