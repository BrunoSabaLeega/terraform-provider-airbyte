// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

type SourceStravaAuthType string

const (
	SourceStravaAuthTypeClient SourceStravaAuthType = "Client"
)

func (e SourceStravaAuthType) ToPointer() *SourceStravaAuthType {
	return &e
}

func (e *SourceStravaAuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Client":
		*e = SourceStravaAuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceStravaAuthType: %v", v)
	}
}

type SourceStravaStrava string

const (
	SourceStravaStravaStrava SourceStravaStrava = "strava"
)

func (e SourceStravaStrava) ToPointer() *SourceStravaStrava {
	return &e
}

func (e *SourceStravaStrava) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "strava":
		*e = SourceStravaStrava(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceStravaStrava: %v", v)
	}
}

type SourceStrava struct {
	// The Athlete ID of your Strava developer application.
	AthleteID int64                 `json:"athlete_id"`
	AuthType  *SourceStravaAuthType `json:"auth_type,omitempty"`
	// The Client ID of your Strava developer application.
	ClientID string `json:"client_id"`
	// The Client Secret of your Strava developer application.
	ClientSecret string `json:"client_secret"`
	// The Refresh Token with the activity: read_all permissions.
	RefreshToken string             `json:"refresh_token"`
	SourceType   SourceStravaStrava `json:"sourceType"`
	// UTC date and time. Any data before this date will not be replicated.
	StartDate time.Time `json:"start_date"`
}
