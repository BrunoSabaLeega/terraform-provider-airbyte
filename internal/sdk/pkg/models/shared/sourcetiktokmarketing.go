// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"airbyte/internal/sdk/pkg/types"
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

type SourceTiktokMarketingAuthenticationMethodSandboxAccessTokenAuthTypeEnum string

const (
	SourceTiktokMarketingAuthenticationMethodSandboxAccessTokenAuthTypeEnumSandboxAccessToken SourceTiktokMarketingAuthenticationMethodSandboxAccessTokenAuthTypeEnum = "sandbox_access_token"
)

func (e SourceTiktokMarketingAuthenticationMethodSandboxAccessTokenAuthTypeEnum) ToPointer() *SourceTiktokMarketingAuthenticationMethodSandboxAccessTokenAuthTypeEnum {
	return &e
}

func (e *SourceTiktokMarketingAuthenticationMethodSandboxAccessTokenAuthTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "sandbox_access_token":
		*e = SourceTiktokMarketingAuthenticationMethodSandboxAccessTokenAuthTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceTiktokMarketingAuthenticationMethodSandboxAccessTokenAuthTypeEnum: %v", v)
	}
}

// SourceTiktokMarketingAuthenticationMethodSandboxAccessToken - Authentication method
type SourceTiktokMarketingAuthenticationMethodSandboxAccessToken struct {
	// The long-term authorized access token.
	AccessToken string `json:"access_token"`
	// The Advertiser ID which generated for the developer's Sandbox application.
	AdvertiserID string                                                                   `json:"advertiser_id"`
	AuthType     *SourceTiktokMarketingAuthenticationMethodSandboxAccessTokenAuthTypeEnum `json:"auth_type,omitempty"`
}

type SourceTiktokMarketingAuthenticationMethodOAuth20AuthTypeEnum string

const (
	SourceTiktokMarketingAuthenticationMethodOAuth20AuthTypeEnumOauth20 SourceTiktokMarketingAuthenticationMethodOAuth20AuthTypeEnum = "oauth2.0"
)

func (e SourceTiktokMarketingAuthenticationMethodOAuth20AuthTypeEnum) ToPointer() *SourceTiktokMarketingAuthenticationMethodOAuth20AuthTypeEnum {
	return &e
}

func (e *SourceTiktokMarketingAuthenticationMethodOAuth20AuthTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "oauth2.0":
		*e = SourceTiktokMarketingAuthenticationMethodOAuth20AuthTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceTiktokMarketingAuthenticationMethodOAuth20AuthTypeEnum: %v", v)
	}
}

// SourceTiktokMarketingAuthenticationMethodOAuth20 - Authentication method
type SourceTiktokMarketingAuthenticationMethodOAuth20 struct {
	// Long-term Authorized Access Token.
	AccessToken string `json:"access_token"`
	// The Advertiser ID to filter reports and streams. Let this empty to retrieve all.
	AdvertiserID *string `json:"advertiser_id,omitempty"`
	// The Developer Application App ID.
	AppID    string                                                        `json:"app_id"`
	AuthType *SourceTiktokMarketingAuthenticationMethodOAuth20AuthTypeEnum `json:"auth_type,omitempty"`
	// The Developer Application Secret.
	Secret string `json:"secret"`
}

type SourceTiktokMarketingAuthenticationMethodType string

const (
	SourceTiktokMarketingAuthenticationMethodTypeSourceTiktokMarketingAuthenticationMethodOAuth20            SourceTiktokMarketingAuthenticationMethodType = "source-tiktok-marketing_Authentication Method_OAuth2.0"
	SourceTiktokMarketingAuthenticationMethodTypeSourceTiktokMarketingAuthenticationMethodSandboxAccessToken SourceTiktokMarketingAuthenticationMethodType = "source-tiktok-marketing_Authentication Method_Sandbox Access Token"
)

type SourceTiktokMarketingAuthenticationMethod struct {
	SourceTiktokMarketingAuthenticationMethodOAuth20            *SourceTiktokMarketingAuthenticationMethodOAuth20
	SourceTiktokMarketingAuthenticationMethodSandboxAccessToken *SourceTiktokMarketingAuthenticationMethodSandboxAccessToken

	Type SourceTiktokMarketingAuthenticationMethodType
}

func CreateSourceTiktokMarketingAuthenticationMethodSourceTiktokMarketingAuthenticationMethodOAuth20(sourceTiktokMarketingAuthenticationMethodOAuth20 SourceTiktokMarketingAuthenticationMethodOAuth20) SourceTiktokMarketingAuthenticationMethod {
	typ := SourceTiktokMarketingAuthenticationMethodTypeSourceTiktokMarketingAuthenticationMethodOAuth20

	return SourceTiktokMarketingAuthenticationMethod{
		SourceTiktokMarketingAuthenticationMethodOAuth20: &sourceTiktokMarketingAuthenticationMethodOAuth20,
		Type: typ,
	}
}

func CreateSourceTiktokMarketingAuthenticationMethodSourceTiktokMarketingAuthenticationMethodSandboxAccessToken(sourceTiktokMarketingAuthenticationMethodSandboxAccessToken SourceTiktokMarketingAuthenticationMethodSandboxAccessToken) SourceTiktokMarketingAuthenticationMethod {
	typ := SourceTiktokMarketingAuthenticationMethodTypeSourceTiktokMarketingAuthenticationMethodSandboxAccessToken

	return SourceTiktokMarketingAuthenticationMethod{
		SourceTiktokMarketingAuthenticationMethodSandboxAccessToken: &sourceTiktokMarketingAuthenticationMethodSandboxAccessToken,
		Type: typ,
	}
}

func (u *SourceTiktokMarketingAuthenticationMethod) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	sourceTiktokMarketingAuthenticationMethodOAuth20 := new(SourceTiktokMarketingAuthenticationMethodOAuth20)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceTiktokMarketingAuthenticationMethodOAuth20); err == nil {
		u.SourceTiktokMarketingAuthenticationMethodOAuth20 = sourceTiktokMarketingAuthenticationMethodOAuth20
		u.Type = SourceTiktokMarketingAuthenticationMethodTypeSourceTiktokMarketingAuthenticationMethodOAuth20
		return nil
	}

	sourceTiktokMarketingAuthenticationMethodSandboxAccessToken := new(SourceTiktokMarketingAuthenticationMethodSandboxAccessToken)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceTiktokMarketingAuthenticationMethodSandboxAccessToken); err == nil {
		u.SourceTiktokMarketingAuthenticationMethodSandboxAccessToken = sourceTiktokMarketingAuthenticationMethodSandboxAccessToken
		u.Type = SourceTiktokMarketingAuthenticationMethodTypeSourceTiktokMarketingAuthenticationMethodSandboxAccessToken
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceTiktokMarketingAuthenticationMethod) MarshalJSON() ([]byte, error) {
	if u.SourceTiktokMarketingAuthenticationMethodOAuth20 != nil {
		return json.Marshal(u.SourceTiktokMarketingAuthenticationMethodOAuth20)
	}

	if u.SourceTiktokMarketingAuthenticationMethodSandboxAccessToken != nil {
		return json.Marshal(u.SourceTiktokMarketingAuthenticationMethodSandboxAccessToken)
	}

	return nil, nil
}

type SourceTiktokMarketingTiktokMarketingEnum string

const (
	SourceTiktokMarketingTiktokMarketingEnumTiktokMarketing SourceTiktokMarketingTiktokMarketingEnum = "tiktok-marketing"
)

func (e SourceTiktokMarketingTiktokMarketingEnum) ToPointer() *SourceTiktokMarketingTiktokMarketingEnum {
	return &e
}

func (e *SourceTiktokMarketingTiktokMarketingEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "tiktok-marketing":
		*e = SourceTiktokMarketingTiktokMarketingEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceTiktokMarketingTiktokMarketingEnum: %v", v)
	}
}

type SourceTiktokMarketing struct {
	// The attribution window in days.
	AttributionWindow *int64 `json:"attribution_window,omitempty"`
	// Authentication method
	Credentials *SourceTiktokMarketingAuthenticationMethod `json:"credentials,omitempty"`
	// The date until which you'd like to replicate data for all incremental streams, in the format YYYY-MM-DD. All data generated between start_date and this date will be replicated. Not setting this option will result in always syncing the data till the current date.
	EndDate    *types.Date                              `json:"end_date,omitempty"`
	SourceType SourceTiktokMarketingTiktokMarketingEnum `json:"sourceType"`
	// The Start Date in format: YYYY-MM-DD. Any data before this date will not be replicated. If this parameter is not set, all data will be replicated.
	StartDate *types.Date `json:"start_date,omitempty"`
}
