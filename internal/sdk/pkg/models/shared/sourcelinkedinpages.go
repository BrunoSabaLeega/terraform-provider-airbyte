// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

type SourceLinkedinPagesAuthenticationAccessTokenAuthMethodEnum string

const (
	SourceLinkedinPagesAuthenticationAccessTokenAuthMethodEnumAccessToken SourceLinkedinPagesAuthenticationAccessTokenAuthMethodEnum = "access_token"
)

func (e SourceLinkedinPagesAuthenticationAccessTokenAuthMethodEnum) ToPointer() *SourceLinkedinPagesAuthenticationAccessTokenAuthMethodEnum {
	return &e
}

func (e *SourceLinkedinPagesAuthenticationAccessTokenAuthMethodEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "access_token":
		*e = SourceLinkedinPagesAuthenticationAccessTokenAuthMethodEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceLinkedinPagesAuthenticationAccessTokenAuthMethodEnum: %v", v)
	}
}

type SourceLinkedinPagesAuthenticationAccessToken struct {
	// The token value generated using the LinkedIn Developers OAuth Token Tools. See the <a href="https://docs.airbyte.com/integrations/sources/linkedin-pages/">docs</a> to obtain yours.
	AccessToken string                                                      `json:"access_token"`
	AuthMethod  *SourceLinkedinPagesAuthenticationAccessTokenAuthMethodEnum `json:"auth_method,omitempty"`
}

type SourceLinkedinPagesAuthenticationOAuth20AuthMethodEnum string

const (
	SourceLinkedinPagesAuthenticationOAuth20AuthMethodEnumOAuth20 SourceLinkedinPagesAuthenticationOAuth20AuthMethodEnum = "oAuth2.0"
)

func (e SourceLinkedinPagesAuthenticationOAuth20AuthMethodEnum) ToPointer() *SourceLinkedinPagesAuthenticationOAuth20AuthMethodEnum {
	return &e
}

func (e *SourceLinkedinPagesAuthenticationOAuth20AuthMethodEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "oAuth2.0":
		*e = SourceLinkedinPagesAuthenticationOAuth20AuthMethodEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceLinkedinPagesAuthenticationOAuth20AuthMethodEnum: %v", v)
	}
}

type SourceLinkedinPagesAuthenticationOAuth20 struct {
	AuthMethod *SourceLinkedinPagesAuthenticationOAuth20AuthMethodEnum `json:"auth_method,omitempty"`
	// The client ID of the LinkedIn developer application.
	ClientID string `json:"client_id"`
	// The client secret of the LinkedIn developer application.
	ClientSecret string `json:"client_secret"`
	// The token value generated using the LinkedIn Developers OAuth Token Tools. See the <a href="https://docs.airbyte.com/integrations/sources/linkedin-pages/">docs</a> to obtain yours.
	RefreshToken string `json:"refresh_token"`
}

type SourceLinkedinPagesAuthenticationType string

const (
	SourceLinkedinPagesAuthenticationTypeSourceLinkedinPagesAuthenticationOAuth20     SourceLinkedinPagesAuthenticationType = "source-linkedin-pages_Authentication_OAuth2.0"
	SourceLinkedinPagesAuthenticationTypeSourceLinkedinPagesAuthenticationAccessToken SourceLinkedinPagesAuthenticationType = "source-linkedin-pages_Authentication_Access token"
)

type SourceLinkedinPagesAuthentication struct {
	SourceLinkedinPagesAuthenticationOAuth20     *SourceLinkedinPagesAuthenticationOAuth20
	SourceLinkedinPagesAuthenticationAccessToken *SourceLinkedinPagesAuthenticationAccessToken

	Type SourceLinkedinPagesAuthenticationType
}

func CreateSourceLinkedinPagesAuthenticationSourceLinkedinPagesAuthenticationOAuth20(sourceLinkedinPagesAuthenticationOAuth20 SourceLinkedinPagesAuthenticationOAuth20) SourceLinkedinPagesAuthentication {
	typ := SourceLinkedinPagesAuthenticationTypeSourceLinkedinPagesAuthenticationOAuth20

	return SourceLinkedinPagesAuthentication{
		SourceLinkedinPagesAuthenticationOAuth20: &sourceLinkedinPagesAuthenticationOAuth20,
		Type:                                     typ,
	}
}

func CreateSourceLinkedinPagesAuthenticationSourceLinkedinPagesAuthenticationAccessToken(sourceLinkedinPagesAuthenticationAccessToken SourceLinkedinPagesAuthenticationAccessToken) SourceLinkedinPagesAuthentication {
	typ := SourceLinkedinPagesAuthenticationTypeSourceLinkedinPagesAuthenticationAccessToken

	return SourceLinkedinPagesAuthentication{
		SourceLinkedinPagesAuthenticationAccessToken: &sourceLinkedinPagesAuthenticationAccessToken,
		Type: typ,
	}
}

func (u *SourceLinkedinPagesAuthentication) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	sourceLinkedinPagesAuthenticationOAuth20 := new(SourceLinkedinPagesAuthenticationOAuth20)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceLinkedinPagesAuthenticationOAuth20); err == nil {
		u.SourceLinkedinPagesAuthenticationOAuth20 = sourceLinkedinPagesAuthenticationOAuth20
		u.Type = SourceLinkedinPagesAuthenticationTypeSourceLinkedinPagesAuthenticationOAuth20
		return nil
	}

	sourceLinkedinPagesAuthenticationAccessToken := new(SourceLinkedinPagesAuthenticationAccessToken)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceLinkedinPagesAuthenticationAccessToken); err == nil {
		u.SourceLinkedinPagesAuthenticationAccessToken = sourceLinkedinPagesAuthenticationAccessToken
		u.Type = SourceLinkedinPagesAuthenticationTypeSourceLinkedinPagesAuthenticationAccessToken
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceLinkedinPagesAuthentication) MarshalJSON() ([]byte, error) {
	if u.SourceLinkedinPagesAuthenticationOAuth20 != nil {
		return json.Marshal(u.SourceLinkedinPagesAuthenticationOAuth20)
	}

	if u.SourceLinkedinPagesAuthenticationAccessToken != nil {
		return json.Marshal(u.SourceLinkedinPagesAuthenticationAccessToken)
	}

	return nil, nil
}

type SourceLinkedinPagesLinkedinPagesEnum string

const (
	SourceLinkedinPagesLinkedinPagesEnumLinkedinPages SourceLinkedinPagesLinkedinPagesEnum = "linkedin-pages"
)

func (e SourceLinkedinPagesLinkedinPagesEnum) ToPointer() *SourceLinkedinPagesLinkedinPagesEnum {
	return &e
}

func (e *SourceLinkedinPagesLinkedinPagesEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "linkedin-pages":
		*e = SourceLinkedinPagesLinkedinPagesEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceLinkedinPagesLinkedinPagesEnum: %v", v)
	}
}

// SourceLinkedinPages - The values required to configure the source.
type SourceLinkedinPages struct {
	Credentials *SourceLinkedinPagesAuthentication `json:"credentials,omitempty"`
	// Specify the Organization ID
	OrgID      string                               `json:"org_id"`
	SourceType SourceLinkedinPagesLinkedinPagesEnum `json:"sourceType"`
}
