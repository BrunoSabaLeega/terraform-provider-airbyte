// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"time"
)

type SourceQuickbooksAuthorizationMethodOAuth20AuthTypeEnum string

const (
	SourceQuickbooksAuthorizationMethodOAuth20AuthTypeEnumOauth20 SourceQuickbooksAuthorizationMethodOAuth20AuthTypeEnum = "oauth2.0"
)

func (e SourceQuickbooksAuthorizationMethodOAuth20AuthTypeEnum) ToPointer() *SourceQuickbooksAuthorizationMethodOAuth20AuthTypeEnum {
	return &e
}

func (e *SourceQuickbooksAuthorizationMethodOAuth20AuthTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "oauth2.0":
		*e = SourceQuickbooksAuthorizationMethodOAuth20AuthTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceQuickbooksAuthorizationMethodOAuth20AuthTypeEnum: %v", v)
	}
}

type SourceQuickbooksAuthorizationMethodOAuth20 struct {
	// Access token fot making authenticated requests.
	AccessToken string                                                  `json:"access_token"`
	AuthType    *SourceQuickbooksAuthorizationMethodOAuth20AuthTypeEnum `json:"auth_type,omitempty"`
	// Identifies which app is making the request. Obtain this value from the Keys tab on the app profile via My Apps on the developer site. There are two versions of this key: development and production.
	ClientID string `json:"client_id"`
	//  Obtain this value from the Keys tab on the app profile via My Apps on the developer site. There are two versions of this key: development and production.
	ClientSecret string `json:"client_secret"`
	// Labeled Company ID. The Make API Calls panel is populated with the realm id and the current access token.
	RealmID string `json:"realm_id"`
	// A token used when refreshing the access token.
	RefreshToken string `json:"refresh_token"`
	// The date-time when the access token should be refreshed.
	TokenExpiryDate time.Time `json:"token_expiry_date"`
}

type SourceQuickbooksAuthorizationMethodType string

const (
	SourceQuickbooksAuthorizationMethodTypeSourceQuickbooksAuthorizationMethodOAuth20 SourceQuickbooksAuthorizationMethodType = "source-quickbooks_Authorization Method_OAuth2.0"
)

type SourceQuickbooksAuthorizationMethod struct {
	SourceQuickbooksAuthorizationMethodOAuth20 *SourceQuickbooksAuthorizationMethodOAuth20

	Type SourceQuickbooksAuthorizationMethodType
}

func CreateSourceQuickbooksAuthorizationMethodSourceQuickbooksAuthorizationMethodOAuth20(sourceQuickbooksAuthorizationMethodOAuth20 SourceQuickbooksAuthorizationMethodOAuth20) SourceQuickbooksAuthorizationMethod {
	typ := SourceQuickbooksAuthorizationMethodTypeSourceQuickbooksAuthorizationMethodOAuth20

	return SourceQuickbooksAuthorizationMethod{
		SourceQuickbooksAuthorizationMethodOAuth20: &sourceQuickbooksAuthorizationMethodOAuth20,
		Type: typ,
	}
}

func (u *SourceQuickbooksAuthorizationMethod) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	sourceQuickbooksAuthorizationMethodOAuth20 := new(SourceQuickbooksAuthorizationMethodOAuth20)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceQuickbooksAuthorizationMethodOAuth20); err == nil {
		u.SourceQuickbooksAuthorizationMethodOAuth20 = sourceQuickbooksAuthorizationMethodOAuth20
		u.Type = SourceQuickbooksAuthorizationMethodTypeSourceQuickbooksAuthorizationMethodOAuth20
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceQuickbooksAuthorizationMethod) MarshalJSON() ([]byte, error) {
	if u.SourceQuickbooksAuthorizationMethodOAuth20 != nil {
		return json.Marshal(u.SourceQuickbooksAuthorizationMethodOAuth20)
	}

	return nil, nil
}

type SourceQuickbooksQuickbooksEnum string

const (
	SourceQuickbooksQuickbooksEnumQuickbooks SourceQuickbooksQuickbooksEnum = "quickbooks"
)

func (e SourceQuickbooksQuickbooksEnum) ToPointer() *SourceQuickbooksQuickbooksEnum {
	return &e
}

func (e *SourceQuickbooksQuickbooksEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "quickbooks":
		*e = SourceQuickbooksQuickbooksEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceQuickbooksQuickbooksEnum: %v", v)
	}
}

// SourceQuickbooks - The values required to configure the source.
type SourceQuickbooks struct {
	Credentials SourceQuickbooksAuthorizationMethod `json:"credentials"`
	// Determines whether to use the sandbox or production environment.
	Sandbox    bool                           `json:"sandbox"`
	SourceType SourceQuickbooksQuickbooksEnum `json:"sourceType"`
	// The default value to use if no bookmark exists for an endpoint (rfc3339 date string). E.g, 2021-03-20T00:00:00+00:00. Any data before this date will not be replicated.
	StartDate time.Time `json:"start_date"`
}
