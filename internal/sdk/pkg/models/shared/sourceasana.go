// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

// SourceAsanaAuthenticationMechanismAuthenticateViaAsanaOauthCredentialsTitleEnum - OAuth Credentials
type SourceAsanaAuthenticationMechanismAuthenticateViaAsanaOauthCredentialsTitleEnum string

const (
	SourceAsanaAuthenticationMechanismAuthenticateViaAsanaOauthCredentialsTitleEnumOAuthCredentials SourceAsanaAuthenticationMechanismAuthenticateViaAsanaOauthCredentialsTitleEnum = "OAuth Credentials"
)

func (e *SourceAsanaAuthenticationMechanismAuthenticateViaAsanaOauthCredentialsTitleEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "OAuth Credentials":
		*e = SourceAsanaAuthenticationMechanismAuthenticateViaAsanaOauthCredentialsTitleEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceAsanaAuthenticationMechanismAuthenticateViaAsanaOauthCredentialsTitleEnum: %s", s)
	}
}

// SourceAsanaAuthenticationMechanismAuthenticateViaAsanaOauth - Choose how to authenticate to Github
type SourceAsanaAuthenticationMechanismAuthenticateViaAsanaOauth struct {
	ClientID     string `json:"client_id"`
	ClientSecret string `json:"client_secret"`
	// OAuth Credentials
	OptionTitle  *SourceAsanaAuthenticationMechanismAuthenticateViaAsanaOauthCredentialsTitleEnum `json:"option_title,omitempty"`
	RefreshToken string                                                                           `json:"refresh_token"`
}

// SourceAsanaAuthenticationMechanismAuthenticateWithPersonalAccessTokenCredentialsTitleEnum - PAT Credentials
type SourceAsanaAuthenticationMechanismAuthenticateWithPersonalAccessTokenCredentialsTitleEnum string

const (
	SourceAsanaAuthenticationMechanismAuthenticateWithPersonalAccessTokenCredentialsTitleEnumPatCredentials SourceAsanaAuthenticationMechanismAuthenticateWithPersonalAccessTokenCredentialsTitleEnum = "PAT Credentials"
)

func (e *SourceAsanaAuthenticationMechanismAuthenticateWithPersonalAccessTokenCredentialsTitleEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "PAT Credentials":
		*e = SourceAsanaAuthenticationMechanismAuthenticateWithPersonalAccessTokenCredentialsTitleEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceAsanaAuthenticationMechanismAuthenticateWithPersonalAccessTokenCredentialsTitleEnum: %s", s)
	}
}

// SourceAsanaAuthenticationMechanismAuthenticateWithPersonalAccessToken - Choose how to authenticate to Github
type SourceAsanaAuthenticationMechanismAuthenticateWithPersonalAccessToken struct {
	// PAT Credentials
	OptionTitle *SourceAsanaAuthenticationMechanismAuthenticateWithPersonalAccessTokenCredentialsTitleEnum `json:"option_title,omitempty"`
	// Asana Personal Access Token (generate yours <a href="https://app.asana.com/0/developer-console">here</a>).
	PersonalAccessToken string `json:"personal_access_token"`
}

type SourceAsanaAuthenticationMechanismType string

const (
	SourceAsanaAuthenticationMechanismTypeSourceAsanaAuthenticationMechanismAuthenticateWithPersonalAccessToken SourceAsanaAuthenticationMechanismType = "source-asana_Authentication mechanism_Authenticate with Personal Access Token"
	SourceAsanaAuthenticationMechanismTypeSourceAsanaAuthenticationMechanismAuthenticateViaAsanaOauth           SourceAsanaAuthenticationMechanismType = "source-asana_Authentication mechanism_Authenticate via Asana (Oauth)"
)

type SourceAsanaAuthenticationMechanism struct {
	SourceAsanaAuthenticationMechanismAuthenticateWithPersonalAccessToken *SourceAsanaAuthenticationMechanismAuthenticateWithPersonalAccessToken
	SourceAsanaAuthenticationMechanismAuthenticateViaAsanaOauth           *SourceAsanaAuthenticationMechanismAuthenticateViaAsanaOauth

	Type SourceAsanaAuthenticationMechanismType
}

func CreateSourceAsanaAuthenticationMechanismSourceAsanaAuthenticationMechanismAuthenticateWithPersonalAccessToken(sourceAsanaAuthenticationMechanismAuthenticateWithPersonalAccessToken SourceAsanaAuthenticationMechanismAuthenticateWithPersonalAccessToken) SourceAsanaAuthenticationMechanism {
	typ := SourceAsanaAuthenticationMechanismTypeSourceAsanaAuthenticationMechanismAuthenticateWithPersonalAccessToken

	return SourceAsanaAuthenticationMechanism{
		SourceAsanaAuthenticationMechanismAuthenticateWithPersonalAccessToken: &sourceAsanaAuthenticationMechanismAuthenticateWithPersonalAccessToken,
		Type: typ,
	}
}

func CreateSourceAsanaAuthenticationMechanismSourceAsanaAuthenticationMechanismAuthenticateViaAsanaOauth(sourceAsanaAuthenticationMechanismAuthenticateViaAsanaOauth SourceAsanaAuthenticationMechanismAuthenticateViaAsanaOauth) SourceAsanaAuthenticationMechanism {
	typ := SourceAsanaAuthenticationMechanismTypeSourceAsanaAuthenticationMechanismAuthenticateViaAsanaOauth

	return SourceAsanaAuthenticationMechanism{
		SourceAsanaAuthenticationMechanismAuthenticateViaAsanaOauth: &sourceAsanaAuthenticationMechanismAuthenticateViaAsanaOauth,
		Type: typ,
	}
}

func (u *SourceAsanaAuthenticationMechanism) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	sourceAsanaAuthenticationMechanismAuthenticateWithPersonalAccessToken := new(SourceAsanaAuthenticationMechanismAuthenticateWithPersonalAccessToken)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceAsanaAuthenticationMechanismAuthenticateWithPersonalAccessToken); err == nil {
		u.SourceAsanaAuthenticationMechanismAuthenticateWithPersonalAccessToken = sourceAsanaAuthenticationMechanismAuthenticateWithPersonalAccessToken
		u.Type = SourceAsanaAuthenticationMechanismTypeSourceAsanaAuthenticationMechanismAuthenticateWithPersonalAccessToken
		return nil
	}

	sourceAsanaAuthenticationMechanismAuthenticateViaAsanaOauth := new(SourceAsanaAuthenticationMechanismAuthenticateViaAsanaOauth)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceAsanaAuthenticationMechanismAuthenticateViaAsanaOauth); err == nil {
		u.SourceAsanaAuthenticationMechanismAuthenticateViaAsanaOauth = sourceAsanaAuthenticationMechanismAuthenticateViaAsanaOauth
		u.Type = SourceAsanaAuthenticationMechanismTypeSourceAsanaAuthenticationMechanismAuthenticateViaAsanaOauth
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceAsanaAuthenticationMechanism) MarshalJSON() ([]byte, error) {
	if u.SourceAsanaAuthenticationMechanismAuthenticateWithPersonalAccessToken != nil {
		return json.Marshal(u.SourceAsanaAuthenticationMechanismAuthenticateWithPersonalAccessToken)
	}

	if u.SourceAsanaAuthenticationMechanismAuthenticateViaAsanaOauth != nil {
		return json.Marshal(u.SourceAsanaAuthenticationMechanismAuthenticateViaAsanaOauth)
	}

	return nil, nil
}

type SourceAsanaAsanaEnum string

const (
	SourceAsanaAsanaEnumAsana SourceAsanaAsanaEnum = "asana"
)

func (e *SourceAsanaAsanaEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "asana":
		*e = SourceAsanaAsanaEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceAsanaAsanaEnum: %s", s)
	}
}

// SourceAsana - The values required to configure the source.
type SourceAsana struct {
	// Choose how to authenticate to Github
	Credentials *SourceAsanaAuthenticationMechanism `json:"credentials,omitempty"`
	SourceType  SourceAsanaAsanaEnum                `json:"sourceType"`
}
