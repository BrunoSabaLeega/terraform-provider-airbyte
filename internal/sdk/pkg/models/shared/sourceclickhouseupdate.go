// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

// SourceClickhouseUpdateSSHTunnelMethodPasswordAuthenticationTunnelMethod - Connect through a jump server tunnel host using username and password authentication
type SourceClickhouseUpdateSSHTunnelMethodPasswordAuthenticationTunnelMethod string

const (
	SourceClickhouseUpdateSSHTunnelMethodPasswordAuthenticationTunnelMethodSSHPasswordAuth SourceClickhouseUpdateSSHTunnelMethodPasswordAuthenticationTunnelMethod = "SSH_PASSWORD_AUTH"
)

func (e SourceClickhouseUpdateSSHTunnelMethodPasswordAuthenticationTunnelMethod) ToPointer() *SourceClickhouseUpdateSSHTunnelMethodPasswordAuthenticationTunnelMethod {
	return &e
}

func (e *SourceClickhouseUpdateSSHTunnelMethodPasswordAuthenticationTunnelMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SSH_PASSWORD_AUTH":
		*e = SourceClickhouseUpdateSSHTunnelMethodPasswordAuthenticationTunnelMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceClickhouseUpdateSSHTunnelMethodPasswordAuthenticationTunnelMethod: %v", v)
	}
}

// SourceClickhouseUpdateSSHTunnelMethodPasswordAuthentication - Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.
type SourceClickhouseUpdateSSHTunnelMethodPasswordAuthentication struct {
	// Hostname of the jump server host that allows inbound ssh tunnel.
	TunnelHost string `json:"tunnel_host"`
	// Connect through a jump server tunnel host using username and password authentication
	TunnelMethod SourceClickhouseUpdateSSHTunnelMethodPasswordAuthenticationTunnelMethod `json:"tunnel_method"`
	// Port on the proxy/jump server that accepts inbound ssh connections.
	TunnelPort int64 `json:"tunnel_port"`
	// OS-level username for logging into the jump server host
	TunnelUser string `json:"tunnel_user"`
	// OS-level password for logging into the jump server host
	TunnelUserPassword string `json:"tunnel_user_password"`
}

// SourceClickhouseUpdateSSHTunnelMethodSSHKeyAuthenticationTunnelMethod - Connect through a jump server tunnel host using username and ssh key
type SourceClickhouseUpdateSSHTunnelMethodSSHKeyAuthenticationTunnelMethod string

const (
	SourceClickhouseUpdateSSHTunnelMethodSSHKeyAuthenticationTunnelMethodSSHKeyAuth SourceClickhouseUpdateSSHTunnelMethodSSHKeyAuthenticationTunnelMethod = "SSH_KEY_AUTH"
)

func (e SourceClickhouseUpdateSSHTunnelMethodSSHKeyAuthenticationTunnelMethod) ToPointer() *SourceClickhouseUpdateSSHTunnelMethodSSHKeyAuthenticationTunnelMethod {
	return &e
}

func (e *SourceClickhouseUpdateSSHTunnelMethodSSHKeyAuthenticationTunnelMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SSH_KEY_AUTH":
		*e = SourceClickhouseUpdateSSHTunnelMethodSSHKeyAuthenticationTunnelMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceClickhouseUpdateSSHTunnelMethodSSHKeyAuthenticationTunnelMethod: %v", v)
	}
}

// SourceClickhouseUpdateSSHTunnelMethodSSHKeyAuthentication - Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.
type SourceClickhouseUpdateSSHTunnelMethodSSHKeyAuthentication struct {
	// OS-level user account ssh key credentials in RSA PEM format ( created with ssh-keygen -t rsa -m PEM -f myuser_rsa )
	SSHKey string `json:"ssh_key"`
	// Hostname of the jump server host that allows inbound ssh tunnel.
	TunnelHost string `json:"tunnel_host"`
	// Connect through a jump server tunnel host using username and ssh key
	TunnelMethod SourceClickhouseUpdateSSHTunnelMethodSSHKeyAuthenticationTunnelMethod `json:"tunnel_method"`
	// Port on the proxy/jump server that accepts inbound ssh connections.
	TunnelPort int64 `json:"tunnel_port"`
	// OS-level username for logging into the jump server host.
	TunnelUser string `json:"tunnel_user"`
}

// SourceClickhouseUpdateSSHTunnelMethodNoTunnelTunnelMethod - No ssh tunnel needed to connect to database
type SourceClickhouseUpdateSSHTunnelMethodNoTunnelTunnelMethod string

const (
	SourceClickhouseUpdateSSHTunnelMethodNoTunnelTunnelMethodNoTunnel SourceClickhouseUpdateSSHTunnelMethodNoTunnelTunnelMethod = "NO_TUNNEL"
)

func (e SourceClickhouseUpdateSSHTunnelMethodNoTunnelTunnelMethod) ToPointer() *SourceClickhouseUpdateSSHTunnelMethodNoTunnelTunnelMethod {
	return &e
}

func (e *SourceClickhouseUpdateSSHTunnelMethodNoTunnelTunnelMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NO_TUNNEL":
		*e = SourceClickhouseUpdateSSHTunnelMethodNoTunnelTunnelMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceClickhouseUpdateSSHTunnelMethodNoTunnelTunnelMethod: %v", v)
	}
}

// SourceClickhouseUpdateSSHTunnelMethodNoTunnel - Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.
type SourceClickhouseUpdateSSHTunnelMethodNoTunnel struct {
	// No ssh tunnel needed to connect to database
	TunnelMethod SourceClickhouseUpdateSSHTunnelMethodNoTunnelTunnelMethod `json:"tunnel_method"`
}

type SourceClickhouseUpdateSSHTunnelMethodType string

const (
	SourceClickhouseUpdateSSHTunnelMethodTypeSourceClickhouseUpdateSSHTunnelMethodNoTunnel               SourceClickhouseUpdateSSHTunnelMethodType = "source-clickhouse-update_SSH Tunnel Method_No Tunnel"
	SourceClickhouseUpdateSSHTunnelMethodTypeSourceClickhouseUpdateSSHTunnelMethodSSHKeyAuthentication   SourceClickhouseUpdateSSHTunnelMethodType = "source-clickhouse-update_SSH Tunnel Method_SSH Key Authentication"
	SourceClickhouseUpdateSSHTunnelMethodTypeSourceClickhouseUpdateSSHTunnelMethodPasswordAuthentication SourceClickhouseUpdateSSHTunnelMethodType = "source-clickhouse-update_SSH Tunnel Method_Password Authentication"
)

type SourceClickhouseUpdateSSHTunnelMethod struct {
	SourceClickhouseUpdateSSHTunnelMethodNoTunnel               *SourceClickhouseUpdateSSHTunnelMethodNoTunnel
	SourceClickhouseUpdateSSHTunnelMethodSSHKeyAuthentication   *SourceClickhouseUpdateSSHTunnelMethodSSHKeyAuthentication
	SourceClickhouseUpdateSSHTunnelMethodPasswordAuthentication *SourceClickhouseUpdateSSHTunnelMethodPasswordAuthentication

	Type SourceClickhouseUpdateSSHTunnelMethodType
}

func CreateSourceClickhouseUpdateSSHTunnelMethodSourceClickhouseUpdateSSHTunnelMethodNoTunnel(sourceClickhouseUpdateSSHTunnelMethodNoTunnel SourceClickhouseUpdateSSHTunnelMethodNoTunnel) SourceClickhouseUpdateSSHTunnelMethod {
	typ := SourceClickhouseUpdateSSHTunnelMethodTypeSourceClickhouseUpdateSSHTunnelMethodNoTunnel

	return SourceClickhouseUpdateSSHTunnelMethod{
		SourceClickhouseUpdateSSHTunnelMethodNoTunnel: &sourceClickhouseUpdateSSHTunnelMethodNoTunnel,
		Type: typ,
	}
}

func CreateSourceClickhouseUpdateSSHTunnelMethodSourceClickhouseUpdateSSHTunnelMethodSSHKeyAuthentication(sourceClickhouseUpdateSSHTunnelMethodSSHKeyAuthentication SourceClickhouseUpdateSSHTunnelMethodSSHKeyAuthentication) SourceClickhouseUpdateSSHTunnelMethod {
	typ := SourceClickhouseUpdateSSHTunnelMethodTypeSourceClickhouseUpdateSSHTunnelMethodSSHKeyAuthentication

	return SourceClickhouseUpdateSSHTunnelMethod{
		SourceClickhouseUpdateSSHTunnelMethodSSHKeyAuthentication: &sourceClickhouseUpdateSSHTunnelMethodSSHKeyAuthentication,
		Type: typ,
	}
}

func CreateSourceClickhouseUpdateSSHTunnelMethodSourceClickhouseUpdateSSHTunnelMethodPasswordAuthentication(sourceClickhouseUpdateSSHTunnelMethodPasswordAuthentication SourceClickhouseUpdateSSHTunnelMethodPasswordAuthentication) SourceClickhouseUpdateSSHTunnelMethod {
	typ := SourceClickhouseUpdateSSHTunnelMethodTypeSourceClickhouseUpdateSSHTunnelMethodPasswordAuthentication

	return SourceClickhouseUpdateSSHTunnelMethod{
		SourceClickhouseUpdateSSHTunnelMethodPasswordAuthentication: &sourceClickhouseUpdateSSHTunnelMethodPasswordAuthentication,
		Type: typ,
	}
}

func (u *SourceClickhouseUpdateSSHTunnelMethod) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	sourceClickhouseUpdateSSHTunnelMethodNoTunnel := new(SourceClickhouseUpdateSSHTunnelMethodNoTunnel)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceClickhouseUpdateSSHTunnelMethodNoTunnel); err == nil {
		u.SourceClickhouseUpdateSSHTunnelMethodNoTunnel = sourceClickhouseUpdateSSHTunnelMethodNoTunnel
		u.Type = SourceClickhouseUpdateSSHTunnelMethodTypeSourceClickhouseUpdateSSHTunnelMethodNoTunnel
		return nil
	}

	sourceClickhouseUpdateSSHTunnelMethodSSHKeyAuthentication := new(SourceClickhouseUpdateSSHTunnelMethodSSHKeyAuthentication)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceClickhouseUpdateSSHTunnelMethodSSHKeyAuthentication); err == nil {
		u.SourceClickhouseUpdateSSHTunnelMethodSSHKeyAuthentication = sourceClickhouseUpdateSSHTunnelMethodSSHKeyAuthentication
		u.Type = SourceClickhouseUpdateSSHTunnelMethodTypeSourceClickhouseUpdateSSHTunnelMethodSSHKeyAuthentication
		return nil
	}

	sourceClickhouseUpdateSSHTunnelMethodPasswordAuthentication := new(SourceClickhouseUpdateSSHTunnelMethodPasswordAuthentication)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceClickhouseUpdateSSHTunnelMethodPasswordAuthentication); err == nil {
		u.SourceClickhouseUpdateSSHTunnelMethodPasswordAuthentication = sourceClickhouseUpdateSSHTunnelMethodPasswordAuthentication
		u.Type = SourceClickhouseUpdateSSHTunnelMethodTypeSourceClickhouseUpdateSSHTunnelMethodPasswordAuthentication
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceClickhouseUpdateSSHTunnelMethod) MarshalJSON() ([]byte, error) {
	if u.SourceClickhouseUpdateSSHTunnelMethodNoTunnel != nil {
		return json.Marshal(u.SourceClickhouseUpdateSSHTunnelMethodNoTunnel)
	}

	if u.SourceClickhouseUpdateSSHTunnelMethodSSHKeyAuthentication != nil {
		return json.Marshal(u.SourceClickhouseUpdateSSHTunnelMethodSSHKeyAuthentication)
	}

	if u.SourceClickhouseUpdateSSHTunnelMethodPasswordAuthentication != nil {
		return json.Marshal(u.SourceClickhouseUpdateSSHTunnelMethodPasswordAuthentication)
	}

	return nil, nil
}

type SourceClickhouseUpdate struct {
	// The name of the database.
	Database string `json:"database"`
	// The host endpoint of the Clickhouse cluster.
	Host string `json:"host"`
	// The password associated with this username.
	Password *string `json:"password,omitempty"`
	// The port of the database.
	Port int64 `json:"port"`
	// Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.
	TunnelMethod *SourceClickhouseUpdateSSHTunnelMethod `json:"tunnel_method,omitempty"`
	// The username which is used to access the database.
	Username string `json:"username"`
}
