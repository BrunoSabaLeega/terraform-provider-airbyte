// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

type SourcePinterestAuthorizationMethodAccessTokenAuthMethodEnum string

const (
	SourcePinterestAuthorizationMethodAccessTokenAuthMethodEnumAccessToken SourcePinterestAuthorizationMethodAccessTokenAuthMethodEnum = "access_token"
)

func (e SourcePinterestAuthorizationMethodAccessTokenAuthMethodEnum) ToPointer() *SourcePinterestAuthorizationMethodAccessTokenAuthMethodEnum {
	return &e
}

func (e *SourcePinterestAuthorizationMethodAccessTokenAuthMethodEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "access_token":
		*e = SourcePinterestAuthorizationMethodAccessTokenAuthMethodEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourcePinterestAuthorizationMethodAccessTokenAuthMethodEnum: %v", v)
	}
}

type SourcePinterestAuthorizationMethodAccessToken struct {
	// The Access Token to make authenticated requests.
	AccessToken string                                                      `json:"access_token"`
	AuthMethod  SourcePinterestAuthorizationMethodAccessTokenAuthMethodEnum `json:"auth_method"`
}

type SourcePinterestAuthorizationMethodOAuth20AuthMethodEnum string

const (
	SourcePinterestAuthorizationMethodOAuth20AuthMethodEnumOauth20 SourcePinterestAuthorizationMethodOAuth20AuthMethodEnum = "oauth2.0"
)

func (e SourcePinterestAuthorizationMethodOAuth20AuthMethodEnum) ToPointer() *SourcePinterestAuthorizationMethodOAuth20AuthMethodEnum {
	return &e
}

func (e *SourcePinterestAuthorizationMethodOAuth20AuthMethodEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "oauth2.0":
		*e = SourcePinterestAuthorizationMethodOAuth20AuthMethodEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourcePinterestAuthorizationMethodOAuth20AuthMethodEnum: %v", v)
	}
}

type SourcePinterestAuthorizationMethodOAuth20 struct {
	AuthMethod SourcePinterestAuthorizationMethodOAuth20AuthMethodEnum `json:"auth_method"`
	// The Client ID of your OAuth application
	ClientID *string `json:"client_id,omitempty"`
	// The Client Secret of your OAuth application.
	ClientSecret *string `json:"client_secret,omitempty"`
	// Refresh Token to obtain new Access Token, when it's expired.
	RefreshToken string `json:"refresh_token"`
}

type SourcePinterestAuthorizationMethodType string

const (
	SourcePinterestAuthorizationMethodTypeSourcePinterestAuthorizationMethodOAuth20     SourcePinterestAuthorizationMethodType = "source-pinterest_Authorization Method_OAuth2.0"
	SourcePinterestAuthorizationMethodTypeSourcePinterestAuthorizationMethodAccessToken SourcePinterestAuthorizationMethodType = "source-pinterest_Authorization Method_Access Token"
)

type SourcePinterestAuthorizationMethod struct {
	SourcePinterestAuthorizationMethodOAuth20     *SourcePinterestAuthorizationMethodOAuth20
	SourcePinterestAuthorizationMethodAccessToken *SourcePinterestAuthorizationMethodAccessToken

	Type SourcePinterestAuthorizationMethodType
}

func CreateSourcePinterestAuthorizationMethodSourcePinterestAuthorizationMethodOAuth20(sourcePinterestAuthorizationMethodOAuth20 SourcePinterestAuthorizationMethodOAuth20) SourcePinterestAuthorizationMethod {
	typ := SourcePinterestAuthorizationMethodTypeSourcePinterestAuthorizationMethodOAuth20

	return SourcePinterestAuthorizationMethod{
		SourcePinterestAuthorizationMethodOAuth20: &sourcePinterestAuthorizationMethodOAuth20,
		Type: typ,
	}
}

func CreateSourcePinterestAuthorizationMethodSourcePinterestAuthorizationMethodAccessToken(sourcePinterestAuthorizationMethodAccessToken SourcePinterestAuthorizationMethodAccessToken) SourcePinterestAuthorizationMethod {
	typ := SourcePinterestAuthorizationMethodTypeSourcePinterestAuthorizationMethodAccessToken

	return SourcePinterestAuthorizationMethod{
		SourcePinterestAuthorizationMethodAccessToken: &sourcePinterestAuthorizationMethodAccessToken,
		Type: typ,
	}
}

func (u *SourcePinterestAuthorizationMethod) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	sourcePinterestAuthorizationMethodOAuth20 := new(SourcePinterestAuthorizationMethodOAuth20)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourcePinterestAuthorizationMethodOAuth20); err == nil {
		u.SourcePinterestAuthorizationMethodOAuth20 = sourcePinterestAuthorizationMethodOAuth20
		u.Type = SourcePinterestAuthorizationMethodTypeSourcePinterestAuthorizationMethodOAuth20
		return nil
	}

	sourcePinterestAuthorizationMethodAccessToken := new(SourcePinterestAuthorizationMethodAccessToken)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourcePinterestAuthorizationMethodAccessToken); err == nil {
		u.SourcePinterestAuthorizationMethodAccessToken = sourcePinterestAuthorizationMethodAccessToken
		u.Type = SourcePinterestAuthorizationMethodTypeSourcePinterestAuthorizationMethodAccessToken
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourcePinterestAuthorizationMethod) MarshalJSON() ([]byte, error) {
	if u.SourcePinterestAuthorizationMethodOAuth20 != nil {
		return json.Marshal(u.SourcePinterestAuthorizationMethodOAuth20)
	}

	if u.SourcePinterestAuthorizationMethodAccessToken != nil {
		return json.Marshal(u.SourcePinterestAuthorizationMethodAccessToken)
	}

	return nil, nil
}

type SourcePinterestPinterestEnum string

const (
	SourcePinterestPinterestEnumPinterest SourcePinterestPinterestEnum = "pinterest"
)

func (e SourcePinterestPinterestEnum) ToPointer() *SourcePinterestPinterestEnum {
	return &e
}

func (e *SourcePinterestPinterestEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pinterest":
		*e = SourcePinterestPinterestEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourcePinterestPinterestEnum: %v", v)
	}
}

type SourcePinterestStatusEnum string

const (
	SourcePinterestStatusEnumActive   SourcePinterestStatusEnum = "ACTIVE"
	SourcePinterestStatusEnumPaused   SourcePinterestStatusEnum = "PAUSED"
	SourcePinterestStatusEnumArchived SourcePinterestStatusEnum = "ARCHIVED"
)

func (e SourcePinterestStatusEnum) ToPointer() *SourcePinterestStatusEnum {
	return &e
}

func (e *SourcePinterestStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACTIVE":
		fallthrough
	case "PAUSED":
		fallthrough
	case "ARCHIVED":
		*e = SourcePinterestStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourcePinterestStatusEnum: %v", v)
	}
}

type SourcePinterest struct {
	Credentials *SourcePinterestAuthorizationMethod `json:"credentials,omitempty"`
	SourceType  SourcePinterestPinterestEnum        `json:"sourceType"`
	// A date in the format YYYY-MM-DD. If you have not set a date, it would be defaulted to latest allowed date by api (89 days from today).
	StartDate string `json:"start_date"`
	// Entity statuses based off of campaigns, ad_groups, and ads. If you do not have a status set, it will be ignored completely.
	Status []SourcePinterestStatusEnum `json:"status,omitempty"`
}
