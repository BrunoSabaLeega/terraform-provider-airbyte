// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

// DestinationOracleUpdateSSHTunnelMethodPasswordAuthenticationTunnelMethod - Connect through a jump server tunnel host using username and password authentication
type DestinationOracleUpdateSSHTunnelMethodPasswordAuthenticationTunnelMethod string

const (
	DestinationOracleUpdateSSHTunnelMethodPasswordAuthenticationTunnelMethodSSHPasswordAuth DestinationOracleUpdateSSHTunnelMethodPasswordAuthenticationTunnelMethod = "SSH_PASSWORD_AUTH"
)

func (e DestinationOracleUpdateSSHTunnelMethodPasswordAuthenticationTunnelMethod) ToPointer() *DestinationOracleUpdateSSHTunnelMethodPasswordAuthenticationTunnelMethod {
	return &e
}

func (e *DestinationOracleUpdateSSHTunnelMethodPasswordAuthenticationTunnelMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SSH_PASSWORD_AUTH":
		*e = DestinationOracleUpdateSSHTunnelMethodPasswordAuthenticationTunnelMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationOracleUpdateSSHTunnelMethodPasswordAuthenticationTunnelMethod: %v", v)
	}
}

// DestinationOracleUpdateSSHTunnelMethodPasswordAuthentication - Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.
type DestinationOracleUpdateSSHTunnelMethodPasswordAuthentication struct {
	// Hostname of the jump server host that allows inbound ssh tunnel.
	TunnelHost string `json:"tunnel_host"`
	// Connect through a jump server tunnel host using username and password authentication
	TunnelMethod DestinationOracleUpdateSSHTunnelMethodPasswordAuthenticationTunnelMethod `json:"tunnel_method"`
	// Port on the proxy/jump server that accepts inbound ssh connections.
	TunnelPort int64 `json:"tunnel_port"`
	// OS-level username for logging into the jump server host
	TunnelUser string `json:"tunnel_user"`
	// OS-level password for logging into the jump server host
	TunnelUserPassword string `json:"tunnel_user_password"`
}

// DestinationOracleUpdateSSHTunnelMethodSSHKeyAuthenticationTunnelMethod - Connect through a jump server tunnel host using username and ssh key
type DestinationOracleUpdateSSHTunnelMethodSSHKeyAuthenticationTunnelMethod string

const (
	DestinationOracleUpdateSSHTunnelMethodSSHKeyAuthenticationTunnelMethodSSHKeyAuth DestinationOracleUpdateSSHTunnelMethodSSHKeyAuthenticationTunnelMethod = "SSH_KEY_AUTH"
)

func (e DestinationOracleUpdateSSHTunnelMethodSSHKeyAuthenticationTunnelMethod) ToPointer() *DestinationOracleUpdateSSHTunnelMethodSSHKeyAuthenticationTunnelMethod {
	return &e
}

func (e *DestinationOracleUpdateSSHTunnelMethodSSHKeyAuthenticationTunnelMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SSH_KEY_AUTH":
		*e = DestinationOracleUpdateSSHTunnelMethodSSHKeyAuthenticationTunnelMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationOracleUpdateSSHTunnelMethodSSHKeyAuthenticationTunnelMethod: %v", v)
	}
}

// DestinationOracleUpdateSSHTunnelMethodSSHKeyAuthentication - Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.
type DestinationOracleUpdateSSHTunnelMethodSSHKeyAuthentication struct {
	// OS-level user account ssh key credentials in RSA PEM format ( created with ssh-keygen -t rsa -m PEM -f myuser_rsa )
	SSHKey string `json:"ssh_key"`
	// Hostname of the jump server host that allows inbound ssh tunnel.
	TunnelHost string `json:"tunnel_host"`
	// Connect through a jump server tunnel host using username and ssh key
	TunnelMethod DestinationOracleUpdateSSHTunnelMethodSSHKeyAuthenticationTunnelMethod `json:"tunnel_method"`
	// Port on the proxy/jump server that accepts inbound ssh connections.
	TunnelPort int64 `json:"tunnel_port"`
	// OS-level username for logging into the jump server host.
	TunnelUser string `json:"tunnel_user"`
}

// DestinationOracleUpdateSSHTunnelMethodNoTunnelTunnelMethod - No ssh tunnel needed to connect to database
type DestinationOracleUpdateSSHTunnelMethodNoTunnelTunnelMethod string

const (
	DestinationOracleUpdateSSHTunnelMethodNoTunnelTunnelMethodNoTunnel DestinationOracleUpdateSSHTunnelMethodNoTunnelTunnelMethod = "NO_TUNNEL"
)

func (e DestinationOracleUpdateSSHTunnelMethodNoTunnelTunnelMethod) ToPointer() *DestinationOracleUpdateSSHTunnelMethodNoTunnelTunnelMethod {
	return &e
}

func (e *DestinationOracleUpdateSSHTunnelMethodNoTunnelTunnelMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NO_TUNNEL":
		*e = DestinationOracleUpdateSSHTunnelMethodNoTunnelTunnelMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationOracleUpdateSSHTunnelMethodNoTunnelTunnelMethod: %v", v)
	}
}

// DestinationOracleUpdateSSHTunnelMethodNoTunnel - Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.
type DestinationOracleUpdateSSHTunnelMethodNoTunnel struct {
	// No ssh tunnel needed to connect to database
	TunnelMethod DestinationOracleUpdateSSHTunnelMethodNoTunnelTunnelMethod `json:"tunnel_method"`
}

type DestinationOracleUpdateSSHTunnelMethodType string

const (
	DestinationOracleUpdateSSHTunnelMethodTypeDestinationOracleUpdateSSHTunnelMethodNoTunnel               DestinationOracleUpdateSSHTunnelMethodType = "destination-oracle-update_SSH Tunnel Method_No Tunnel"
	DestinationOracleUpdateSSHTunnelMethodTypeDestinationOracleUpdateSSHTunnelMethodSSHKeyAuthentication   DestinationOracleUpdateSSHTunnelMethodType = "destination-oracle-update_SSH Tunnel Method_SSH Key Authentication"
	DestinationOracleUpdateSSHTunnelMethodTypeDestinationOracleUpdateSSHTunnelMethodPasswordAuthentication DestinationOracleUpdateSSHTunnelMethodType = "destination-oracle-update_SSH Tunnel Method_Password Authentication"
)

type DestinationOracleUpdateSSHTunnelMethod struct {
	DestinationOracleUpdateSSHTunnelMethodNoTunnel               *DestinationOracleUpdateSSHTunnelMethodNoTunnel
	DestinationOracleUpdateSSHTunnelMethodSSHKeyAuthentication   *DestinationOracleUpdateSSHTunnelMethodSSHKeyAuthentication
	DestinationOracleUpdateSSHTunnelMethodPasswordAuthentication *DestinationOracleUpdateSSHTunnelMethodPasswordAuthentication

	Type DestinationOracleUpdateSSHTunnelMethodType
}

func CreateDestinationOracleUpdateSSHTunnelMethodDestinationOracleUpdateSSHTunnelMethodNoTunnel(destinationOracleUpdateSSHTunnelMethodNoTunnel DestinationOracleUpdateSSHTunnelMethodNoTunnel) DestinationOracleUpdateSSHTunnelMethod {
	typ := DestinationOracleUpdateSSHTunnelMethodTypeDestinationOracleUpdateSSHTunnelMethodNoTunnel

	return DestinationOracleUpdateSSHTunnelMethod{
		DestinationOracleUpdateSSHTunnelMethodNoTunnel: &destinationOracleUpdateSSHTunnelMethodNoTunnel,
		Type: typ,
	}
}

func CreateDestinationOracleUpdateSSHTunnelMethodDestinationOracleUpdateSSHTunnelMethodSSHKeyAuthentication(destinationOracleUpdateSSHTunnelMethodSSHKeyAuthentication DestinationOracleUpdateSSHTunnelMethodSSHKeyAuthentication) DestinationOracleUpdateSSHTunnelMethod {
	typ := DestinationOracleUpdateSSHTunnelMethodTypeDestinationOracleUpdateSSHTunnelMethodSSHKeyAuthentication

	return DestinationOracleUpdateSSHTunnelMethod{
		DestinationOracleUpdateSSHTunnelMethodSSHKeyAuthentication: &destinationOracleUpdateSSHTunnelMethodSSHKeyAuthentication,
		Type: typ,
	}
}

func CreateDestinationOracleUpdateSSHTunnelMethodDestinationOracleUpdateSSHTunnelMethodPasswordAuthentication(destinationOracleUpdateSSHTunnelMethodPasswordAuthentication DestinationOracleUpdateSSHTunnelMethodPasswordAuthentication) DestinationOracleUpdateSSHTunnelMethod {
	typ := DestinationOracleUpdateSSHTunnelMethodTypeDestinationOracleUpdateSSHTunnelMethodPasswordAuthentication

	return DestinationOracleUpdateSSHTunnelMethod{
		DestinationOracleUpdateSSHTunnelMethodPasswordAuthentication: &destinationOracleUpdateSSHTunnelMethodPasswordAuthentication,
		Type: typ,
	}
}

func (u *DestinationOracleUpdateSSHTunnelMethod) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	destinationOracleUpdateSSHTunnelMethodNoTunnel := new(DestinationOracleUpdateSSHTunnelMethodNoTunnel)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&destinationOracleUpdateSSHTunnelMethodNoTunnel); err == nil {
		u.DestinationOracleUpdateSSHTunnelMethodNoTunnel = destinationOracleUpdateSSHTunnelMethodNoTunnel
		u.Type = DestinationOracleUpdateSSHTunnelMethodTypeDestinationOracleUpdateSSHTunnelMethodNoTunnel
		return nil
	}

	destinationOracleUpdateSSHTunnelMethodSSHKeyAuthentication := new(DestinationOracleUpdateSSHTunnelMethodSSHKeyAuthentication)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&destinationOracleUpdateSSHTunnelMethodSSHKeyAuthentication); err == nil {
		u.DestinationOracleUpdateSSHTunnelMethodSSHKeyAuthentication = destinationOracleUpdateSSHTunnelMethodSSHKeyAuthentication
		u.Type = DestinationOracleUpdateSSHTunnelMethodTypeDestinationOracleUpdateSSHTunnelMethodSSHKeyAuthentication
		return nil
	}

	destinationOracleUpdateSSHTunnelMethodPasswordAuthentication := new(DestinationOracleUpdateSSHTunnelMethodPasswordAuthentication)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&destinationOracleUpdateSSHTunnelMethodPasswordAuthentication); err == nil {
		u.DestinationOracleUpdateSSHTunnelMethodPasswordAuthentication = destinationOracleUpdateSSHTunnelMethodPasswordAuthentication
		u.Type = DestinationOracleUpdateSSHTunnelMethodTypeDestinationOracleUpdateSSHTunnelMethodPasswordAuthentication
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u DestinationOracleUpdateSSHTunnelMethod) MarshalJSON() ([]byte, error) {
	if u.DestinationOracleUpdateSSHTunnelMethodNoTunnel != nil {
		return json.Marshal(u.DestinationOracleUpdateSSHTunnelMethodNoTunnel)
	}

	if u.DestinationOracleUpdateSSHTunnelMethodSSHKeyAuthentication != nil {
		return json.Marshal(u.DestinationOracleUpdateSSHTunnelMethodSSHKeyAuthentication)
	}

	if u.DestinationOracleUpdateSSHTunnelMethodPasswordAuthentication != nil {
		return json.Marshal(u.DestinationOracleUpdateSSHTunnelMethodPasswordAuthentication)
	}

	return nil, nil
}

type DestinationOracleUpdate struct {
	// The hostname of the database.
	Host string `json:"host"`
	// Additional properties to pass to the JDBC URL string when connecting to the database formatted as 'key=value' pairs separated by the symbol '&'. (example: key1=value1&key2=value2&key3=value3).
	JdbcURLParams *string `json:"jdbc_url_params,omitempty"`
	// The password associated with the username.
	Password *string `json:"password,omitempty"`
	// The port of the database.
	Port int64 `json:"port"`
	// The default schema is used as the target schema for all statements issued from the connection that do not explicitly specify a schema name. The usual value for this field is "airbyte".  In Oracle, schemas and users are the same thing, so the "user" parameter is used as the login credentials and this is used for the default Airbyte message schema.
	Schema *string `json:"schema,omitempty"`
	// The System Identifier uniquely distinguishes the instance from any other instance on the same computer.
	Sid string `json:"sid"`
	// Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.
	TunnelMethod *DestinationOracleUpdateSSHTunnelMethod `json:"tunnel_method,omitempty"`
	// The username to access the database. This user must have CREATE USER privileges in the database.
	Username string `json:"username"`
}
