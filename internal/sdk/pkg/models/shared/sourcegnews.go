// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// SourceGnewsCountryEnum - This parameter allows you to specify the country where the news articles returned by the API were published, the contents of the articles are not necessarily related to the specified country. You have to set as value the 2 letters code of the country you want to filter.
type SourceGnewsCountryEnum string

const (
	SourceGnewsCountryEnumAu SourceGnewsCountryEnum = "au"
	SourceGnewsCountryEnumBr SourceGnewsCountryEnum = "br"
	SourceGnewsCountryEnumCa SourceGnewsCountryEnum = "ca"
	SourceGnewsCountryEnumCn SourceGnewsCountryEnum = "cn"
	SourceGnewsCountryEnumEg SourceGnewsCountryEnum = "eg"
	SourceGnewsCountryEnumFr SourceGnewsCountryEnum = "fr"
	SourceGnewsCountryEnumDe SourceGnewsCountryEnum = "de"
	SourceGnewsCountryEnumGr SourceGnewsCountryEnum = "gr"
	SourceGnewsCountryEnumHk SourceGnewsCountryEnum = "hk"
	SourceGnewsCountryEnumIn SourceGnewsCountryEnum = "in"
	SourceGnewsCountryEnumIe SourceGnewsCountryEnum = "ie"
	SourceGnewsCountryEnumIl SourceGnewsCountryEnum = "il"
	SourceGnewsCountryEnumIt SourceGnewsCountryEnum = "it"
	SourceGnewsCountryEnumJp SourceGnewsCountryEnum = "jp"
	SourceGnewsCountryEnumNl SourceGnewsCountryEnum = "nl"
	SourceGnewsCountryEnumNo SourceGnewsCountryEnum = "no"
	SourceGnewsCountryEnumPk SourceGnewsCountryEnum = "pk"
	SourceGnewsCountryEnumPe SourceGnewsCountryEnum = "pe"
	SourceGnewsCountryEnumPh SourceGnewsCountryEnum = "ph"
	SourceGnewsCountryEnumPt SourceGnewsCountryEnum = "pt"
	SourceGnewsCountryEnumRo SourceGnewsCountryEnum = "ro"
	SourceGnewsCountryEnumRu SourceGnewsCountryEnum = "ru"
	SourceGnewsCountryEnumSg SourceGnewsCountryEnum = "sg"
	SourceGnewsCountryEnumEs SourceGnewsCountryEnum = "es"
	SourceGnewsCountryEnumSe SourceGnewsCountryEnum = "se"
	SourceGnewsCountryEnumCh SourceGnewsCountryEnum = "ch"
	SourceGnewsCountryEnumTw SourceGnewsCountryEnum = "tw"
	SourceGnewsCountryEnumUa SourceGnewsCountryEnum = "ua"
	SourceGnewsCountryEnumGb SourceGnewsCountryEnum = "gb"
	SourceGnewsCountryEnumUs SourceGnewsCountryEnum = "us"
)

func (e SourceGnewsCountryEnum) ToPointer() *SourceGnewsCountryEnum {
	return &e
}

func (e *SourceGnewsCountryEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "au":
		fallthrough
	case "br":
		fallthrough
	case "ca":
		fallthrough
	case "cn":
		fallthrough
	case "eg":
		fallthrough
	case "fr":
		fallthrough
	case "de":
		fallthrough
	case "gr":
		fallthrough
	case "hk":
		fallthrough
	case "in":
		fallthrough
	case "ie":
		fallthrough
	case "il":
		fallthrough
	case "it":
		fallthrough
	case "jp":
		fallthrough
	case "nl":
		fallthrough
	case "no":
		fallthrough
	case "pk":
		fallthrough
	case "pe":
		fallthrough
	case "ph":
		fallthrough
	case "pt":
		fallthrough
	case "ro":
		fallthrough
	case "ru":
		fallthrough
	case "sg":
		fallthrough
	case "es":
		fallthrough
	case "se":
		fallthrough
	case "ch":
		fallthrough
	case "tw":
		fallthrough
	case "ua":
		fallthrough
	case "gb":
		fallthrough
	case "us":
		*e = SourceGnewsCountryEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceGnewsCountryEnum: %v", v)
	}
}

type SourceGnewsInEnum string

const (
	SourceGnewsInEnumTitle       SourceGnewsInEnum = "title"
	SourceGnewsInEnumDescription SourceGnewsInEnum = "description"
	SourceGnewsInEnumContent     SourceGnewsInEnum = "content"
)

func (e SourceGnewsInEnum) ToPointer() *SourceGnewsInEnum {
	return &e
}

func (e *SourceGnewsInEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "title":
		fallthrough
	case "description":
		fallthrough
	case "content":
		*e = SourceGnewsInEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceGnewsInEnum: %v", v)
	}
}

type SourceGnewsLanguageEnum string

const (
	SourceGnewsLanguageEnumAr SourceGnewsLanguageEnum = "ar"
	SourceGnewsLanguageEnumZh SourceGnewsLanguageEnum = "zh"
	SourceGnewsLanguageEnumNl SourceGnewsLanguageEnum = "nl"
	SourceGnewsLanguageEnumEn SourceGnewsLanguageEnum = "en"
	SourceGnewsLanguageEnumFr SourceGnewsLanguageEnum = "fr"
	SourceGnewsLanguageEnumDe SourceGnewsLanguageEnum = "de"
	SourceGnewsLanguageEnumEl SourceGnewsLanguageEnum = "el"
	SourceGnewsLanguageEnumHe SourceGnewsLanguageEnum = "he"
	SourceGnewsLanguageEnumHi SourceGnewsLanguageEnum = "hi"
	SourceGnewsLanguageEnumIt SourceGnewsLanguageEnum = "it"
	SourceGnewsLanguageEnumJa SourceGnewsLanguageEnum = "ja"
	SourceGnewsLanguageEnumMl SourceGnewsLanguageEnum = "ml"
	SourceGnewsLanguageEnumMr SourceGnewsLanguageEnum = "mr"
	SourceGnewsLanguageEnumNo SourceGnewsLanguageEnum = "no"
	SourceGnewsLanguageEnumPt SourceGnewsLanguageEnum = "pt"
	SourceGnewsLanguageEnumRo SourceGnewsLanguageEnum = "ro"
	SourceGnewsLanguageEnumRu SourceGnewsLanguageEnum = "ru"
	SourceGnewsLanguageEnumEs SourceGnewsLanguageEnum = "es"
	SourceGnewsLanguageEnumSv SourceGnewsLanguageEnum = "sv"
	SourceGnewsLanguageEnumTa SourceGnewsLanguageEnum = "ta"
	SourceGnewsLanguageEnumTe SourceGnewsLanguageEnum = "te"
	SourceGnewsLanguageEnumUk SourceGnewsLanguageEnum = "uk"
)

func (e SourceGnewsLanguageEnum) ToPointer() *SourceGnewsLanguageEnum {
	return &e
}

func (e *SourceGnewsLanguageEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ar":
		fallthrough
	case "zh":
		fallthrough
	case "nl":
		fallthrough
	case "en":
		fallthrough
	case "fr":
		fallthrough
	case "de":
		fallthrough
	case "el":
		fallthrough
	case "he":
		fallthrough
	case "hi":
		fallthrough
	case "it":
		fallthrough
	case "ja":
		fallthrough
	case "ml":
		fallthrough
	case "mr":
		fallthrough
	case "no":
		fallthrough
	case "pt":
		fallthrough
	case "ro":
		fallthrough
	case "ru":
		fallthrough
	case "es":
		fallthrough
	case "sv":
		fallthrough
	case "ta":
		fallthrough
	case "te":
		fallthrough
	case "uk":
		*e = SourceGnewsLanguageEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceGnewsLanguageEnum: %v", v)
	}
}

type SourceGnewsNullableEnum string

const (
	SourceGnewsNullableEnumTitle       SourceGnewsNullableEnum = "title"
	SourceGnewsNullableEnumDescription SourceGnewsNullableEnum = "description"
	SourceGnewsNullableEnumContent     SourceGnewsNullableEnum = "content"
)

func (e SourceGnewsNullableEnum) ToPointer() *SourceGnewsNullableEnum {
	return &e
}

func (e *SourceGnewsNullableEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "title":
		fallthrough
	case "description":
		fallthrough
	case "content":
		*e = SourceGnewsNullableEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceGnewsNullableEnum: %v", v)
	}
}

// SourceGnewsSortByEnum - This parameter allows you to choose with which type of sorting the articles should be returned. Two values  are possible:
//   - publishedAt = sort by publication date, the articles with the most recent publication date are returned first
//   - relevance = sort by best match to keywords, the articles with the best match are returned first
type SourceGnewsSortByEnum string

const (
	SourceGnewsSortByEnumPublishedAt SourceGnewsSortByEnum = "publishedAt"
	SourceGnewsSortByEnumRelevance   SourceGnewsSortByEnum = "relevance"
)

func (e SourceGnewsSortByEnum) ToPointer() *SourceGnewsSortByEnum {
	return &e
}

func (e *SourceGnewsSortByEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "publishedAt":
		fallthrough
	case "relevance":
		*e = SourceGnewsSortByEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceGnewsSortByEnum: %v", v)
	}
}

type SourceGnewsGnewsEnum string

const (
	SourceGnewsGnewsEnumGnews SourceGnewsGnewsEnum = "gnews"
)

func (e SourceGnewsGnewsEnum) ToPointer() *SourceGnewsGnewsEnum {
	return &e
}

func (e *SourceGnewsGnewsEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gnews":
		*e = SourceGnewsGnewsEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceGnewsGnewsEnum: %v", v)
	}
}

// SourceGnewsTopHeadlinesTopicEnum - This parameter allows you to change the category for the request.
type SourceGnewsTopHeadlinesTopicEnum string

const (
	SourceGnewsTopHeadlinesTopicEnumBreakingNews  SourceGnewsTopHeadlinesTopicEnum = "breaking-news"
	SourceGnewsTopHeadlinesTopicEnumWorld         SourceGnewsTopHeadlinesTopicEnum = "world"
	SourceGnewsTopHeadlinesTopicEnumNation        SourceGnewsTopHeadlinesTopicEnum = "nation"
	SourceGnewsTopHeadlinesTopicEnumBusiness      SourceGnewsTopHeadlinesTopicEnum = "business"
	SourceGnewsTopHeadlinesTopicEnumTechnology    SourceGnewsTopHeadlinesTopicEnum = "technology"
	SourceGnewsTopHeadlinesTopicEnumEntertainment SourceGnewsTopHeadlinesTopicEnum = "entertainment"
	SourceGnewsTopHeadlinesTopicEnumSports        SourceGnewsTopHeadlinesTopicEnum = "sports"
	SourceGnewsTopHeadlinesTopicEnumScience       SourceGnewsTopHeadlinesTopicEnum = "science"
	SourceGnewsTopHeadlinesTopicEnumHealth        SourceGnewsTopHeadlinesTopicEnum = "health"
)

func (e SourceGnewsTopHeadlinesTopicEnum) ToPointer() *SourceGnewsTopHeadlinesTopicEnum {
	return &e
}

func (e *SourceGnewsTopHeadlinesTopicEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "breaking-news":
		fallthrough
	case "world":
		fallthrough
	case "nation":
		fallthrough
	case "business":
		fallthrough
	case "technology":
		fallthrough
	case "entertainment":
		fallthrough
	case "sports":
		fallthrough
	case "science":
		fallthrough
	case "health":
		*e = SourceGnewsTopHeadlinesTopicEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceGnewsTopHeadlinesTopicEnum: %v", v)
	}
}

type SourceGnews struct {
	// API Key
	APIKey string `json:"api_key"`
	// This parameter allows you to specify the country where the news articles returned by the API were published, the contents of the articles are not necessarily related to the specified country. You have to set as value the 2 letters code of the country you want to filter.
	Country *SourceGnewsCountryEnum `json:"country,omitempty"`
	// This parameter allows you to filter the articles that have a publication date smaller than or equal to the  specified value. The date must respect the following format: YYYY-MM-DD hh:mm:ss (in UTC)
	EndDate *string `json:"end_date,omitempty"`
	// This parameter allows you to choose in which attributes the keywords are searched. The attributes that can be set are title, description and content. It is possible to combine several attributes.
	In       []SourceGnewsInEnum      `json:"in,omitempty"`
	Language *SourceGnewsLanguageEnum `json:"language,omitempty"`
	// This parameter allows you to specify the attributes that you allow to return null values. The attributes that  can be set are title, description and content. It is possible to combine several attributes
	Nullable []SourceGnewsNullableEnum `json:"nullable,omitempty"`
	// This parameter allows you to specify your search keywords to find the news articles you are looking for. The keywords will be used to return the most relevant articles. It is possible to use logical operators  with keywords. - Phrase Search Operator: This operator allows you to make an exact search. Keywords surrounded by
	//   quotation marks are used to search for articles with the exact same keyword sequence.
	//   For example the query: "Apple iPhone" will return articles matching at least once this sequence of keywords.
	// - Logical AND Operator: This operator allows you to make sure that several keywords are all used in the article
	//   search. By default the space character acts as an AND operator, it is possible to replace the space character
	//   by AND to obtain the same result. For example the query: Apple Microsoft is equivalent to Apple AND Microsoft
	// - Logical OR Operator: This operator allows you to retrieve articles matching the keyword a or the keyword b.
	//   It is important to note that this operator has a higher precedence than the AND operator. For example the
	//   query: Apple OR Microsoft will return all articles matching the keyword Apple as well as all articles matching
	//   the keyword Microsoft
	// - Logical NOT Operator: This operator allows you to remove from the results the articles corresponding to the
	//   specified keywords. To use it, you need to add NOT in front of each word or phrase surrounded by quotes.
	//   For example the query: Apple NOT iPhone will return all articles matching the keyword Apple but not the keyword
	//   iPhone
	Query string `json:"query"`
	// This parameter allows you to choose with which type of sorting the articles should be returned. Two values  are possible:
	//   - publishedAt = sort by publication date, the articles with the most recent publication date are returned first
	//   - relevance = sort by best match to keywords, the articles with the best match are returned first
	Sortby     *SourceGnewsSortByEnum `json:"sortby,omitempty"`
	SourceType SourceGnewsGnewsEnum   `json:"sourceType"`
	// This parameter allows you to filter the articles that have a publication date greater than or equal to the  specified value. The date must respect the following format: YYYY-MM-DD hh:mm:ss (in UTC)
	StartDate *string `json:"start_date,omitempty"`
	// This parameter allows you to specify your search keywords to find the news articles you are looking for. The keywords will be used to return the most relevant articles. It is possible to use logical operators  with keywords. - Phrase Search Operator: This operator allows you to make an exact search. Keywords surrounded by
	//   quotation marks are used to search for articles with the exact same keyword sequence.
	//   For example the query: "Apple iPhone" will return articles matching at least once this sequence of keywords.
	// - Logical AND Operator: This operator allows you to make sure that several keywords are all used in the article
	//   search. By default the space character acts as an AND operator, it is possible to replace the space character
	//   by AND to obtain the same result. For example the query: Apple Microsoft is equivalent to Apple AND Microsoft
	// - Logical OR Operator: This operator allows you to retrieve articles matching the keyword a or the keyword b.
	//   It is important to note that this operator has a higher precedence than the AND operator. For example the
	//   query: Apple OR Microsoft will return all articles matching the keyword Apple as well as all articles matching
	//   the keyword Microsoft
	// - Logical NOT Operator: This operator allows you to remove from the results the articles corresponding to the
	//   specified keywords. To use it, you need to add NOT in front of each word or phrase surrounded by quotes.
	//   For example the query: Apple NOT iPhone will return all articles matching the keyword Apple but not the keyword
	//   iPhone
	TopHeadlinesQuery *string `json:"top_headlines_query,omitempty"`
	// This parameter allows you to change the category for the request.
	TopHeadlinesTopic *SourceGnewsTopHeadlinesTopicEnum `json:"top_headlines_topic,omitempty"`
}
