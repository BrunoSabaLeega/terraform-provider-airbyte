// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

type SourceSurveymonkeySurveyMonkeyAuthorizationMethodAuthMethod string

const (
	SourceSurveymonkeySurveyMonkeyAuthorizationMethodAuthMethodOauth20 SourceSurveymonkeySurveyMonkeyAuthorizationMethodAuthMethod = "oauth2.0"
)

func (e SourceSurveymonkeySurveyMonkeyAuthorizationMethodAuthMethod) ToPointer() *SourceSurveymonkeySurveyMonkeyAuthorizationMethodAuthMethod {
	return &e
}

func (e *SourceSurveymonkeySurveyMonkeyAuthorizationMethodAuthMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "oauth2.0":
		*e = SourceSurveymonkeySurveyMonkeyAuthorizationMethodAuthMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceSurveymonkeySurveyMonkeyAuthorizationMethodAuthMethod: %v", v)
	}
}

// SourceSurveymonkeySurveyMonkeyAuthorizationMethod - The authorization method to use to retrieve data from SurveyMonkey
type SourceSurveymonkeySurveyMonkeyAuthorizationMethod struct {
	// Access Token for making authenticated requests. See the <a href="https://docs.airbyte.io/integrations/sources/surveymonkey">docs</a> for information on how to generate this key.
	AccessToken string                                                      `json:"access_token"`
	AuthMethod  SourceSurveymonkeySurveyMonkeyAuthorizationMethodAuthMethod `json:"auth_method"`
	// The Client ID of the SurveyMonkey developer application.
	ClientID *string `json:"client_id,omitempty"`
	// The Client Secret of the SurveyMonkey developer application.
	ClientSecret *string `json:"client_secret,omitempty"`
}

// SourceSurveymonkeyOriginDatacenterOfTheSurveyMonkeyAccount - Depending on the originating datacenter of the SurveyMonkey account, the API access URL may be different.
type SourceSurveymonkeyOriginDatacenterOfTheSurveyMonkeyAccount string

const (
	SourceSurveymonkeyOriginDatacenterOfTheSurveyMonkeyAccountUsa    SourceSurveymonkeyOriginDatacenterOfTheSurveyMonkeyAccount = "USA"
	SourceSurveymonkeyOriginDatacenterOfTheSurveyMonkeyAccountEurope SourceSurveymonkeyOriginDatacenterOfTheSurveyMonkeyAccount = "Europe"
	SourceSurveymonkeyOriginDatacenterOfTheSurveyMonkeyAccountCanada SourceSurveymonkeyOriginDatacenterOfTheSurveyMonkeyAccount = "Canada"
)

func (e SourceSurveymonkeyOriginDatacenterOfTheSurveyMonkeyAccount) ToPointer() *SourceSurveymonkeyOriginDatacenterOfTheSurveyMonkeyAccount {
	return &e
}

func (e *SourceSurveymonkeyOriginDatacenterOfTheSurveyMonkeyAccount) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "USA":
		fallthrough
	case "Europe":
		fallthrough
	case "Canada":
		*e = SourceSurveymonkeyOriginDatacenterOfTheSurveyMonkeyAccount(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceSurveymonkeyOriginDatacenterOfTheSurveyMonkeyAccount: %v", v)
	}
}

type SourceSurveymonkeySurveymonkey string

const (
	SourceSurveymonkeySurveymonkeySurveymonkey SourceSurveymonkeySurveymonkey = "surveymonkey"
)

func (e SourceSurveymonkeySurveymonkey) ToPointer() *SourceSurveymonkeySurveymonkey {
	return &e
}

func (e *SourceSurveymonkeySurveymonkey) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "surveymonkey":
		*e = SourceSurveymonkeySurveymonkey(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceSurveymonkeySurveymonkey: %v", v)
	}
}

type SourceSurveymonkey struct {
	// The authorization method to use to retrieve data from SurveyMonkey
	Credentials *SourceSurveymonkeySurveyMonkeyAuthorizationMethod `json:"credentials,omitempty"`
	// Depending on the originating datacenter of the SurveyMonkey account, the API access URL may be different.
	Origin     *SourceSurveymonkeyOriginDatacenterOfTheSurveyMonkeyAccount `json:"origin,omitempty"`
	SourceType SourceSurveymonkeySurveymonkey                              `json:"sourceType"`
	// UTC date and time in the format 2017-01-25T00:00:00Z. Any data before this date will not be replicated.
	StartDate time.Time `json:"start_date"`
	// IDs of the surveys from which you'd like to replicate data. If left empty, data from all boards to which you have access will be replicated.
	SurveyIds []string `json:"survey_ids,omitempty"`
}
