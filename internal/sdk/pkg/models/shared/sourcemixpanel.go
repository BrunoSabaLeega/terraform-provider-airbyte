// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

type SourceMixpanelAuthenticationWildcardProjectSecretOptionTitleEnum string

const (
	SourceMixpanelAuthenticationWildcardProjectSecretOptionTitleEnumProjectSecret SourceMixpanelAuthenticationWildcardProjectSecretOptionTitleEnum = "Project Secret"
)

func (e *SourceMixpanelAuthenticationWildcardProjectSecretOptionTitleEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Project Secret":
		*e = SourceMixpanelAuthenticationWildcardProjectSecretOptionTitleEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceMixpanelAuthenticationWildcardProjectSecretOptionTitleEnum: %s", s)
	}
}

// SourceMixpanelAuthenticationWildcardProjectSecret - Choose how to authenticate to Mixpanel
type SourceMixpanelAuthenticationWildcardProjectSecret struct {
	// Mixpanel project secret. See the <a href="https://developer.mixpanel.com/reference/project-secret#managing-a-projects-secret">docs</a> for more information on how to obtain this.
	APISecret   string                                                            `json:"api_secret"`
	OptionTitle *SourceMixpanelAuthenticationWildcardProjectSecretOptionTitleEnum `json:"option_title,omitempty"`
}

type SourceMixpanelAuthenticationWildcardServiceAccountOptionTitleEnum string

const (
	SourceMixpanelAuthenticationWildcardServiceAccountOptionTitleEnumServiceAccount SourceMixpanelAuthenticationWildcardServiceAccountOptionTitleEnum = "Service Account"
)

func (e *SourceMixpanelAuthenticationWildcardServiceAccountOptionTitleEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Service Account":
		*e = SourceMixpanelAuthenticationWildcardServiceAccountOptionTitleEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceMixpanelAuthenticationWildcardServiceAccountOptionTitleEnum: %s", s)
	}
}

// SourceMixpanelAuthenticationWildcardServiceAccount - Choose how to authenticate to Mixpanel
type SourceMixpanelAuthenticationWildcardServiceAccount struct {
	OptionTitle *SourceMixpanelAuthenticationWildcardServiceAccountOptionTitleEnum `json:"option_title,omitempty"`
	// Mixpanel Service Account Secret. See the <a href="https://developer.mixpanel.com/reference/service-accounts">docs</a> for more information on how to obtain this.
	Secret string `json:"secret"`
	// Mixpanel Service Account Username. See the <a href="https://developer.mixpanel.com/reference/service-accounts">docs</a> for more information on how to obtain this.
	Username string `json:"username"`
}

type SourceMixpanelAuthenticationWildcardType string

const (
	SourceMixpanelAuthenticationWildcardTypeSourceMixpanelAuthenticationWildcardServiceAccount SourceMixpanelAuthenticationWildcardType = "source-mixpanel_Authentication *_Service Account"
	SourceMixpanelAuthenticationWildcardTypeSourceMixpanelAuthenticationWildcardProjectSecret  SourceMixpanelAuthenticationWildcardType = "source-mixpanel_Authentication *_Project Secret"
)

type SourceMixpanelAuthenticationWildcard struct {
	SourceMixpanelAuthenticationWildcardServiceAccount *SourceMixpanelAuthenticationWildcardServiceAccount
	SourceMixpanelAuthenticationWildcardProjectSecret  *SourceMixpanelAuthenticationWildcardProjectSecret

	Type SourceMixpanelAuthenticationWildcardType
}

func CreateSourceMixpanelAuthenticationWildcardSourceMixpanelAuthenticationWildcardServiceAccount(sourceMixpanelAuthenticationWildcardServiceAccount SourceMixpanelAuthenticationWildcardServiceAccount) SourceMixpanelAuthenticationWildcard {
	typ := SourceMixpanelAuthenticationWildcardTypeSourceMixpanelAuthenticationWildcardServiceAccount

	return SourceMixpanelAuthenticationWildcard{
		SourceMixpanelAuthenticationWildcardServiceAccount: &sourceMixpanelAuthenticationWildcardServiceAccount,
		Type: typ,
	}
}

func CreateSourceMixpanelAuthenticationWildcardSourceMixpanelAuthenticationWildcardProjectSecret(sourceMixpanelAuthenticationWildcardProjectSecret SourceMixpanelAuthenticationWildcardProjectSecret) SourceMixpanelAuthenticationWildcard {
	typ := SourceMixpanelAuthenticationWildcardTypeSourceMixpanelAuthenticationWildcardProjectSecret

	return SourceMixpanelAuthenticationWildcard{
		SourceMixpanelAuthenticationWildcardProjectSecret: &sourceMixpanelAuthenticationWildcardProjectSecret,
		Type: typ,
	}
}

func (u *SourceMixpanelAuthenticationWildcard) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	sourceMixpanelAuthenticationWildcardServiceAccount := new(SourceMixpanelAuthenticationWildcardServiceAccount)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceMixpanelAuthenticationWildcardServiceAccount); err == nil {
		u.SourceMixpanelAuthenticationWildcardServiceAccount = sourceMixpanelAuthenticationWildcardServiceAccount
		u.Type = SourceMixpanelAuthenticationWildcardTypeSourceMixpanelAuthenticationWildcardServiceAccount
		return nil
	}

	sourceMixpanelAuthenticationWildcardProjectSecret := new(SourceMixpanelAuthenticationWildcardProjectSecret)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceMixpanelAuthenticationWildcardProjectSecret); err == nil {
		u.SourceMixpanelAuthenticationWildcardProjectSecret = sourceMixpanelAuthenticationWildcardProjectSecret
		u.Type = SourceMixpanelAuthenticationWildcardTypeSourceMixpanelAuthenticationWildcardProjectSecret
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceMixpanelAuthenticationWildcard) MarshalJSON() ([]byte, error) {
	if u.SourceMixpanelAuthenticationWildcardServiceAccount != nil {
		return json.Marshal(u.SourceMixpanelAuthenticationWildcardServiceAccount)
	}

	if u.SourceMixpanelAuthenticationWildcardProjectSecret != nil {
		return json.Marshal(u.SourceMixpanelAuthenticationWildcardProjectSecret)
	}

	return nil, nil
}

// SourceMixpanelRegionEnum - The region of mixpanel domain instance either US or EU.
type SourceMixpanelRegionEnum string

const (
	SourceMixpanelRegionEnumUs SourceMixpanelRegionEnum = "US"
	SourceMixpanelRegionEnumEu SourceMixpanelRegionEnum = "EU"
)

func (e *SourceMixpanelRegionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "US":
		fallthrough
	case "EU":
		*e = SourceMixpanelRegionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceMixpanelRegionEnum: %s", s)
	}
}

type SourceMixpanelMixpanelEnum string

const (
	SourceMixpanelMixpanelEnumMixpanel SourceMixpanelMixpanelEnum = "mixpanel"
)

func (e *SourceMixpanelMixpanelEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "mixpanel":
		*e = SourceMixpanelMixpanelEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceMixpanelMixpanelEnum: %s", s)
	}
}

// SourceMixpanel - The values required to configure the source.
type SourceMixpanel struct {
	//  A period of time for attributing results to ads and the lookback period after those actions occur during which ad results are counted. Default attribution window is 5 days.
	AttributionWindow *int64 `json:"attribution_window,omitempty"`
	// Choose how to authenticate to Mixpanel
	Credentials *SourceMixpanelAuthenticationWildcard `json:"credentials,omitempty"`
	// Defines window size in days, that used to slice through data. You can reduce it, if amount of data in each window is too big for your environment.
	DateWindowSize *int64 `json:"date_window_size,omitempty"`
	// The date in the format YYYY-MM-DD. Any data after this date will not be replicated. Left empty to always sync to most recent date
	EndDate *string `json:"end_date,omitempty"`
	// Your project ID number. See the <a href="https://help.mixpanel.com/hc/en-us/articles/115004490503-Project-Settings#project-id">docs</a> for more information on how to obtain this.
	ProjectID *int64 `json:"project_id,omitempty"`
	// Time zone in which integer date times are stored. The project timezone may be found in the project settings in the <a href="https://help.mixpanel.com/hc/en-us/articles/115004547203-Manage-Timezones-for-Projects-in-Mixpanel">Mixpanel console</a>.
	ProjectTimezone *string `json:"project_timezone,omitempty"`
	// The region of mixpanel domain instance either US or EU.
	Region *SourceMixpanelRegionEnum `json:"region,omitempty"`
	// Setting this config parameter to TRUE ensures that new properties on events and engage records are captured. Otherwise new properties will be ignored.
	SelectPropertiesByDefault *bool                      `json:"select_properties_by_default,omitempty"`
	SourceType                SourceMixpanelMixpanelEnum `json:"sourceType"`
	// The date in the format YYYY-MM-DD. Any data before this date will not be replicated. If this option is not set, the connector will replicate data from up to one year ago by default.
	StartDate *string `json:"start_date,omitempty"`
}
