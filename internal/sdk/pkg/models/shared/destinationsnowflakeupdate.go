// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

type DestinationSnowflakeUpdateAuthorizationMethodUsernameAndPasswordAuthType string

const (
	DestinationSnowflakeUpdateAuthorizationMethodUsernameAndPasswordAuthTypeUsernameAndPassword DestinationSnowflakeUpdateAuthorizationMethodUsernameAndPasswordAuthType = "Username and Password"
)

func (e DestinationSnowflakeUpdateAuthorizationMethodUsernameAndPasswordAuthType) ToPointer() *DestinationSnowflakeUpdateAuthorizationMethodUsernameAndPasswordAuthType {
	return &e
}

func (e *DestinationSnowflakeUpdateAuthorizationMethodUsernameAndPasswordAuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Username and Password":
		*e = DestinationSnowflakeUpdateAuthorizationMethodUsernameAndPasswordAuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationSnowflakeUpdateAuthorizationMethodUsernameAndPasswordAuthType: %v", v)
	}
}

type DestinationSnowflakeUpdateAuthorizationMethodUsernameAndPassword struct {
	AuthType *DestinationSnowflakeUpdateAuthorizationMethodUsernameAndPasswordAuthType `json:"auth_type,omitempty"`
	// Enter the password associated with the username.
	Password string `json:"password"`
}

type DestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthenticationAuthType string

const (
	DestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthenticationAuthTypeKeyPairAuthentication DestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthenticationAuthType = "Key Pair Authentication"
)

func (e DestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthenticationAuthType) ToPointer() *DestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthenticationAuthType {
	return &e
}

func (e *DestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthenticationAuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Key Pair Authentication":
		*e = DestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthenticationAuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthenticationAuthType: %v", v)
	}
}

type DestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthentication struct {
	AuthType *DestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthenticationAuthType `json:"auth_type,omitempty"`
	// RSA Private key to use for Snowflake connection. See the <a href="https://docs.airbyte.com/integrations/destinations/snowflake">docs</a> for more information on how to obtain this key.
	PrivateKey string `json:"private_key"`
	// Passphrase for private key
	PrivateKeyPassword *string `json:"private_key_password,omitempty"`
}

type DestinationSnowflakeUpdateAuthorizationMethodOAuth20AuthType string

const (
	DestinationSnowflakeUpdateAuthorizationMethodOAuth20AuthTypeOAuth20 DestinationSnowflakeUpdateAuthorizationMethodOAuth20AuthType = "OAuth2.0"
)

func (e DestinationSnowflakeUpdateAuthorizationMethodOAuth20AuthType) ToPointer() *DestinationSnowflakeUpdateAuthorizationMethodOAuth20AuthType {
	return &e
}

func (e *DestinationSnowflakeUpdateAuthorizationMethodOAuth20AuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OAuth2.0":
		*e = DestinationSnowflakeUpdateAuthorizationMethodOAuth20AuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationSnowflakeUpdateAuthorizationMethodOAuth20AuthType: %v", v)
	}
}

type DestinationSnowflakeUpdateAuthorizationMethodOAuth20 struct {
	// Enter you application's Access Token
	AccessToken string                                                        `json:"access_token"`
	AuthType    *DestinationSnowflakeUpdateAuthorizationMethodOAuth20AuthType `json:"auth_type,omitempty"`
	// Enter your application's Client ID
	ClientID *string `json:"client_id,omitempty"`
	// Enter your application's Client secret
	ClientSecret *string `json:"client_secret,omitempty"`
	// Enter your application's Refresh Token
	RefreshToken string `json:"refresh_token"`
}

type DestinationSnowflakeUpdateAuthorizationMethodType string

const (
	DestinationSnowflakeUpdateAuthorizationMethodTypeDestinationSnowflakeUpdateAuthorizationMethodOAuth20               DestinationSnowflakeUpdateAuthorizationMethodType = "destination-snowflake-update_Authorization Method_OAuth2.0"
	DestinationSnowflakeUpdateAuthorizationMethodTypeDestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthentication DestinationSnowflakeUpdateAuthorizationMethodType = "destination-snowflake-update_Authorization Method_Key Pair Authentication"
	DestinationSnowflakeUpdateAuthorizationMethodTypeDestinationSnowflakeUpdateAuthorizationMethodUsernameAndPassword   DestinationSnowflakeUpdateAuthorizationMethodType = "destination-snowflake-update_Authorization Method_Username and Password"
)

type DestinationSnowflakeUpdateAuthorizationMethod struct {
	DestinationSnowflakeUpdateAuthorizationMethodOAuth20               *DestinationSnowflakeUpdateAuthorizationMethodOAuth20
	DestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthentication *DestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthentication
	DestinationSnowflakeUpdateAuthorizationMethodUsernameAndPassword   *DestinationSnowflakeUpdateAuthorizationMethodUsernameAndPassword

	Type DestinationSnowflakeUpdateAuthorizationMethodType
}

func CreateDestinationSnowflakeUpdateAuthorizationMethodDestinationSnowflakeUpdateAuthorizationMethodOAuth20(destinationSnowflakeUpdateAuthorizationMethodOAuth20 DestinationSnowflakeUpdateAuthorizationMethodOAuth20) DestinationSnowflakeUpdateAuthorizationMethod {
	typ := DestinationSnowflakeUpdateAuthorizationMethodTypeDestinationSnowflakeUpdateAuthorizationMethodOAuth20

	return DestinationSnowflakeUpdateAuthorizationMethod{
		DestinationSnowflakeUpdateAuthorizationMethodOAuth20: &destinationSnowflakeUpdateAuthorizationMethodOAuth20,
		Type: typ,
	}
}

func CreateDestinationSnowflakeUpdateAuthorizationMethodDestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthentication(destinationSnowflakeUpdateAuthorizationMethodKeyPairAuthentication DestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthentication) DestinationSnowflakeUpdateAuthorizationMethod {
	typ := DestinationSnowflakeUpdateAuthorizationMethodTypeDestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthentication

	return DestinationSnowflakeUpdateAuthorizationMethod{
		DestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthentication: &destinationSnowflakeUpdateAuthorizationMethodKeyPairAuthentication,
		Type: typ,
	}
}

func CreateDestinationSnowflakeUpdateAuthorizationMethodDestinationSnowflakeUpdateAuthorizationMethodUsernameAndPassword(destinationSnowflakeUpdateAuthorizationMethodUsernameAndPassword DestinationSnowflakeUpdateAuthorizationMethodUsernameAndPassword) DestinationSnowflakeUpdateAuthorizationMethod {
	typ := DestinationSnowflakeUpdateAuthorizationMethodTypeDestinationSnowflakeUpdateAuthorizationMethodUsernameAndPassword

	return DestinationSnowflakeUpdateAuthorizationMethod{
		DestinationSnowflakeUpdateAuthorizationMethodUsernameAndPassword: &destinationSnowflakeUpdateAuthorizationMethodUsernameAndPassword,
		Type: typ,
	}
}

func (u *DestinationSnowflakeUpdateAuthorizationMethod) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	destinationSnowflakeUpdateAuthorizationMethodOAuth20 := new(DestinationSnowflakeUpdateAuthorizationMethodOAuth20)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&destinationSnowflakeUpdateAuthorizationMethodOAuth20); err == nil {
		u.DestinationSnowflakeUpdateAuthorizationMethodOAuth20 = destinationSnowflakeUpdateAuthorizationMethodOAuth20
		u.Type = DestinationSnowflakeUpdateAuthorizationMethodTypeDestinationSnowflakeUpdateAuthorizationMethodOAuth20
		return nil
	}

	destinationSnowflakeUpdateAuthorizationMethodKeyPairAuthentication := new(DestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthentication)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&destinationSnowflakeUpdateAuthorizationMethodKeyPairAuthentication); err == nil {
		u.DestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthentication = destinationSnowflakeUpdateAuthorizationMethodKeyPairAuthentication
		u.Type = DestinationSnowflakeUpdateAuthorizationMethodTypeDestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthentication
		return nil
	}

	destinationSnowflakeUpdateAuthorizationMethodUsernameAndPassword := new(DestinationSnowflakeUpdateAuthorizationMethodUsernameAndPassword)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&destinationSnowflakeUpdateAuthorizationMethodUsernameAndPassword); err == nil {
		u.DestinationSnowflakeUpdateAuthorizationMethodUsernameAndPassword = destinationSnowflakeUpdateAuthorizationMethodUsernameAndPassword
		u.Type = DestinationSnowflakeUpdateAuthorizationMethodTypeDestinationSnowflakeUpdateAuthorizationMethodUsernameAndPassword
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u DestinationSnowflakeUpdateAuthorizationMethod) MarshalJSON() ([]byte, error) {
	if u.DestinationSnowflakeUpdateAuthorizationMethodOAuth20 != nil {
		return json.Marshal(u.DestinationSnowflakeUpdateAuthorizationMethodOAuth20)
	}

	if u.DestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthentication != nil {
		return json.Marshal(u.DestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthentication)
	}

	if u.DestinationSnowflakeUpdateAuthorizationMethodUsernameAndPassword != nil {
		return json.Marshal(u.DestinationSnowflakeUpdateAuthorizationMethodUsernameAndPassword)
	}

	return nil, nil
}

type DestinationSnowflakeUpdateDataStagingMethodGoogleCloudStorageStagingMethod string

const (
	DestinationSnowflakeUpdateDataStagingMethodGoogleCloudStorageStagingMethodGcsStaging DestinationSnowflakeUpdateDataStagingMethodGoogleCloudStorageStagingMethod = "GCS Staging"
)

func (e DestinationSnowflakeUpdateDataStagingMethodGoogleCloudStorageStagingMethod) ToPointer() *DestinationSnowflakeUpdateDataStagingMethodGoogleCloudStorageStagingMethod {
	return &e
}

func (e *DestinationSnowflakeUpdateDataStagingMethodGoogleCloudStorageStagingMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "GCS Staging":
		*e = DestinationSnowflakeUpdateDataStagingMethodGoogleCloudStorageStagingMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationSnowflakeUpdateDataStagingMethodGoogleCloudStorageStagingMethod: %v", v)
	}
}

// DestinationSnowflakeUpdateDataStagingMethodGoogleCloudStorageStaging - Recommended for large production workloads for better speed and scalability.
type DestinationSnowflakeUpdateDataStagingMethodGoogleCloudStorageStaging struct {
	// Enter the <a href="https://cloud.google.com/storage/docs/creating-buckets">Cloud Storage bucket name</a>
	BucketName string `json:"bucket_name"`
	// Enter your <a href="https://cloud.google.com/iam/docs/creating-managing-service-account-keys#creating_service_account_keys">Google Cloud service account key</a> in the JSON format with read/write access to your Cloud Storage staging bucket
	CredentialsJSON string                                                                     `json:"credentials_json"`
	Method          DestinationSnowflakeUpdateDataStagingMethodGoogleCloudStorageStagingMethod `json:"method"`
	// Enter the <a href="https://cloud.google.com/resource-manager/docs/creating-managing-projects#identifying_projects">Google Cloud project ID</a>
	ProjectID string `json:"project_id"`
}

type DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingEncryptionAESCBCEnvelopeEncryptionEncryptionType string

const (
	DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingEncryptionAESCBCEnvelopeEncryptionEncryptionTypeAesCbcEnvelope DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingEncryptionAESCBCEnvelopeEncryptionEncryptionType = "aes_cbc_envelope"
)

func (e DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingEncryptionAESCBCEnvelopeEncryptionEncryptionType) ToPointer() *DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingEncryptionAESCBCEnvelopeEncryptionEncryptionType {
	return &e
}

func (e *DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingEncryptionAESCBCEnvelopeEncryptionEncryptionType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "aes_cbc_envelope":
		*e = DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingEncryptionAESCBCEnvelopeEncryptionEncryptionType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingEncryptionAESCBCEnvelopeEncryptionEncryptionType: %v", v)
	}
}

// DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingEncryptionAESCBCEnvelopeEncryption - Staging data will be encrypted using AES-CBC envelope encryption.
type DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingEncryptionAESCBCEnvelopeEncryption struct {
	EncryptionType DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingEncryptionAESCBCEnvelopeEncryptionEncryptionType `json:"encryption_type"`
	// The key, base64-encoded. Must be either 128, 192, or 256 bits. Leave blank to have Airbyte generate an ephemeral key for each sync.
	KeyEncryptingKey *string `json:"key_encrypting_key,omitempty"`
}

type DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingEncryptionNoEncryptionEncryptionType string

const (
	DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingEncryptionNoEncryptionEncryptionTypeNone DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingEncryptionNoEncryptionEncryptionType = "none"
)

func (e DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingEncryptionNoEncryptionEncryptionType) ToPointer() *DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingEncryptionNoEncryptionEncryptionType {
	return &e
}

func (e *DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingEncryptionNoEncryptionEncryptionType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		*e = DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingEncryptionNoEncryptionEncryptionType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingEncryptionNoEncryptionEncryptionType: %v", v)
	}
}

// DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingEncryptionNoEncryption - Staging data will be stored in plaintext.
type DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingEncryptionNoEncryption struct {
	EncryptionType DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingEncryptionNoEncryptionEncryptionType `json:"encryption_type"`
}

type DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingEncryptionType string

const (
	DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingEncryptionTypeDestinationSnowflakeUpdateDataStagingMethodAWSS3StagingEncryptionNoEncryption             DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingEncryptionType = "destination-snowflake-update_Data Staging Method_AWS S3 Staging_Encryption_No encryption"
	DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingEncryptionTypeDestinationSnowflakeUpdateDataStagingMethodAWSS3StagingEncryptionAESCBCEnvelopeEncryption DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingEncryptionType = "destination-snowflake-update_Data Staging Method_AWS S3 Staging_Encryption_AES-CBC envelope encryption"
)

type DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingEncryption struct {
	DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingEncryptionNoEncryption             *DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingEncryptionNoEncryption
	DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingEncryptionAESCBCEnvelopeEncryption *DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingEncryptionAESCBCEnvelopeEncryption

	Type DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingEncryptionType
}

func CreateDestinationSnowflakeUpdateDataStagingMethodAWSS3StagingEncryptionDestinationSnowflakeUpdateDataStagingMethodAWSS3StagingEncryptionNoEncryption(destinationSnowflakeUpdateDataStagingMethodAWSS3StagingEncryptionNoEncryption DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingEncryptionNoEncryption) DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingEncryption {
	typ := DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingEncryptionTypeDestinationSnowflakeUpdateDataStagingMethodAWSS3StagingEncryptionNoEncryption

	return DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingEncryption{
		DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingEncryptionNoEncryption: &destinationSnowflakeUpdateDataStagingMethodAWSS3StagingEncryptionNoEncryption,
		Type: typ,
	}
}

func CreateDestinationSnowflakeUpdateDataStagingMethodAWSS3StagingEncryptionDestinationSnowflakeUpdateDataStagingMethodAWSS3StagingEncryptionAESCBCEnvelopeEncryption(destinationSnowflakeUpdateDataStagingMethodAWSS3StagingEncryptionAESCBCEnvelopeEncryption DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingEncryptionAESCBCEnvelopeEncryption) DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingEncryption {
	typ := DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingEncryptionTypeDestinationSnowflakeUpdateDataStagingMethodAWSS3StagingEncryptionAESCBCEnvelopeEncryption

	return DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingEncryption{
		DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingEncryptionAESCBCEnvelopeEncryption: &destinationSnowflakeUpdateDataStagingMethodAWSS3StagingEncryptionAESCBCEnvelopeEncryption,
		Type: typ,
	}
}

func (u *DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingEncryption) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	destinationSnowflakeUpdateDataStagingMethodAWSS3StagingEncryptionNoEncryption := new(DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingEncryptionNoEncryption)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&destinationSnowflakeUpdateDataStagingMethodAWSS3StagingEncryptionNoEncryption); err == nil {
		u.DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingEncryptionNoEncryption = destinationSnowflakeUpdateDataStagingMethodAWSS3StagingEncryptionNoEncryption
		u.Type = DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingEncryptionTypeDestinationSnowflakeUpdateDataStagingMethodAWSS3StagingEncryptionNoEncryption
		return nil
	}

	destinationSnowflakeUpdateDataStagingMethodAWSS3StagingEncryptionAESCBCEnvelopeEncryption := new(DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingEncryptionAESCBCEnvelopeEncryption)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&destinationSnowflakeUpdateDataStagingMethodAWSS3StagingEncryptionAESCBCEnvelopeEncryption); err == nil {
		u.DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingEncryptionAESCBCEnvelopeEncryption = destinationSnowflakeUpdateDataStagingMethodAWSS3StagingEncryptionAESCBCEnvelopeEncryption
		u.Type = DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingEncryptionTypeDestinationSnowflakeUpdateDataStagingMethodAWSS3StagingEncryptionAESCBCEnvelopeEncryption
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingEncryption) MarshalJSON() ([]byte, error) {
	if u.DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingEncryptionNoEncryption != nil {
		return json.Marshal(u.DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingEncryptionNoEncryption)
	}

	if u.DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingEncryptionAESCBCEnvelopeEncryption != nil {
		return json.Marshal(u.DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingEncryptionAESCBCEnvelopeEncryption)
	}

	return nil, nil
}

type DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingMethod string

const (
	DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingMethodS3Staging DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingMethod = "S3 Staging"
)

func (e DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingMethod) ToPointer() *DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingMethod {
	return &e
}

func (e *DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "S3 Staging":
		*e = DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingMethod: %v", v)
	}
}

// DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingS3BucketRegion - Enter the region where your S3 bucket resides
type DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingS3BucketRegion string

const (
	DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingS3BucketRegionUnknown      DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingS3BucketRegion = ""
	DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingS3BucketRegionUsEast1      DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingS3BucketRegion = "us-east-1"
	DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingS3BucketRegionUsEast2      DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingS3BucketRegion = "us-east-2"
	DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingS3BucketRegionUsWest1      DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingS3BucketRegion = "us-west-1"
	DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingS3BucketRegionUsWest2      DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingS3BucketRegion = "us-west-2"
	DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingS3BucketRegionAfSouth1     DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingS3BucketRegion = "af-south-1"
	DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingS3BucketRegionApEast1      DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingS3BucketRegion = "ap-east-1"
	DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingS3BucketRegionApSouth1     DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingS3BucketRegion = "ap-south-1"
	DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingS3BucketRegionApNortheast1 DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingS3BucketRegion = "ap-northeast-1"
	DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingS3BucketRegionApNortheast2 DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingS3BucketRegion = "ap-northeast-2"
	DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingS3BucketRegionApNortheast3 DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingS3BucketRegion = "ap-northeast-3"
	DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingS3BucketRegionApSoutheast1 DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingS3BucketRegion = "ap-southeast-1"
	DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingS3BucketRegionApSoutheast2 DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingS3BucketRegion = "ap-southeast-2"
	DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingS3BucketRegionCaCentral1   DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingS3BucketRegion = "ca-central-1"
	DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingS3BucketRegionCnNorth1     DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingS3BucketRegion = "cn-north-1"
	DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingS3BucketRegionCnNorthwest1 DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingS3BucketRegion = "cn-northwest-1"
	DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingS3BucketRegionEuCentral1   DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingS3BucketRegion = "eu-central-1"
	DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingS3BucketRegionEuWest1      DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingS3BucketRegion = "eu-west-1"
	DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingS3BucketRegionEuWest2      DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingS3BucketRegion = "eu-west-2"
	DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingS3BucketRegionEuWest3      DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingS3BucketRegion = "eu-west-3"
	DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingS3BucketRegionEuSouth1     DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingS3BucketRegion = "eu-south-1"
	DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingS3BucketRegionEuNorth1     DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingS3BucketRegion = "eu-north-1"
	DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingS3BucketRegionSaEast1      DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingS3BucketRegion = "sa-east-1"
	DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingS3BucketRegionMeSouth1     DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingS3BucketRegion = "me-south-1"
)

func (e DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingS3BucketRegion) ToPointer() *DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingS3BucketRegion {
	return &e
}

func (e *DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingS3BucketRegion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "":
		fallthrough
	case "us-east-1":
		fallthrough
	case "us-east-2":
		fallthrough
	case "us-west-1":
		fallthrough
	case "us-west-2":
		fallthrough
	case "af-south-1":
		fallthrough
	case "ap-east-1":
		fallthrough
	case "ap-south-1":
		fallthrough
	case "ap-northeast-1":
		fallthrough
	case "ap-northeast-2":
		fallthrough
	case "ap-northeast-3":
		fallthrough
	case "ap-southeast-1":
		fallthrough
	case "ap-southeast-2":
		fallthrough
	case "ca-central-1":
		fallthrough
	case "cn-north-1":
		fallthrough
	case "cn-northwest-1":
		fallthrough
	case "eu-central-1":
		fallthrough
	case "eu-west-1":
		fallthrough
	case "eu-west-2":
		fallthrough
	case "eu-west-3":
		fallthrough
	case "eu-south-1":
		fallthrough
	case "eu-north-1":
		fallthrough
	case "sa-east-1":
		fallthrough
	case "me-south-1":
		*e = DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingS3BucketRegion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingS3BucketRegion: %v", v)
	}
}

// DestinationSnowflakeUpdateDataStagingMethodAWSS3Staging - Recommended for large production workloads for better speed and scalability.
type DestinationSnowflakeUpdateDataStagingMethodAWSS3Staging struct {
	// Enter your <a href="https://docs.aws.amazon.com/powershell/latest/userguide/pstools-appendix-sign-up.html">AWS access key ID</a>. Airbyte requires Read and Write permissions on your S3 bucket
	AccessKeyID string `json:"access_key_id"`
	// Choose a data encryption method for the staging data
	Encryption *DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingEncryption `json:"encryption,omitempty"`
	// The pattern allows you to set the file-name format for the S3 staging file(s)
	FileNamePattern *string                                                       `json:"file_name_pattern,omitempty"`
	Method          DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingMethod `json:"method"`
	// Toggle to delete staging files from the S3 bucket after a successful sync
	PurgeStagingData *bool `json:"purge_staging_data,omitempty"`
	// Enter your S3 bucket name
	S3BucketName string `json:"s3_bucket_name"`
	// Enter the region where your S3 bucket resides
	S3BucketRegion *DestinationSnowflakeUpdateDataStagingMethodAWSS3StagingS3BucketRegion `json:"s3_bucket_region,omitempty"`
	// Enter your <a href="https://docs.aws.amazon.com/powershell/latest/userguide/pstools-appendix-sign-up.html">AWS secret access key</a>
	SecretAccessKey string `json:"secret_access_key"`
}

type DestinationSnowflakeUpdateDataStagingMethodRecommendedInternalStagingMethod string

const (
	DestinationSnowflakeUpdateDataStagingMethodRecommendedInternalStagingMethodInternalStaging DestinationSnowflakeUpdateDataStagingMethodRecommendedInternalStagingMethod = "Internal Staging"
)

func (e DestinationSnowflakeUpdateDataStagingMethodRecommendedInternalStagingMethod) ToPointer() *DestinationSnowflakeUpdateDataStagingMethodRecommendedInternalStagingMethod {
	return &e
}

func (e *DestinationSnowflakeUpdateDataStagingMethodRecommendedInternalStagingMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Internal Staging":
		*e = DestinationSnowflakeUpdateDataStagingMethodRecommendedInternalStagingMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationSnowflakeUpdateDataStagingMethodRecommendedInternalStagingMethod: %v", v)
	}
}

// DestinationSnowflakeUpdateDataStagingMethodRecommendedInternalStaging - Recommended for large production workloads for better speed and scalability.
type DestinationSnowflakeUpdateDataStagingMethodRecommendedInternalStaging struct {
	Method DestinationSnowflakeUpdateDataStagingMethodRecommendedInternalStagingMethod `json:"method"`
}

type DestinationSnowflakeUpdateDataStagingMethodSelectAnotherOptionMethod string

const (
	DestinationSnowflakeUpdateDataStagingMethodSelectAnotherOptionMethodStandard DestinationSnowflakeUpdateDataStagingMethodSelectAnotherOptionMethod = "Standard"
)

func (e DestinationSnowflakeUpdateDataStagingMethodSelectAnotherOptionMethod) ToPointer() *DestinationSnowflakeUpdateDataStagingMethodSelectAnotherOptionMethod {
	return &e
}

func (e *DestinationSnowflakeUpdateDataStagingMethodSelectAnotherOptionMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Standard":
		*e = DestinationSnowflakeUpdateDataStagingMethodSelectAnotherOptionMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationSnowflakeUpdateDataStagingMethodSelectAnotherOptionMethod: %v", v)
	}
}

// DestinationSnowflakeUpdateDataStagingMethodSelectAnotherOption - Select another option
type DestinationSnowflakeUpdateDataStagingMethodSelectAnotherOption struct {
	Method DestinationSnowflakeUpdateDataStagingMethodSelectAnotherOptionMethod `json:"method"`
}

type DestinationSnowflakeUpdateDataStagingMethodType string

const (
	DestinationSnowflakeUpdateDataStagingMethodTypeDestinationSnowflakeUpdateDataStagingMethodSelectAnotherOption        DestinationSnowflakeUpdateDataStagingMethodType = "destination-snowflake-update_Data Staging Method_Select another option"
	DestinationSnowflakeUpdateDataStagingMethodTypeDestinationSnowflakeUpdateDataStagingMethodRecommendedInternalStaging DestinationSnowflakeUpdateDataStagingMethodType = "destination-snowflake-update_Data Staging Method_[Recommended] Internal Staging"
	DestinationSnowflakeUpdateDataStagingMethodTypeDestinationSnowflakeUpdateDataStagingMethodAWSS3Staging               DestinationSnowflakeUpdateDataStagingMethodType = "destination-snowflake-update_Data Staging Method_AWS S3 Staging"
	DestinationSnowflakeUpdateDataStagingMethodTypeDestinationSnowflakeUpdateDataStagingMethodGoogleCloudStorageStaging  DestinationSnowflakeUpdateDataStagingMethodType = "destination-snowflake-update_Data Staging Method_Google Cloud Storage Staging"
)

type DestinationSnowflakeUpdateDataStagingMethod struct {
	DestinationSnowflakeUpdateDataStagingMethodSelectAnotherOption        *DestinationSnowflakeUpdateDataStagingMethodSelectAnotherOption
	DestinationSnowflakeUpdateDataStagingMethodRecommendedInternalStaging *DestinationSnowflakeUpdateDataStagingMethodRecommendedInternalStaging
	DestinationSnowflakeUpdateDataStagingMethodAWSS3Staging               *DestinationSnowflakeUpdateDataStagingMethodAWSS3Staging
	DestinationSnowflakeUpdateDataStagingMethodGoogleCloudStorageStaging  *DestinationSnowflakeUpdateDataStagingMethodGoogleCloudStorageStaging

	Type DestinationSnowflakeUpdateDataStagingMethodType
}

func CreateDestinationSnowflakeUpdateDataStagingMethodDestinationSnowflakeUpdateDataStagingMethodSelectAnotherOption(destinationSnowflakeUpdateDataStagingMethodSelectAnotherOption DestinationSnowflakeUpdateDataStagingMethodSelectAnotherOption) DestinationSnowflakeUpdateDataStagingMethod {
	typ := DestinationSnowflakeUpdateDataStagingMethodTypeDestinationSnowflakeUpdateDataStagingMethodSelectAnotherOption

	return DestinationSnowflakeUpdateDataStagingMethod{
		DestinationSnowflakeUpdateDataStagingMethodSelectAnotherOption: &destinationSnowflakeUpdateDataStagingMethodSelectAnotherOption,
		Type: typ,
	}
}

func CreateDestinationSnowflakeUpdateDataStagingMethodDestinationSnowflakeUpdateDataStagingMethodRecommendedInternalStaging(destinationSnowflakeUpdateDataStagingMethodRecommendedInternalStaging DestinationSnowflakeUpdateDataStagingMethodRecommendedInternalStaging) DestinationSnowflakeUpdateDataStagingMethod {
	typ := DestinationSnowflakeUpdateDataStagingMethodTypeDestinationSnowflakeUpdateDataStagingMethodRecommendedInternalStaging

	return DestinationSnowflakeUpdateDataStagingMethod{
		DestinationSnowflakeUpdateDataStagingMethodRecommendedInternalStaging: &destinationSnowflakeUpdateDataStagingMethodRecommendedInternalStaging,
		Type: typ,
	}
}

func CreateDestinationSnowflakeUpdateDataStagingMethodDestinationSnowflakeUpdateDataStagingMethodAWSS3Staging(destinationSnowflakeUpdateDataStagingMethodAWSS3Staging DestinationSnowflakeUpdateDataStagingMethodAWSS3Staging) DestinationSnowflakeUpdateDataStagingMethod {
	typ := DestinationSnowflakeUpdateDataStagingMethodTypeDestinationSnowflakeUpdateDataStagingMethodAWSS3Staging

	return DestinationSnowflakeUpdateDataStagingMethod{
		DestinationSnowflakeUpdateDataStagingMethodAWSS3Staging: &destinationSnowflakeUpdateDataStagingMethodAWSS3Staging,
		Type: typ,
	}
}

func CreateDestinationSnowflakeUpdateDataStagingMethodDestinationSnowflakeUpdateDataStagingMethodGoogleCloudStorageStaging(destinationSnowflakeUpdateDataStagingMethodGoogleCloudStorageStaging DestinationSnowflakeUpdateDataStagingMethodGoogleCloudStorageStaging) DestinationSnowflakeUpdateDataStagingMethod {
	typ := DestinationSnowflakeUpdateDataStagingMethodTypeDestinationSnowflakeUpdateDataStagingMethodGoogleCloudStorageStaging

	return DestinationSnowflakeUpdateDataStagingMethod{
		DestinationSnowflakeUpdateDataStagingMethodGoogleCloudStorageStaging: &destinationSnowflakeUpdateDataStagingMethodGoogleCloudStorageStaging,
		Type: typ,
	}
}

func (u *DestinationSnowflakeUpdateDataStagingMethod) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	destinationSnowflakeUpdateDataStagingMethodSelectAnotherOption := new(DestinationSnowflakeUpdateDataStagingMethodSelectAnotherOption)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&destinationSnowflakeUpdateDataStagingMethodSelectAnotherOption); err == nil {
		u.DestinationSnowflakeUpdateDataStagingMethodSelectAnotherOption = destinationSnowflakeUpdateDataStagingMethodSelectAnotherOption
		u.Type = DestinationSnowflakeUpdateDataStagingMethodTypeDestinationSnowflakeUpdateDataStagingMethodSelectAnotherOption
		return nil
	}

	destinationSnowflakeUpdateDataStagingMethodRecommendedInternalStaging := new(DestinationSnowflakeUpdateDataStagingMethodRecommendedInternalStaging)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&destinationSnowflakeUpdateDataStagingMethodRecommendedInternalStaging); err == nil {
		u.DestinationSnowflakeUpdateDataStagingMethodRecommendedInternalStaging = destinationSnowflakeUpdateDataStagingMethodRecommendedInternalStaging
		u.Type = DestinationSnowflakeUpdateDataStagingMethodTypeDestinationSnowflakeUpdateDataStagingMethodRecommendedInternalStaging
		return nil
	}

	destinationSnowflakeUpdateDataStagingMethodAWSS3Staging := new(DestinationSnowflakeUpdateDataStagingMethodAWSS3Staging)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&destinationSnowflakeUpdateDataStagingMethodAWSS3Staging); err == nil {
		u.DestinationSnowflakeUpdateDataStagingMethodAWSS3Staging = destinationSnowflakeUpdateDataStagingMethodAWSS3Staging
		u.Type = DestinationSnowflakeUpdateDataStagingMethodTypeDestinationSnowflakeUpdateDataStagingMethodAWSS3Staging
		return nil
	}

	destinationSnowflakeUpdateDataStagingMethodGoogleCloudStorageStaging := new(DestinationSnowflakeUpdateDataStagingMethodGoogleCloudStorageStaging)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&destinationSnowflakeUpdateDataStagingMethodGoogleCloudStorageStaging); err == nil {
		u.DestinationSnowflakeUpdateDataStagingMethodGoogleCloudStorageStaging = destinationSnowflakeUpdateDataStagingMethodGoogleCloudStorageStaging
		u.Type = DestinationSnowflakeUpdateDataStagingMethodTypeDestinationSnowflakeUpdateDataStagingMethodGoogleCloudStorageStaging
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u DestinationSnowflakeUpdateDataStagingMethod) MarshalJSON() ([]byte, error) {
	if u.DestinationSnowflakeUpdateDataStagingMethodSelectAnotherOption != nil {
		return json.Marshal(u.DestinationSnowflakeUpdateDataStagingMethodSelectAnotherOption)
	}

	if u.DestinationSnowflakeUpdateDataStagingMethodRecommendedInternalStaging != nil {
		return json.Marshal(u.DestinationSnowflakeUpdateDataStagingMethodRecommendedInternalStaging)
	}

	if u.DestinationSnowflakeUpdateDataStagingMethodAWSS3Staging != nil {
		return json.Marshal(u.DestinationSnowflakeUpdateDataStagingMethodAWSS3Staging)
	}

	if u.DestinationSnowflakeUpdateDataStagingMethodGoogleCloudStorageStaging != nil {
		return json.Marshal(u.DestinationSnowflakeUpdateDataStagingMethodGoogleCloudStorageStaging)
	}

	return nil, nil
}

type DestinationSnowflakeUpdate struct {
	Credentials *DestinationSnowflakeUpdateAuthorizationMethod `json:"credentials,omitempty"`
	// Enter the name of the <a href="https://docs.snowflake.com/en/sql-reference/ddl-database.html#database-schema-share-ddl">database</a> you want to sync data into
	Database string `json:"database"`
	// Number of file buffers allocated for writing data. Increasing this number is beneficial for connections using Change Data Capture (CDC) and up to the number of streams within a connection. Increasing the number of file buffers past the maximum number of streams has deteriorating effects
	FileBufferCount *int64 `json:"file_buffer_count,omitempty"`
	// Enter your Snowflake account's <a href="https://docs.snowflake.com/en/user-guide/admin-account-identifier.html#using-an-account-locator-as-an-identifier">locator</a> (in the format <account_locator>.<region>.<cloud>.snowflakecomputing.com)
	Host string `json:"host"`
	// Enter the additional properties to pass to the JDBC URL string when connecting to the database (formatted as key=value pairs separated by the symbol &). Example: key1=value1&key2=value2&key3=value3
	JdbcURLParams *string `json:"jdbc_url_params,omitempty"`
	// Select a data staging method
	LoadingMethod *DestinationSnowflakeUpdateDataStagingMethod `json:"loading_method,omitempty"`
	// Enter the <a href="https://docs.snowflake.com/en/user-guide/security-access-control-overview.html#roles">role</a> that you want to use to access Snowflake
	Role string `json:"role"`
	// Enter the name of the default <a href="https://docs.snowflake.com/en/sql-reference/ddl-database.html#database-schema-share-ddl">schema</a>
	Schema string `json:"schema"`
	// Enter the name of the user you want to use to access the database
	Username string `json:"username"`
	// Enter the name of the <a href="https://docs.snowflake.com/en/user-guide/warehouses-overview.html#overview-of-warehouses">warehouse</a> that you want to sync data into
	Warehouse string `json:"warehouse"`
}
