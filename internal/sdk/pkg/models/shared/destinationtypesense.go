// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type DestinationTypesenseTypesenseEnum string

const (
	DestinationTypesenseTypesenseEnumTypesense DestinationTypesenseTypesenseEnum = "typesense"
)

func (e *DestinationTypesenseTypesenseEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "typesense":
		*e = DestinationTypesenseTypesenseEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationTypesenseTypesenseEnum: %s", s)
	}
}

// DestinationTypesense - The values required to configure the destination.
type DestinationTypesense struct {
	// Typesense API Key
	APIKey string `json:"api_key"`
	// How many documents should be imported together. Default 1000
	BatchSize       *string                           `json:"batch_size,omitempty"`
	DestinationType DestinationTypesenseTypesenseEnum `json:"destinationType"`
	// Hostname of the Typesense instance without protocol.
	Host string `json:"host"`
	// Port of the Typesense instance. Ex: 8108, 80, 443. Default is 443
	Port *string `json:"port,omitempty"`
	// Protocol of the Typesense instance. Ex: http or https. Default is https
	Protocol *string `json:"protocol,omitempty"`
}
