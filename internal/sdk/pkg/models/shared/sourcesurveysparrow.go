// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

type SourceSurveySparrowBaseURLGlobalAccountURLBaseEnum string

const (
	SourceSurveySparrowBaseURLGlobalAccountURLBaseEnumHTTPSAPISurveysparrowComV3 SourceSurveySparrowBaseURLGlobalAccountURLBaseEnum = "https://api.surveysparrow.com/v3"
)

func (e SourceSurveySparrowBaseURLGlobalAccountURLBaseEnum) ToPointer() *SourceSurveySparrowBaseURLGlobalAccountURLBaseEnum {
	return &e
}

func (e *SourceSurveySparrowBaseURLGlobalAccountURLBaseEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "https://api.surveysparrow.com/v3":
		*e = SourceSurveySparrowBaseURLGlobalAccountURLBaseEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceSurveySparrowBaseURLGlobalAccountURLBaseEnum: %v", v)
	}
}

// SourceSurveySparrowBaseURLGlobalAccount - Is your account location is EU based? If yes, the base url to retrieve data will be different.
type SourceSurveySparrowBaseURLGlobalAccount struct {
	URLBase *SourceSurveySparrowBaseURLGlobalAccountURLBaseEnum `json:"url_base,omitempty"`
}

type SourceSurveySparrowBaseURLEUBasedAccountURLBaseEnum string

const (
	SourceSurveySparrowBaseURLEUBasedAccountURLBaseEnumHTTPSEuAPISurveysparrowComV3 SourceSurveySparrowBaseURLEUBasedAccountURLBaseEnum = "https://eu-api.surveysparrow.com/v3"
)

func (e SourceSurveySparrowBaseURLEUBasedAccountURLBaseEnum) ToPointer() *SourceSurveySparrowBaseURLEUBasedAccountURLBaseEnum {
	return &e
}

func (e *SourceSurveySparrowBaseURLEUBasedAccountURLBaseEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "https://eu-api.surveysparrow.com/v3":
		*e = SourceSurveySparrowBaseURLEUBasedAccountURLBaseEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceSurveySparrowBaseURLEUBasedAccountURLBaseEnum: %v", v)
	}
}

// SourceSurveySparrowBaseURLEUBasedAccount - Is your account location is EU based? If yes, the base url to retrieve data will be different.
type SourceSurveySparrowBaseURLEUBasedAccount struct {
	URLBase *SourceSurveySparrowBaseURLEUBasedAccountURLBaseEnum `json:"url_base,omitempty"`
}

type SourceSurveySparrowBaseURLType string

const (
	SourceSurveySparrowBaseURLTypeSourceSurveySparrowBaseURLEUBasedAccount SourceSurveySparrowBaseURLType = "source-survey-sparrow_Base URL_EU-based account"
	SourceSurveySparrowBaseURLTypeSourceSurveySparrowBaseURLGlobalAccount  SourceSurveySparrowBaseURLType = "source-survey-sparrow_Base URL_Global account"
)

type SourceSurveySparrowBaseURL struct {
	SourceSurveySparrowBaseURLEUBasedAccount *SourceSurveySparrowBaseURLEUBasedAccount
	SourceSurveySparrowBaseURLGlobalAccount  *SourceSurveySparrowBaseURLGlobalAccount

	Type SourceSurveySparrowBaseURLType
}

func CreateSourceSurveySparrowBaseURLSourceSurveySparrowBaseURLEUBasedAccount(sourceSurveySparrowBaseURLEUBasedAccount SourceSurveySparrowBaseURLEUBasedAccount) SourceSurveySparrowBaseURL {
	typ := SourceSurveySparrowBaseURLTypeSourceSurveySparrowBaseURLEUBasedAccount

	return SourceSurveySparrowBaseURL{
		SourceSurveySparrowBaseURLEUBasedAccount: &sourceSurveySparrowBaseURLEUBasedAccount,
		Type:                                     typ,
	}
}

func CreateSourceSurveySparrowBaseURLSourceSurveySparrowBaseURLGlobalAccount(sourceSurveySparrowBaseURLGlobalAccount SourceSurveySparrowBaseURLGlobalAccount) SourceSurveySparrowBaseURL {
	typ := SourceSurveySparrowBaseURLTypeSourceSurveySparrowBaseURLGlobalAccount

	return SourceSurveySparrowBaseURL{
		SourceSurveySparrowBaseURLGlobalAccount: &sourceSurveySparrowBaseURLGlobalAccount,
		Type:                                    typ,
	}
}

func (u *SourceSurveySparrowBaseURL) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	sourceSurveySparrowBaseURLEUBasedAccount := new(SourceSurveySparrowBaseURLEUBasedAccount)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceSurveySparrowBaseURLEUBasedAccount); err == nil {
		u.SourceSurveySparrowBaseURLEUBasedAccount = sourceSurveySparrowBaseURLEUBasedAccount
		u.Type = SourceSurveySparrowBaseURLTypeSourceSurveySparrowBaseURLEUBasedAccount
		return nil
	}

	sourceSurveySparrowBaseURLGlobalAccount := new(SourceSurveySparrowBaseURLGlobalAccount)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceSurveySparrowBaseURLGlobalAccount); err == nil {
		u.SourceSurveySparrowBaseURLGlobalAccount = sourceSurveySparrowBaseURLGlobalAccount
		u.Type = SourceSurveySparrowBaseURLTypeSourceSurveySparrowBaseURLGlobalAccount
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceSurveySparrowBaseURL) MarshalJSON() ([]byte, error) {
	if u.SourceSurveySparrowBaseURLEUBasedAccount != nil {
		return json.Marshal(u.SourceSurveySparrowBaseURLEUBasedAccount)
	}

	if u.SourceSurveySparrowBaseURLGlobalAccount != nil {
		return json.Marshal(u.SourceSurveySparrowBaseURLGlobalAccount)
	}

	return nil, nil
}

type SourceSurveySparrowSurveySparrowEnum string

const (
	SourceSurveySparrowSurveySparrowEnumSurveySparrow SourceSurveySparrowSurveySparrowEnum = "survey-sparrow"
)

func (e SourceSurveySparrowSurveySparrowEnum) ToPointer() *SourceSurveySparrowSurveySparrowEnum {
	return &e
}

func (e *SourceSurveySparrowSurveySparrowEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "survey-sparrow":
		*e = SourceSurveySparrowSurveySparrowEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceSurveySparrowSurveySparrowEnum: %v", v)
	}
}

// SourceSurveySparrow - The values required to configure the source.
type SourceSurveySparrow struct {
	// Your access token. See <a href="https://developers.surveysparrow.com/rest-apis#authentication">here</a>. The key is case sensitive.
	AccessToken string `json:"access_token"`
	// Is your account location is EU based? If yes, the base url to retrieve data will be different.
	Region     *SourceSurveySparrowBaseURL          `json:"region,omitempty"`
	SourceType SourceSurveySparrowSurveySparrowEnum `json:"sourceType"`
	// A List of your survey ids for survey-specific stream
	SurveyID []interface{} `json:"survey_id,omitempty"`
}
