// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"airbyte/internal/sdk/pkg/types"
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

type SourceLinkedinAdsAuthenticationAccessTokenAuthMethodEnum string

const (
	SourceLinkedinAdsAuthenticationAccessTokenAuthMethodEnumAccessToken SourceLinkedinAdsAuthenticationAccessTokenAuthMethodEnum = "access_token"
)

func (e *SourceLinkedinAdsAuthenticationAccessTokenAuthMethodEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "access_token":
		*e = SourceLinkedinAdsAuthenticationAccessTokenAuthMethodEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceLinkedinAdsAuthenticationAccessTokenAuthMethodEnum: %s", s)
	}
}

type SourceLinkedinAdsAuthenticationAccessToken struct {
	// The token value generated using the authentication code. See the <a href="https://docs.airbyte.com/integrations/sources/linkedin-ads#authentication">docs</a> to obtain yours.
	AccessToken string                                                    `json:"access_token"`
	AuthMethod  *SourceLinkedinAdsAuthenticationAccessTokenAuthMethodEnum `json:"auth_method,omitempty"`
}

type SourceLinkedinAdsAuthenticationOAuth20AuthMethodEnum string

const (
	SourceLinkedinAdsAuthenticationOAuth20AuthMethodEnumOAuth20 SourceLinkedinAdsAuthenticationOAuth20AuthMethodEnum = "oAuth2.0"
)

func (e *SourceLinkedinAdsAuthenticationOAuth20AuthMethodEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "oAuth2.0":
		*e = SourceLinkedinAdsAuthenticationOAuth20AuthMethodEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceLinkedinAdsAuthenticationOAuth20AuthMethodEnum: %s", s)
	}
}

type SourceLinkedinAdsAuthenticationOAuth20 struct {
	AuthMethod *SourceLinkedinAdsAuthenticationOAuth20AuthMethodEnum `json:"auth_method,omitempty"`
	// The client ID of the LinkedIn Ads developer application.
	ClientID string `json:"client_id"`
	// The client secret the LinkedIn Ads developer application.
	ClientSecret string `json:"client_secret"`
	// The key to refresh the expired access token.
	RefreshToken string `json:"refresh_token"`
}

type SourceLinkedinAdsAuthenticationType string

const (
	SourceLinkedinAdsAuthenticationTypeSourceLinkedinAdsAuthenticationOAuth20     SourceLinkedinAdsAuthenticationType = "source-linkedin-ads_Authentication_OAuth2.0"
	SourceLinkedinAdsAuthenticationTypeSourceLinkedinAdsAuthenticationAccessToken SourceLinkedinAdsAuthenticationType = "source-linkedin-ads_Authentication_Access token"
)

type SourceLinkedinAdsAuthentication struct {
	SourceLinkedinAdsAuthenticationOAuth20     *SourceLinkedinAdsAuthenticationOAuth20
	SourceLinkedinAdsAuthenticationAccessToken *SourceLinkedinAdsAuthenticationAccessToken

	Type SourceLinkedinAdsAuthenticationType
}

func CreateSourceLinkedinAdsAuthenticationSourceLinkedinAdsAuthenticationOAuth20(sourceLinkedinAdsAuthenticationOAuth20 SourceLinkedinAdsAuthenticationOAuth20) SourceLinkedinAdsAuthentication {
	typ := SourceLinkedinAdsAuthenticationTypeSourceLinkedinAdsAuthenticationOAuth20

	return SourceLinkedinAdsAuthentication{
		SourceLinkedinAdsAuthenticationOAuth20: &sourceLinkedinAdsAuthenticationOAuth20,
		Type:                                   typ,
	}
}

func CreateSourceLinkedinAdsAuthenticationSourceLinkedinAdsAuthenticationAccessToken(sourceLinkedinAdsAuthenticationAccessToken SourceLinkedinAdsAuthenticationAccessToken) SourceLinkedinAdsAuthentication {
	typ := SourceLinkedinAdsAuthenticationTypeSourceLinkedinAdsAuthenticationAccessToken

	return SourceLinkedinAdsAuthentication{
		SourceLinkedinAdsAuthenticationAccessToken: &sourceLinkedinAdsAuthenticationAccessToken,
		Type: typ,
	}
}

func (u *SourceLinkedinAdsAuthentication) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	sourceLinkedinAdsAuthenticationOAuth20 := new(SourceLinkedinAdsAuthenticationOAuth20)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceLinkedinAdsAuthenticationOAuth20); err == nil {
		u.SourceLinkedinAdsAuthenticationOAuth20 = sourceLinkedinAdsAuthenticationOAuth20
		u.Type = SourceLinkedinAdsAuthenticationTypeSourceLinkedinAdsAuthenticationOAuth20
		return nil
	}

	sourceLinkedinAdsAuthenticationAccessToken := new(SourceLinkedinAdsAuthenticationAccessToken)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceLinkedinAdsAuthenticationAccessToken); err == nil {
		u.SourceLinkedinAdsAuthenticationAccessToken = sourceLinkedinAdsAuthenticationAccessToken
		u.Type = SourceLinkedinAdsAuthenticationTypeSourceLinkedinAdsAuthenticationAccessToken
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceLinkedinAdsAuthentication) MarshalJSON() ([]byte, error) {
	if u.SourceLinkedinAdsAuthenticationOAuth20 != nil {
		return json.Marshal(u.SourceLinkedinAdsAuthenticationOAuth20)
	}

	if u.SourceLinkedinAdsAuthenticationAccessToken != nil {
		return json.Marshal(u.SourceLinkedinAdsAuthenticationAccessToken)
	}

	return nil, nil
}

type SourceLinkedinAdsLinkedinAdsEnum string

const (
	SourceLinkedinAdsLinkedinAdsEnumLinkedinAds SourceLinkedinAdsLinkedinAdsEnum = "linkedin-ads"
)

func (e *SourceLinkedinAdsLinkedinAdsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "linkedin-ads":
		*e = SourceLinkedinAdsLinkedinAdsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceLinkedinAdsLinkedinAdsEnum: %s", s)
	}
}

// SourceLinkedinAds - The values required to configure the source.
type SourceLinkedinAds struct {
	// Specify the account IDs separated by a space, to pull the data from. Leave empty, if you want to pull the data from all associated accounts. See the <a href="https://www.linkedin.com/help/linkedin/answer/a424270/find-linkedin-ads-account-details?lang=en">LinkedIn Ads docs</a> for more info.
	AccountIds  []int64                          `json:"account_ids,omitempty"`
	Credentials *SourceLinkedinAdsAuthentication `json:"credentials,omitempty"`
	SourceType  SourceLinkedinAdsLinkedinAdsEnum `json:"sourceType"`
	// UTC date in the format 2020-09-17. Any data before this date will not be replicated.
	StartDate types.Date `json:"start_date"`
}
