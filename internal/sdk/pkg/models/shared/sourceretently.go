// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

type SourceRetentlyAuthenticationMechanismAuthenticateWithAPITokenAuthTypeEnum string

const (
	SourceRetentlyAuthenticationMechanismAuthenticateWithAPITokenAuthTypeEnumToken SourceRetentlyAuthenticationMechanismAuthenticateWithAPITokenAuthTypeEnum = "Token"
)

func (e SourceRetentlyAuthenticationMechanismAuthenticateWithAPITokenAuthTypeEnum) ToPointer() *SourceRetentlyAuthenticationMechanismAuthenticateWithAPITokenAuthTypeEnum {
	return &e
}

func (e *SourceRetentlyAuthenticationMechanismAuthenticateWithAPITokenAuthTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Token":
		*e = SourceRetentlyAuthenticationMechanismAuthenticateWithAPITokenAuthTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceRetentlyAuthenticationMechanismAuthenticateWithAPITokenAuthTypeEnum: %v", v)
	}
}

// SourceRetentlyAuthenticationMechanismAuthenticateWithAPIToken - Choose how to authenticate to Retently
type SourceRetentlyAuthenticationMechanismAuthenticateWithAPIToken struct {
	// Retently API Token. See the <a href="https://app.retently.com/settings/api/tokens">docs</a> for more information on how to obtain this key.
	APIKey   string                                                                     `json:"api_key"`
	AuthType *SourceRetentlyAuthenticationMechanismAuthenticateWithAPITokenAuthTypeEnum `json:"auth_type,omitempty"`

	AdditionalProperties map[string]interface{} `json:"-"`
}
type _SourceRetentlyAuthenticationMechanismAuthenticateWithAPIToken SourceRetentlyAuthenticationMechanismAuthenticateWithAPIToken

func (c *SourceRetentlyAuthenticationMechanismAuthenticateWithAPIToken) UnmarshalJSON(bs []byte) error {
	data := _SourceRetentlyAuthenticationMechanismAuthenticateWithAPIToken{}

	if err := json.Unmarshal(bs, &data); err != nil {
		return err
	}
	*c = SourceRetentlyAuthenticationMechanismAuthenticateWithAPIToken(data)

	additionalFields := make(map[string]interface{})

	if err := json.Unmarshal(bs, &additionalFields); err != nil {
		return err
	}
	delete(additionalFields, "api_key")
	delete(additionalFields, "auth_type")

	c.AdditionalProperties = additionalFields

	return nil
}

func (c SourceRetentlyAuthenticationMechanismAuthenticateWithAPIToken) MarshalJSON() ([]byte, error) {
	out := map[string]interface{}{}
	bs, err := json.Marshal(_SourceRetentlyAuthenticationMechanismAuthenticateWithAPIToken(c))
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	bs, err = json.Marshal(c.AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	return json.Marshal(out)
}

type SourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuthAuthTypeEnum string

const (
	SourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuthAuthTypeEnumClient SourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuthAuthTypeEnum = "Client"
)

func (e SourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuthAuthTypeEnum) ToPointer() *SourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuthAuthTypeEnum {
	return &e
}

func (e *SourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuthAuthTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Client":
		*e = SourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuthAuthTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuthAuthTypeEnum: %v", v)
	}
}

// SourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth - Choose how to authenticate to Retently
type SourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth struct {
	AuthType *SourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuthAuthTypeEnum `json:"auth_type,omitempty"`
	// The Client ID of your Retently developer application.
	ClientID string `json:"client_id"`
	// The Client Secret of your Retently developer application.
	ClientSecret string `json:"client_secret"`
	// Retently Refresh Token which can be used to fetch new Bearer Tokens when the current one expires.
	RefreshToken string `json:"refresh_token"`

	AdditionalProperties map[string]interface{} `json:"-"`
}
type _SourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth SourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth

func (c *SourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth) UnmarshalJSON(bs []byte) error {
	data := _SourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth{}

	if err := json.Unmarshal(bs, &data); err != nil {
		return err
	}
	*c = SourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth(data)

	additionalFields := make(map[string]interface{})

	if err := json.Unmarshal(bs, &additionalFields); err != nil {
		return err
	}
	delete(additionalFields, "auth_type")
	delete(additionalFields, "client_id")
	delete(additionalFields, "client_secret")
	delete(additionalFields, "refresh_token")

	c.AdditionalProperties = additionalFields

	return nil
}

func (c SourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth) MarshalJSON() ([]byte, error) {
	out := map[string]interface{}{}
	bs, err := json.Marshal(_SourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth(c))
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	bs, err = json.Marshal(c.AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	return json.Marshal(out)
}

type SourceRetentlyAuthenticationMechanismType string

const (
	SourceRetentlyAuthenticationMechanismTypeSourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth SourceRetentlyAuthenticationMechanismType = "source-retently_Authentication Mechanism_Authenticate via Retently (OAuth)"
	SourceRetentlyAuthenticationMechanismTypeSourceRetentlyAuthenticationMechanismAuthenticateWithAPIToken     SourceRetentlyAuthenticationMechanismType = "source-retently_Authentication Mechanism_Authenticate with API Token"
)

type SourceRetentlyAuthenticationMechanism struct {
	SourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth *SourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth
	SourceRetentlyAuthenticationMechanismAuthenticateWithAPIToken     *SourceRetentlyAuthenticationMechanismAuthenticateWithAPIToken

	Type SourceRetentlyAuthenticationMechanismType
}

func CreateSourceRetentlyAuthenticationMechanismSourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth(sourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth SourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth) SourceRetentlyAuthenticationMechanism {
	typ := SourceRetentlyAuthenticationMechanismTypeSourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth

	return SourceRetentlyAuthenticationMechanism{
		SourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth: &sourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth,
		Type: typ,
	}
}

func CreateSourceRetentlyAuthenticationMechanismSourceRetentlyAuthenticationMechanismAuthenticateWithAPIToken(sourceRetentlyAuthenticationMechanismAuthenticateWithAPIToken SourceRetentlyAuthenticationMechanismAuthenticateWithAPIToken) SourceRetentlyAuthenticationMechanism {
	typ := SourceRetentlyAuthenticationMechanismTypeSourceRetentlyAuthenticationMechanismAuthenticateWithAPIToken

	return SourceRetentlyAuthenticationMechanism{
		SourceRetentlyAuthenticationMechanismAuthenticateWithAPIToken: &sourceRetentlyAuthenticationMechanismAuthenticateWithAPIToken,
		Type: typ,
	}
}

func (u *SourceRetentlyAuthenticationMechanism) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	sourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth := new(SourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth); err == nil {
		u.SourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth = sourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth
		u.Type = SourceRetentlyAuthenticationMechanismTypeSourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth
		return nil
	}

	sourceRetentlyAuthenticationMechanismAuthenticateWithAPIToken := new(SourceRetentlyAuthenticationMechanismAuthenticateWithAPIToken)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceRetentlyAuthenticationMechanismAuthenticateWithAPIToken); err == nil {
		u.SourceRetentlyAuthenticationMechanismAuthenticateWithAPIToken = sourceRetentlyAuthenticationMechanismAuthenticateWithAPIToken
		u.Type = SourceRetentlyAuthenticationMechanismTypeSourceRetentlyAuthenticationMechanismAuthenticateWithAPIToken
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceRetentlyAuthenticationMechanism) MarshalJSON() ([]byte, error) {
	if u.SourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth != nil {
		return json.Marshal(u.SourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth)
	}

	if u.SourceRetentlyAuthenticationMechanismAuthenticateWithAPIToken != nil {
		return json.Marshal(u.SourceRetentlyAuthenticationMechanismAuthenticateWithAPIToken)
	}

	return nil, nil
}

type SourceRetentlyRetentlyEnum string

const (
	SourceRetentlyRetentlyEnumRetently SourceRetentlyRetentlyEnum = "retently"
)

func (e SourceRetentlyRetentlyEnum) ToPointer() *SourceRetentlyRetentlyEnum {
	return &e
}

func (e *SourceRetentlyRetentlyEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "retently":
		*e = SourceRetentlyRetentlyEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceRetentlyRetentlyEnum: %v", v)
	}
}

// SourceRetently - The values required to configure the source.
type SourceRetently struct {
	// Choose how to authenticate to Retently
	Credentials *SourceRetentlyAuthenticationMechanism `json:"credentials,omitempty"`
	SourceType  SourceRetentlyRetentlyEnum             `json:"sourceType"`
}
