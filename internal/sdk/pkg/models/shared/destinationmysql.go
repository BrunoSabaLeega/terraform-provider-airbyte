// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

type DestinationMysqlMysql string

const (
	DestinationMysqlMysqlMysql DestinationMysqlMysql = "mysql"
)

func (e DestinationMysqlMysql) ToPointer() *DestinationMysqlMysql {
	return &e
}

func (e *DestinationMysqlMysql) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "mysql":
		*e = DestinationMysqlMysql(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationMysqlMysql: %v", v)
	}
}

// DestinationMysqlSSHTunnelMethodPasswordAuthenticationTunnelMethod - Connect through a jump server tunnel host using username and password authentication
type DestinationMysqlSSHTunnelMethodPasswordAuthenticationTunnelMethod string

const (
	DestinationMysqlSSHTunnelMethodPasswordAuthenticationTunnelMethodSSHPasswordAuth DestinationMysqlSSHTunnelMethodPasswordAuthenticationTunnelMethod = "SSH_PASSWORD_AUTH"
)

func (e DestinationMysqlSSHTunnelMethodPasswordAuthenticationTunnelMethod) ToPointer() *DestinationMysqlSSHTunnelMethodPasswordAuthenticationTunnelMethod {
	return &e
}

func (e *DestinationMysqlSSHTunnelMethodPasswordAuthenticationTunnelMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SSH_PASSWORD_AUTH":
		*e = DestinationMysqlSSHTunnelMethodPasswordAuthenticationTunnelMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationMysqlSSHTunnelMethodPasswordAuthenticationTunnelMethod: %v", v)
	}
}

// DestinationMysqlSSHTunnelMethodPasswordAuthentication - Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.
type DestinationMysqlSSHTunnelMethodPasswordAuthentication struct {
	// Hostname of the jump server host that allows inbound ssh tunnel.
	TunnelHost string `json:"tunnel_host"`
	// Connect through a jump server tunnel host using username and password authentication
	TunnelMethod DestinationMysqlSSHTunnelMethodPasswordAuthenticationTunnelMethod `json:"tunnel_method"`
	// Port on the proxy/jump server that accepts inbound ssh connections.
	TunnelPort int64 `json:"tunnel_port"`
	// OS-level username for logging into the jump server host
	TunnelUser string `json:"tunnel_user"`
	// OS-level password for logging into the jump server host
	TunnelUserPassword string `json:"tunnel_user_password"`
}

// DestinationMysqlSSHTunnelMethodSSHKeyAuthenticationTunnelMethod - Connect through a jump server tunnel host using username and ssh key
type DestinationMysqlSSHTunnelMethodSSHKeyAuthenticationTunnelMethod string

const (
	DestinationMysqlSSHTunnelMethodSSHKeyAuthenticationTunnelMethodSSHKeyAuth DestinationMysqlSSHTunnelMethodSSHKeyAuthenticationTunnelMethod = "SSH_KEY_AUTH"
)

func (e DestinationMysqlSSHTunnelMethodSSHKeyAuthenticationTunnelMethod) ToPointer() *DestinationMysqlSSHTunnelMethodSSHKeyAuthenticationTunnelMethod {
	return &e
}

func (e *DestinationMysqlSSHTunnelMethodSSHKeyAuthenticationTunnelMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SSH_KEY_AUTH":
		*e = DestinationMysqlSSHTunnelMethodSSHKeyAuthenticationTunnelMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationMysqlSSHTunnelMethodSSHKeyAuthenticationTunnelMethod: %v", v)
	}
}

// DestinationMysqlSSHTunnelMethodSSHKeyAuthentication - Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.
type DestinationMysqlSSHTunnelMethodSSHKeyAuthentication struct {
	// OS-level user account ssh key credentials in RSA PEM format ( created with ssh-keygen -t rsa -m PEM -f myuser_rsa )
	SSHKey string `json:"ssh_key"`
	// Hostname of the jump server host that allows inbound ssh tunnel.
	TunnelHost string `json:"tunnel_host"`
	// Connect through a jump server tunnel host using username and ssh key
	TunnelMethod DestinationMysqlSSHTunnelMethodSSHKeyAuthenticationTunnelMethod `json:"tunnel_method"`
	// Port on the proxy/jump server that accepts inbound ssh connections.
	TunnelPort int64 `json:"tunnel_port"`
	// OS-level username for logging into the jump server host.
	TunnelUser string `json:"tunnel_user"`
}

// DestinationMysqlSSHTunnelMethodNoTunnelTunnelMethod - No ssh tunnel needed to connect to database
type DestinationMysqlSSHTunnelMethodNoTunnelTunnelMethod string

const (
	DestinationMysqlSSHTunnelMethodNoTunnelTunnelMethodNoTunnel DestinationMysqlSSHTunnelMethodNoTunnelTunnelMethod = "NO_TUNNEL"
)

func (e DestinationMysqlSSHTunnelMethodNoTunnelTunnelMethod) ToPointer() *DestinationMysqlSSHTunnelMethodNoTunnelTunnelMethod {
	return &e
}

func (e *DestinationMysqlSSHTunnelMethodNoTunnelTunnelMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NO_TUNNEL":
		*e = DestinationMysqlSSHTunnelMethodNoTunnelTunnelMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationMysqlSSHTunnelMethodNoTunnelTunnelMethod: %v", v)
	}
}

// DestinationMysqlSSHTunnelMethodNoTunnel - Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.
type DestinationMysqlSSHTunnelMethodNoTunnel struct {
	// No ssh tunnel needed to connect to database
	TunnelMethod DestinationMysqlSSHTunnelMethodNoTunnelTunnelMethod `json:"tunnel_method"`
}

type DestinationMysqlSSHTunnelMethodType string

const (
	DestinationMysqlSSHTunnelMethodTypeDestinationMysqlSSHTunnelMethodNoTunnel               DestinationMysqlSSHTunnelMethodType = "destination-mysql_SSH Tunnel Method_No Tunnel"
	DestinationMysqlSSHTunnelMethodTypeDestinationMysqlSSHTunnelMethodSSHKeyAuthentication   DestinationMysqlSSHTunnelMethodType = "destination-mysql_SSH Tunnel Method_SSH Key Authentication"
	DestinationMysqlSSHTunnelMethodTypeDestinationMysqlSSHTunnelMethodPasswordAuthentication DestinationMysqlSSHTunnelMethodType = "destination-mysql_SSH Tunnel Method_Password Authentication"
)

type DestinationMysqlSSHTunnelMethod struct {
	DestinationMysqlSSHTunnelMethodNoTunnel               *DestinationMysqlSSHTunnelMethodNoTunnel
	DestinationMysqlSSHTunnelMethodSSHKeyAuthentication   *DestinationMysqlSSHTunnelMethodSSHKeyAuthentication
	DestinationMysqlSSHTunnelMethodPasswordAuthentication *DestinationMysqlSSHTunnelMethodPasswordAuthentication

	Type DestinationMysqlSSHTunnelMethodType
}

func CreateDestinationMysqlSSHTunnelMethodDestinationMysqlSSHTunnelMethodNoTunnel(destinationMysqlSSHTunnelMethodNoTunnel DestinationMysqlSSHTunnelMethodNoTunnel) DestinationMysqlSSHTunnelMethod {
	typ := DestinationMysqlSSHTunnelMethodTypeDestinationMysqlSSHTunnelMethodNoTunnel

	return DestinationMysqlSSHTunnelMethod{
		DestinationMysqlSSHTunnelMethodNoTunnel: &destinationMysqlSSHTunnelMethodNoTunnel,
		Type:                                    typ,
	}
}

func CreateDestinationMysqlSSHTunnelMethodDestinationMysqlSSHTunnelMethodSSHKeyAuthentication(destinationMysqlSSHTunnelMethodSSHKeyAuthentication DestinationMysqlSSHTunnelMethodSSHKeyAuthentication) DestinationMysqlSSHTunnelMethod {
	typ := DestinationMysqlSSHTunnelMethodTypeDestinationMysqlSSHTunnelMethodSSHKeyAuthentication

	return DestinationMysqlSSHTunnelMethod{
		DestinationMysqlSSHTunnelMethodSSHKeyAuthentication: &destinationMysqlSSHTunnelMethodSSHKeyAuthentication,
		Type: typ,
	}
}

func CreateDestinationMysqlSSHTunnelMethodDestinationMysqlSSHTunnelMethodPasswordAuthentication(destinationMysqlSSHTunnelMethodPasswordAuthentication DestinationMysqlSSHTunnelMethodPasswordAuthentication) DestinationMysqlSSHTunnelMethod {
	typ := DestinationMysqlSSHTunnelMethodTypeDestinationMysqlSSHTunnelMethodPasswordAuthentication

	return DestinationMysqlSSHTunnelMethod{
		DestinationMysqlSSHTunnelMethodPasswordAuthentication: &destinationMysqlSSHTunnelMethodPasswordAuthentication,
		Type: typ,
	}
}

func (u *DestinationMysqlSSHTunnelMethod) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	destinationMysqlSSHTunnelMethodNoTunnel := new(DestinationMysqlSSHTunnelMethodNoTunnel)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&destinationMysqlSSHTunnelMethodNoTunnel); err == nil {
		u.DestinationMysqlSSHTunnelMethodNoTunnel = destinationMysqlSSHTunnelMethodNoTunnel
		u.Type = DestinationMysqlSSHTunnelMethodTypeDestinationMysqlSSHTunnelMethodNoTunnel
		return nil
	}

	destinationMysqlSSHTunnelMethodSSHKeyAuthentication := new(DestinationMysqlSSHTunnelMethodSSHKeyAuthentication)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&destinationMysqlSSHTunnelMethodSSHKeyAuthentication); err == nil {
		u.DestinationMysqlSSHTunnelMethodSSHKeyAuthentication = destinationMysqlSSHTunnelMethodSSHKeyAuthentication
		u.Type = DestinationMysqlSSHTunnelMethodTypeDestinationMysqlSSHTunnelMethodSSHKeyAuthentication
		return nil
	}

	destinationMysqlSSHTunnelMethodPasswordAuthentication := new(DestinationMysqlSSHTunnelMethodPasswordAuthentication)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&destinationMysqlSSHTunnelMethodPasswordAuthentication); err == nil {
		u.DestinationMysqlSSHTunnelMethodPasswordAuthentication = destinationMysqlSSHTunnelMethodPasswordAuthentication
		u.Type = DestinationMysqlSSHTunnelMethodTypeDestinationMysqlSSHTunnelMethodPasswordAuthentication
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u DestinationMysqlSSHTunnelMethod) MarshalJSON() ([]byte, error) {
	if u.DestinationMysqlSSHTunnelMethodNoTunnel != nil {
		return json.Marshal(u.DestinationMysqlSSHTunnelMethodNoTunnel)
	}

	if u.DestinationMysqlSSHTunnelMethodSSHKeyAuthentication != nil {
		return json.Marshal(u.DestinationMysqlSSHTunnelMethodSSHKeyAuthentication)
	}

	if u.DestinationMysqlSSHTunnelMethodPasswordAuthentication != nil {
		return json.Marshal(u.DestinationMysqlSSHTunnelMethodPasswordAuthentication)
	}

	return nil, nil
}

type DestinationMysql struct {
	// Name of the database.
	Database        string                `json:"database"`
	DestinationType DestinationMysqlMysql `json:"destinationType"`
	// Hostname of the database.
	Host string `json:"host"`
	// Additional properties to pass to the JDBC URL string when connecting to the database formatted as 'key=value' pairs separated by the symbol '&'. (example: key1=value1&key2=value2&key3=value3).
	JdbcURLParams *string `json:"jdbc_url_params,omitempty"`
	// Password associated with the username.
	Password *string `json:"password,omitempty"`
	// Port of the database.
	Port int64 `json:"port"`
	// Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.
	TunnelMethod *DestinationMysqlSSHTunnelMethod `json:"tunnel_method,omitempty"`
	// Username to use to access the database.
	Username string `json:"username"`
}
