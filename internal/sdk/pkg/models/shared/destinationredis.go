// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

// DestinationRedisCacheTypeEnum - Redis cache type to store data in.
type DestinationRedisCacheTypeEnum string

const (
	DestinationRedisCacheTypeEnumHash DestinationRedisCacheTypeEnum = "hash"
)

func (e DestinationRedisCacheTypeEnum) ToPointer() *DestinationRedisCacheTypeEnum {
	return &e
}

func (e *DestinationRedisCacheTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "hash":
		*e = DestinationRedisCacheTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationRedisCacheTypeEnum: %v", v)
	}
}

type DestinationRedisRedisEnum string

const (
	DestinationRedisRedisEnumRedis DestinationRedisRedisEnum = "redis"
)

func (e DestinationRedisRedisEnum) ToPointer() *DestinationRedisRedisEnum {
	return &e
}

func (e *DestinationRedisRedisEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis":
		*e = DestinationRedisRedisEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationRedisRedisEnum: %v", v)
	}
}

type DestinationRedisSSLModesVerifyFullModeEnum string

const (
	DestinationRedisSSLModesVerifyFullModeEnumVerifyFull DestinationRedisSSLModesVerifyFullModeEnum = "verify-full"
)

func (e DestinationRedisSSLModesVerifyFullModeEnum) ToPointer() *DestinationRedisSSLModesVerifyFullModeEnum {
	return &e
}

func (e *DestinationRedisSSLModesVerifyFullModeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "verify-full":
		*e = DestinationRedisSSLModesVerifyFullModeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationRedisSSLModesVerifyFullModeEnum: %v", v)
	}
}

// DestinationRedisSSLModesVerifyFull - Verify-full SSL mode.
type DestinationRedisSSLModesVerifyFull struct {
	// CA certificate
	CaCertificate string `json:"ca_certificate"`
	// Client certificate
	ClientCertificate string `json:"client_certificate"`
	// Client key
	ClientKey string `json:"client_key"`
	// Password for keystorage. If you do not add it - the password will be generated automatically.
	ClientKeyPassword *string                                    `json:"client_key_password,omitempty"`
	Mode              DestinationRedisSSLModesVerifyFullModeEnum `json:"mode"`
}

type DestinationRedisSSLModesDisableModeEnum string

const (
	DestinationRedisSSLModesDisableModeEnumDisable DestinationRedisSSLModesDisableModeEnum = "disable"
)

func (e DestinationRedisSSLModesDisableModeEnum) ToPointer() *DestinationRedisSSLModesDisableModeEnum {
	return &e
}

func (e *DestinationRedisSSLModesDisableModeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "disable":
		*e = DestinationRedisSSLModesDisableModeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationRedisSSLModesDisableModeEnum: %v", v)
	}
}

// DestinationRedisSSLModesDisable - Disable SSL.
type DestinationRedisSSLModesDisable struct {
	Mode DestinationRedisSSLModesDisableModeEnum `json:"mode"`
}

type DestinationRedisSSLModesType string

const (
	DestinationRedisSSLModesTypeDestinationRedisSSLModesDisable    DestinationRedisSSLModesType = "destination-redis_SSL Modes_disable"
	DestinationRedisSSLModesTypeDestinationRedisSSLModesVerifyFull DestinationRedisSSLModesType = "destination-redis_SSL Modes_verify-full"
)

type DestinationRedisSSLModes struct {
	DestinationRedisSSLModesDisable    *DestinationRedisSSLModesDisable
	DestinationRedisSSLModesVerifyFull *DestinationRedisSSLModesVerifyFull

	Type DestinationRedisSSLModesType
}

func CreateDestinationRedisSSLModesDestinationRedisSSLModesDisable(destinationRedisSSLModesDisable DestinationRedisSSLModesDisable) DestinationRedisSSLModes {
	typ := DestinationRedisSSLModesTypeDestinationRedisSSLModesDisable

	return DestinationRedisSSLModes{
		DestinationRedisSSLModesDisable: &destinationRedisSSLModesDisable,
		Type:                            typ,
	}
}

func CreateDestinationRedisSSLModesDestinationRedisSSLModesVerifyFull(destinationRedisSSLModesVerifyFull DestinationRedisSSLModesVerifyFull) DestinationRedisSSLModes {
	typ := DestinationRedisSSLModesTypeDestinationRedisSSLModesVerifyFull

	return DestinationRedisSSLModes{
		DestinationRedisSSLModesVerifyFull: &destinationRedisSSLModesVerifyFull,
		Type:                               typ,
	}
}

func (u *DestinationRedisSSLModes) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	destinationRedisSSLModesDisable := new(DestinationRedisSSLModesDisable)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&destinationRedisSSLModesDisable); err == nil {
		u.DestinationRedisSSLModesDisable = destinationRedisSSLModesDisable
		u.Type = DestinationRedisSSLModesTypeDestinationRedisSSLModesDisable
		return nil
	}

	destinationRedisSSLModesVerifyFull := new(DestinationRedisSSLModesVerifyFull)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&destinationRedisSSLModesVerifyFull); err == nil {
		u.DestinationRedisSSLModesVerifyFull = destinationRedisSSLModesVerifyFull
		u.Type = DestinationRedisSSLModesTypeDestinationRedisSSLModesVerifyFull
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u DestinationRedisSSLModes) MarshalJSON() ([]byte, error) {
	if u.DestinationRedisSSLModesDisable != nil {
		return json.Marshal(u.DestinationRedisSSLModesDisable)
	}

	if u.DestinationRedisSSLModesVerifyFull != nil {
		return json.Marshal(u.DestinationRedisSSLModesVerifyFull)
	}

	return nil, nil
}

// DestinationRedisSSHTunnelMethodPasswordAuthenticationTunnelMethodEnum - Connect through a jump server tunnel host using username and password authentication
type DestinationRedisSSHTunnelMethodPasswordAuthenticationTunnelMethodEnum string

const (
	DestinationRedisSSHTunnelMethodPasswordAuthenticationTunnelMethodEnumSSHPasswordAuth DestinationRedisSSHTunnelMethodPasswordAuthenticationTunnelMethodEnum = "SSH_PASSWORD_AUTH"
)

func (e DestinationRedisSSHTunnelMethodPasswordAuthenticationTunnelMethodEnum) ToPointer() *DestinationRedisSSHTunnelMethodPasswordAuthenticationTunnelMethodEnum {
	return &e
}

func (e *DestinationRedisSSHTunnelMethodPasswordAuthenticationTunnelMethodEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SSH_PASSWORD_AUTH":
		*e = DestinationRedisSSHTunnelMethodPasswordAuthenticationTunnelMethodEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationRedisSSHTunnelMethodPasswordAuthenticationTunnelMethodEnum: %v", v)
	}
}

// DestinationRedisSSHTunnelMethodPasswordAuthentication - Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.
type DestinationRedisSSHTunnelMethodPasswordAuthentication struct {
	// Hostname of the jump server host that allows inbound ssh tunnel.
	TunnelHost string `json:"tunnel_host"`
	// Connect through a jump server tunnel host using username and password authentication
	TunnelMethod DestinationRedisSSHTunnelMethodPasswordAuthenticationTunnelMethodEnum `json:"tunnel_method"`
	// Port on the proxy/jump server that accepts inbound ssh connections.
	TunnelPort int64 `json:"tunnel_port"`
	// OS-level username for logging into the jump server host
	TunnelUser string `json:"tunnel_user"`
	// OS-level password for logging into the jump server host
	TunnelUserPassword string `json:"tunnel_user_password"`
}

// DestinationRedisSSHTunnelMethodSSHKeyAuthenticationTunnelMethodEnum - Connect through a jump server tunnel host using username and ssh key
type DestinationRedisSSHTunnelMethodSSHKeyAuthenticationTunnelMethodEnum string

const (
	DestinationRedisSSHTunnelMethodSSHKeyAuthenticationTunnelMethodEnumSSHKeyAuth DestinationRedisSSHTunnelMethodSSHKeyAuthenticationTunnelMethodEnum = "SSH_KEY_AUTH"
)

func (e DestinationRedisSSHTunnelMethodSSHKeyAuthenticationTunnelMethodEnum) ToPointer() *DestinationRedisSSHTunnelMethodSSHKeyAuthenticationTunnelMethodEnum {
	return &e
}

func (e *DestinationRedisSSHTunnelMethodSSHKeyAuthenticationTunnelMethodEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SSH_KEY_AUTH":
		*e = DestinationRedisSSHTunnelMethodSSHKeyAuthenticationTunnelMethodEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationRedisSSHTunnelMethodSSHKeyAuthenticationTunnelMethodEnum: %v", v)
	}
}

// DestinationRedisSSHTunnelMethodSSHKeyAuthentication - Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.
type DestinationRedisSSHTunnelMethodSSHKeyAuthentication struct {
	// OS-level user account ssh key credentials in RSA PEM format ( created with ssh-keygen -t rsa -m PEM -f myuser_rsa )
	SSHKey string `json:"ssh_key"`
	// Hostname of the jump server host that allows inbound ssh tunnel.
	TunnelHost string `json:"tunnel_host"`
	// Connect through a jump server tunnel host using username and ssh key
	TunnelMethod DestinationRedisSSHTunnelMethodSSHKeyAuthenticationTunnelMethodEnum `json:"tunnel_method"`
	// Port on the proxy/jump server that accepts inbound ssh connections.
	TunnelPort int64 `json:"tunnel_port"`
	// OS-level username for logging into the jump server host.
	TunnelUser string `json:"tunnel_user"`
}

// DestinationRedisSSHTunnelMethodNoTunnelTunnelMethodEnum - No ssh tunnel needed to connect to database
type DestinationRedisSSHTunnelMethodNoTunnelTunnelMethodEnum string

const (
	DestinationRedisSSHTunnelMethodNoTunnelTunnelMethodEnumNoTunnel DestinationRedisSSHTunnelMethodNoTunnelTunnelMethodEnum = "NO_TUNNEL"
)

func (e DestinationRedisSSHTunnelMethodNoTunnelTunnelMethodEnum) ToPointer() *DestinationRedisSSHTunnelMethodNoTunnelTunnelMethodEnum {
	return &e
}

func (e *DestinationRedisSSHTunnelMethodNoTunnelTunnelMethodEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NO_TUNNEL":
		*e = DestinationRedisSSHTunnelMethodNoTunnelTunnelMethodEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationRedisSSHTunnelMethodNoTunnelTunnelMethodEnum: %v", v)
	}
}

// DestinationRedisSSHTunnelMethodNoTunnel - Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.
type DestinationRedisSSHTunnelMethodNoTunnel struct {
	// No ssh tunnel needed to connect to database
	TunnelMethod DestinationRedisSSHTunnelMethodNoTunnelTunnelMethodEnum `json:"tunnel_method"`
}

type DestinationRedisSSHTunnelMethodType string

const (
	DestinationRedisSSHTunnelMethodTypeDestinationRedisSSHTunnelMethodNoTunnel               DestinationRedisSSHTunnelMethodType = "destination-redis_SSH Tunnel Method_No Tunnel"
	DestinationRedisSSHTunnelMethodTypeDestinationRedisSSHTunnelMethodSSHKeyAuthentication   DestinationRedisSSHTunnelMethodType = "destination-redis_SSH Tunnel Method_SSH Key Authentication"
	DestinationRedisSSHTunnelMethodTypeDestinationRedisSSHTunnelMethodPasswordAuthentication DestinationRedisSSHTunnelMethodType = "destination-redis_SSH Tunnel Method_Password Authentication"
)

type DestinationRedisSSHTunnelMethod struct {
	DestinationRedisSSHTunnelMethodNoTunnel               *DestinationRedisSSHTunnelMethodNoTunnel
	DestinationRedisSSHTunnelMethodSSHKeyAuthentication   *DestinationRedisSSHTunnelMethodSSHKeyAuthentication
	DestinationRedisSSHTunnelMethodPasswordAuthentication *DestinationRedisSSHTunnelMethodPasswordAuthentication

	Type DestinationRedisSSHTunnelMethodType
}

func CreateDestinationRedisSSHTunnelMethodDestinationRedisSSHTunnelMethodNoTunnel(destinationRedisSSHTunnelMethodNoTunnel DestinationRedisSSHTunnelMethodNoTunnel) DestinationRedisSSHTunnelMethod {
	typ := DestinationRedisSSHTunnelMethodTypeDestinationRedisSSHTunnelMethodNoTunnel

	return DestinationRedisSSHTunnelMethod{
		DestinationRedisSSHTunnelMethodNoTunnel: &destinationRedisSSHTunnelMethodNoTunnel,
		Type:                                    typ,
	}
}

func CreateDestinationRedisSSHTunnelMethodDestinationRedisSSHTunnelMethodSSHKeyAuthentication(destinationRedisSSHTunnelMethodSSHKeyAuthentication DestinationRedisSSHTunnelMethodSSHKeyAuthentication) DestinationRedisSSHTunnelMethod {
	typ := DestinationRedisSSHTunnelMethodTypeDestinationRedisSSHTunnelMethodSSHKeyAuthentication

	return DestinationRedisSSHTunnelMethod{
		DestinationRedisSSHTunnelMethodSSHKeyAuthentication: &destinationRedisSSHTunnelMethodSSHKeyAuthentication,
		Type: typ,
	}
}

func CreateDestinationRedisSSHTunnelMethodDestinationRedisSSHTunnelMethodPasswordAuthentication(destinationRedisSSHTunnelMethodPasswordAuthentication DestinationRedisSSHTunnelMethodPasswordAuthentication) DestinationRedisSSHTunnelMethod {
	typ := DestinationRedisSSHTunnelMethodTypeDestinationRedisSSHTunnelMethodPasswordAuthentication

	return DestinationRedisSSHTunnelMethod{
		DestinationRedisSSHTunnelMethodPasswordAuthentication: &destinationRedisSSHTunnelMethodPasswordAuthentication,
		Type: typ,
	}
}

func (u *DestinationRedisSSHTunnelMethod) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	destinationRedisSSHTunnelMethodNoTunnel := new(DestinationRedisSSHTunnelMethodNoTunnel)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&destinationRedisSSHTunnelMethodNoTunnel); err == nil {
		u.DestinationRedisSSHTunnelMethodNoTunnel = destinationRedisSSHTunnelMethodNoTunnel
		u.Type = DestinationRedisSSHTunnelMethodTypeDestinationRedisSSHTunnelMethodNoTunnel
		return nil
	}

	destinationRedisSSHTunnelMethodSSHKeyAuthentication := new(DestinationRedisSSHTunnelMethodSSHKeyAuthentication)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&destinationRedisSSHTunnelMethodSSHKeyAuthentication); err == nil {
		u.DestinationRedisSSHTunnelMethodSSHKeyAuthentication = destinationRedisSSHTunnelMethodSSHKeyAuthentication
		u.Type = DestinationRedisSSHTunnelMethodTypeDestinationRedisSSHTunnelMethodSSHKeyAuthentication
		return nil
	}

	destinationRedisSSHTunnelMethodPasswordAuthentication := new(DestinationRedisSSHTunnelMethodPasswordAuthentication)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&destinationRedisSSHTunnelMethodPasswordAuthentication); err == nil {
		u.DestinationRedisSSHTunnelMethodPasswordAuthentication = destinationRedisSSHTunnelMethodPasswordAuthentication
		u.Type = DestinationRedisSSHTunnelMethodTypeDestinationRedisSSHTunnelMethodPasswordAuthentication
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u DestinationRedisSSHTunnelMethod) MarshalJSON() ([]byte, error) {
	if u.DestinationRedisSSHTunnelMethodNoTunnel != nil {
		return json.Marshal(u.DestinationRedisSSHTunnelMethodNoTunnel)
	}

	if u.DestinationRedisSSHTunnelMethodSSHKeyAuthentication != nil {
		return json.Marshal(u.DestinationRedisSSHTunnelMethodSSHKeyAuthentication)
	}

	if u.DestinationRedisSSHTunnelMethodPasswordAuthentication != nil {
		return json.Marshal(u.DestinationRedisSSHTunnelMethodPasswordAuthentication)
	}

	return nil, nil
}

// DestinationRedis - The values required to configure the destination.
type DestinationRedis struct {
	// Redis cache type to store data in.
	CacheType       DestinationRedisCacheTypeEnum `json:"cache_type"`
	DestinationType DestinationRedisRedisEnum     `json:"destinationType"`
	// Redis host to connect to.
	Host string `json:"host"`
	// Password associated with Redis.
	Password *string `json:"password,omitempty"`
	// Port of Redis.
	Port int64 `json:"port"`
	// Indicates whether SSL encryption protocol will be used to connect to Redis. It is recommended to use SSL connection if possible.
	Ssl *bool `json:"ssl,omitempty"`
	// SSL connection modes. <li><b>verify-full</b> - This is the most secure mode. Always require encryption and verifies the identity of the source database server
	SslMode *DestinationRedisSSLModes `json:"ssl_mode,omitempty"`
	// Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.
	TunnelMethod *DestinationRedisSSHTunnelMethod `json:"tunnel_method,omitempty"`
	// Username associated with Redis.
	Username string `json:"username"`
}
