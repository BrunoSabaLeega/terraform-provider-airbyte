// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"time"
)

type SourceSlackAuthenticationMechanismAPITokenOptionTitleEnum string

const (
	SourceSlackAuthenticationMechanismAPITokenOptionTitleEnumAPITokenCredentials SourceSlackAuthenticationMechanismAPITokenOptionTitleEnum = "API Token Credentials"
)

func (e SourceSlackAuthenticationMechanismAPITokenOptionTitleEnum) ToPointer() *SourceSlackAuthenticationMechanismAPITokenOptionTitleEnum {
	return &e
}

func (e *SourceSlackAuthenticationMechanismAPITokenOptionTitleEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "API Token Credentials":
		*e = SourceSlackAuthenticationMechanismAPITokenOptionTitleEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceSlackAuthenticationMechanismAPITokenOptionTitleEnum: %v", v)
	}
}

// SourceSlackAuthenticationMechanismAPIToken - Choose how to authenticate into Slack
type SourceSlackAuthenticationMechanismAPIToken struct {
	// A Slack bot token. See the <a href="https://docs.airbyte.com/integrations/sources/slack">docs</a> for instructions on how to generate it.
	APIToken    string                                                    `json:"api_token"`
	OptionTitle SourceSlackAuthenticationMechanismAPITokenOptionTitleEnum `json:"option_title"`
}

type SourceSlackAuthenticationMechanismSignInViaSlackOAuthOptionTitleEnum string

const (
	SourceSlackAuthenticationMechanismSignInViaSlackOAuthOptionTitleEnumDefaultOAuth20Authorization SourceSlackAuthenticationMechanismSignInViaSlackOAuthOptionTitleEnum = "Default OAuth2.0 authorization"
)

func (e SourceSlackAuthenticationMechanismSignInViaSlackOAuthOptionTitleEnum) ToPointer() *SourceSlackAuthenticationMechanismSignInViaSlackOAuthOptionTitleEnum {
	return &e
}

func (e *SourceSlackAuthenticationMechanismSignInViaSlackOAuthOptionTitleEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Default OAuth2.0 authorization":
		*e = SourceSlackAuthenticationMechanismSignInViaSlackOAuthOptionTitleEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceSlackAuthenticationMechanismSignInViaSlackOAuthOptionTitleEnum: %v", v)
	}
}

// SourceSlackAuthenticationMechanismSignInViaSlackOAuth - Choose how to authenticate into Slack
type SourceSlackAuthenticationMechanismSignInViaSlackOAuth struct {
	// Slack access_token. See our <a href="https://docs.airbyte.com/integrations/sources/slack">docs</a> if you need help generating the token.
	AccessToken string `json:"access_token"`
	// Slack client_id. See our <a href="https://docs.airbyte.com/integrations/sources/slack">docs</a> if you need help finding this id.
	ClientID string `json:"client_id"`
	// Slack client_secret. See our <a href="https://docs.airbyte.com/integrations/sources/slack">docs</a> if you need help finding this secret.
	ClientSecret string                                                               `json:"client_secret"`
	OptionTitle  SourceSlackAuthenticationMechanismSignInViaSlackOAuthOptionTitleEnum `json:"option_title"`
}

type SourceSlackAuthenticationMechanismType string

const (
	SourceSlackAuthenticationMechanismTypeSourceSlackAuthenticationMechanismSignInViaSlackOAuth SourceSlackAuthenticationMechanismType = "source-slack_Authentication mechanism_Sign in via Slack (OAuth)"
	SourceSlackAuthenticationMechanismTypeSourceSlackAuthenticationMechanismAPIToken            SourceSlackAuthenticationMechanismType = "source-slack_Authentication mechanism_API Token"
)

type SourceSlackAuthenticationMechanism struct {
	SourceSlackAuthenticationMechanismSignInViaSlackOAuth *SourceSlackAuthenticationMechanismSignInViaSlackOAuth
	SourceSlackAuthenticationMechanismAPIToken            *SourceSlackAuthenticationMechanismAPIToken

	Type SourceSlackAuthenticationMechanismType
}

func CreateSourceSlackAuthenticationMechanismSourceSlackAuthenticationMechanismSignInViaSlackOAuth(sourceSlackAuthenticationMechanismSignInViaSlackOAuth SourceSlackAuthenticationMechanismSignInViaSlackOAuth) SourceSlackAuthenticationMechanism {
	typ := SourceSlackAuthenticationMechanismTypeSourceSlackAuthenticationMechanismSignInViaSlackOAuth

	return SourceSlackAuthenticationMechanism{
		SourceSlackAuthenticationMechanismSignInViaSlackOAuth: &sourceSlackAuthenticationMechanismSignInViaSlackOAuth,
		Type: typ,
	}
}

func CreateSourceSlackAuthenticationMechanismSourceSlackAuthenticationMechanismAPIToken(sourceSlackAuthenticationMechanismAPIToken SourceSlackAuthenticationMechanismAPIToken) SourceSlackAuthenticationMechanism {
	typ := SourceSlackAuthenticationMechanismTypeSourceSlackAuthenticationMechanismAPIToken

	return SourceSlackAuthenticationMechanism{
		SourceSlackAuthenticationMechanismAPIToken: &sourceSlackAuthenticationMechanismAPIToken,
		Type: typ,
	}
}

func (u *SourceSlackAuthenticationMechanism) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	sourceSlackAuthenticationMechanismSignInViaSlackOAuth := new(SourceSlackAuthenticationMechanismSignInViaSlackOAuth)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceSlackAuthenticationMechanismSignInViaSlackOAuth); err == nil {
		u.SourceSlackAuthenticationMechanismSignInViaSlackOAuth = sourceSlackAuthenticationMechanismSignInViaSlackOAuth
		u.Type = SourceSlackAuthenticationMechanismTypeSourceSlackAuthenticationMechanismSignInViaSlackOAuth
		return nil
	}

	sourceSlackAuthenticationMechanismAPIToken := new(SourceSlackAuthenticationMechanismAPIToken)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&sourceSlackAuthenticationMechanismAPIToken); err == nil {
		u.SourceSlackAuthenticationMechanismAPIToken = sourceSlackAuthenticationMechanismAPIToken
		u.Type = SourceSlackAuthenticationMechanismTypeSourceSlackAuthenticationMechanismAPIToken
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SourceSlackAuthenticationMechanism) MarshalJSON() ([]byte, error) {
	if u.SourceSlackAuthenticationMechanismSignInViaSlackOAuth != nil {
		return json.Marshal(u.SourceSlackAuthenticationMechanismSignInViaSlackOAuth)
	}

	if u.SourceSlackAuthenticationMechanismAPIToken != nil {
		return json.Marshal(u.SourceSlackAuthenticationMechanismAPIToken)
	}

	return nil, nil
}

type SourceSlackSlackEnum string

const (
	SourceSlackSlackEnumSlack SourceSlackSlackEnum = "slack"
)

func (e SourceSlackSlackEnum) ToPointer() *SourceSlackSlackEnum {
	return &e
}

func (e *SourceSlackSlackEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "slack":
		*e = SourceSlackSlackEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceSlackSlackEnum: %v", v)
	}
}

type SourceSlack struct {
	// A channel name list (without leading '#' char) which limit the channels from which you'd like to sync. Empty list means no filter.
	ChannelFilter []string `json:"channel_filter,omitempty"`
	// Choose how to authenticate into Slack
	Credentials *SourceSlackAuthenticationMechanism `json:"credentials,omitempty"`
	// Whether to join all channels or to sync data only from channels the bot is already in.  If false, you'll need to manually add the bot to all the channels from which you'd like to sync messages.
	JoinChannels bool `json:"join_channels"`
	// How far into the past to look for messages in threads, default is 0 days
	LookbackWindow int64                `json:"lookback_window"`
	SourceType     SourceSlackSlackEnum `json:"sourceType"`
	// UTC date and time in the format 2017-01-25T00:00:00Z. Any data before this date will not be replicated.
	StartDate time.Time `json:"start_date"`
}
