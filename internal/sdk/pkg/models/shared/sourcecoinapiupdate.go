// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// SourceCoinAPIUpdateEnvironment - The environment to use. Either sandbox or production.
type SourceCoinAPIUpdateEnvironment string

const (
	SourceCoinAPIUpdateEnvironmentSandbox    SourceCoinAPIUpdateEnvironment = "sandbox"
	SourceCoinAPIUpdateEnvironmentProduction SourceCoinAPIUpdateEnvironment = "production"
)

func (e SourceCoinAPIUpdateEnvironment) ToPointer() *SourceCoinAPIUpdateEnvironment {
	return &e
}

func (e *SourceCoinAPIUpdateEnvironment) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "sandbox":
		fallthrough
	case "production":
		*e = SourceCoinAPIUpdateEnvironment(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceCoinAPIUpdateEnvironment: %v", v)
	}
}

type SourceCoinAPIUpdate struct {
	// API Key
	APIKey string `json:"api_key"`
	// The end date in ISO 8601 format. If not supplied, data will be returned
	// from the start date to the current time, or when the count of result
	// elements reaches its limit.
	//
	EndDate *string `json:"end_date,omitempty"`
	// The environment to use. Either sandbox or production.
	//
	Environment SourceCoinAPIUpdateEnvironment `json:"environment"`
	// The maximum number of elements to return. If not supplied, the default
	// is 100. For numbers larger than 100, each 100 items is counted as one
	// request for pricing purposes. Maximum value is 100000.
	//
	Limit *int64 `json:"limit,omitempty"`
	// The period to use. See the documentation for a list. https://docs.coinapi.io/#list-all-periods-get
	Period string `json:"period"`
	// The start date in ISO 8601 format.
	StartDate string `json:"start_date"`
	// The symbol ID to use. See the documentation for a list.
	// https://docs.coinapi.io/#list-all-symbols-get
	//
	SymbolID string `json:"symbol_id"`
}
